{
  &quot;source&quot;: &quot;doc/api/tls.markdown&quot;,
  &quot;modules&quot;: [
    {
      &quot;textRaw&quot;: &quot;TLS (SSL)&quot;,
      &quot;name&quot;: &quot;tls_(ssl)&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nUse `require('tls')` to access this module.\n-->\n\n<p><code>require(&apos;tls&apos;)</code> &#x3067;&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `tls` module uses OpenSSL to provide Transport Layer Security and/or\nSecure Socket Layer: encrypted stream communication.\n-->\n\n<p><code>tls</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F; OpenSSL &#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067; Transport Layer Security &#x304A;&#x3088;&#x3073;\nSecure Socket Layer: &#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x901A;&#x4FE1;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nTLS/SSL is a public/private key infrastructure. Each client and each\nserver must have a private key. A private key is created like this\n-->\n\n<p>TLS/SSL &#x306F;&#x516C;&#x958B;&#xFF0F;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x57FA;&#x790E;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3069;&#x306E;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3068;&#x30B5;&#x30FC;&#x30D0;&#x3082;&#x79D8;&#x5BC6;&#x9375;&#x304C;&#x5FC5;&#x8981;&#x3067;&#x3059;&#x3002;\n&#x79D8;&#x5BC6;&#x9375;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;\n\n</p>\n<pre><code>openssl genrsa -out ryans-key.pem 1024</code></pre>\n<!--\nAll severs and some clients need to have a certificate. Certificates are public\nkeys signed by a Certificate Authority or self-signed. The first step to\ngetting a certificate is to create a \"Certificate Signing Request\" (CSR)\nfile. This is done with:\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x3068;&#x4E00;&#x90E8;&#x306E;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306F;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x5FC5;&#x8981;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8A3C;&#x660E;&#x66F8;&#x306F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;&#x516C;&#x958B;&#x9375;&#x307E;&#x305F;&#x306F;&#x81EA;&#x8EAB;&#x306B;&#x3088;&#x3063;&#x3066;&#x7F72;&#x540D;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x6700;&#x521D;&#x306E;&#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x306F;&#x300C;&#x8A3C;&#x660E;&#x66F8;&#x7F72;&#x540D;&#x8981;&#x6C42; (CSR)&#x300D;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3067;&#x3059;&#x3002;\n&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>openssl req -new -key ryans-key.pem -out ryans-csr.pem</code></pre>\n<!--\nTo create a self-signed certificate with the CSR, do this:\n-->\n\n<p>CSR &#x304B;&#x3089;&#x81EA;&#x5DF1;&#x7F72;&#x540D;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x306B;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem</code></pre>\n<!--\nAlternatively you can send the CSR to a Certificate Authority for signing.\n-->\n\n<p>&#x4ED6;&#x306B; CSR &#x3092;&#x8A8D;&#x8A3C;&#x5C40;&#x306B;&#x9001;&#x3063;&#x3066;&#x7F72;&#x540D;&#x3057;&#x3066;&#x3082;&#x3089;&#x3046;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n(TODO: docs on creating a CA, for now interested users should just look at\n`test/fixtures/keys/Makefile` in the Node source code)\n-->\n\n<p>(TODO: CA &#x3092;&#x4F5C;&#x308B;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x3001;&#x73FE;&#x5728;&#x306F;&#x8208;&#x5473;&#x3042;&#x308B;&#x30E6;&#x30FC;&#x30B6;&#x306F; Node &#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x304B;&#x3089;\n<code>test/fixtures/keys/Makefile</code> &#x3092;&#x898B;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308B;)\n\n</p>\n<!--\nTo create .pfx or .p12, do this:\n-->\n\n<p>.pfx &#x307E;&#x305F;&#x306F; .p12 &#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x306B;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>openssl pkcs12 -export -in agent5-cert.pem -inkey agent5-key.pem \\\n    -certfile ca-cert.pem -out agent5.pfx</code></pre>\n<ul>\n<li><code>in</code>:  certificate</li>\n<li><code>inkey</code>: private key</li>\n<li><code>certfile</code>: all CA certs concatenated in one file like\n<code>cat ca1-cert.pem ca2-cert.pem &gt; ca-cert.pem</code></li>\n</ul>\n&quot;,
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;Client-initiated renegotiation attack mitigation&quot;,
          &quot;name&quot;: &quot;Client-initiated renegotiation attack mitigation&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nThe TLS protocol lets the client renegotiate certain aspects of the TLS session.\nUnfortunately, session renegotiation requires a disproportional amount of\nserver-side resources, which makes it a potential vector for denial-of-service\nattacks.\n\nTo mitigate this, renegotiations are limited to three times every 10 minutes. An\nerror is emitted on the [CleartextStream][] instance when the threshold is\nexceeded. The limits are configurable:\n\n  - `tls.CLIENT_RENEG_LIMIT`: renegotiation limit, default is 3.\n\n  - `tls.CLIENT_RENEG_WINDOW`: renegotiation window in seconds, default is\n    10 minutes.\n\nDon't change the defaults unless you know what you are doing.\n\nTo test your server, connect to it with `openssl s_client -connect address:port`\nand tap `R<CR>` (that's the letter `R` followed by a carriage return) a few\ntimes.\n-->\n\n<p>TLS &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x3067;&#x306F;&#x3001;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306B; TLS &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x518D;&#x30CD;&#x30B4;&#x30B7;&#x30A8;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3092;\n&#x8A31;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x6B8B;&#x5FF5;&#x306A;&#x304C;&#x3089;&#x3001;&#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x518D;&#x30CD;&#x30B4;&#x30B7;&#x30A8;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x8981;&#x6C42;&#x306F;&#x30B5;&#x30FC;&#x30D0;&#x30B5;&#x30A4;&#x30C9;&#x306B;&#x904E;&#x5EA6;&#x306A;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x3092;\n&#x8981;&#x6C42;&#x3059;&#x308B;&#x305F;&#x3081;&#x3001;&#x305D;&#x308C;&#x306F;&#x6F5C;&#x5728;&#x7684;&#x306A;&#x30B5;&#x30FC;&#x30D0;&#x5F37;&#x5236;&#x505C;&#x6B62;&#x653B;&#x6483;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x3092;&#x8EFD;&#x6E1B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;&#x518D;&#x30CD;&#x30B4;&#x30B7;&#x30A8;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306F; 10 &#x5206;&#x5F53;&#x305F;&#x308A; 3 &#x56DE;&#x307E;&#x3067;&#x306B;\n&#x5236;&#x9650;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;&#x3053;&#x306E;&#x5236;&#x9650;&#x3092;&#x8D85;&#x3048;&#x308B;&#x3068;&#x3001;[CleartextStream][]\n&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x4E0A;&#x3067;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x3053;&#x306E;&#x5236;&#x9650;&#x306F;&#x5909;&#x66F4;&#x53EF;&#x80FD;&#x3067;&#x3059;:\n\n</p>\n<ul>\n<li><p><code>tls.CLIENT_RENEG_LIMIT</code>: &#x518D;&#x30CD;&#x30B4;&#x30B7;&#x30A8;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x4E0A;&#x9650;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 3 &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>tls.CLIENT_RENEG_WINDOW</code>: &#x79D2;&#x5358;&#x4F4D;&#x306E;&#x518D;&#x30CD;&#x30B4;&#x30B7;&#x30A8;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x30A6;&#x30A3;&#x30F3;&#x30C9;&#x30A6;&#x3001;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 10 &#x5206;&#x3067;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<p>&#x3042;&#x306A;&#x305F;&#x304C;&#x4F55;&#x3092;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x304B;&#x5341;&#x5206;&#x306B;&#x7406;&#x89E3;&#x3057;&#x3066;&#x3044;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3092;&#x5909;&#x66F4;&#x3057;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x30B5;&#x30FC;&#x30D0;&#x3092;&#x30C6;&#x30B9;&#x30C8;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;<code>openssl s_client -connect address:port</code>\n&#x304A;&#x3088;&#x3073; <code>R&lt;CR&gt;</code> (<code>R</code> &#x30AD;&#x30FC;&#x306E;&#x5F8C;&#x306B;&#x7D9A;&#x3051;&#x3066;&#x30EA;&#x30BF;&#x30FC;&#x30F3;&#x30AD;&#x30FC;) &#x3092;\n&#x6570;&#x56DE;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;NPN and SNI&quot;,
          &quot;name&quot;: &quot;NPN and SNI&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nNPN (Next Protocol Negotiation) and SNI (Server Name Indication) are TLS\nhandshake extensions allowing you:\n\n  * NPN - to use one TLS server for multiple protocols (HTTP, SPDY)\n  * SNI - to use one TLS server for multiple hostnames with different SSL\n    certificates.\n-->\n\n<p>NPN (Next Protocol Negotitation) &#x3068; SNI (Server Name Indication) &#x306F;\nTLS &#x306E;&#x62E1;&#x5F35;&#x3067;&#x3001;&#x4EE5;&#x4E0B;&#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<ul>\n<li>NPN - &#x4E00;&#x3064;&#x306E; TLS &#x30B5;&#x30FC;&#x30D0;&#x3067;&#x8907;&#x6570;&#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB; (HTTP&#x3001;SPDY) &#x3092;&#x4F7F;&#x7528;&#x3002;</li>\n<li>SNI - &#x4E00;&#x3064;&#x306E; TLS &#x30B5;&#x30FC;&#x30D0;&#x3067;&#x30DB;&#x30B9;&#x30C8;&#x540D;&#x306E;&#x7570;&#x306A;&#x308B;&#x8907;&#x6570;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x4F7F;&#x7528;&#x3002;</li>\n</ul>\n&quot;
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;tls.getCiphers()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;getCiphers&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns an array with the names of the supported SSL ciphers.\n-->\n\n<p>&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B; SSL &#x6697;&#x53F7;&#x540D;&#x306E;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var ciphers = tls.getCiphers();\nconsole.log(ciphers); // [&apos;AES128-SHA&apos;, &apos;AES256-SHA&apos;, ...]</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;tls.createServer(options, [secureConnectionListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createServer&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a new [tls.Server][].  The `connectionListener` argument is\nautomatically set as a listener for the [secureConnection][] event.  The\n`options` object has these possibilities:\n-->\n\n<p>&#x65B0;&#x3057;&#x3044; [tls.Server][] &#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>connectionListener</code> &#x306F; [secureConnection][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;\n&#x81EA;&#x52D5;&#x7684;&#x306B;&#x767B;&#x9332;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>options</code> &#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x6301;&#x3064;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;:\n\n\n</p>\n<!--\n  - `pfx`: A string or `Buffer` containing the private key, certificate and\n    CA certs of the server in PFX or PKCS12 format. (Mutually exclusive with\n    the `key`, `cert` and `ca` options.)\n\n  - `key`: A string or `Buffer` containing the private key of the server in\n    PEM format. (Required)\n\n  - `passphrase`: A string of passphrase for the private key or pfx.\n\n  - `cert`: A string or `Buffer` containing the certificate key of the server in\n    PEM format. (Required)\n\n  - `ca`: An array of strings or `Buffer`s of trusted certificates in PEM\n    format. If this is omitted several well known \"root\" CAs will be used,\n    like VeriSign. These are used to authorize connections.\n\n  - `crl` : Either a string or list of strings of PEM encoded CRLs (Certificate\n    Revocation List)\n\n  - `ciphers`: A string describing the ciphers to use or exclude.\n\n    To mitigate [BEAST attacks] it is recommended that you use this option in\n    conjunction with the `honorCipherOrder` option described below to\n    prioritize the non-CBC cipher.\n\n    Defaults to `AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH`.\n    Consult the [OpenSSL cipher list format documentation] for details on the\n    format. ECDH (Elliptic Curve Diffie-Hellman) ciphers are not yet supported.\n\n\n    `AES128-GCM-SHA256` is used when node.js is linked against OpenSSL 1.0.1\n    or newer and the client speaks TLS 1.2, RC4 is used as a secure fallback.\n\n    **NOTE**: Previous revisions of this section suggested `AES256-SHA` as an\n    acceptable cipher. Unfortunately, `AES256-SHA` is a CBC cipher and therefore\n    susceptible to BEAST attacks. Do *not* use it.\n\n  - `handshakeTimeout`: Abort the connection if the SSL/TLS handshake does not\n    finish in this many milliseconds. The default is 120 seconds.\n\n    A `'clientError'` is emitted on the `tls.Server` object whenever a handshake\n    times out.\n\n  - `honorCipherOrder` : When choosing a cipher, use the server's preferences\n    instead of the client preferences.\n\n    Note that if SSLv2 is used, the server will send its list of preferences\n    to the client, and the client chooses the cipher.\n\n    Although, this option is disabled by default, it is *recommended* that you\n    use this option in conjunction with the `ciphers` option to mitigate\n    BEAST attacks.\n\n  - `requestCert`: If `true` the server will request a certificate from\n    clients that connect and attempt to verify that certificate. Default:\n    `false`.\n\n  - `rejectUnauthorized`: If `true` the server will reject any connection\n    which is not authorized with the list of supplied CAs. This option only\n    has an effect if `requestCert` is `true`. Default: `false`.\n\n  - `NPNProtocols`: An array or `Buffer` of possible NPN protocols. (Protocols\n    should be ordered by their priority).\n\n  - `SNICallback`: A function that will be called if client supports SNI TLS\n    extension. Only one argument will be passed to it: `servername`. And\n    `SNICallback` should return SecureContext instance.\n    (You can use `crypto.createCredentials(...).context` to get proper\n    SecureContext). If `SNICallback` wasn't provided - default callback with\n    high-level API will be used (see below).\n\n  - `sessionIdContext`: A string containing a opaque identifier for session\n    resumption. If `requestCert` is `true`, the default is MD5 hash value\n    generated from command-line. Otherwise, the default is not provided.\n\n  - `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force\n    SSL version 3. The possible values depend on your installation of\n    OpenSSL and are defined in the constant [SSL_METHODS][].\n-->\n\n<ul>\n<li><p><code>pfx</code> : PFX &#x307E;&#x305F;&#x306F; PKCS12 &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x79D8;&#x5BC6;&#x9375;&#x3001;&#x8A3C;&#x660E;&#x66F8;&#x3001;&#x304A;&#x3088;&#x3073; CA &#x306E;\n&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x542B;&#x3080;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;\n(<code>key</code>&#x3001;<code>cert</code>&#x3001;&#x304A;&#x3088;&#x3073; <code>ca</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x306F;&#x76F8;&#x4E92;&#x306B;&#x6392;&#x4ED6;&#x7684;&#x3067;&#x3059;)&#x3002;</p>\n</li>\n<li><p><code>key</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> &#x3067;&#x3059;\n(&#x5FC5;&#x9808;)&#x3002;</p>\n</li>\n<li><p><code>passphrase</code>: &#x79D8;&#x5BC6;&#x9375;&#x307E;&#x305F;&#x306F; pfx &#x306E;&#x30D1;&#x30B9;&#x30D5;&#x30EC;&#x30FC;&#x30BA;&#x3092;&#x8868;&#x3059;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>cert</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> &#x3067;&#x3059;\n(&#x5FC5;&#x9808;)&#x3002;</p>\n</li>\n<li><p><code>ca</code>: PEM&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n<code>Buffer</code> &#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x30D9;&#x30EA;&#x30B5;&#x30A4;&#x30F3;&#x306A;&#x3069;&#x306E;&#x3088;&#x304F;&#x77E5;&#x3089;&#x308C;&#x305F;&#x300C;&#x30EB;&#x30FC;&#x30C8;&#x300D;&#x8A8D;&#x8A3C;&#x5C40;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306F;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x8A8D;&#x8A3C;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>crl</code> : PEM &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F; CRL (Certificate Revocation List&#x3001;\n&#x5931;&#x52B9;&#x3057;&#x305F;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x4E00;&#x89A7;) &#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x5217;&#x306E;&#x914D;&#x5217;&#x3002;</p>\n</li>\n<li><p><code>ciphers</code>: &#x4F7F;&#x7528;&#x307E;&#x305F;&#x306F;&#x9664;&#x5916;&#x3059;&#x308B;&#x6697;&#x53F7;&#x3092;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;</p>\n<p>[BEAST &#x653B;&#x6483;]&#x3092;&#x6291;&#x5236;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x4EE5;&#x4E0B;&#x306B;&#x793A;&#x3059; <code>honorCipherOrder</code>\n&#x3092;&#x5171;&#x306B;&#x4F7F;&#x3063;&#x3066;&#x3001;&#x975E; CBC &#x6697;&#x53F7;&#x3092;&#x512A;&#x5148;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x63A8;&#x5968;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH</code> &#x3067;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; [OpenSSL &#x6697;&#x53F7;&#x30EA;&#x30B9;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\nECDH (Elliptic Curve Diffie-Hellman) &#x6697;&#x53F7;&#x306F;&#x307E;&#x3060;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;&#x3002;</p>\n<p><code>AES128-GCM-SHA256</code> &#x306F;&#x3001;Node.js &#x304C; OpenSSL 1.0.1 &#x4EE5;&#x964D;&#x3068;&#x30EA;&#x30F3;&#x30AF;&#x3055;&#x308C;&#x3066;&#x3044;&#x3066;&#x3001;\n&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C; TLS 1.2 &#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\nRC4 &#x306F;&#x5B89;&#x5168;&#x306A;&#x30D5;&#x30A9;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n<p><strong>&#x6CE8;&#x610F;</strong>: &#x4EE5;&#x524D;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E;&#x3053;&#x306E;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F; <code>AES256-SHA</code> &#x3092;\n&#x53D7;&#x3051;&#x5165;&#x308C;&#x53EF;&#x80FD;&#x306A;&#x6697;&#x53F7;&#x3067;&#x3042;&#x308B;&#x304B;&#x306E;&#x3088;&#x3046;&#x306B;&#x793A;&#x3057;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x6B8B;&#x5FF5;&#x306A;&#x304C;&#x3089;&#x3001;<code>AES256-SHA</code> &#x306F; CBC &#x6697;&#x53F7;&#x3067;&#x3042;&#x308A;&#x3001;&#x3057;&#x305F;&#x304C;&#x3063;&#x3066; BEAST\n&#x653B;&#x6483;&#x306B;&#x306F;&#x5F31;&#x3044;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>handshakeTimeout</code>: SSL/TLS &#x30CF;&#x30F3;&#x30C9;&#x30B7;&#x30A7;&#x30FC;&#x30AF;&#x304C;&#x3053;&#x306E;&#x6642;&#x9593; (&#x30DF;&#x30EA;&#x79D2;)\n&#x4EE5;&#x5185;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x63A5;&#x7D9A;&#x3092;&#x30A2;&#x30DC;&#x30FC;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 120 &#x79D2;&#x3067;&#x3059;&#x3002;</p>\n<p>&#x30CF;&#x30F3;&#x30C9;&#x30B7;&#x30A7;&#x30FC;&#x30AF;&#x304C;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3059;&#x308B;&#x3068;&#x3001;<code>tls.Server</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;\n<code>&apos;clientError&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>honorCipherOrder</code> :\n&#x6697;&#x53F7;&#x3092;&#x9078;&#x629E;&#x3059;&#x308B;&#x969B;&#x306B;&#x3001;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3067;&#x306F;&#x306A;&#x304F;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n<p>SSLv2 &#x304C;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x5834;&#x5408;&#x306F;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x8A2D;&#x5B9A;&#x306E;&#x30EA;&#x30B9;&#x30C8;&#x3092;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306B;&#x9001;&#x4FE1;&#x3057;&#x3001;\n&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x6697;&#x53F7;&#x3092;&#x9078;&#x629E;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</p>\n<p>&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x7121;&#x52B9;&#x3067;&#x3059;&#x304C;&#x3001;BEAST &#x653B;&#x6483;&#x3092;&#x6291;&#x5236;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n<code>ciphers</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x5171;&#x306B;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092; <em>&#x63A8;&#x5968;</em> &#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>requestCert</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x63A5;&#x7D9A;&#x3057;&#x3088;&#x3046;&#x3068;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304B;&#x3089;&#x306E;\n&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x8981;&#x6C42;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>rejectUnauthorized</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;\n&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x7834;&#x68C4;&#x3057;&#x307E;&#x3059;&#xFF0E;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F; <code>requestCert</code> &#x304C; <code>true</code> &#x306E;&#x5834;&#x5408;&#x3060;&#x3051;&#x52B9;&#x679C;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>NPNProtocols</code>: NPN &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x3067;&#x4F7F;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> &#x306E;&#x914D;&#x5217;\n(&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x306F;&#x305D;&#x306E;&#x512A;&#x5148;&#x5EA6;&#x306B;&#x5FDC;&#x3058;&#x3066;&#x4E26;&#x3093;&#x3067;&#x3044;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;)&#x3002;</p>\n</li>\n<li><p><code>SNICallback</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C; TLS &#x62E1;&#x5F35;&#x306E; SNI &#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x306B;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x95A2;&#x6570;&#x3067;&#x3059;&#x3002;\n<code>servername</code> &#x304C;&#x552F;&#x4E00;&#x306E;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>SNICallback</code> &#x306F; SecureContext &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x8FD4;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;\n(SecureContext &#x3092;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B; <code>crypto.createCredentials(...).context</code>\n&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;)&#x3002;\n<code>SNICallback</code> &#x304C;&#x6E21;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3068;&#x3057;&#x3066;\n&#x5F8C;&#x8FF0;&#x3059;&#x308B;&#x9AD8;&#x6C34;&#x6E96; API &#x304C;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>sessionIdContext</code>: &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x518D;&#x958B;&#x306E;&#x305F;&#x3081;&#x306E;&#x8B58;&#x5225;&#x5B50;&#x3068;&#x306A;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>requestCedrt</code> &#x304C; <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x5F15;&#x6570;&#x304B;&#x3089;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x305F; MD5 &#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x5024;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;</p>\n</li>\n<li><p><code>secureProtocol</code>: &#x4F7F;&#x7528;&#x3059;&#x308B; SSL &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3001;&#x305F;&#x3068;&#x3048;&#x3070; <code>SSLv3_method</code> &#x306F;\nSSL version 3 &#x306E;&#x4F7F;&#x7528;&#x3092;&#x5F37;&#x5236;&#x3057;&#x307E;&#x3059;&#x3002;&#x53EF;&#x80FD;&#x306A;&#x5024;&#x306F;&#x4F7F;&#x7528;&#x3059;&#x308B; OpenSSL &#x306B;&#x3088;&#x3063;&#x3066;\n&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x308B; [SSL_METHODS][] &#x5B9A;&#x6570;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nHere is a simple example echo server:\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306F;&#x30A8;&#x30B3;&#x30FC;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  key: fs.readFileSync(&apos;server-key.pem&apos;),\n  cert: fs.readFileSync(&apos;server-cert.pem&apos;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n  // This is necessary only if the client uses the self-signed certificate.\n  ca: [ fs.readFileSync(&apos;client-cert.pem&apos;) ]\n};\n\nvar server = tls.createServer(options, function(cleartextStream) {\n  console.log(&apos;server connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  cleartextStream.write(&quot;welcome!\\n&quot;);\n  cleartextStream.setEncoding(&apos;utf8&apos;);\n  cleartextStream.pipe(cleartextStream);\n});\nserver.listen(8000, function() {\n  console.log(&apos;server bound&apos;);\n});</code></pre>\n<!--\nOr\n-->\n\n<p>&#x3042;&#x308B;&#x3044;&#x306F;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;server.pfx&apos;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n};\n\nvar server = tls.createServer(options, function(cleartextStream) {\n  console.log(&apos;server connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  cleartextStream.write(&quot;welcome!\\n&quot;);\n  cleartextStream.setEncoding(&apos;utf8&apos;);\n  cleartextStream.pipe(cleartextStream);\n});\nserver.listen(8000, function() {\n  console.log(&apos;server bound&apos;);\n});</code></pre>\n<!--\nYou can test this server by connecting to it with `openssl s_client`:\n-->\n\n<p><code>openssl s_client</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3053;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30C6;&#x30B9;&#x30C8;&#x3092;&#x884C;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>openssl s_client -connect 127.0.0.1:8000</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;secureConnectionListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;tls.connect(options, [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;connect&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a new client connection to the given `port` and `host` (old API) or\n`options.port` and `options.host`. (If `host` is omitted, it defaults to\n`localhost`.) `options` should be an object which specifies:\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>port</code> &#x3068; <code>host</code> (&#x65E7; API) &#x307E;&#x305F;&#x306F; <code>options.port</code> &#x3068; <code>options.host</code>\n&#x3067;&#x65B0;&#x3057;&#x3044;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;\n(<code>host</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>localhost</code> &#x3067;&#x3059;)&#x3002;\n<code>options</code> &#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;:\n\n</p>\n<!--\n  - `host`: Host the client should connect to\n\n  - `port`: Port the client should connect to\n\n  - `socket`: Establish secure connection on a given socket rather than\n    creating a new socket. If this option is specified, `host` and `port`\n    are ignored.\n\n  - `pfx`: A string or `Buffer` containing the private key, certificate and\n    CA certs of the server in PFX or PKCS12 format.\n\n  - `key`: A string or `Buffer` containing the private key of the client in\n    PEM format.\n\n  - `passphrase`: A string of passphrase for the private key or pfx.\n\n  - `cert`: A string or `Buffer` containing the certificate key of the client in\n    PEM format.\n\n  - `ca`: An array of strings or `Buffer`s of trusted certificates in PEM\n    format. If this is omitted several well known \"root\" CAs will be used,\n    like VeriSign. These are used to authorize connections.\n\n  - `rejectUnauthorized`: If `true`, the server certificate is verified against\n    the list of supplied CAs. An `'error'` event is emitted if verification\n    fails. Default: `true`.\n\n  - `NPNProtocols`: An array of strings or `Buffer`s containing supported NPN\n    protocols. `Buffer`s should have following format: `0x05hello0x05world`,\n    where first byte is next protocol name's length. (Passing array should\n    usually be much simpler: `['hello', 'world']`.)\n\n  - `servername`: Servername for SNI (Server Name Indication) TLS extension.\n\n  - `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force\n    SSL version 3. The possible values depend on your installation of\n    OpenSSL and are defined in the constant [SSL_METHODS][].\n-->\n\n<ul>\n<li><p><code>host</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DB;&#x30B9;&#x30C8;&#x3002;</p>\n</li>\n<li><p><code>port</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x3002;</p>\n</li>\n<li><p><code>socket</code>: &#x65B0;&#x3057;&#x3044;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x4E0A;&#x3067;\n&#x30BB;&#x30AD;&#x30E5;&#x30A2;&#x306A;&#x63A5;&#x7D9A;&#x3092;&#x78BA;&#x7ACB;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;<code>host</code> &#x304A;&#x3088;&#x3073; <code>port</code> &#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>pfx</code> : PFX &#x307E;&#x305F;&#x306F; PKCS12 &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x79D8;&#x5BC6;&#x9375;&#x3001;&#x8A3C;&#x660E;&#x66F8;&#x3001;\n&#x304A;&#x3088;&#x3073;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x5BFE;&#x3059;&#x308B; CA &#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x542B;&#x3080;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3002;</p>\n</li>\n<li><p><code>key</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n<code>Buffer</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>passphrase</code>: &#x79D8;&#x5BC6;&#x9375;&#x307E;&#x305F;&#x306F; pfx &#x306E;&#x30D1;&#x30B9;&#x30D5;&#x30EC;&#x30FC;&#x30BA;&#x3092;&#x8868;&#x3059;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>cert</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>ca</code>: PEM&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n<code>Buffer</code> &#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x30D9;&#x30EA;&#x30B5;&#x30A4;&#x30F3;&#x306A;&#x3069;&#x306E;&#x3088;&#x304F;&#x77E5;&#x3089;&#x308C;&#x305F;&#x300C;&#x30EB;&#x30FC;&#x30C8;&#x300D;&#x8A8D;&#x8A3C;&#x5C40;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306F;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x8A8D;&#x8A3C;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>rejectUnauthorized</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x8A3C;&#x660E;&#x66F8;&#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;\n&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x691C;&#x8A3C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x306F; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B; <em>&#x524D;</em> &#x306B;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x30EC;&#x30D9;&#x30EB;&#x3067;&#x884C;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; true &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>NPNProtocols</code>: &#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3059;&#x308B; NPN &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> \n&#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>Buffer</code> &#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306A;&#x5F62;&#x5F0F;&#x3067;&#x3059;: <code>0x05hello0x5world</code>\n&#x6700;&#x521D;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x306F;&#x6B21;&#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x540D;&#x306E;&#x9577;&#x3055;&#x3067;&#x3059;\n(&#x901A;&#x5E38;&#x3001;&#x914D;&#x5217;&#x3092;&#x6E21;&#x3059;&#x65B9;&#x304C;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x3067;&#x3059;: <code>[&apos;hello&apos;, &apos;world&apos;]</code>)&#x3002;</p>\n</li>\n<li><p><code>servername</code>: TLS &#x62E1;&#x5F35;&#x3067;&#x3042;&#x308B; SNI (Server Name Indication) &#x306E;&#x30B5;&#x30FC;&#x30D0;&#x540D;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>secureProtocol</code>: &#x4F7F;&#x7528;&#x3059;&#x308B; SSL &#x65B9;&#x5F0F;&#x3001;&#x305F;&#x3068;&#x3048;&#x3070; <code>SSLv3_method</code> &#x306F;\nSSL &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 3 &#x3092;&#x5F37;&#x5236;&#x3057;&#x307E;&#x3059;&#x3002;&#x53EF;&#x80FD;&#x306A;&#x5024;&#x306F;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B; OpenSSL\n&#x3068;&#x3001;&#x305D;&#x306E;&#x5B9A;&#x6570; [SSL_METHODS][] &#x306E;&#x5B9A;&#x7FA9;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nThe `callback` parameter will be added as a listener for the\n['secureConnect'][] event.\n\n`tls.connect()` returns a [CleartextStream][] object.\n\nHere is an example of a client of echo server as described previously:\n-->\n\n<p><code>callback</code> &#x5F15;&#x6570;&#x306F; [&apos;secureConnect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;\n&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>tls.connect()</code> &#x306F; [CleartextStream][] &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x524D;&#x8FF0;&#x306E;&#x30A8;&#x30B3;&#x30FC;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  // These are necessary only if using the client certificate authentication\n  key: fs.readFileSync(&apos;client-key.pem&apos;),\n  cert: fs.readFileSync(&apos;client-cert.pem&apos;),\n\n  // This is necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync(&apos;server-cert.pem&apos;) ]\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&apos;client connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&apos;utf8&apos;);\ncleartextStream.on(&apos;data&apos;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&apos;end&apos;, function() {\n  server.close();\n});</code></pre>\n<!--\nOr\n-->\n\n<p>&#x307E;&#x305F;&#x306F;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;client.pfx&apos;)\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&apos;client connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&apos;utf8&apos;);\ncleartextStream.on(&apos;data&apos;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&apos;end&apos;, function() {\n  server.close();\n});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;port&quot;
                },
                {
                  &quot;name&quot;: &quot;host&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;tls.connect(port, [host], [options], [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;connect&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a new client connection to the given `port` and `host` (old API) or\n`options.port` and `options.host`. (If `host` is omitted, it defaults to\n`localhost`.) `options` should be an object which specifies:\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>port</code> &#x3068; <code>host</code> (&#x65E7; API) &#x307E;&#x305F;&#x306F; <code>options.port</code> &#x3068; <code>options.host</code>\n&#x3067;&#x65B0;&#x3057;&#x3044;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;\n(<code>host</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>localhost</code> &#x3067;&#x3059;)&#x3002;\n<code>options</code> &#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;:\n\n</p>\n<!--\n  - `host`: Host the client should connect to\n\n  - `port`: Port the client should connect to\n\n  - `socket`: Establish secure connection on a given socket rather than\n    creating a new socket. If this option is specified, `host` and `port`\n    are ignored.\n\n  - `pfx`: A string or `Buffer` containing the private key, certificate and\n    CA certs of the server in PFX or PKCS12 format.\n\n  - `key`: A string or `Buffer` containing the private key of the client in\n    PEM format.\n\n  - `passphrase`: A string of passphrase for the private key or pfx.\n\n  - `cert`: A string or `Buffer` containing the certificate key of the client in\n    PEM format.\n\n  - `ca`: An array of strings or `Buffer`s of trusted certificates in PEM\n    format. If this is omitted several well known \"root\" CAs will be used,\n    like VeriSign. These are used to authorize connections.\n\n  - `rejectUnauthorized`: If `true`, the server certificate is verified against\n    the list of supplied CAs. An `'error'` event is emitted if verification\n    fails. Default: `true`.\n\n  - `NPNProtocols`: An array of strings or `Buffer`s containing supported NPN\n    protocols. `Buffer`s should have following format: `0x05hello0x05world`,\n    where first byte is next protocol name's length. (Passing array should\n    usually be much simpler: `['hello', 'world']`.)\n\n  - `servername`: Servername for SNI (Server Name Indication) TLS extension.\n\n  - `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force\n    SSL version 3. The possible values depend on your installation of\n    OpenSSL and are defined in the constant [SSL_METHODS][].\n-->\n\n<ul>\n<li><p><code>host</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DB;&#x30B9;&#x30C8;&#x3002;</p>\n</li>\n<li><p><code>port</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x3002;</p>\n</li>\n<li><p><code>socket</code>: &#x65B0;&#x3057;&#x3044;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x4E0A;&#x3067;\n&#x30BB;&#x30AD;&#x30E5;&#x30A2;&#x306A;&#x63A5;&#x7D9A;&#x3092;&#x78BA;&#x7ACB;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;<code>host</code> &#x304A;&#x3088;&#x3073; <code>port</code> &#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>pfx</code> : PFX &#x307E;&#x305F;&#x306F; PKCS12 &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x79D8;&#x5BC6;&#x9375;&#x3001;&#x8A3C;&#x660E;&#x66F8;&#x3001;\n&#x304A;&#x3088;&#x3073;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x5BFE;&#x3059;&#x308B; CA &#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x542B;&#x3080;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3002;</p>\n</li>\n<li><p><code>key</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n<code>Buffer</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>passphrase</code>: &#x79D8;&#x5BC6;&#x9375;&#x307E;&#x305F;&#x306F; pfx &#x306E;&#x30D1;&#x30B9;&#x30D5;&#x30EC;&#x30FC;&#x30BA;&#x3092;&#x8868;&#x3059;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>cert</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>ca</code>: PEM&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n<code>Buffer</code> &#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x30D9;&#x30EA;&#x30B5;&#x30A4;&#x30F3;&#x306A;&#x3069;&#x306E;&#x3088;&#x304F;&#x77E5;&#x3089;&#x308C;&#x305F;&#x300C;&#x30EB;&#x30FC;&#x30C8;&#x300D;&#x8A8D;&#x8A3C;&#x5C40;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306F;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x8A8D;&#x8A3C;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>rejectUnauthorized</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x8A3C;&#x660E;&#x66F8;&#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;\n&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x691C;&#x8A3C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x306F; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B; <em>&#x524D;</em> &#x306B;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x30EC;&#x30D9;&#x30EB;&#x3067;&#x884C;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; true &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>NPNProtocols</code>: &#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3059;&#x308B; NPN &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> \n&#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>Buffer</code> &#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306A;&#x5F62;&#x5F0F;&#x3067;&#x3059;: <code>0x05hello0x5world</code>\n&#x6700;&#x521D;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x306F;&#x6B21;&#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x540D;&#x306E;&#x9577;&#x3055;&#x3067;&#x3059;\n(&#x901A;&#x5E38;&#x3001;&#x914D;&#x5217;&#x3092;&#x6E21;&#x3059;&#x65B9;&#x304C;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x3067;&#x3059;: <code>[&apos;hello&apos;, &apos;world&apos;]</code>)&#x3002;</p>\n</li>\n<li><p><code>servername</code>: TLS &#x62E1;&#x5F35;&#x3067;&#x3042;&#x308B; SNI (Server Name Indication) &#x306E;&#x30B5;&#x30FC;&#x30D0;&#x540D;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>secureProtocol</code>: &#x4F7F;&#x7528;&#x3059;&#x308B; SSL &#x65B9;&#x5F0F;&#x3001;&#x305F;&#x3068;&#x3048;&#x3070; <code>SSLv3_method</code> &#x306F;\nSSL &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 3 &#x3092;&#x5F37;&#x5236;&#x3057;&#x307E;&#x3059;&#x3002;&#x53EF;&#x80FD;&#x306A;&#x5024;&#x306F;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B; OpenSSL\n&#x3068;&#x3001;&#x305D;&#x306E;&#x5B9A;&#x6570; [SSL_METHODS][] &#x306E;&#x5B9A;&#x7FA9;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nThe `callback` parameter will be added as a listener for the\n['secureConnect'][] event.\n\n`tls.connect()` returns a [CleartextStream][] object.\n\nHere is an example of a client of echo server as described previously:\n-->\n\n<p><code>callback</code> &#x5F15;&#x6570;&#x306F; [&apos;secureConnect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;\n&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>tls.connect()</code> &#x306F; [CleartextStream][] &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x524D;&#x8FF0;&#x306E;&#x30A8;&#x30B3;&#x30FC;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  // These are necessary only if using the client certificate authentication\n  key: fs.readFileSync(&apos;client-key.pem&apos;),\n  cert: fs.readFileSync(&apos;client-cert.pem&apos;),\n\n  // This is necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync(&apos;server-cert.pem&apos;) ]\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&apos;client connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&apos;utf8&apos;);\ncleartextStream.on(&apos;data&apos;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&apos;end&apos;, function() {\n  server.close();\n});</code></pre>\n<!--\nOr\n-->\n\n<p>&#x307E;&#x305F;&#x306F;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;client.pfx&apos;)\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&apos;client connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&apos;utf8&apos;);\ncleartextStream.on(&apos;data&apos;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&apos;end&apos;, function() {\n  server.close();\n});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;port&quot;
                },
                {
                  &quot;name&quot;: &quot;host&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createSecurePair&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a new secure pair object with two streams, one of which reads/writes\nencrypted data, and one reads/writes cleartext data.\nGenerally the encrypted one is piped to/from an incoming encrypted data stream,\nand the cleartext one is used as a replacement for the initial encrypted stream.\n - `credentials`: A credentials object from crypto.createCredentials( ... )\n\n - `isServer`: A boolean indicating whether this tls connection should be\n   opened as a server or a client.\n\n - `requestCert`: A boolean indicating whether a server should request a\n   certificate from a connecting client. Only applies to server connections.\n\n - `rejectUnauthorized`: A boolean indicating whether a server should\n   automatically reject clients with invalid certificates. Only applies to\n   servers with `requestCert` enabled.\n\n`tls.createSecurePair()` returns a SecurePair object with [cleartext][] and\n`encrypted` stream properties.\n-->\n\n<p>&#x4E8C;&#x3064;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x6301;&#x3064;&#x30BB;&#x30AD;&#x30E5;&#x30A2;&#x30DA;&#x30A2;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x3064;&#x306F;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8AAD;&#x307F;&#x66F8;&#x304D;&#x3057;&#x3001;&#x3082;&#x3046;&#x4E00;&#x3064;&#x306F;&#x5E73;&#x6587;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8AAD;&#x307F;&#x66F8;&#x304D;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x901A;&#x5E38;&#x3001;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x5916;&#x90E8;&#x304B;&#x3089;&#x306E;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x9023;&#x7D50;&#x3055;&#x308C;&#x3001;\n&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x5E73;&#x6587;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<ul>\n<li><p><code>credentials</code>: <code>crypto.createCredentials( ... )</code> &#x3067;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;\n&#x8A3C;&#x660E;&#x66F8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3002;</p>\n</li>\n<li><p><code>isServer</code>: &#x3053;&#x306E; TLS &#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x30B5;&#x30FC;&#x30D0;&#x3068;&#x3057;&#x3066;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x793A;&#x3059;\n&#x30D6;&#x30FC;&#x30EA;&#x30A2;&#x30F3;&#x5024;&#x3002;</p>\n</li>\n<li><p><code>requestCert</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304B;&#x3089;&#x306E;&#x63A5;&#x7D9A;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306B;\n&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x8981;&#x6C42;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x793A;&#x3059;&#x30D6;&#x30FC;&#x30EA;&#x30A2;&#x30F3;&#x5024;&#x3002;\n&#x30B5;&#x30FC;&#x30D0;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x306E;&#x307F;&#x9069;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>rejectUnauthorized</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x8A8D;&#x8A3C;&#x304C;&#x4E0D;&#x6B63;&#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x3001;\n&#x81EA;&#x52D5;&#x7684;&#x306B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3092;&#x7834;&#x68C4;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x793A;&#x3059;&#x30D6;&#x30FC;&#x30EA;&#x30A2;&#x30F3;&#x5024;&#x3002;\n<code>requestCert</code> &#x304C;&#x6709;&#x52B9;&#x306A;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x306E;&#x307F;&#x9069;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<p><code>tls.createSequrePair()</code> &#x306F;&#x3001;[cleartext][] &#x3068; <code>encrypted</code>\n&#x3092;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3068;&#x3057;&#x3066;&#x6301;&#x3064; <code>SecurePair</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;credentials&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;isServer&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;requestCert&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;rejectUnauthorized&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;tls.SLAB_BUFFER_SIZE&quot;,
          &quot;name&quot;: &quot;SLAB_BUFFER_SIZE&quot;,
          &quot;desc&quot;: &quot;<!--\nSize of slab buffer used by all tls servers and clients.\nDefault: `10 * 1024 * 1024`.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; TLS &#x30B5;&#x30FC;&#x30D0;&#x53CA;&#x3073;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3067;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x308B;&#x30B9;&#x30E9;&#x30D6;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;: <code>10 * 1024 * 1024</code>&#x3002;\n\n\n</p>\n<!--\nDon't change the defaults unless you know what you are doing.\n-->\n\n<p>&#x3042;&#x306A;&#x305F;&#x304C;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x3053;&#x3068;&#x3092;&#x7406;&#x89E3;&#x3057;&#x3066;&#x3044;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3092;&#x5909;&#x66F4;&#x3057;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: SecurePair&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;SecurePair&quot;,
          &quot;desc&quot;: &quot;<!--\nReturned by tls.createSecurePair.\n-->\n\n<p><code>tls.createSecurePair</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;secure&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;secure&quot;,
              &quot;desc&quot;: &quot;<!--\nThe event is emitted from the SecurePair once the pair has successfully\nestablished a secure connection.\n\nSimilarly to the checking for the server 'secureConnection' event,\npair.cleartext.authorized should be checked to confirm whether the certificate\nused properly authorized.\n-->\n\n<p>SecurePair &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x30DA;&#x30A2;&#x304C;&#x5B89;&#x5168;&#x306A;&#x63A5;&#x7D9A;&#x3092;&#x78BA;&#x7ACB;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30B5;&#x30FC;&#x30D0;&#x306E; <code>&apos;secureConnection&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3068;&#x540C;&#x69D8;&#x306B;&#x3001;\n<code>pari.cleartext.authorized</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x63A5;&#x7D9A;&#x76F8;&#x624B;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x627F;&#x8A8D;&#x3067;&#x304D;&#x305F;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;\n&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: tls.Server&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;tls.Server&quot;,
          &quot;desc&quot;: &quot;<!--\nThis class is a subclass of `net.Server` and has the same methods on it.\nInstead of accepting just raw TCP connections, this accepts encrypted\nconnections using TLS or SSL.\n-->\n\n<p>&#x3053;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306F; <code>net.Server</code> &#x306E;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;&#x540C;&#x3058;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x751F;&#x306E; TCP &#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x53D7;&#x3051;&#x5165;&#x308C;&#x308B;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;\nTLS &#x307E;&#x305F;&#x306F; SSL &#x3092;&#x4F7F;&#x3063;&#x305F;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;secureConnection&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;secureConnection&quot;,
              &quot;desc&quot;: &quot;<p><code>function (cleartextStream) {}</code>\n\n</p>\n<!--\nThis event is emitted after a new connection has been successfully\nhandshaked. The argument is a instance of [CleartextStream][]. It has all the\ncommon stream methods and events.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x3001;&#x65B0;&#x3057;&#x3044;&#x63A5;&#x7D9A;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30B7;&#x30A7;&#x30FC;&#x30AF;&#x304C;&#x6210;&#x529F;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5F15;&#x6570;&#x306F; [CleartextStream][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x5171;&#x901A;&#x3059;&#x308B;&#x5168;&#x3066;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3068;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`cleartextStream.authorized` is a boolean value which indicates if the\nclient has verified by one of the supplied certificate authorities for the\nserver. If `cleartextStream.authorized` is false, then\n`cleartextStream.authorizationError` is set to describe how authorization\nfailed. Implied but worth mentioning: depending on the settings of the TLS\nserver, you unauthorized connections may be accepted.\n`cleartextStream.npnProtocol` is a string containing selected NPN protocol.\n`cleartextStream.servername` is a string containing servername requested with\nSNI.\n-->\n\n<p><code>cleartextStream.authorized</code> &#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x306B;&#x3088;&#x3063;&#x3066;\n&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x305F;&#x304B;&#x3092;&#x793A;&#x3059; boolean &#x5024;&#x3067;&#x3059;&#x3002;\n<code>cleartextStream.authorized</code> &#x304C; false &#x306E;&#x5834;&#x5408;&#x3001;\n<code>cleartextStream.authorizationError</code> &#x306B;&#x306F;&#x3069;&#x306E;&#x3088;&#x3046;&#x306B;&#x8A8D;&#x8A3C;&#x304C;&#x5931;&#x6557;&#x3057;&#x305F;&#x306E;&#x304B;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6697;&#x9ED9;&#x7684;&#x3067;&#x3059;&#x304C;&#x8A00;&#x53CA;&#x3059;&#x308B;&#x4FA1;&#x5024;&#x306E;&#x3042;&#x308B;&#x3053;&#x3068;:\nTLS &#x30B5;&#x30FC;&#x30D0;&#x306E;&#x8A2D;&#x5B9A;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>cleartextStream.npnProtocol</code> &#x306F;&#x3001;&#x9078;&#x629E;&#x3055;&#x308C;&#x305F; NPN &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>cleartextStream.servername</code> &#x306F;&#x3001;SNI &#x3067;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3055;&#x308C;&#x305F;&#x30B5;&#x30FC;&#x30D0;&#x540D;&#x3092;&#x6301;&#x3064;\n&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;clientError&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;clientError&quot;,
              &quot;desc&quot;: &quot;<p><code>function (exception, securePair) { }</code>\n\n</p>\n<!--\nWhen a client connection emits an 'error' event before secure connection is\nestablished - it will be forwarded here.\n-->\n\n<p>&#x30BB;&#x30AD;&#x30E5;&#x30A2;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x78BA;&#x7ACB;&#x3055;&#x308C;&#x308B;&#x524D;&#x306B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;\n<code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x767A;&#x3057;&#x305F;&#x5834;&#x5408; &#xFF0D; &#x3053;&#x3053;&#x306B;&#x8EE2;&#x9001;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`securePair` is the `tls.SecurePair` that the error originated from.\n-->\n\n<p><code>securePair</code> &#x306F;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F; <code>tls.SecurePair</code> &#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;newSession&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;newSession&quot;,
              &quot;desc&quot;: &quot;<p><code>function (sessionId, sessionData) { }</code>\n\n</p>\n<!--\nEmitted on creation of TLS session. May be used to store sessions in external\nstorage.\n-->\n\n<p>TLS &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x5916;&#x90E8;&#x30B9;&#x30C8;&#x30EC;&#x30FC;&#x30B8;&#x306B;&#x4FDD;&#x5B58;&#x3059;&#x308B;&#x5834;&#x5408;&#x306B;&#x4F7F;&#x3048;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;resumeSession&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;resumeSession&quot;,
              &quot;desc&quot;: &quot;<p><code>function (sessionId, callback) { }</code>\n\n</p>\n<!--\nEmitted when client wants to resume previous TLS session. Event listener may\nperform lookup in external storage using given `sessionId`, and invoke\n`callback(null, sessionData)` once finished. If session can't be resumed\n(i.e. doesn't exist in storage) one may call `callback(null, null)`. Calling\n`callback(err)` will terminate incoming connection and destroy socket.\n-->\n\n<p>&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x4EE5;&#x524D;&#x306E; TLS &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x518D;&#x958B;&#x3092;&#x8981;&#x6C42;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EA;&#x30B9;&#x30CA;&#x306F;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>sessionId</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x5916;&#x90E8;&#x30B9;&#x30C8;&#x30EC;&#x30FC;&#x30B8;&#x304B;&#x3089;\n&#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x898B;&#x3064;&#x3051;&#x305F;&#x5834;&#x5408;&#x3001;<code>callback(null, sessionData)</code> &#x3092;&#x4E00;&#x5EA6;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;\n&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x518D;&#x958B;&#x3067;&#x304D;&#x306A;&#x3044;&#x5834;&#x5408; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x30B9;&#x30C8;&#x30EC;&#x30FC;&#x30B8;&#x306B;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;)&#x3001;\n<code>callback(null, null)</code> &#x3092;&#x547C;&#x3076;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>callback(err)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x63A5;&#x7D9A;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x7834;&#x68C4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;server.listen(port, [host], [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;desc&quot;: &quot;<!--\nBegin accepting connections on the specified `port` and `host`.  If the\n`host` is omitted, the server will accept connections directed to any\nIPv4 address (`INADDR_ANY`).\n-->\n\n<p>&#x6307;&#x5B9A;&#x306E; <code>port</code> &#x3068; <code>host</code> &#x3067;&#x63A5;&#x7D9A;&#x306E;&#x53D7;&#x3051;&#x5165;&#x308C;&#x3092;&#x958B;&#x59CB;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>host</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x3069;&#x3093;&#x306A; IPv4 &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x304B;&#x3089;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x307E;&#x3059; (<code>INADDR_ANY</code>)&#x3002;\n\n</p>\n<!--\nThis function is asynchronous. The last parameter `callback` will be called\nwhen the server has been bound.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3059;&#x3002;\n&#x6700;&#x5F8C;&#x306E;&#x5F15;&#x6570; <code>callback</code> &#x306F;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x308B;&#x3068;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nSee `net.Server` for more information.\n-->\n\n<p>&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F; <code>net.Server</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;port&quot;
                    },
                    {
                      &quot;name&quot;: &quot;host&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.close()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nStops the server from accepting new connections. This function is\nasynchronous, the server is finally closed when the server emits a `'close'`\nevent.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x65B0;&#x3057;&#x3044;&#x63A5;&#x7D9A;&#x3092;&#x53D7;&#x3051;&#x5165;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x6700;&#x7D42;&#x7684;&#x306B;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x308B;&#x3068;&#x30B5;&#x30FC;&#x30D0;&#x306F; <code>&apos;close&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.address()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;address&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the bound address, the address family name and port of the\nserver as reported by the operating system.  See [net.Server.address()][] for\nmore information.\n-->\n\n<p>&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x5831;&#x544A;&#x3055;&#x308C;&#x305F;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x305F;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3068;\n&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x30D5;&#x30A1;&#x30DF;&#x30EA;&#x540D;&#x3001;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002; \n&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x306F; [net.Server.address()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.addContext(hostname, credentials)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;addContext&quot;,
              &quot;desc&quot;: &quot;<!--\nAdd secure context that will be used if client request's SNI hostname is\nmatching passed `hostname` (wildcards can be used). `credentials` can contain\n`key`, `cert` and `ca`.\n-->\n\n<p>&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x8981;&#x6C42;&#x3057;&#x3066;&#x304D;&#x305F; SNI &#x30DB;&#x30B9;&#x30C8;&#x540D;&#x3068; <code>hostname</code> (&#x30EF;&#x30A4;&#x30EB;&#x30C9;&#x30AB;&#x30FC;&#x30C9;&#x3092;&#x4F7F;&#x7528;&#x53EF;&#x80FD;)\n&#x304C;&#x30DE;&#x30C3;&#x30C1;&#x3057;&#x305F;&#x5834;&#x5408;&#x306E;&#x30BB;&#x30AD;&#x30E5;&#x30EA;&#x30C6;&#x30A3;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3092;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>credentials</code> &#x306F; <code>key</code>&#x3001;<code>cert</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>ca</code> &#x3092;&#x542B;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;hostname&quot;
                    },
                    {
                      &quot;name&quot;: &quot;credentials&quot;
                    }
                  ]
                }
              ]
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;server.maxConnections&quot;,
              &quot;name&quot;: &quot;maxConnections&quot;,
              &quot;desc&quot;: &quot;<!--\nSet this property to reject connections when the server's connection count\ngets high.\n-->\n\n<p>&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x63A5;&#x7D9A;&#x6570;&#x304C;&#x3053;&#x308C;&#x3092;&#x8D8A;&#x3048;&#x305F;&#x5834;&#x5408;&#x306B;&#x63A5;&#x7D9A;&#x3092;&#x7834;&#x68C4;&#x3057;&#x307E;&#x3059;&#x3002;\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;server.connections&quot;,
              &quot;name&quot;: &quot;connections&quot;,
              &quot;desc&quot;: &quot;<!--\nThe number of concurrent connections on the server.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x4E26;&#x884C;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: CryptoStream&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;CryptoStream&quot;,
          &quot;desc&quot;: &quot;<!--\nThis is an encrypted stream.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;cryptoStream.bytesWritten&quot;,
              &quot;name&quot;: &quot;bytesWritten&quot;,
              &quot;desc&quot;: &quot;<!--\nA proxy to the underlying socket's bytesWritten accessor, this will return\nthe total bytes written to the socket, *including the TLS overhead*.\n-->\n\n<p>&#x4E0B;&#x5C64;&#x306B;&#x3042;&#x308B;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E; bytesWritten &#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x30D7;&#x30ED;&#x30AD;&#x30B7;&#x3067;&#x3001;\n<em>TLS &#x306E;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30D8;&#x30C3;&#x30C9;&#x3092;&#x542B;&#x3081;&#x3066;</em> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C8;&#x30FC;&#x30BF;&#x30EB;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3092;\n&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: tls.CleartextStream&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;tls.CleartextStream&quot;,
          &quot;desc&quot;: &quot;<!--\nThis is a stream on top of the *Encrypted* stream that makes it possible to\nread/write an encrypted data as a cleartext data.\n\nThis instance implements a duplex [Stream][] interfaces.  It has all the\ncommon stream methods and events.\n-->\n\n<p>&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x4E0A;&#x3067;&#x3001;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5E73;&#x6587;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3068;&#x3057;&#x3066;\n&#x8AAD;&#x307F;&#x66F8;&#x304D;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306F;&#x53CC;&#x65B9;&#x5411;&#x306E; [Stream][] &#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x5171;&#x901A;&#x306A;&#x5168;&#x3066;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3068;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>A ClearTextStream is the <code>clear</code> member of a SecurePair object.\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;secureConnect&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;secureConnect&quot;,
              &quot;desc&quot;: &quot;<!--\nThis event is emitted after a new connection has been successfully handshaked. \nThe listener will be called no matter if the server's certificate was\nauthorized or not. It is up to the user to test `cleartextStream.authorized`\nto see if the server certificate was signed by one of the specified CAs.\nIf `cleartextStream.authorized === false` then the error can be found in\n`cleartextStream.authorizationError`. Also if NPN was used - you can check\n`cleartextStream.npnProtocol` for negotiated protocol.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E; TLS/SSL &#x30CF;&#x30F3;&#x30C9;&#x30B7;&#x30A7;&#x30FC;&#x30AF;&#x304C;&#x6210;&#x529F;&#x3059;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30EA;&#x30B9;&#x30CA;&#x306F;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x304C;&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x305F;&#x304B;&#x3069;&#x3046;&#x304B;&#x306B;&#x95A2;&#x308F;&#x3089;&#x305A;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30B5;&#x30FC;&#x30D0;&#x8A3C;&#x660E;&#x66F8;&#x304C;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306B;&#x627F;&#x8A8D;&#x3055;&#x308C;&#x305F;&#x304B;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n<code>cleartextStream.authorized</code> &#x3092;&#x78BA;&#x8A8D;&#x3059;&#x308B;&#x304B;&#x306F;&#x30E6;&#x30FC;&#x30B6;&#x6B21;&#x7B2C;&#x3067;&#x3059;&#x3002;\n<code>cleartextStream.authorized === false</code>&#x306E;&#x5834;&#x5408;&#x3001;\n<code>cleartextStream.authorizationError</code> &#x304B;&#x3089;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x898B;&#x3064;&#x3051;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x540C;&#x69D8;&#x306B; NPN &#x304C;&#x4F7F;&#x308F;&#x308C;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x306F; <code>cleartextStream.npnProtocol</code>\n&#x304B;&#x3089;&#x5408;&#x610F;&#x3055;&#x308C;&#x305F;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;cleartextStream.authorized&quot;,
              &quot;name&quot;: &quot;authorized&quot;,
              &quot;desc&quot;: &quot;<!--\nA boolean that is `true` if the peer certificate was signed by one of the\nspecified CAs, otherwise `false`\n-->\n\n<p>&#x63A5;&#x7D9A;&#x76F8;&#x624B;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x304C; CA &#x306E;&#x4E00;&#x3064;&#x306B;&#x3088;&#x3063;&#x3066;&#x7F72;&#x540D;&#x3055;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070; <code>true</code>&#x3001;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;cleartextStream.authorizationError&quot;,
              &quot;name&quot;: &quot;authorizationError&quot;,
              &quot;The reason why the peer&apos;s certificate has not been verified. This property\nbecomes available only when `cleartextStream.authorized&quot;: &quot;== false`.&quot;,
              &quot;desc&quot;: &quot;<p>&#x63A5;&#x7D9A;&#x76F8;&#x624B;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x304C;&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x7406;&#x7531;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F; <code>cleartextStream.authorized === false</code>\n&#x306E;&#x5834;&#x5408;&#x3060;&#x3051;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;cleartextStream.remoteAddress&quot;,
              &quot;name&quot;: &quot;remoteAddress&quot;,
              &quot;desc&quot;: &quot;<!--\nThe string representation of the remote IP address. For example,\n`'74.125.127.100'` or `'2001:4860:a005::68'`.\n-->\n\n<p>&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x306E; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;<code>&apos;74.125.127.100&apos;</code> &#x3042;&#x308B;&#x3044;&#x306F; <code>&apos;2001:4860:a005::68&apos;</code>&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;cleartextStream.remotePort&quot;,
              &quot;name&quot;: &quot;remotePort&quot;,
              &quot;desc&quot;: &quot;<!--\nThe numeric representation of the remote port. For example, `443`.\n-->\n\n<p>&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30DD;&#x30FC;&#x30C8;&#x306E;&#x6570;&#x5024;&#x8868;&#x73FE;&#x3067;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;<code>443</code>&#x3002;\n\n</p>\n<!--\n[OpenSSL cipher list format documentation]: http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT\n[BEAST attacks]: http://blog.ivanristic.com/2011/10/mitigating-the-beast-attack-on-tls.html\n[CleartextStream]: #tls_class_tls_cleartextstream\n[net.Server.address()]: net.html#net_server_address\n['secureConnect']: #tls_event_secureconnect\n[secureConnection]: #tls_event_secureconnection\n[Stream]: stream.html#stream_stream\n[SSL_METHODS]: http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_PROTOCOL_METHODS\n[tls.Server]: #tls_class_tls_server\n-->\n\n&quot;
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;cleartextStream.getPeerCertificate()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getPeerCertificate&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns an object representing the peer's certificate. The returned object has\nsome properties corresponding to the field of the certificate.\n-->\n\n<p>&#x63A5;&#x7D9A;&#x76F8;&#x624B;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x306B;&#x5BFE;&#x5FDC;&#x3059;&#x308B;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>{ subject: \n   { C: &apos;UK&apos;,\n     ST: &apos;Acknack Ltd&apos;,\n     L: &apos;Rhys Jones&apos;,\n     O: &apos;node.js&apos;,\n     OU: &apos;Test TLS Certificate&apos;,\n     CN: &apos;localhost&apos; },\n  issuer: \n   { C: &apos;UK&apos;,\n     ST: &apos;Acknack Ltd&apos;,\n     L: &apos;Rhys Jones&apos;,\n     O: &apos;node.js&apos;,\n     OU: &apos;Test TLS Certificate&apos;,\n     CN: &apos;localhost&apos; },\n  valid_from: &apos;Nov 11 09:52:22 2009 GMT&apos;,\n  valid_to: &apos;Nov  6 09:52:22 2029 GMT&apos;,\n  fingerprint: &apos;2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF&apos; }</code></pre>\n<!--\nIf the peer does not provide a certificate, it returns `null` or an empty\nobject.\n-->\n\n<p>&#x63A5;&#x7D9A;&#x76F8;&#x624B;&#x304C;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n<code>null</code> &#x307E;&#x305F;&#x306F;&#x7A7A;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;cleartextStream.getCipher()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getCipher&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns an object representing the cipher name and the SSL/TLS\nprotocol version of the current connection.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x63A5;&#x7D9A;&#x306B;&#x304A;&#x3051;&#x308B;&#x6697;&#x53F7;&#x3068; SSL/TLS &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;\n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>{ name: &apos;AES256-SHA&apos;, version: &apos;TLSv1/SSLv3&apos; }</code></pre>\n<!--\nSee SSL_CIPHER_get_name() and SSL_CIPHER_get_version() in\nhttp://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_CIPHERS for more\ninformation.\n-->\n\n<p>&#x8A73;&#x7D30;&#x306F;\n<a href="\&quot;http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_CIPHERS\&quot;">http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_CIPHERS</a>\n&#x3067; <code>SSL_CIPHER_get_name()</code> &#x304A;&#x3088;&#x3073; <code>SSL_CIPHER_get_version()</code> &#x3092;\n&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;cleartextStream.address()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;address&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the bound address, the address family name and port of the\nunderlying socket as reported by the operating system. Returns an\nobject with three properties, e.g.\n`{ port: 12346, family: 'IPv4', address: '127.0.0.1' }`\n-->\n\n<p>&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x5831;&#x544A;&#x3055;&#x308C;&#x305F;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x305F;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3068;\n&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x30D5;&#x30A1;&#x30DF;&#x30EA;&#x540D;&#x3001;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x4E8C;&#x3064;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n<code>{ port: 12346, family: &apos;IPv4&apos;, address: &apos;127.0.0.1&apos; }</code>\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;TLS (SSL)&quot;
    }
  ]
}
