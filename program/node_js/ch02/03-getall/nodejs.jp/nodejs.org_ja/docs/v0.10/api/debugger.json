{
  &quot;source&quot;: &quot;doc/api/debugger.markdown&quot;,
  &quot;stability&quot;: 3,
  &quot;stabilityText&quot;: &quot;Stable&quot;,
  &quot;miscs&quot;: [
    {
      &quot;textRaw&quot;: &quot;Debugger&quot;,
      &quot;name&quot;: &quot;Debugger&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;type&quot;: &quot;misc&quot;,
      &quot;desc&quot;: &quot;<!--\nV8 comes with an extensive debugger which is accessible out-of-process via a\nsimple [TCP protocol](http://code.google.com/p/v8/wiki/DebuggerProtocol).\nNode has a built-in client for this debugger. To use this, start Node with the\n`debug` argument; a prompt will appear:\n-->\n\n<p>V8&#x306F;&#x5916;&#x90E8;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304B;&#x3089; <a href="\&quot;http://code.google.com/p/v8/wiki/DebuggerProtocol\&quot;">TCP &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;</a>&#x7D4C;&#x7531;&#x3067;&#x63A5;&#x7D9A;&#x53EF;&#x80FD;&#x306A;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x5099;&#x3048;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\nNode &#x306B;&#x306F;&#x3053;&#x306E;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3078;&#x306E;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x7D44;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x306B;&#x306F;&#x3001; <code>debug</code> &#x5F15;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x3066; Node &#x3092;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<pre><code>% node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\ndebug&gt;</code></pre>\n<!--\nNode's debugger client doesn't support the full range of commands, but\nsimple step and inspection is possible. By putting the statement `debugger;`\ninto the source code of your script, you will enable a breakpoint.\n-->\n\n<p>Node &#x306E;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306F;&#x3042;&#x3089;&#x3086;&#x308B;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x5B8C;&#x5168;&#x306B;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x3066;&#x3044;&#x308B;&#x308F;&#x3051;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;\n&#x5358;&#x7D14;&#x306A;&#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x5B9F;&#x884C;&#x3084;&#x30A4;&#x30F3;&#x30B9;&#x30DA;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x306B; <code>debugger;</code> &#x6587;&#x3092;&#x633F;&#x5165;&#x3059;&#x308B;&#x3068;&#x3001;\n&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x304C;&#x6709;&#x52B9;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example, suppose `myscript.js` looked like this:\n-->\n\n<p>&#x4F8B;&#x3048;&#x3070;&#x3001;<code>myscript.js</code> &#x304C;&#x6B21;&#x306E;&#x3088;&#x3046;&#x3060;&#x3068;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>// myscript.js\nx = 5;\nsetTimeout(function () {\n  debugger;\n  console.log(&quot;world&quot;);\n}, 1000);\nconsole.log(&quot;hello&quot;);</code></pre>\n<!--\nThen once the debugger is run, it will break on line 4.\n-->\n\n<p>&#x3072;&#x3068;&#x305F;&#x3073;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3068;&#x3001;4&#x884C;&#x76EE;&#x3067;&#x4E2D;&#x65AD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>% node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\ndebug&gt; cont\n&lt; hello\nbreak in /home/indutny/Code/git/indutny/myscript.js:3\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\ndebug&gt; next\nbreak in /home/indutny/Code/git/indutny/myscript.js:4\n  2 setTimeout(function () {\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\n  6 console.log(&quot;hello&quot;);\ndebug&gt; repl\nPress Ctrl + C to leave debug repl\n&gt; x\n5\n&gt; 2+2\n4\ndebug&gt; next\n&lt; world\nbreak in /home/indutny/Code/git/indutny/myscript.js:5\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\n  6 console.log(&quot;hello&quot;);\n  7\ndebug&gt; quit\n%</code></pre>\n<!--\nThe `repl` command allows you to evaluate code remotely. The `next` command\nsteps over to the next line. There are a few other commands available and more\nto come. Type `help` to see others.\n-->\n\n<p><code>repl</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306F;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x3067;&#x8A55;&#x4FA1;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>next</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306F;&#x6B21;&#x306E;&#x884C;&#x306B;&#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4ED6;&#x306B;&#x3082;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x4ED6;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F; <code>help</code> &#x3092;&#x30BF;&#x30A4;&#x30D7;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;Watchers&quot;,
          &quot;name&quot;: &quot;watchers&quot;,
          &quot;desc&quot;: &quot;<!--\nYou can watch expression and variable values while debugging your code.\nOn every breakpoint each expression from the watchers list will be evaluated\nin the current context and displayed just before the breakpoint's source code\nlisting.\n-->\n\n<p>&#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x4E2D;&#x306B;&#x5F0F;&#x3084;&#x5909;&#x6570;&#x306E;&#x5024;&#x3092;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x30EA;&#x30B9;&#x30C8;&#x306E;&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x5F0F;&#x306F;\n&#x73FE;&#x5728;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x3001;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x524D;&#x306B;\n&#x8868;&#x793A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nTo start watching an expression, type `watch(\"my_expression\")`. `watchers`\nprints the active watchers. To remove a watcher, type\n`unwatch(\"my_expression\")`.\n-->\n\n<p>&#x5F0F;&#x306E;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x3092;&#x958B;&#x59CB;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;<code>watch(&quot;my_expression&quot;)</code> &#x3092;&#x30BF;&#x30A4;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>watchers</code> &#x306F;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x306E;&#x4E00;&#x89A7;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x3092;&#x89E3;&#x9664;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;<code>unwatch(&quot;my_expression&quot;)</code> &#x3068;&#x30BF;&#x30A4;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;displayName&quot;: &quot;Watchers&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Commands reference&quot;,
          &quot;name&quot;: &quot;commands_reference&quot;,
          &quot;modules&quot;: [
            {
              &quot;textRaw&quot;: &quot;Stepping&quot;,
              &quot;name&quot;: &quot;stepping&quot;,
              &quot;desc&quot;: &quot;<!--\n* `cont`, `c` - Continue execution\n* `next`, `n` - Step next\n* `step`, `s` - Step in\n* `out`, `o` - Step out\n* `pause` - Pause running code (like pause button in Developer Tools)\n-->\n\n<ul>\n<li><code>cont</code>, <code>c</code> - &#x5B9F;&#x884C;&#x3092;&#x7D99;&#x7D9A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>next</code>, <code>n</code> - &#x6B21;&#x306E;&#x884C;&#x3078;&#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>step</code>, <code>s</code> - &#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x30A4;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>out</code>, <code>o</code> - &#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x30A2;&#x30A6;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>pause</code> - &#x30B3;&#x30FC;&#x30C9;&#x306E;&#x5B9F;&#x884C;&#x3092;&#x4E2D;&#x65AD;&#x3057;&#x307E;&#x3059; (Developer Tools &#x306E; pause\n&#x30DC;&#x30BF;&#x30F3;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Stepping&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Breakpoints&quot;,
              &quot;name&quot;: &quot;breakpoints&quot;,
              &quot;desc&quot;: &quot;<!--\n* `setBreakpoint()`, `sb()` - Set breakpoint on current line\n* `setBreakpoint(line)`, `sb(line)` - Set breakpoint on specific line\n* `setBreakpoint('fn()')`, `sb(...)` - Set breakpoint on a first statement in\nfunctions body\n* `setBreakpoint('script.js', 1)`, `sb(...)` - Set breakpoint on first line of\nscript.js\n* `clearBreakpoint`, `cb(...)` - Clear breakpoint\n-->\n\n<ul>\n<li><code>setBreakpoint()</code>, <code>sb()</code> - &#x73FE;&#x5728;&#x884C;&#x306B;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>setBreakpoint(line)</code>, <code>sb(line)</code> - &#x6307;&#x5B9A;&#x3057;&#x305F;&#x884C;&#x306B;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>setBreakpoint(&apos;fn()&apos;)</code>, <code>sb(...)</code> - &#x6307;&#x5B9A;&#x3057;&#x305F;&#x95A2;&#x6570;&#x306E;&#x5148;&#x982D;&#x884C;&#x306B;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;</li>\n<li><code>setBreakpoint(&apos;script.js&apos;, 1)</code>, <code>sb(...)</code> - &#x6307;&#x5B9A;&#x3057;&#x305F;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x884C;&#x306B;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>clearBreakpoint</code>, <code>cb(...)</code> - &#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x524A;&#x9664;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nIt is also possible to set a breakpoint in a file (module) that\nisn't loaded yet:\n-->\n\n<p>&#x307E;&#x3060;&#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x30D5;&#x30A1;&#x30A4;&#x30EB; (&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;) &#x306B;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;\n&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>% ./node debug test/fixtures/break-in-module/main.js\n&lt; debugger listening on port 5858\nconnecting to port 5858... ok\nbreak in test/fixtures/break-in-module/main.js:1\n  1 var mod = require(&apos;./mod.js&apos;);\n  2 mod.hello();\n  3 mod.hello();\ndebug&gt; setBreakpoint(&apos;mod.js&apos;, 23)\nWarning: script &apos;mod.js&apos; was not loaded yet.\n  1 var mod = require(&apos;./mod.js&apos;);\n  2 mod.hello();\n  3 mod.hello();\ndebug&gt; c\nbreak in test/fixtures/break-in-module/mod.js:23\n 21\n 22 exports.hello = function() {\n 23   return &apos;hello from module&apos;;\n 24 };\n 25\ndebug&gt;</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Breakpoints&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Info&quot;,
              &quot;name&quot;: &quot;info&quot;,
              &quot;desc&quot;: &quot;<!--\n* `backtrace`, `bt` - Print backtrace of current execution frame\n* `list(5)` - List scripts source code with 5 line context (5 lines before and\nafter)\n* `watch(expr)` - Add expression to watch list\n* `unwatch(expr)` - Remove expression from watch list\n* `watchers` - List all watchers and their values (automatically listed on each\nbreakpoint)\n* `repl` - Open debugger's repl for evaluation in debugging script's context\n-->\n\n<ul>\n<li><code>backtrace</code>, <code>bt</code> - &#x73FE;&#x5728;&#x306E;&#x5B9F;&#x884C;&#x30D5;&#x30EC;&#x30FC;&#x30E0;&#x306E;&#x30D0;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>list(5)</code> - &#x73FE;&#x5728;&#x306E;&#x884C;&#x306E;&#x524D;&#x5F8C;&#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059; (&#x4F8B;&#x3067;&#x306F;&#x524D;&#x5F8C;&#x3068;&#x3082; 5 &#x884C;&#x304C;&#x8868;&#x793A;&#x3055;&#x308C;&#x307E;&#x3059;)&#x3002;</li>\n<li><code>watch(expr)</code> - &#x5F0F;&#x3092;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>unwatch(expr)</code> - &#x5F0F;&#x3092;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x30EA;&#x30B9;&#x30C8;&#x304B;&#x3089;&#x524A;&#x9664;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>watchers</code> - &#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x3057;&#x3066;&#x3044;&#x308B;&#x5168;&#x3066;&#x306E;&#x5F0F;&#x3068;&#x305D;&#x306E;&#x5024;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059; (&#x5404;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3067;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x8868;&#x793A;&#x3055;&#x308C;&#x307E;&#x3059;)&#x3002;</li>\n<li><code>repl</code> - &#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3068;&#x3059;&#x308B; REPL &#x3092;&#x958B;&#x304D;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Info&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Execution control&quot;,
              &quot;name&quot;: &quot;execution_control&quot;,
              &quot;desc&quot;: &quot;<!--\n* `run` - Run script (automatically runs on debugger's start)\n* `restart` - Restart script\n* `kill` - Kill script\n-->\n\n<ul>\n<li><code>run</code> - &#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059; (&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x958B;&#x59CB;&#x3059;&#x308B;&#x3068;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;)&#x3002;</li>\n<li><code>restart</code> - &#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x518D;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>kill</code> - &#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Execution control&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Various&quot;,
              &quot;name&quot;: &quot;various&quot;,
              &quot;desc&quot;: &quot;<!--\n* `scripts` - List all loaded scripts\n* `version` - Display v8's version\n-->\n\n<ul>\n<li><code>scripts</code> - &#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x5168;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x306E;&#x4E00;&#x89A7;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>version</code> - v8 &#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Various&quot;
            }
          ],
          &quot;type&quot;: &quot;misc&quot;,
          &quot;displayName&quot;: &quot;Commands reference&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Advanced Usage&quot;,
          &quot;name&quot;: &quot;advanced_usage&quot;,
          &quot;desc&quot;: &quot;<!--\nThe V8 debugger can be enabled and accessed either by starting Node with\nthe `--debug` command-line flag or by signaling an existing Node process\nwith `SIGUSR1`.\n-->\n\n<p>V8 &#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x306F; Node &#x3092;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x306E; <code>--debug</code> &#x30D5;&#x30E9;&#x30B0;&#x3067;&#x8D77;&#x52D5;&#x3057;&#x305F;&#x308A;&#x3001;&#x8D77;&#x52D5;&#x6E08;&#x307F;&#x306E; Node &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B; <code>SIGUSR1</code> &#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x308B;&#x3053;&#x3068;&#x3067;&#x3082;&#x6709;&#x52B9;&#x306B;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nOnce a process has been set in debug mode with this it can be connected to\nwith the node debugger. Either connect to the `pid` or the URI to the debugger.\nThe syntax is:\n-->\n\n<p>&#x3053;&#x308C;&#x306B;&#x3088;&#x3063;&#x3066;&#x4E00;&#x5EA6;&#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x30E2;&#x30FC;&#x30C9;&#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x3001;\n<code>pid</code> &#x307E;&#x305F;&#x306F; URI &#x306E;&#x3069;&#x3061;&#x3089;&#x3067;&#x3082; node &#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x5F62;&#x5F0F;&#x306F;:\n\n</p>\n<!--\n* `node debug -p <pid>` - Connects to the process via the `pid`\n* `node debug <URI>` - Connects to the process via the URI such as localhost:5858\n-->\n\n<ul>\n<li><code>node debug -p &lt;pid&gt;</code> - <code>pid</code> &#x3092;&#x901A;&#x3058;&#x3066;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x63A5;&#x7D9A;</li>\n<li><code>node debug &lt;URI&gt; - </code>localhost:585` &#x306E;&#x3088;&#x3046;&#x306A; URI &#x3092;&#x901A;&#x3058;&#x3066;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x63A5;&#x7D9A;</li>\n</ul>\n&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;displayName&quot;: &quot;Advanced Usage&quot;
        }
      ]
    }
  ]
}
