{
  &quot;source&quot;: &quot;doc/api/process.markdown&quot;,
  &quot;globals&quot;: [
    {
      &quot;textRaw&quot;: &quot;process&quot;,
      &quot;name&quot;: &quot;process&quot;,
      &quot;type&quot;: &quot;global&quot;,
      &quot;desc&quot;: &quot;<!--\nThe `process` object is a global object and can be accessed from anywhere.\nIt is an instance of [EventEmitter][].\n-->\n\n<p><code>process</code> &#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3001;&#x3069;&#x3053;&#x304B;&#x3089;&#x3067;&#x3082;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; [EventEmitter][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
      &quot;events&quot;: [
        {
          &quot;textRaw&quot;: &quot;Event: &apos;exit&apos;&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;name&quot;: &quot;exit&quot;,
          &quot;desc&quot;: &quot;<!--\nEmitted when the process is about to exit. There is no way to prevent the\nexiting of the event loop at this point, and once all `exit` listeners have\nfinished running the process will exit. Therefore you **must** only perform\n**synchronous** operations in this handler. This is a good hook to perform\nchecks on the module's state (like for unit tests). The callback takes one\nargument, the code the process is exiting with.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x4F4D;&#x7F6E;&#x304B;&#x3089;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x3092;&#x629C;&#x3051;&#x308B;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x65B9;&#x6CD5;&#x306F;&#x306A;&#x304F;&#x3001;&#x5168;&#x3066;&#x306E; <code>&apos;exit&apos;</code>\n&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x306E;&#x5B9F;&#x884C;&#x304C;&#x5B8C;&#x4E86;&#x3059;&#x308B;&#x3068;&#x3001;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5F93;&#x3063;&#x3066;&#x3001;&#x3053;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3067;&#x3067;&#x304D;&#x308B;&#x3053;&#x3068;&#x306F; <strong>&#x540C;&#x671F;</strong> &#x64CD;&#x4F5C; <strong>&#x3060;&#x3051;</strong> &#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; (&#x30E6;&#x30CB;&#x30C3;&#x30C8;&#x30C6;&#x30B9;&#x30C8;&#x306E;&#x3088;&#x3046;&#x306B;) &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x72B6;&#x614B;&#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x306E;&#x306B;&#x9069;&#x3057;&#x305F;\n&#x30D5;&#x30C3;&#x30AF;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x552F;&#x4E00;&#x306E;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of listening for `exit`:\n-->\n\n<p><code>exit</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.on(&apos;exit&apos;, function(code) {\n  // do *NOT* do this\n  setTimeout(function() {\n    console.log(&apos;This will not run&apos;);\n  }, 0);\n  console.log(&apos;About to exit with code:&apos;, code);\n});</code></pre>\n&quot;,
          &quot;params&quot;: []
        },
        {
          &quot;textRaw&quot;: &quot;Event: &apos;uncaughtException&apos;&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;name&quot;: &quot;uncaughtException&quot;,
          &quot;desc&quot;: &quot;<!--\nEmitted when an exception bubbles all the way back to the event loop. If a\nlistener is added for this exception, the default action (which is to print\na stack trace and exit) will not occur.\n-->\n\n<p>&#x767A;&#x751F;&#x3057;&#x305F;&#x4F8B;&#x5916;&#x304C;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x307E;&#x3067;&#x305F;&#x3069;&#x308A;&#x7740;&#x3044;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x3053;&#x306E;&#x4F8B;&#x5916;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x304C;&#x52A0;&#x3048;&#x3089;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;&#x3001;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x52D5;&#x4F5C; (&#x305D;&#x308C;&#x306F;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3092;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;) &#x306F;&#x8D77;&#x3053;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nExample of listening for `uncaughtException`:\n-->\n\n<p><code>uncaughtException</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.on(&apos;uncaughtException&apos;, function(err) {\n  console.log(&apos;Caught exception: &apos; + err);\n});\n\nsetTimeout(function() {\n  console.log(&apos;This will still run.&apos;);\n}, 500);\n\n// Intentionally cause an exception, but don&apos;t catch it.\nnonexistentFunc();\nconsole.log(&apos;This will not run.&apos;);</code></pre>\n<!--\nNote that `uncaughtException` is a very crude mechanism for exception\nhandling and may be removed in the future.\n-->\n\n<p><code>uncaughtException</code> &#x306F;&#x4F8B;&#x5916;&#x3092;&#x6271;&#x3046;&#x3068;&#x3066;&#x3082;&#x8352;&#x524A;&#x308A;&#x306A;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x3067;&#x3042;&#x308A;&#x3001;\n&#x5C06;&#x6765;&#x524A;&#x9664;&#x3055;&#x308C;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nDon't use it, use [domains](domain.html) instead. If you do use it, restart\nyour application after every unhandled exception!\n-->\n\n<p>&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;<a href="\&quot;domain.html\&quot;">&#x30C9;&#x30E1;&#x30A4;&#x30F3;</a> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x3092;&#x4F7F;&#x3048;&#x3070;&#x3001;&#x6355;&#x307E;&#x3048;&#x3089;&#x308C;&#x306A;&#x3044;&#x4F8B;&#x5916;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x5F8C;&#x3067;&#x3082;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3092;\n&#x518D;&#x958B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#xFF01;\n\n</p>\n<!--\nDo *not* use it as the node.js equivalent of `On Error Resume Next`. An\nunhandled exception means your application - and by extension node.js itself -\nis in an undefined state. Blindly resuming means *anything* could happen.\n-->\n\n<p>&#x3053;&#x308C;&#x3092; Node.js &#x306B;&#x304A;&#x3051;&#x308B; <code>On Error Resume Next</code> &#x3068;&#x3057;&#x3066; <em>&#x4F7F;&#x308F;&#x306A;&#x3044;&#x3067;</em> &#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x6355;&#x307E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x4F8B;&#x5916;&#x306F;&#x3001;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;\n- &#x304A;&#x3088;&#x3073; Node.js &#x81EA;&#x8EAB;&#x306E;&#x62E1;&#x5F35; - &#x304C;&#x672A;&#x5B9A;&#x7FA9;&#x306E;&#x72B6;&#x614B;&#x3068;&#x306A;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3084;&#x307F;&#x304F;&#x3082;&#x306A;&#x518D;&#x958B;&#x306F; <em>&#x3069;&#x3093;&#x306A;&#x3053;&#x3068;&#x3067;&#x3082;</em> &#x8D77;&#x3053;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThink of resuming as pulling the power cord when you are upgrading your system.\nNine out of ten times nothing happens - but the 10th time, your system is bust.\n-->\n\n<p>&#x96FB;&#x6E90;&#x3092;&#x5F15;&#x304D;&#x629C;&#x304D;&#x306A;&#x304C;&#x3089;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x30A2;&#x30C3;&#x30D7;&#x30B0;&#x30EC;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;\n&#x60F3;&#x50CF;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n10 &#x56DE;&#x4E2D; 9 &#x56DE;&#x306F;&#x4F55;&#x3082;&#x8D77;&#x3053;&#x308A;&#x307E;&#x305B;&#x3093;\n- &#x3057;&#x304B;&#x3057; 10 &#x56DE;&#x76EE;&#x306B;&#x306F;&#x305D;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306F;&#x4F7F;&#x3048;&#x306A;&#x304F;&#x306A;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nYou have been warned.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x8B66;&#x544A;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;params&quot;: []
        },
        {
          &quot;textRaw&quot;: &quot;Signal Events&quot;,
          &quot;name&quot;: &quot;SIGINT, SIGHUP, etc.&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;desc&quot;: &quot;<!--\nEmitted when the processes receives a signal. See sigaction(2) for a list of\nstandard POSIX signal names such as SIGINT, SIGHUP, etc.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\nSIGINT&#x3001;SIGHUP&#x3001;&#x305D;&#x306E;&#x4ED6;&#x306E; POSIX &#x6A19;&#x6E96;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x540D;&#x306E;&#x4E00;&#x89A7;&#x306B;&#x3064;&#x3044;&#x3066; &#x306F; sigaction(2) &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExample of listening for `SIGINT`:\n-->\n\n<p><code>SIGINT</code>&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>// Start reading from stdin so we don&apos;t exit.\nprocess.stdin.resume();\n\nprocess.on(&apos;SIGINT&apos;, function() {\n  console.log(&apos;Got SIGINT.  Press Control-D to exit.&apos;);\n});</code></pre>\n<!--\nAn easy way to send the `SIGINT` signal is with `Control-C` in most terminal\nprograms.\n-->\n\n<p>&#x591A;&#x304F;&#x306E;&#x7AEF;&#x672B;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067;&#x7C21;&#x5358;&#x306B; <code>SIGINT</code> &#x3092;&#x9001;&#x308B;&#x65B9;&#x6CD5;&#x306F; <code>Control-C</code> &#x3092;&#x62BC;&#x3059;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nNote:\n-->\n\n<p>&#x6CE8;&#x610F;:\n\n</p>\n<!--\n- `SIGUSR1` is reserved by node.js to start the debugger.  It's possible to\n  install a listener but that won't stop the debugger from starting.\n- `SIGTERM` and `SIGINT` have default handlers on non-Windows platforms that resets\n  the terminal mode before exiting with code `128 + signal number`. If one of\n  these signals has a listener installed, its default behaviour will be removed\n  (node will no longer exit).\n- `SIGPIPE` is ignored by default, it can have a listener installed.\n- `SIGHUP` is generated on Windows when the console window is closed, and on other\n  platforms under various similar conditions, see signal(7). It can have a\n  listener installed, however node will be unconditionally terminated by Windows\n  about 10 seconds later. On non-Windows platforms, the default behaviour of\n  `SIGHUP` is to terminate node, but once a listener has been installed its\n  default behaviour will be removed.\n- `SIGTERM` is not supported on Windows, it can be listened on.\n- `SIGINT` from the terminal is supported on all platforms, and can usually be\n  generated with `CTRL+C` (though this may be configurable). It is not generated\n  when terminal raw mode is enabled.\n- `SIGBREAK` is delivered on Windows when `CTRL+BREAK` is pressed, on non-Windows\n  platforms it can be listened on, but there is no way to send or generate it.\n- `SIGWINCH` is delivered when the console has been resized. On Windows, this will\n  only happen on write to the console when the cursor is being moved, or when a\n  readable tty is used in raw mode.\n- `SIGKILL` cannot have a listener installed, it will unconditionally terminate\n  node on all platforms.\n- `SIGSTOP` cannot have a listener installed.\n-->\n\n<ul>\n<li><code>SIGUSR1</code> &#x306F; Node.js &#x304C;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4E88;&#x7D04;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x3059;&#x304C;&#x3001;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x306E;&#x8D77;&#x52D5;&#x3092;&#x6B62;&#x3081;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n<li><code>SIGTERM</code> &#x304A;&#x3088;&#x3073; <code>SIGINT</code> &#x306F;&#x3001;Windows &#x4EE5;&#x5916;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x306F;\n<code>128</code> + &#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x756A;&#x53F7;&#x3067;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x524D;&#x306B;&#x30BF;&#x30FC;&#x30DF;&#x30CA;&#x30EB;&#x306E;&#x30E2;&#x30FC;&#x30C9;&#x3092;&#x30EA;&#x30BB;&#x30C3;&#x30C8;&#x3059;&#x308B;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x3069;&#x3061;&#x3089;&#x304B;&#x306B;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x767B;&#x9332;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;\n&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059; (node &#x306F;&#x7D42;&#x4E86;&#x3057;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;)&#x3002;</li>\n<li><code>SIGPIPE</code> &#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x3001;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGHUP</code> &#x306F; Windows &#x3067;&#x306F;&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x30A6;&#x30A3;&#x30F3;&#x30C9;&#x30A6;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x3068;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4ED6;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x3082;&#x540C;&#x69D8;&#x306E;&#x6761;&#x4EF6;&#x3067;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;&#x8A73;&#x7D30;&#x306F; signal(7)\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x3059;&#x304C;&#x3001;Windows &#x3067;&#x306F;&#x7D04; 10 &#x79D2;&#x5F8C;&#x306B; node &#x306F;&#x7121;&#x6761;&#x4EF6;&#x306B;\nWindows &#x306B;&#x3088;&#x3063;&#x3066;&#x7D42;&#x4E86;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\nWindows &#x4EE5;&#x5916;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x306F;&#x3001;<code>SIGHUP</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;\nnode&#x3092;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x304C;&#x3001;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3068;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;\n&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGTERM</code> &#x306F; Windows &#x3067;&#x306F;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x3001;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;</li>\n<li>&#x7AEF;&#x672B;&#x304B;&#x3089;&#x306E; <code>SIGINT</code> &#x306F;&#x5168;&#x3066;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3001;&#x901A;&#x5E38; <code>CTRL+C</code>\n(&#x304A;&#x305D;&#x3089;&#x304F;&#x8A2D;&#x5B9A;&#x53EF;&#x80FD;&#x3067;&#x3057;&#x3087;&#x3046;) &#x306B;&#x3088;&#x3063;&#x3066;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30BF;&#x30FC;&#x30DF;&#x30CA;&#x30EB;&#x304C; raw &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x5834;&#x5408;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n<li><code>SIGBREAK</code> &#x306F; Windows &#x306B;&#x304A;&#x3044;&#x3066; <code>CTRL+BREAK</code> &#x304C;&#x63A8;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\nWindows &#x4EE5;&#x5916;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x3082;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x305D;&#x308C;&#x3092;&#x751F;&#x6210;&#x3057;&#x305F;&#x308A;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n<li><code>SIGWINCH</code> &#x306F;&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x304C;&#x5909;&#x66F4;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\nWindows &#x3067;&#x306F;&#x3001;&#x30AB;&#x30FC;&#x30BD;&#x30EB;&#x304C;&#x79FB;&#x52D5;&#x3059;&#x308B;&#x304B;&#x3001;tty &#x304C; raw &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x5834;&#x5408;&#x306B;&#x3001;\n&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x3078;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3068;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGKILL</code> &#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x7D44;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x5168;&#x3066;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067; node &#x3092;&#x7121;&#x6761;&#x4EF6;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGSTOP</code> &#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x7D44;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n</ul>\n<!--\nNote that Windows does not support sending Signals, but node offers some\nemulation with `process.kill()`, and `child_process.kill()`:\n- Sending signal `0` can be used to search for the existence of a process\n- Sending `SIGINT`, `SIGTERM`, and `SIGKILL` cause the unconditional exit of the\n  target process.\n-->\n\n<p>Windows &#x306F;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x9001;&#x4FE1;&#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;node&#x306F;<code>process.kill()</code> &#x3084;\n<code>child_process.kill()</code> &#x3092;&#x30A8;&#x30DF;&#x30E5;&#x30EC;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<ul>\n<li>&#x30B7;&#x30B0;&#x30CA;&#x30EB; <code>0</code> &#x306F;&#x65E2;&#x5B58;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x691C;&#x7D22;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;</li>\n<li><code>SIGINT</code>&#x3001;<code>SIGTERM</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>SIGKILL</code> &#x306F;&#x3001;&#x30BF;&#x30FC;&#x30B2;&#x30C3;&#x30C8;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7121;&#x6761;&#x4EF6;&#x306B;\n&#x7D42;&#x4E86;&#x3059;&#x308B;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
          &quot;params&quot;: []
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;process.stdout&quot;,
          &quot;name&quot;: &quot;stdout&quot;,
          &quot;desc&quot;: &quot;<!--\nA `Writable Stream` to `stdout`.\n-->\n\n<p><code>stdout</code> &#x306B;&#x5BFE;&#x3059;&#x308B; <code>Writable Stream</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: the definition of `console.log`\n-->\n\n<p>&#x4F8B;: <code>console.log</code> &#x306E;&#x5B9A;&#x7FA9;\n\n</p>\n<pre><code>console.log = function(d) {\n  process.stdout.write(d + &apos;\\n&apos;);\n};</code></pre>\n<!--\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.\n-->\n\n<p><code>process.stderr</code> &#x3068; <code>process.stdout</code> &#x306F; Node &#x306E;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x7570;&#x306A;&#x308A;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x3078;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306F;&#x901A;&#x5E38;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n- They are blocking in the case that they refer to regular files or TTY file\n  descriptors.\n- In the case they refer to pipes:\n  - They are blocking in Linux/Unix.\n  - They are non-blocking like other streams in Windows.\n-->\n\n<ul>\n<li>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;&#x901A;&#x5E38;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3084; TTY &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;:<ul>\n<li>Linux/Unix &#x3067;&#x306F;&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>Windows &#x3067;&#x306F;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x540C;&#x69D8;&#x306B;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n</ul>\n</li>\n</ul>\n<!--\nTo check if Node is being run in a TTY context, read the `isTTY` property\non `process.stderr`, `process.stdout`, or `process.stdin`:\n-->\n\n<p>Node &#x304C; TTY &#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;\n<code>process.stderr</code>, <code>process.stdout</code>, &#x307E;&#x305F;&#x306F; <code>process.stdin</code> &#x306E;\n<code>isTTY</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>$ node -p &quot;Boolean(process.stdin.isTTY)&quot;\ntrue\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\nfalse\n\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse</code></pre>\n<!--\nSee [the tty docs](tty.html#tty_tty) for more information.\n-->\n\n<p>&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F; <a href="\&quot;tty.html#tty_tty\&quot;">the tty docs</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.stderr&quot;,
          &quot;name&quot;: &quot;stderr&quot;,
          &quot;desc&quot;: &quot;<!--\nA writable stream to stderr.\n\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.\n-->\n\n<p><code>stderr</code> &#x306B;&#x5BFE;&#x3059;&#x308B; <code>Writable Stream</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>process.stderr</code> &#x3068; <code>process.stdout</code> &#x306F; Node &#x306E;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x7570;&#x306A;&#x308A;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x3078;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306F;&#x901A;&#x5E38;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n- They are blocking in the case that they refer to regular files or TTY file\n  descriptors.\n- In the case they refer to pipes:\n  - They are blocking in Linux/Unix.\n  - They are non-blocking like other streams in Windows.\n-->\n\n<ul>\n<li>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;&#x901A;&#x5E38;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3084; TTY &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;:<ul>\n<li>Linux/Unix &#x3067;&#x306F;&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>Windows &#x3067;&#x306F;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x540C;&#x69D8;&#x306B;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n</ul>\n</li>\n</ul>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.stdin&quot;,
          &quot;name&quot;: &quot;stdin&quot;,
          &quot;desc&quot;: &quot;<!--\nA `Readable Stream` for stdin. \n-->\n\n<p>&#x6A19;&#x6E96;&#x5165;&#x529B;&#x306B;&#x5BFE;&#x3059;&#x308B; <code>Readable Stream</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of opening standard input and listening for both events:\n-->\n\n<p>&#x6A19;&#x6E96;&#x5165;&#x529B;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x3066;&#x4E8C;&#x3064;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.stdin.setEncoding(&apos;utf8&apos;);\n\nprocess.stdin.on(&apos;readable&apos;, function(chunk) {\n  var chunk = process.stdin.read();\n  if (chunk !== null) {\n    process.stdout.write(&apos;data: &apos; + chunk);\n  }\n});\n\nprocess.stdin.on(&apos;end&apos;, function() {\n  process.stdout.write(&apos;end&apos;);\n});</code></pre>\n<!--\nAs a Stream, `process.stdin` can also be used in \"old\" mode that is compatible\nwith scripts written for node prior v0.10.\nFor more information see\n[Stream compatibility](stream.html#stream_compatibility_with_older_node_versions).\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3042;&#x308B;&#x305F;&#x3081;&#x3001;<code>process.stdin</code> &#x306F; v0.10 &#x4EE5;&#x524D;&#x306E; node &#x5411;&#x3051;&#x306B;&#x66F8;&#x304B;&#x308C;&#x305F;\n&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3068;&#x4E92;&#x63DB;&#x6027;&#x306E;&#x3042;&#x308B; &quot;old&quot; &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306A;&#x60C5;&#x5831;&#x306F;\n<a href="\&quot;stream.html#stream_compatibility_with_older_node_versions\&quot;">Stream compatibility</a>\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nIn \"old\" Streams mode the stdin stream is paused by default, so one\nmust call `process.stdin.resume()` to read from it. Note also that calling\n`process.stdin.resume()` itself would switch stream to \"old\" mode.\n-->\n\n<p>&quot;old&quot; &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x306F;&#x6A19;&#x6E96;&#x5165;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x4E2D;&#x65AD;&#x72B6;&#x614B;&#x306E;&#x305F;&#x3081;&#x3001;\n&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x306B;&#x306F; <code>process.stdin.resume()</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x304C;&#x5FC5;&#x9808;&#x3067;&#x3059;&#x3002;\n<code>process.stdin.resume()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x305D;&#x308C;&#x81EA;&#x4F53;&#x304C;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&quot;old&quot; &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nIf you are starting a new project you should prefer a more recent \"new\" Streams\nmode over \"old\" one.\n-->\n\n<p>&#x3082;&#x3057;&#x65B0;&#x3057;&#x3044;&#x30D7;&#x30ED;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x59CB;&#x3081;&#x308B;&#x306A;&#x3089;&#x3001;&quot;old&quot; &#x3088;&#x308A;&#x3082;\n&quot;new&quot; &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x597D;&#x3080;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.argv&quot;,
          &quot;name&quot;: &quot;argv&quot;,
          &quot;desc&quot;: &quot;<!--\nAn array containing the command line arguments.  The first element will be\n'node', the second element will be the name of the JavaScript file.  The\nnext elements will be any additional command line arguments.\n-->\n\n<p>&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x5F15;&#x6570;&#x3092;&#x542B;&#x3080;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x6700;&#x521D;&#x306E;&#x8981;&#x7D20;&#x306F; &apos;node&apos;&#x3001;2 &#x756A;&#x76EE;&#x306E;&#x8981;&#x7D20;&#x306F; JavaScript &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x540D;&#x524D;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x5F8C;&#x306E;&#x8981;&#x7D20;&#x306F;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x306E;&#x8FFD;&#x52A0;&#x306E;&#x5F15;&#x6570;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>// print process.argv\nprocess.argv.forEach(function(val, index, array) {\n  console.log(index + &apos;: &apos; + val);\n});</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x51FA;&#x529B;&#x3055;&#x308C;&#x307E;&#x3059;:\n\n</p>\n<pre><code>$ node process-2.js one two=three four\n0: node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.execPath&quot;,
          &quot;name&quot;: &quot;execPath&quot;,
          &quot;desc&quot;: &quot;<!--\nThis is the absolute pathname of the executable that started the process.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x3088;&#x3063;&#x3066;&#x958B;&#x59CB;&#x3055;&#x308C;&#x305F;&#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>/usr/local/bin/node</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.execArgv&quot;,
          &quot;name&quot;: &quot;execArgv&quot;,
          &quot;desc&quot;: &quot;<!--\nThis is the set of node-specific command line options from the\nexecutable that started the process.  These options do not show up in\n`process.argv`, and do not include the node executable, the name of\nthe script, or any options following the script name. These options\nare useful in order to spawn child processes with the same execution\nenvironment as the parent.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x8D77;&#x52D5;&#x6642;&#x306B;&#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; node &#x56FA;&#x6709;&#x306E;\n&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x30FB;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x7FA4;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F; <code>process.argv</code> &#x306B;&#x306F;&#x73FE;&#x308C;&#x305A;&#x3001;node &#x306E;&#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3084;\n&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x540D;&#x3001;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x540D;&#x306B;&#x7D9A;&#x304F;&#x3069;&#x3093;&#x306A;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3082;&#x542B;&#x307E;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x540C;&#x3058;&#x5B9F;&#x884C;&#x74B0;&#x5883;&#x3092;&#x6301;&#x3064;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n&#x5F79;&#x306B;&#x7ACB;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>$ node --harmony script.js --version</code></pre>\n<!--\nresults in process.execArgv:\n-->\n\n<p><code>process.execArgv</code> &#x306E;&#x7D50;&#x679C;:\n\n</p>\n<pre><code>[&apos;--harmony&apos;]</code></pre>\n<!--\nand process.argv:\n-->\n\n<p>&#x305D;&#x3057;&#x3066; <code>process.argv</code> &#x306E;&#x7D50;&#x679C;:\n\n</p>\n<pre><code>[&apos;/usr/local/bin/node&apos;, &apos;script.js&apos;, &apos;--version&apos;]</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.env&quot;,
          &quot;name&quot;: &quot;env&quot;,
          &quot;desc&quot;: &quot;<!--\nAn object containing the user environment. See environ(7).\n-->\n\n<p>&#x30E6;&#x30FC;&#x30B6;&#x306E;&#x74B0;&#x5883;&#x3092;&#x542B;&#x3080;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;environ(7) &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.version&quot;,
          &quot;name&quot;: &quot;version&quot;,
          &quot;desc&quot;: &quot;<!--\nA compiled-in property that exposes `NODE_VERSION`.\n-->\n\n<p><code>NODE_VERSION</code> &#x3092;&#x63D0;&#x793A;&#x3059;&#x308B;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x6E08;&#x307F;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;Version: &apos; + process.version);</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.versions&quot;,
          &quot;name&quot;: &quot;versions&quot;,
          &quot;desc&quot;: &quot;<!--\nA property exposing version strings of node and its dependencies.\n-->\n\n<p>node &#x3068;&#x4F9D;&#x5B58;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x6587;&#x5B57;&#x5217;&#x3092;&#x63D0;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(process.versions);</code></pre>\n<!--\nWill print something like:\n-->\n\n<p>&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x3088;&#x3046;&#x306B;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>{ http_parser: &apos;1.0&apos;,\n  node: &apos;0.10.4&apos;,\n  v8: &apos;3.14.5.8&apos;,\n  ares: &apos;1.9.0-DEV&apos;,\n  uv: &apos;0.10.3&apos;,\n  zlib: &apos;1.2.3&apos;,\n  modules: &apos;11&apos;,\n  openssl: &apos;1.0.1e&apos; }</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.config&quot;,
          &quot;name&quot;: &quot;config&quot;,
          &quot;desc&quot;: &quot;<!--\nAn Object containing the JavaScript representation of the configure options\nthat were used to compile the current node executable. This is the same as\nthe \"config.gypi\" file that was produced when running the `./configure` script.\n\nAn example of the possible output looks like:\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;node&#x5B9F;&#x884C;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x305F;&#x969B;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x305F; configure &#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;\nJavaScript &#x3067;&#x8868;&#x73FE;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4FDD;&#x6301;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>./configure</code> &#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x5B9F;&#x884C;&#x3057;&#x305F;&#x969B;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F; &quot;cofnig.gypi&quot;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x5B9F;&#x969B;&#x306E;&#x51FA;&#x529B;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code>{ target_defaults:\n   { cflags: [],\n     default_configuration: &apos;Release&apos;,\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   { host_arch: &apos;x64&apos;,\n     node_install_npm: &apos;true&apos;,\n     node_prefix: &apos;&apos;,\n     node_shared_cares: &apos;false&apos;,\n     node_shared_http_parser: &apos;false&apos;,\n     node_shared_libuv: &apos;false&apos;,\n     node_shared_v8: &apos;false&apos;,\n     node_shared_zlib: &apos;false&apos;,\n     node_use_dtrace: &apos;false&apos;,\n     node_use_openssl: &apos;true&apos;,\n     node_shared_openssl: &apos;false&apos;,\n     strict_aliasing: &apos;true&apos;,\n     target_arch: &apos;x64&apos;,\n     v8_use_snapshot: &apos;true&apos; } }</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.pid&quot;,
          &quot;name&quot;: &quot;pid&quot;,
          &quot;desc&quot;: &quot;<!--\nThe PID of the process.\n-->\n\n<p>&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; PID &#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;This process is pid &apos; + process.pid);</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.title&quot;,
          &quot;name&quot;: &quot;title&quot;,
          &quot;desc&quot;: &quot;<!--\nGetter/setter to set what is displayed in 'ps'.\n-->\n\n<p>&apos;ps&apos; &#x3067;&#x3069;&#x306E;&#x3088;&#x3046;&#x8868;&#x793A;&#x3055;&#x308C;&#x308B;&#x304B;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E; getter/setter &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nWhen used as a setter, the maximum length is platform-specific and probably\nshort.\n-->\n\n<p>setter &#x304C;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;&#x305D;&#x306E;&#x6700;&#x5927;&#x9577;&#x306F;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x4F9D;&#x5B58;&#x3067;&#x3001;&#x304A;&#x305D;&#x3089;&#x304F;&#x77ED;&#x3044;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nOn Linux and OS X, it's limited to the size of the binary name plus the\nlength of the command line arguments because it overwrites the argv memory.\n-->\n\n<p>Linux &#x3068; OS X &#x3067;&#x306F;&#x3001;&#x305D;&#x308C;&#x306F; argv &#x306E;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x4E0A;&#x66F8;&#x304D;&#x3059;&#x308B;&#x305F;&#x3081;&#x3001;\n&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x540D;&#x306B;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x5F15;&#x6570;&#x3092;&#x52A0;&#x3048;&#x305F;&#x3082;&#x306E;&#x306B;&#x5236;&#x9650;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nv0.8 allowed for longer process title strings by also overwriting the environ\nmemory but that was potentially insecure/confusing in some (rather obscure)\ncases.\n-->\n\n<p>v0.8 &#x306F;&#x3088;&#x308A;&#x9577;&#x3044;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x30BF;&#x30A4;&#x30C8;&#x30EB;&#x6587;&#x5B57;&#x5217;&#x3067;&#x74B0;&#x5883;&#x3092;&#x4E0A;&#x66F8;&#x304D;&#x3057;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x304C;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E; (&#x306F;&#x3063;&#x304D;&#x308A;&#x3057;&#x306A;&#x3044;) &#x30B1;&#x30FC;&#x30B9;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;\n&#x6F5C;&#x5728;&#x7684;&#x306B;&#x5371;&#x967A;&#x3067;&#x6DF7;&#x4E71;&#x3057;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.arch&quot;,
          &quot;name&quot;: &quot;arch&quot;,
          &quot;desc&quot;: &quot;<!--\nWhat processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n-->\n\n<p>&#x5B9F;&#x884C;&#x3057;&#x3066;&#x3044;&#x308B;&#x30D7;&#x30ED;&#x30BB;&#x30C3;&#x30B5;&#x306E;&#x30A2;&#x30FC;&#x30AD;&#x30C6;&#x30AF;&#x30C1;&#x30E3;: <code>&apos;arm&apos;</code>&#x3001;<code>&apos;ia32&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F;\n<code>&apos;x64&apos;</code>&#x3002;\n\n</p>\n<pre><code>console.log(&apos;This processor architecture is &apos; + process.arch);</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.platform&quot;,
          &quot;name&quot;: &quot;platform&quot;,
          &quot;desc&quot;: &quot;<!--\nWhat platform you're running on:\n`'darwin'`, `'freebsd'`, `'linux'`, `'sunos'` or `'win32'`\n-->\n\n<p>&#x3069;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x52D5;&#x3044;&#x3066;&#x3044;&#x308B;&#x304B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;:\n<code>&apos;darwin&apos;</code>&#x3001;<code>&apos;freebsd&apos;</code>&#x3001;<code>&apos;linux&apos;</code>&#x3001;<code>&apos;sunos&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;win32&apos;</code>\n\n</p>\n<pre><code>console.log(&apos;This platform is &apos; + process.platform);</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;`maxTickDepth` {Number} Default = 1000 &quot;,
          &quot;name&quot;: &quot;maxTickDepth&quot;,
          &quot;desc&quot;: &quot;<!--\nCallbacks passed to `process.nextTick` will *usually* be called at the\nend of the current flow of execution, and are thus approximately as fast\nas calling a function synchronously.  Left unchecked, this would starve\nthe event loop, preventing any I/O from occurring.\n-->\n\n<p><code>process.nextTick()</code> &#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x3001;<em>&#x901A;&#x5E38;</em> &#x73FE;&#x5728;&#x306E;&#x5B9F;&#x884C;&#x30D5;&#x30ED;&#x30FC;&#x306E;\n&#x5F8C;&#x3067;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3001;&#x305D;&#x308C;&#x306F;&#x95A2;&#x6570;&#x3092;&#x540C;&#x671F;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3059;&#x306E;&#x3068;&#x540C;&#x3058;&#x304F;&#x3089;&#x3044;&#x9AD8;&#x901F;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3092;&#x653E;&#x7F6E;&#x3059;&#x308B;&#x3068;&#x3042;&#x3089;&#x3086;&#x308B; I/O &#x304C;&#x963B;&#x307E;&#x308C;&#x3001;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x306F;&#x98E2;&#x9913;&#x72B6;&#x614B;&#x3068;&#x306A;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nConsider this code:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x8003;&#x3048;&#x3066;&#x307F;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>process.nextTick(function foo() {\n  process.nextTick(foo);\n});</code></pre>\n<!--\nIn order to avoid the situation where Node is blocked by an infinite\nloop of recursive series of nextTick calls, it defers to allow some I/O\nto be done every so often.\n-->\n\n<p>nextTick &#x306E;&#x518D;&#x5E30;&#x304C;&#x9023;&#x9396;&#x3059;&#x308B;&#x7121;&#x9650;&#x30EB;&#x30FC;&#x30D7;&#x306B;&#x3088;&#x3063;&#x3066; Node &#x304C;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x72B6;&#x6CC1;&#x3092;\n&#x907F;&#x3051;&#x308B;&#x306B;&#x306F;&#x3001;&#x305D;&#x308C;&#x3092;&#x5148;&#x9001;&#x308A;&#x3057;&#x3066;&#x6642;&#x3005; I/O &#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `process.maxTickDepth` value is the maximum depth of\nnextTick-calling nextTick-callbacks that will be evaluated before\nallowing other forms of I/O to occur.\n-->\n\n<p><code>process.maxTickDepth</code> &#x306E;&#x5024;&#x306F;&#x3001;nextTick &#x304C; nextTick &#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;\n&#x6700;&#x5927;&#x306E;&#x6DF1;&#x3055;&#x3067;&#x3001;&#x4ED6;&#x306E; I/O &#x3092;&#x53EF;&#x80FD;&#x306B;&#x3059;&#x308B;&#x524D;&#x306B;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;shortDesc&quot;: &quot;Default = 1000&quot;
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;process.abort()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;abort&quot;,
          &quot;desc&quot;: &quot;<!--\nThis causes node to emit an abort. This will cause node to exit and\ngenerate a core file.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; node &#x3092;&#x30A2;&#x30DC;&#x30FC;&#x30C8;&#x3055;&#x305B;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; node &#x304C;&#x7D42;&#x4E86;&#x3057;&#x3066;&#x30B3;&#x30A2;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.chdir(directory)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;chdir&quot;,
          &quot;desc&quot;: &quot;<!--\nChanges the current working directory of the process or throws an exception if that fails.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3092;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x5931;&#x6557;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x4F8B;&#x5916;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;Starting directory: &apos; + process.cwd());\ntry {\n  process.chdir(&apos;/tmp&apos;);\n  console.log(&apos;New directory: &apos; + process.cwd());\n}\ncatch (err) {\n  console.log(&apos;chdir: &apos; + err);\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;directory&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.cwd()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;cwd&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the current working directory of the process.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;Current directory: &apos; + process.cwd());</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.exit([code])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;exit&quot;,
          &quot;desc&quot;: &quot;<!--\nEnds the process with the specified `code`.  If omitted, exit uses the\n'success' code `0`.\n-->\n\n<p>&#x6307;&#x5B9A;&#x306E; <code>code</code> &#x3067;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x7701;&#x7565;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x300C;&#x6210;&#x529F;&#x300D;&#x3092;&#x793A;&#x3059;&#x30B3;&#x30FC;&#x30C9; <code>0</code> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nTo exit with a 'failure' code:\n-->\n\n<p>&#x300C;&#x5931;&#x6557;&#x300D;&#x3092;&#x793A;&#x3059;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.exit(1);</code></pre>\n<!--\nThe shell that executed node should see the exit code as 1.\n-->\n\n<p>node &#x3092;&#x5B9F;&#x884C;&#x3057;&#x305F;&#x30B7;&#x30A7;&#x30EB;&#x3067;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x304C; 1 &#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x898B;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;code&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.getgid()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;getgid&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nGets the group identity of the process. (See getgid(2).)\nThis is the numerical group id, not the group name.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059; (getgid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x3067;&#x3001;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code>if (process.getgid) {\n  console.log(&apos;Current gid: &apos; + process.getgid());\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.setgid(id)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setgid&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSets the group identity of the process. (See setgid(2).)  This accepts either\na numerical ID or a groupname string. If a groupname is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059; (setgid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x3082;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x306E;&#x6587;&#x5B57;&#x5217;&#x306E;&#x3069;&#x3061;&#x3089;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x304C;&#x89E3;&#x6C7A;&#x3067;&#x304D;&#x308B;&#x307E;&#x3067;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>if (process.getgid &amp;&amp; process.setgid) {\n  console.log(&apos;Current gid: &apos; + process.getgid());\n  try {\n    process.setgid(501);\n    console.log(&apos;New gid: &apos; + process.getgid());\n  }\n  catch (err) {\n    console.log(&apos;Failed to set gid: &apos; + err);\n  }\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;id&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.getuid()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;getuid&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nGets the user identity of the process. (See getuid(2).)\nThis is the numerical userid, not the username.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30E6;&#x30FC;&#x30B6;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059; (getuid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B;&#x30E6;&#x30FC;&#x30B6; ID &#x3067;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code>if (process.getuid) {\n  console.log(&apos;Current uid: &apos; + process.getuid());\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.setuid(id)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setuid&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSets the user identity of the process. (See setuid(2).)  This accepts either\na numerical ID or a username string.  If a username is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30E6;&#x30FC;&#x30B6;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059; (setuid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x3082;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x306E;&#x6587;&#x5B57;&#x5217;&#x306E;&#x3069;&#x3061;&#x3089;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x304C;&#x89E3;&#x6C7A;&#x3067;&#x304D;&#x308B;&#x307E;&#x3067;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>if (process.getuid &amp;&amp; process.setuid) {\n  console.log(&apos;Current uid: &apos; + process.getuid());\n  try {\n    process.setuid(501);\n    console.log(&apos;New uid: &apos; + process.getuid());\n  }\n  catch (err) {\n    console.log(&apos;Failed to set uid: &apos; + err);\n  }\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;id&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.getgroups()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;getgroups&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIC &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3064;&#x307E;&#x308A; Windows &#x4EE5;&#x5916;)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns an array with the supplementary group IDs. POSIX leaves it unspecified\nif the effective group ID is included but node.js ensures it always is.\n-->\n\n<p>&#x88DC;&#x52A9;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x306E;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\nPOSIX &#x306F;&#x5B9F;&#x52B9;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x304C;&#x542B;&#x307E;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x660E;&#x793A;&#x3057;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;\nNode.js &#x3067;&#x306F;&#x5E38;&#x306B;&#x305D;&#x308C;&#x304C;&#x542B;&#x307E;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x4FDD;&#x8A3C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.setgroups(groups)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setgroups&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIC &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3064;&#x307E;&#x308A; Windows &#x4EE5;&#x5916;)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSets the supplementary group IDs. This is a privileged operation, meaning you\nneed to be root or have the CAP_SETGID capability.\n-->\n\n<p>&#x88DC;&#x52A9;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x7279;&#x6A29;&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3042;&#x308A;&#x3001;&#x30EB;&#x30FC;&#x30C8;&#x3067;&#x3042;&#x308B;&#x304B;&#x3001;&#x307E;&#x305F;&#x306F; CAP_SETGID &#x30B1;&#x30FC;&#x30D1;&#x30D3;&#x30EA;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3064;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe list can contain group IDs, group names or both.\n-->\n\n<p>&#x30EA;&#x30B9;&#x30C8;&#x306F;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID&#x3001;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x3001;&#x307E;&#x305F;&#x306F;&#x4E21;&#x65B9;&#x3092;&#x542B;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;groups&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.initgroups(user, extra_group)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;initgroups&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIC &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3064;&#x307E;&#x308A; Windows &#x4EE5;&#x5916;)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nReads /etc/group and initializes the group access list, using all groups of\nwhich the user is a member. This is a privileged operation, meaning you need\nto be root or have the CAP_SETGID capability.\n-->\n\n<p><code>/etc/group</code> &#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3093;&#x3067;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x30EA;&#x30B9;&#x30C8;&#x3092;&#x521D;&#x671F;&#x5316;&#x3057;&#x3001;\nuser &#x304C;&#x30E1;&#x30F3;&#x30D0;&#x30FC;&#x3067;&#x3042;&#x308B;&#x5168;&#x3066;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x7279;&#x6A29;&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3042;&#x308A;&#x3001;&#x30EB;&#x30FC;&#x30C8;&#x3067;&#x3042;&#x308B;&#x304B;&#x3001;&#x307E;&#x305F;&#x306F; CAP_SETGID &#x30B1;&#x30FC;&#x30D1;&#x30D3;&#x30EA;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3064;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`user` is a user name or user ID. `extra_group` is a group name or group ID.\n-->\n\n<p><code>user</code> &#x306F;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x307E;&#x305F;&#x306F;&#x30E6;&#x30FC;&#x30B6; ID&#x3001;\n<code>extra_group</code> &#x306F;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x307E;&#x305F;&#x306F;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSome care needs to be taken when dropping privileges. Example:\n-->\n\n<p>&#x7279;&#x6A29;&#x3092;&#x843D;&#x3068;&#x3059;&#x969B;&#x306F;&#x3001;&#x3044;&#x304F;&#x3064;&#x304B;&#x6CE8;&#x610F;&#x3059;&#x3079;&#x304D;&#x4E8B;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>console.log(process.getgroups());         // [ 0 ]\nprocess.initgroups(&apos;bnoordhuis&apos;, 1000);   // switch user\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     // drop root gid\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;user&quot;
                },
                {
                  &quot;name&quot;: &quot;extra_group&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.kill(pid, [signal])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;kill&quot;,
          &quot;desc&quot;: &quot;<!--\nSend a signal to a process. `pid` is the process id and `signal` is the\nstring describing the signal to send.  Signal names are strings like\n'SIGINT' or 'SIGHUP'.  If omitted, the signal will be 'SIGTERM'.\nSee [Signal Events](#process_signal_events) and kill(2) for more information.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>pid</code> &#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9; ID &#x3067; <code>signal</code> &#x306F;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x6587;&#x5B57;&#x5217;&#x3067;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x540D;&#x524D;&#x306F; &apos;SIGINT&apos; &#x3084; &apos;SIGHUP&apos; &#x306E;&#x3088;&#x3046;&#x306A;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x7701;&#x7565;&#x3059;&#x308B;&#x3068;&#x3001;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306F; &apos;SIGTERM&apos; &#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <a href="\&quot;#process_signal_events\&quot;">Signal Events</a> &#x307E;&#x305F;&#x306F; kill(2)\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nWill throw an error if target does not exist, and as a special case, a signal of\n`0` can be used to test for the existence of a process.\n-->\n\n<p>&#x5BFE;&#x8C61;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x7279;&#x5225;&#x306A;&#x30B1;&#x30FC;&#x30B9;&#x3068;&#x3057;&#x3066;&#x3001;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x30C6;&#x30B9;&#x30C8;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;\n<code>0</code> &#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that just because the name of this function is `process.kill`, it is\nreally just a signal sender, like the `kill` system call.  The signal sent\nmay do something other than kill the target process.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306E;&#x540D;&#x524D;&#x304C; <code>process.kill</code> &#x3067;&#x3042;&#x308B;&#x3068;&#x304A;&#x308A;&#x3001;&#x3053;&#x308C;&#x306F; <code>kill</code>\n&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x30B3;&#x30FC;&#x30EB;&#x306E;&#x3088;&#x3046;&#x306B;&#x5358;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x5BFE;&#x8C61;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x6BBA;&#x3059;&#x305F;&#x3081;&#x3060;&#x3051;&#x3067;&#x306A;&#x304F;&#x3001;&#x4ED6;&#x306E;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3082;&#x9001;&#x4FE1;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of sending a signal to yourself:\n-->\n\n<p>&#x81EA;&#x8EAB;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.on(&apos;SIGHUP&apos;, function() {\n  console.log(&apos;Got SIGHUP signal.&apos;);\n});\n\nsetTimeout(function() {\n  console.log(&apos;Exiting.&apos;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &apos;SIGHUP&apos;);</code></pre>\n<!--\nNote: When SIGUSR1 is received by Node.js it starts the debugger, see\n[Signal Events](#process_signal_events).\n-->\n\n<p>&#x6CE8;&#x610F;: SIGUSR1&#x306F;node.js&#x306B;&#x3088;&#x3063;&#x3066;&#x53D7;&#x4FE1;&#x3055;&#x308C;&#x3001;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <a href="\&quot;#process_signal_events\&quot;">Signal Events</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;pid&quot;
                },
                {
                  &quot;name&quot;: &quot;signal&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.memoryUsage()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;memoryUsage&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns an object describing the memory usage of the Node process\nmeasured in bytes.\n-->\n\n<p>Node &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30E1;&#x30E2;&#x30EA;&#x4F7F;&#x7528;&#x72B6;&#x6CC1;&#x3092;&#x30D0;&#x30A4;&#x30C8;&#x5358;&#x4F4D;&#x3067;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nconsole.log(util.inspect(process.memoryUsage()));</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;:\n\n</p>\n<pre><code>{ rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472 }</code></pre>\n<!--\n`heapTotal` and `heapUsed` refer to V8's memory usage.\n-->\n\n<p><code>heapTotal</code> &#x3068; <code>heapUsed</code> &#x306F; V8 &#x306E;&#x30E1;&#x30E2;&#x30EA;&#x4F7F;&#x7528;&#x72B6;&#x6CC1;&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.nextTick(callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;nextTick&quot;,
          &quot;desc&quot;: &quot;<!--\nOn the next loop around the event loop call this callback.\nThis is *not* a simple alias to `setTimeout(fn, 0)`, it's much more\nefficient.  It typically runs before any other I/O events fire, but there\nare some exceptions.  See `process.maxTickDepth` below.\n-->\n\n<p>&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x306E;&#x6B21;&#x4EE5;&#x964D;&#x306E;&#x30EB;&#x30FC;&#x30D7;&#x3067;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>setTimeout(fn, 0)</code> &#x306E;&#x5358;&#x7D14;&#x306A;&#x30A8;&#x30A4;&#x30EA;&#x30A2;&#x30B9;<em>&#x3067;&#x306F;&#x306A;&#x304F;</em>&#x3001;\n&#x306F;&#x308B;&#x304B;&#x306B;&#x52B9;&#x7387;&#x7684;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x901A;&#x5E38;&#x4ED6;&#x306E; I/O &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3088;&#x308A;&#x3082;&#x524D;&#x306B;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x4F8B;&#x5916;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x5F8C;&#x8FF0;&#x306E; <code>process.maxTickDepth</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>process.nextTick(function() {\n  console.log(&apos;nextTick callback&apos;);\n});</code></pre>\n<!--\nThis is important in developing APIs where you want to give the user the\nchance to assign event handlers after an object has been constructed,\nbut before any I/O has occurred.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; API &#x306E;&#x958B;&#x767A;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C;&#x69CB;&#x7BC9;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3067;\n&#x3069;&#x3093;&#x306A; I/O &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3088;&#x308A;&#x3082;&#x524D;&#x306B;&#x3001;\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x308B;&#x30C1;&#x30E3;&#x30F3;&#x30B9;&#x3092;&#x30E6;&#x30FC;&#x30B6;&#x306B;&#x4E0E;&#x3048;&#x305F;&#x3044;&#x5834;&#x5408;&#x306B;&#x91CD;&#x8981;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(function() {\n    this.startDoingStuff();\n  }.bind(this));\n}\n\nvar thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.</code></pre>\n<!--\nIt is very important for APIs to be either 100% synchronous or 100%\nasynchronous.  Consider this example:\n-->\n\n<p>API &#x306F; 100% &#x540C;&#x671F;&#x7684;&#x304B;&#x3001;100% &#x975E;&#x540C;&#x671F;&#x7684;&#x304B;&#x306E;&#x3069;&#x3061;&#x3089;&#x304B;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x304C;&#x3068;&#x3066;&#x3082;&#x91CD;&#x8981;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x4F8B;&#x3092;&#x8003;&#x3048;&#x3066;&#x307F;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;:\n\n</p>\n<pre><code>// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&apos;file&apos;, cb);\n}</code></pre>\n<!--\nThis API is hazardous.  If you do this:\n-->\n\n<p>&#x3053;&#x306E; API &#x306F;&#x5371;&#x967A;&#x3067;&#x3059;&#x3002;&#x3053;&#x3046;&#x3059;&#x308B;&#x3068;:\n\n</p>\n<pre><code>maybeSync(true, function() {\n  foo();\n});\nbar();</code></pre>\n<!--\nthen it's not clear whether `foo()` or `bar()` will be called first.\n-->\n\n<p><code>foo()</code> &#x3068; <code>bar()</code> &#x306E;&#x3069;&#x3061;&#x3089;&#x304C;&#x5148;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x304B;&#x4E0D;&#x660E;&#x77AD;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis approach is much better:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E;&#x30A2;&#x30D7;&#x30ED;&#x30FC;&#x30C1;&#x306F;&#x305A;&#x3063;&#x3068;&#x512A;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;:\n\n</p>\n<pre><code>function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&apos;file&apos;, cb);\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.umask([mask])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;umask&quot;,
          &quot;desc&quot;: &quot;<!--\nSets or reads the process's file mode creation mask. Child processes inherit\nthe mask from the parent process. Returns the old mask if `mask` argument is\ngiven, otherwise returns the current mask.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30E2;&#x30FC;&#x30C9;&#x4F5C;&#x6210;&#x30DE;&#x30B9;&#x30AF;&#x3092;&#x8A2D;&#x5B9A;&#x307E;&#x305F;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304B;&#x3089;&#x30DE;&#x30B9;&#x30AF;&#x3092;&#x7D99;&#x627F;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>mask</code> &#x5F15;&#x6570;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x308B;&#x3068;&#x5143;&#x306E;&#x30DE;&#x30B9;&#x30AF;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x3001;&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x73FE;&#x5728;&#x306E;&#x30DE;&#x30B9;&#x30AF;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var oldmask, newmask = 0644;\n\noldmask = process.umask(newmask);\nconsole.log(&apos;Changed umask from: &apos; + oldmask.toString(8) +\n            &apos; to &apos; + newmask.toString(8));</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;mask&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.uptime()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;uptime&quot;,
          &quot;desc&quot;: &quot;<!--\nNumber of seconds Node has been running.\n-->\n\n<p>Node &#x304C;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x304B;&#x3089;&#x306E;&#x79D2;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.hrtime()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;hrtime&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the current high-resolution real time in a `[seconds, nanoseconds]`\ntuple Array. It is relative to an arbitrary time in the past. It is not\nrelated to the time of day and therefore not subject to clock drift. The\nprimary use is for measuring performance between intervals.\n\nYou may pass in the result of a previous call to `process.hrtime()` to get\na diff reading, useful for benchmarks and measuring intervals:\n-->\n\n<p>&#x9AD8;&#x5206;&#x89E3;&#x80FD;&#x306A;&#x73FE;&#x5728;&#x6642;&#x523B;&#x3092; <code>[seconds, nanoseconds]</code> &#x306E;&#x914D;&#x5217;&#x3067;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x904E;&#x53BB;&#x306E;&#x4EFB;&#x610F;&#x306E;&#x6642;&#x9593;&#x3068;&#x306E;&#x6BD4;&#x8F03;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x4E00;&#x65E5;&#x306B;&#x304A;&#x3051;&#x308B;&#x6642;&#x523B;&#x306B;&#x306F;&#x95A2;&#x9023;&#x304C;&#x7121;&#x3044;&#x305F;&#x3081;&#x3001;&#x30AF;&#x30ED;&#x30C3;&#x30AF;&#x30C9;&#x30EA;&#x30D5;&#x30C8;&#x306B;&#x5F71;&#x97FF;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x4E3B;&#x306A;&#x7528;&#x9014;&#x306F;&#x30D9;&#x30F3;&#x30C1;&#x30DE;&#x30FC;&#x30AF;&#x3084;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D0;&#x30EB;&#x306E;&#x6E2C;&#x5B9A;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x4EE5;&#x524D;&#x306B; <code>process.hrtime()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x7D50;&#x679C;&#x3092;&#x6E21;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;\n&#x5DEE;&#x5206;&#x3092;&#x5F97;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;&#x3053;&#x308C;&#x306F;&#x30D9;&#x30F3;&#x30C1;&#x30DE;&#x30FC;&#x30AF;&#x3084;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D0;&#x30EB;&#x306E;&#x6E2C;&#x5B9A;&#x306B;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>var time = process.hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(function() {\n  var diff = process.hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(&apos;benchmark took %d nanoseconds&apos;, diff[0] * 1e9 + diff[1]);\n  // benchmark took 1000000527 nanoseconds\n}, 1000);</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        }
      ]
    }
  ]
}
