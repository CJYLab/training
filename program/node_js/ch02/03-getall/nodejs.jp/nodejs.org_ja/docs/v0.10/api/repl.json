{
  &quot;source&quot;: &quot;doc/api/repl.markdown&quot;,
  &quot;modules&quot;: [
    {
      &quot;textRaw&quot;: &quot;REPL&quot;,
      &quot;name&quot;: &quot;repl&quot;,
      &quot;desc&quot;: &quot;<!--\nA Read-Eval-Print-Loop (REPL) is available both as a standalone program and\neasily includable in other programs. The REPL provides a way to interactively\nrun JavaScript and see the results.  It can be used for debugging, testing, or\njust trying things out.\n-->\n\n<p>Read-Eval-Print-Loop (REPL) &#x306F;&#x5358;&#x72EC;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3068;&#x3057;&#x3066;&#x3082;&#x4ED6;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;&#x624B;&#x8EFD;&#x306B;&#x53D6;&#x308A;&#x8FBC;&#x3080;&#x5F62;&#x3067;&#x3082;&#x5229;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\nREPL &#x306F;&#x5BFE;&#x8A71;&#x7684;&#x306B; JavaScript &#x3092;&#x5B9F;&#x884C;&#x3057;&#x3066;&#x7D50;&#x679C;&#x3092;&#x78BA;&#x8A8D;&#x3059;&#x308B;&#x624B;&#x6BB5;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002; \n&#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x3084;&#x30C6;&#x30B9;&#x30C8;&#x3084;&#x305D;&#x306E;&#x4ED6;&#x306E;&#x69D8;&#x3005;&#x306A;&#x3053;&#x3068;&#x3092;&#x8A66;&#x3059;&#x7528;&#x9014;&#x3067;&#x5229;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBy executing `node` without any arguments from the command-line you will be\ndropped into the REPL. It has simplistic emacs line-editing.\n-->\n\n<p>&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x304B;&#x3089; <code>node</code> &#x3092;&#x5F15;&#x6570;&#x7121;&#x3057;&#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3001;REPL &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;&#x5165;&#x308A;&#x307E;&#x3059;&#x3002;\nREPL &#x306F; Emacs &#x98A8;&#x306E;&#x7C21;&#x6613;&#x306A;&#x884C;&#x7DE8;&#x96C6;&#x6A5F;&#x80FD;&#x3092;&#x5099;&#x3048;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>mjr:~$ node\nType &apos;.help&apos; for options.\n&gt; a = [ 1, 2, 3];\n[ 1, 2, 3 ]\n&gt; a.forEach(function (v) {\n...   console.log(v);\n...   });\n1\n2\n3</code></pre>\n<p>&#x3088;&#x308A;&#x9032;&#x3093;&#x3060;&#x884C;&#x7DE8;&#x96C6;&#x3092;&#x884C;&#x3046;&#x306B;&#x306F;&#x3001;&#x74B0;&#x5883;&#x5909;&#x6570;&#x306B; <code>NODE_NO_READLINE=1</code>\n&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x3066;node&#x3092;&#x8D77;&#x52D5;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x308C;&#x306B;&#x3088;&#x3063;&#x3066; main &#x3068;&#x30C7;&#x30D0;&#x30C3;&#x30AC; REPL &#x3092;&#x6B63;&#x898F;&#x306E;&#x7AEF;&#x672B;&#x8A2D;&#x5B9A;&#x3067;&#x8D77;&#x52D5;&#x3057;&#x3001;\n<code>rlwrap</code> &#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example, you could add this to your bashrc file:\n-->\n\n<p>&#x4F8B;&#x3068;&#x3057;&#x3066;&#x3001;bashrc &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x4EE5;&#x4E0B;&#x306E;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x5B9A;&#x3092;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>alias node=&quot;env NODE_NO_READLINE=1 rlwrap node&quot;</code></pre>\n&quot;,
      &quot;For advanced line-editors, start node with the environmental variable\n`NODE_NO_READLINE&quot;: &quot;1`. This will start the main and debugger REPL in canonical\nterminal settings which will allow you to use with `rlwrap`.&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;repl.start(options)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;start&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns and starts a `REPLServer` instance. Accepts an \"options\" Object that\ntakes the following values:\n-->\n<code>REPLServer</code> &#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4EE5;&#x4E0B;&#x306E;&#x5024;&#x3092;&#x542B;&#x3080; &quot;options&quot; &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308A;&#x307E;&#x3059;&#x3002;\n\n<!--\n - `prompt` - the prompt and `stream` for all I/O. Defaults to `> `.\n\n - `input` - the readable stream to listen to. Defaults to `process.stdin`.\n\n - `output` - the writable stream to write readline data to. Defaults to\n   `process.stdout`.\n\n - `terminal` - pass `true` if the `stream` should be treated like a TTY, and\n   have ANSI/VT100 escape codes written to it. Defaults to checking `isTTY`\n   on the `output` stream upon instantiation.\n\n - `eval` - function that will be used to eval each given line. Defaults to\n   an async wrapper for `eval()`. See below for an example of a custom `eval`.\n\n - `useColors` - a boolean which specifies whether or not the `writer` function\n   should output colors. If a different `writer` function is set then this does\n   nothing. Defaults to the repl's `terminal` value.\n\n - `useGlobal` - if set to `true`, then the repl will use the `global` object,\n   instead of running scripts in a separate context. Defaults to `false`.\n\n - `ignoreUndefined` - if set to `true`, then the repl will not output the\n   return value of command if it's `undefined`. Defaults to `false`.\n\n - `writer` - the function to invoke for each command that gets evaluated which\n   returns the formatting (including coloring) to display. Defaults to\n   `util.inspect`.\n-->\n\n<ul>\n<li><p><code>prompt</code> - &#x30D7;&#x30ED;&#x30F3;&#x30D7;&#x30C8;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&gt; </code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>input</code> - &#x76E3;&#x8996;&#x3059;&#x308B;&#x5165;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>process.stdin</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>output</code> - &#x8AAD;&#x307F;&#x8FBC;&#x3093;&#x3060;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x51FA;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>process.stdout</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>terminal</code> - &#x3082;&#x3057; <code>stream</code> &#x304C; TTY &#x3067;&#x3001;ANSI/VT100 &#x30A8;&#x30B9;&#x30B1;&#x30FC;&#x30D7;&#x30B3;&#x30FC;&#x30C9;&#x3092;\n&#x51FA;&#x529B;&#x3059;&#x308B;&#x306A;&#x3089; <code>true</code>&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x4F5C;&#x6210;&#x6642;&#x306B; <code>output</code>\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; <code>isTTY</code> &#x3067;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>eval</code> - &#x5404;&#x884C;&#x3092;&#x8A55;&#x4FA1;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x95A2;&#x6570;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>eval()</code> &#x3092;\n&#x975E;&#x540C;&#x671F;&#x306B;&#x30E9;&#x30C3;&#x30D7;&#x3057;&#x305F;&#x95A2;&#x6570;&#x3067;&#x3059;&#x3002;\n<code>eval</code> &#x3092;&#x30AB;&#x30B9;&#x30BF;&#x30DE;&#x30A4;&#x30BA;&#x3059;&#x308B;&#x4F8B;&#x306F;&#x4E0B;&#x8A18;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</p>\n</li>\n<li><p><code>useColors</code> - <code>write</code> &#x95A2;&#x6570;&#x304C;&#x8272;&#x3092;&#x4ED8;&#x3051;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x30D6;&#x30FC;&#x30EA;&#x30A2;&#x30F3;&#x5024;&#x3002;\n<code>writer</code> &#x306B;&#x7570;&#x306A;&#x308B;&#x95A2;&#x6570;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x3053;&#x308C;&#x306F;&#x4F55;&#x3082;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; repl &#x306E; <code>terminal</code> &#x306E;&#x5024;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>useGlobal</code> - &#x3082;&#x3057; <code>true</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;repl &#x306F;&#x72EC;&#x7ACB;&#x3057;&#x305F;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3092;\n&#x4F7F;&#x3046;&#x4EE3;&#x308F;&#x308A;&#x306B; <code>global</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>ignoreUndefined</code> - &#x3082;&#x3057; <code>true</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;repl &#x306F;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306E;&#x623B;&#x308A;&#x5024;&#x304C;\n<code>undefined</code> &#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x305D;&#x308C;&#x3092;&#x51FA;&#x529B;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>writer</code> - &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x304C;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x308B;&#x3054;&#x3068;&#x306B;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x95A2;&#x6570;&#x3067;&#x3001;&#x8868;&#x793A;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8; (&#x8272;&#x3065;&#x3051;&#x3082;&#x542B;&#x307F;&#x307E;&#x3059;) &#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>util.inspect</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nYou can use your own `eval` function if it has following signature:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E;&#x30B7;&#x30B0;&#x30CD;&#x30C1;&#x30E3;&#x3092;&#x6301;&#x3064;&#x72EC;&#x81EA;&#x306E; <code>eval()</code> &#x95A2;&#x6570;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>function eval(cmd, context, filename, callback) {\n  callback(null, result);\n}</code></pre>\n<!--\nMultiple REPLs may be started against the same running instance of node.  Each\nwill share the same global object but will have unique I/O.\n-->\n\n<p>&#x8907;&#x6570;&#x306E; REPL &#x3092;&#x8D77;&#x52D5;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;&#x540C;&#x4E00;&#x306E; node &#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x304C;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E; REPL &#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x5171;&#x6709;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;I/O &#x306F;&#x56FA;&#x6709;&#x306E;&#x3082;&#x306E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nHere is an example that starts a REPL on stdin, a Unix socket, and a TCP socket:\n-->\n\n<p>REPL &#x3092;&#x6A19;&#x6E96;&#x5165;&#x529B;&#x3001;Unix &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3001;TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x3082;&#x3068;&#x3067;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x4F8B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>var net = require(&quot;net&quot;),\n    repl = require(&quot;repl&quot;);\n\nconnections = 0;\n\nrepl.start({\n  prompt: &quot;node via stdin&gt; &quot;,\n  input: process.stdin,\n  output: process.stdout\n});\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start({\n    prompt: &quot;node via Unix socket&gt; &quot;,\n    input: socket,\n    output: socket\n  }).on(&apos;exit&apos;, function() {\n    socket.end();\n  })\n}).listen(&quot;/tmp/node-repl-sock&quot;);\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start({\n    prompt: &quot;node via TCP socket&gt; &quot;,\n    input: socket,\n    output: socket\n  }).on(&apos;exit&apos;, function() {\n    socket.end();\n  });\n}).listen(5001);</code></pre>\n<!--\nRunning this program from the command line will start a REPL on stdin.  Other\nREPL clients may connect through the Unix socket or TCP socket. `telnet` is useful\nfor connecting to TCP sockets, and `socat` can be used to connect to both Unix and\nTCP sockets.\n-->\n\n<p>&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3068;&#x3001;&#x6A19;&#x6E96;&#x5165;&#x529B;&#x306E;&#x3082;&#x3068;&#x3067; REPL &#x304C;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4ED6;&#x306E; REPL &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306F; Unix &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304B; TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x4ECB;&#x3057;&#x3066;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>telnet</code> &#x304C; TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3078;&#x306E;&#x63A5;&#x7D9A;&#x306B;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;\n<code>socat</code> &#x306F; Unix &#x30C9;&#x30E1;&#x30A4;&#x30F3; /TCP &#x4E21;&#x65B9;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3078;&#x306E;&#x63A5;&#x7D9A;&#x306B;&#x5229;&#x7528;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBy starting a REPL from a Unix socket-based server instead of stdin, you can\nconnect to a long-running node process without restarting it.\n\nFor an example of running a \"full-featured\" (`terminal`) REPL over\na `net.Server` and `net.Socket` instance, see: https://gist.github.com/2209310\n\nFor an example of running a REPL instance over `curl(1)`,\nsee: https://gist.github.com/2053342\n-->\n\n<p>&#x6A19;&#x6E96;&#x5165;&#x529B;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B; Unix &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x30D9;&#x30FC;&#x30B9;&#x3068;&#x3057;&#x305F;&#x30B5;&#x30FC;&#x30D0;&#x304B;&#x3089; REPL &#x3092;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;\n&#x518D;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F; node &#x306E;&#x5E38;&#x99D0;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3078;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>net.Server</code> &#x304A;&#x3088;&#x3073; <code>net.Socket</code> &#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x4E0A;&#x306E; &quot;&#x30D5;&#x30EB;&#x6A5F;&#x80FD;&#x306E;&quot; (<code>terminal</code>)\nREPL &#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x4F8B;&#x306F;&#x3001;<a href="\&quot;https://gist.github.com/2209310\&quot;">https://gist.github.com/2209310</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p><code>curl(1)</code> &#x4E0A;&#x3067; REPL &#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x4F8B;&#x306F;&#x3001;\n<a href="\&quot;https://gist.github.com/2053342\&quot;">https://gist.github.com/2053342</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;exit&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;exit&quot;,
              &quot;desc&quot;: &quot;<p><code>function () {}</code>\n\n</p>\n<!--\nEmitted when the user exits the REPL in any of the defined ways. Namely, typing\n`.exit` at the repl, pressing Ctrl+C twice to signal SIGINT, or pressing Ctrl+D\nto signal \"end\" on the `input` stream.\n-->\n\n<p>&#x4F55;&#x3089;&#x304B;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x30E6;&#x30FC;&#x30B6;&#x304C; REPL &#x3092;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;repl &#x3067; <code>.exit</code> &#x3092;&#x30BF;&#x30A4;&#x30D7;&#x3059;&#x308B;&#x3001;Ctrl+C &#x3092; 2 &#x56DE;&#x63A8;&#x3057;&#x3066;\nSIGINT &#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x3001;&#x3042;&#x308B;&#x3044;&#x306F; Ctrl+D &#x3092;&#x63A8;&#x3057;&#x3066; <code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067; <code>&apos;end&apos;</code> &#x3092;\n&#x77E5;&#x3089;&#x305B;&#x308B;&#x306A;&#x3069;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of listening for `exit`:\n-->\n\n<p><code>&apos;exit&apos;</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>r.on(&apos;exit&apos;, function () {\n  console.log(&apos;Got &quot;exit&quot; event from repl!&apos;);\n  process.exit();\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;REPL Features&quot;,
          &quot;name&quot;: &quot;REPL Features&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nInside the REPL, Control+D will exit.  Multi-line expressions can be input.\nTab completion is supported for both global and local variables.\n-->\n\n<p>REPL &#x306E;&#x4E2D;&#x3067; Control+D &#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3068;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;&#x8907;&#x6570;&#x884C;&#x306B;&#x6E21;&#x308B;&#x5F0F;&#x3092;&#x5165;&#x529B;&#x3068;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe special variable `_` (underscore) contains the result of the last expression.\n-->\n\n<p>&#x7279;&#x5225;&#x306A;&#x5909;&#x6570;&#x3067;&#x3042;&#x308B; <code>_</code> (&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;) &#x306F;&#x4E00;&#x756A;&#x6700;&#x5F8C;&#x306E;&#x5F0F;&#x306E;&#x7D50;&#x679C;&#x3092;&#x4FDD;&#x6301;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>&gt; [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\n[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]\n&gt; _.length\n3\n&gt; _ += 1\n4</code></pre>\n<!--\nThe REPL provides access to any variables in the global scope. You can expose\na variable to the REPL explicitly by assigning it to the `context` object\nassociated with each `REPLServer`.  For example:\n-->\n\n<p>REPL &#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306B;&#x5B58;&#x5728;&#x3059;&#x308B;&#x5168;&#x3066;&#x306E;&#x5909;&#x6570;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E; <code>REPLServer</code> &#x306B;&#x7D10;&#x3065;&#x304F; <code>context</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x5909;&#x6570;&#x3092;&#x4ED8;&#x4E0E;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3001;\n&#x660E;&#x793A;&#x7684;&#x306B;&#x5909;&#x6570;&#x3092;&#x516C;&#x958B;&#x3055;&#x305B;&#x308B;&#x3053;&#x3068;&#x304C;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002; &#x4F8B;:\n\n</p>\n<pre><code>// repl_test.js\nvar repl = require(&quot;repl&quot;),\n    msg = &quot;message&quot;;\n\nrepl.start(&quot;&gt; &quot;).context.m = msg;</code></pre>\n<!--\nThings in the `context` object appear as local within the REPL:\n-->\n\n<p><code>context</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5909;&#x6570;&#x306F;&#x3001;REPL &#x306E;&#x4E2D;&#x3067;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x306A;&#x5909;&#x6570;&#x3068;&#x3057;&#x3066;&#x73FE;&#x308C;&#x307E;&#x3059;:\n\n</p>\n<pre><code>mjr:~$ node repl_test.js\n&gt; m\n&apos;message&apos;</code></pre>\n<!--\nThere are a few special REPL commands:\n-->\n\n<p>&#x7279;&#x5225;&#x306A; REPL &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x304C;&#x3044;&#x304F;&#x3064;&#x304B;&#x3042;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<!--\n  - `.break` - While inputting a multi-line expression, sometimes you get lost\n    or just don't care about completing it. `.break` will start over.\n  - `.clear` - Resets the `context` object to an empty object and clears any\n    multi-line expression.\n  - `.exit` - Close the I/O stream, which will cause the REPL to exit.\n  - `.help` - Show this list of special commands.\n  - `.save` - Save the current REPL session to a file\n    >.save ./file/to/save.js\n  - `.load` - Load a file into the current REPL session.\n    >.load ./file/to/load.js\n-->\n\n<ul>\n<li><code>.break</code> - &#x8907;&#x6570;&#x884C;&#x306B;&#x6E21;&#x3063;&#x3066;&#x5F0F;&#x3092;&#x5165;&#x529B;&#x3057;&#x3066;&#x3044;&#x308B;&#x9593;&#x306B;&#x3001;&#x9014;&#x4E2D;&#x3067;&#x5206;&#x304B;&#x3089;&#x306A;&#x304F;&#x306A;&#x3063;&#x305F;&#x308A;&#x5B8C;&#x4E86;&#x3055;&#x305B;&#x306A;&#x304F;&#x3066;&#x3082;&#x826F;&#x304F;&#x306A;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;<code>.break</code> &#x3067;&#x6700;&#x521D;&#x304B;&#x3089;&#x3084;&#x308A;&#x76F4;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>.clear</code> - <code>context</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x7A7A;&#x306E;&#x72B6;&#x614B;&#x306B;&#x30EA;&#x30BB;&#x30C3;&#x30C8;&#x3057;&#x3001;&#x8907;&#x6570;&#x884C;&#x306B;&#x5165;&#x529B;&#x3057;&#x3066;&#x3044;&#x308B;&#x5F0F;&#x3092;&#x30AF;&#x30EA;&#x30A2;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>.exit</code> - I/O&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x9589;&#x3058;&#x3001;REPL&#x3092;&#x7D42;&#x4E86;&#x3055;&#x305B;&#x307E;&#x3059;&#x3002;</li>\n<li><code>.help</code> - &#x3053;&#x306E;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306E;&#x4E00;&#x89A7;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>.save</code> - &#x73FE;&#x5728;&#x306E; REPL &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x4FDD;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;<blockquote>\n<p>.save ./file/to/save.js</p>\n</blockquote>\n</li>\n<li><code>.load</code> - &#x73FE;&#x5728;&#x306E; REPL &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3057;&#x307E;&#x3059;&#x3002;<blockquote>\n<p>.load ./file/to/load.js</p>\n</blockquote>\n</li>\n</ul>\n<!--\nThe following key combinations in the REPL have these special effects:\n-->\n\n<p>REPL &#x3067;&#x306F;&#x3001;&#x4EE5;&#x4E0B;&#x306E;&#x30AD;&#x30FC;&#x30B3;&#x30F3;&#x30D3;&#x30CD;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x7279;&#x5225;&#x306A;&#x52B9;&#x679C;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;\n\n</p>\n<!--\n  - `<ctrl>C` - Similar to the `.break` keyword.  Terminates the current\n    command.  Press twice on a blank line to forcibly exit.\n  - `<ctrl>D` - Similar to the `.exit` keyword.\n-->\n\n<ul>\n<li><code>&lt;ctrl&gt;C</code> - <code>.break</code> &#x30AD;&#x30FC;&#x30EF;&#x30FC;&#x30C9;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;\n&#x73FE;&#x5728;&#x306E;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5F37;&#x5236;&#x7684;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x3051;&#x308C;&#x3070;&#x7A7A;&#x306E;&#x884C;&#x3067; 2 &#x56DE;&#x62BC;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n<li><code>&lt;ctrl&gt;D</code> - <code>.exit</code> &#x30AD;&#x30FC;&#x30EF;&#x30FC;&#x30C9;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;</li>\n</ul>\n&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;REPL&quot;
    }
  ]
}
