{
  &quot;source&quot;: &quot;doc/api/domain.markdown&quot;,
  &quot;modules&quot;: [
    {
      &quot;textRaw&quot;: &quot;Domain&quot;,
      &quot;name&quot;: &quot;domain&quot;,
      &quot;stability&quot;: 2,
      &quot;stabilityText&quot;: &quot;Unstable&quot;,
      &quot;desc&quot;: &quot;<!--\nDomains provide a way to handle multiple different IO operations as a\nsingle group.  If any of the event emitters or callbacks registered to a\ndomain emit an `error` event, or throw an error, then the domain object\nwill be notified, rather than losing the context of the error in the\n`process.on('uncaughtException')` handler, or causing the program to\nexit immediately with an error code.\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F;&#x8907;&#x6570;&#x306E;&#x7570;&#x306A;&#x308B; I/O &#x64CD;&#x4F5C;&#x3092;&#x4E00;&#x3064;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x65B9;&#x6CD5;&#x3092;\n&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; EventEmitter &#x307E;&#x305F;&#x306F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x767B;&#x9332;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;\n<code>&apos;error&apos;</code> &#x304C;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x308A;&#x4F8B;&#x5916;&#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;\n<code>process.on(&apos;uncaughtException&apos;)</code> &#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3067;&#x30A8;&#x30E9;&#x30FC;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x304C;&#x5931;&#x308F;&#x308C;&#x305F;&#x308A;&#x3001;\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x30A8;&#x30E9;&#x30FC;&#x30B3;&#x30FC;&#x30C9;&#x3068;&#x5171;&#x306B;&#x5373;&#x5EA7;&#x306B;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x901A;&#x77E5;&#x3055;&#x308C;&#x307E;&#x3059;\n\n</p>\n<!--\nThis feature is new in Node version 0.8.  It is a first pass, and is\nexpected to change significantly in future versions.  Please use it and\nprovide feedback.\n-->\n\n<p>&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x306F; Node &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 0.8 &#x304B;&#x3089;&#x306E;&#x65B0;&#x3057;&#x3044;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30D5;&#x30A1;&#x30FC;&#x30B9;&#x30C8;&#x30D1;&#x30B9;&#x3067;&#x3042;&#x308A;&#x3001;&#x5C06;&#x6765;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x5927;&#x304D;&#x304F;&#x5909;&#x66F4;&#x3055;&#x308C;&#x308B;&#x3068;&#x4E88;&#x60F3;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x662F;&#x975E;&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x30D5;&#x30A3;&#x30FC;&#x30C9;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nDue to their experimental nature, the Domains features are disabled unless\nthe `domain` module is loaded at least once.  No domains are created or\nregistered by default.  This is by design, to prevent adverse effects on\ncurrent programs.  It is expected to be enabled by default in future\nNode.js versions.\n-->\n\n<p>&#x3053;&#x308C;&#x3089;&#x306F;&#x5B9F;&#x9A13;&#x7684;&#x3067;&#x3042;&#x308B;&#x305F;&#x3081;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x6A5F;&#x80FD;&#x306F; <code>domain</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x5C11;&#x306A;&#x304F;&#x3068;&#x3082;\n&#x4E00;&#x56DE;&#x306F;&#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;&#x7121;&#x52B9;&#x306B;&#x306A;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305A;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x767B;&#x9332;&#x3082;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x65E2;&#x5B58;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;&#x60AA;&#x5F71;&#x97FF;&#x3092;&#x4E0E;&#x3048;&#x308B;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x5C06;&#x6765;&#x306E; Node.js &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x6709;&#x52B9;&#x306B;&#x306A;&#x308B;&#x3053;&#x3068;&#x304C;&#x671F;&#x5F85;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;Warning: Don&apos;t Ignore Errors!&quot;,
          &quot;name&quot;: &quot;Warning: Don&apos;t Ignore Errors!&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nDomain error handlers are not a substitute for closing down your\nprocess when an error occurs.\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x306F;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x6642;&#x306B;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x306F;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nBy the very nature of how `throw` works in JavaScript, there is almost\nnever any way to safely \"pick up where you left off\", without leaking\nreferences, or creating some other sort of undefined brittle state.\n-->\n\n<p>JavaScript &#x306B;&#x304A;&#x3044;&#x3066;&#x300C;throw&#x300D;&#x304C;&#x3069;&#x306E;&#x3088;&#x3046;&#x306B;&#x50CD;&#x304F;&#x304B;&#x3068;&#x3044;&#x3046;&#x6027;&#x8CEA;&#x306B;&#x3088;&#x308A;&#x3001;\n&#x53C2;&#x7167;&#x306E;&#x30EA;&#x30FC;&#x30AF;&#x3084;&#x672A;&#x5B9A;&#x7FA9;&#x306E;&#x8106;&#x5F31;&#x306A;&#x72B6;&#x614B;&#x3092;&#x4F5C;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F;&#x300C;&#x4E2D;&#x65AD;&#x3057;&#x305F;&#x3068;&#x3053;&#x308D;&#x3092;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x300D;\n&#x65B9;&#x6CD5;&#x306F;&#x307B;&#x3068;&#x3093;&#x3069;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThe safest way to respond to a thrown error is to shut down the\nprocess.  Of course, in a normal web server, you might have many\nconnections open, and it is not reasonable to abruptly shut those down\nbecause an error was triggered by someone else.\n-->\n\n<p>&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x5BFE;&#x51E6;&#x3059;&#x308B;&#x3082;&#x3063;&#x3068;&#x3082;&#x5B89;&#x5168;&#x306A;&#x65B9;&#x6CD5;&#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n&#x3082;&#x3061;&#x308D;&#x3093;&#x3001;&#x901A;&#x5E38;&#x306E; Web &#x30B5;&#x30FC;&#x30D0;&#x306F;&#x591A;&#x304F;&#x306E;&#x63A5;&#x7D9A;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x3066;&#x3044;&#x3066;&#x304A;&#x308A;&#x3001;\n&#x4ED6;&#x306E;&#x8AB0;&#x304B;&#x306B;&#x3088;&#x3063;&#x3066;&#x5F15;&#x304D;&#x8D77;&#x3053;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x306E;&#x305F;&#x3081;&#x306B;&#x305D;&#x308C;&#x3089;&#x3092;&#x30B7;&#x30E3;&#x30C3;&#x30C8;&#x30C0;&#x30A6;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;\n&#x5408;&#x7406;&#x7684;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThe better approach is send an error response to the request that\ntriggered the error, while letting the others finish in their normal\ntime, and stop listening for new requests in that worker.\n-->\n\n<p>&#x3088;&#x308A;&#x3088;&#x3044;&#x30A2;&#x30D7;&#x30ED;&#x30FC;&#x30C1;&#x306F;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x5F15;&#x304D;&#x8D77;&#x3053;&#x3057;&#x305F;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306B;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x5FDC;&#x7B54;&#x3057;&#x3001;\n&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306E;&#x63A5;&#x7D9A;&#x304C;&#x6B63;&#x5E38;&#x306B;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x307E;&#x3067;&#x306E;&#x9593;&#x3001;&#x30EF;&#x30FC;&#x30AB;&#x306F;&#x65B0;&#x3057;&#x3044;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CB;&#x30F3;&#x30B0;&#x3092;\n&#x6B62;&#x3081;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIn this way, `domain` usage goes hand-in-hand with the cluster module,\nsince the master process can fork a new worker when a worker\nencounters an error.  For node programs that scale to multiple\nmachines, the terminating proxy or service registry can take note of\nthe failure, and react accordingly.\n-->\n\n<p>&#x3053;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x306F;&#x3001;<code>domain</code> &#x306F;&#x30AF;&#x30E9;&#x30B9;&#x30BF;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3068;&#x624B;&#x3092;&#x53D6;&#x308A;&#x5408;&#x3046;&#x5229;&#x7528;&#x65B9;&#x6CD5;&#x306B;&#x3088;&#x308A;&#x3001;\n&#x30EF;&#x30FC;&#x30AB;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x906D;&#x9047;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x65B0;&#x3057;&#x3044;&#x30EF;&#x30FC;&#x30AB;&#x3092;&#x30D5;&#x30A9;&#x30FC;&#x30AF;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x8907;&#x6570;&#x306E;&#x30DE;&#x30B7;&#x30F3;&#x306B;&#x30B9;&#x30B1;&#x30FC;&#x30EB;&#x3059;&#x308B; node &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067;&#x306F;&#x3001;\n&#x7D42;&#x7AEF;&#x306E;&#x30D7;&#x30ED;&#x30AD;&#x30B7;&#x3084;&#x30B5;&#x30FC;&#x30D3;&#x30B9;&#x30EC;&#x30B8;&#x30B9;&#x30C8;&#x30EA;&#x306F;&#x969C;&#x5BB3;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3001;\n&#x305D;&#x308C;&#x306B;&#x5FDC;&#x3058;&#x3066;&#x5BFE;&#x51E6;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example, this is not a good idea:\n-->\n\n<p>&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;&#x3053;&#x308C;&#x306F;&#x3044;&#x3044;&#x30A2;&#x30A4;&#x30C7;&#x30A3;&#x30A2;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// XXX WARNING!  BAD IDEA!\n\nvar d = require(&apos;domain&apos;).create();\nd.on(&apos;error&apos;, function(er) {\n  // The error won&apos;t crash the process, but what it does is worse!\n  // Though we&apos;ve prevented abrupt process restarting, we are leaking\n  // resources like crazy if this ever happens.\n  // This is no better than process.on(&apos;uncaughtException&apos;)!\n  console.log(&apos;error, but oh well&apos;, er.message);\n});\nd.run(function() {\n  require(&apos;http&apos;).createServer(function(req, res) {\n    handleRequest(req, res);\n  }).listen(PORT);\n});</code></pre>\n<!--\nBy using the context of a domain, and the resilience of separating our\nprogram into multiple worker processes, we can react more\nappropriately, and handle errors with much greater safety.\n-->\n\n<p>domain &#x306E;&#x5229;&#x7528;&#x3068;&#x3001;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x8907;&#x6570;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x5206;&#x5272;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x308B;\n&#x5FA9;&#x5143;&#x529B;&#x306B;&#x3088;&#x308A;&#x3001;&#x3068;&#x3066;&#x3082;&#x5B89;&#x5168;&#x306B;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x6271;&#x3046;&#x3001;&#x3088;&#x308A;&#x9069;&#x5207;&#x306A;&#x5BFE;&#x51E6;&#x3092;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Much better!\n\nvar cluster = require(&apos;cluster&apos;);\nvar PORT = +process.env.PORT || 1337;\n\nif (cluster.isMaster) {\n  // In real life, you&apos;d probably use more than just 2 workers,\n  // and perhaps not put the master and worker in the same file.\n  //\n  // You can also of course get a bit fancier about logging, and\n  // implement whatever custom logic you need to prevent DoS\n  // attacks and other bad behavior.\n  //\n  // See the options in the cluster documentation.\n  //\n  // The important thing is that the master does very little,\n  // increasing our resilience to unexpected errors.\n\n  cluster.fork();\n  cluster.fork();\n\n  cluster.on(&apos;disconnect&apos;, function(worker) {\n    console.error(&apos;disconnect!&apos;);\n    cluster.fork();\n  });\n\n} else {\n  // the worker\n  //\n  // This is where we put our bugs!\n\n  var domain = require(&apos;domain&apos;);\n\n  // See the cluster documentation for more details about using\n  // worker processes to serve requests.  How it works, caveats, etc.\n\n  var server = require(&apos;http&apos;).createServer(function(req, res) {\n    var d = domain.create();\n    d.on(&apos;error&apos;, function(er) {\n      console.error(&apos;error&apos;, er.stack);\n\n      // Note: we&apos;re in dangerous territory!\n      // By definition, something unexpected occurred,\n      // which we probably didn&apos;t want.\n      // Anything can happen now!  Be very careful!\n\n      try {\n        // make sure we close down within 30 seconds\n        var killtimer = setTimeout(function() {\n          process.exit(1);\n        }, 30000);\n        // But don&apos;t keep the process open just for that!\n        killtimer.unref();\n\n        // stop taking new requests.\n        server.close();\n\n        // Let the master know we&apos;re dead.  This will trigger a\n        // &apos;disconnect&apos; in the cluster master, and then it will fork\n        // a new worker.\n        cluster.worker.disconnect();\n\n        // try to send an error to the request that triggered the problem\n        res.statusCode = 500;\n        res.setHeader(&apos;content-type&apos;, &apos;text/plain&apos;);\n        res.end(&apos;Oops, there was a problem!\\n&apos;);\n      } catch (er2) {\n        // oh well, not much we can do at this point.\n        console.error(&apos;Error sending 500!&apos;, er2.stack);\n      }\n    });\n\n    // Because req and res were created before this domain existed,\n    // we need to explicitly add them.\n    // See the explanation of implicit vs explicit binding below.\n    d.add(req);\n    d.add(res);\n\n    // Now run the handler function in the domain.\n    d.run(function() {\n      handleRequest(req, res);\n    });\n  });\n  server.listen(PORT);\n}\n\n// This part isn&apos;t important.  Just an example routing thing.\n// You&apos;d put your fancy application logic here.\nfunction handleRequest(req, res) {\n  switch(req.url) {\n    case &apos;/error&apos;:\n      // We do some async stuff, and then...\n      setTimeout(function() {\n        // Whoops!\n        flerb.bark();\n      });\n      break;\n    default:\n      res.end(&apos;ok&apos;);\n  }\n}</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Additions to Error objects&quot;,
          &quot;name&quot;: &quot;Additions to Error objects&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nAny time an Error object is routed through a domain, a few extra fields\nare added to it.\n-->\n\n<p>&#x3069;&#x3093;&#x306A;&#x5834;&#x5408;&#x3067;&#x3082;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x9001;&#x3089;&#x308C;&#x305F; Error &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x304C;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* `error.domain` The domain that first handled the error.\n* `error.domainEmitter` The event emitter that emitted an 'error' event\n  with the error object.\n* `error.domainBound` The callback function which was bound to the\n  domain, and passed an error as its first argument.\n* `error.domainThrown` A boolean indicating whether the error was\n  thrown, emitted, or passed to a bound callback function.\n-->\n\n<ul>\n<li><code>error.domain</code> &#x3053;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x6700;&#x521D;&#x306B;&#x6355;&#x307E;&#x3048;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3002;</li>\n<li><code>error.domainEmitter</code> &#x3053;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x5171;&#x306B; <code>error</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x751F;&#x6210;&#x3057;&#x305F; EventEmitter&#x3002;</li>\n<li><code>error.domainBound</code> &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;&#x3067;&#x3001;\n&#x305D;&#x306E;&#x7B2C; 1 &#x5F15;&#x6570;&#x306B;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x6E21;&#x3055;&#x308C;&#x305F;&#x3082;&#x306E;&#x3002;</li>\n<li><code>error.domainThrown</code> &#x30A8;&#x30E9;&#x30FC;&#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x304B;&#x3001;EventEmitter &#x304B;&#x3089;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x304B;&#x3001;\n&#x305D;&#x308C;&#x3068;&#x3082;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;&#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x304B;&#x3092;&#x793A;&#x3059; boolean &#x5024;&#x3002;</li>\n</ul>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Implicit Binding&quot;,
          &quot;name&quot;: &quot;Implicit Binding&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nIf domains are in use, then all **new** EventEmitter objects (including\nStream objects, requests, responses, etc.) will be implicitly bound to\nthe active domain at the time of their creation.\n-->\n\n<p>&#x4E00;&#x5EA6;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x5168;&#x3066;&#x306E; <strong>&#x65B0;&#x3057;&#x3044;</strong> EventEmitter &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;\n(&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3084;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3001;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x3001;&#x305D;&#x306E;&#x4ED6;&#x3092;&#x542B;&#x3080;) &#x306F;&#x3001;\n&#x305D;&#x308C;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;&#x6642;&#x70B9;&#x3067;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x6697;&#x9ED9;&#x7684;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAdditionally, callbacks passed to lowlevel event loop requests (such as\nto fs.open, or other callback-taking methods) will automatically be\nbound to the active domain.  If they throw, then the domain will catch\nthe error.\n-->\n\n<p>&#x52A0;&#x3048;&#x3066;&#x3001;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x8981;&#x6C42; (&#x4F8B;&#x3048;&#x3070; <code>fs.open()</code>&#x3001;\n&#x3042;&#x308B;&#x3044;&#x306F;&#x4ED6;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B;&#x30E1;&#x30BD;&#x30C3;&#x30C9;) &#x3082;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;\n&#x675F;&#x7E1B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x305D;&#x308C;&#x3089;&#x304C;&#x4F8B;&#x5916;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3059;&#x308B;&#x3068;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F;&#x305D;&#x308C;&#x3092;&#x6355;&#x307E;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn order to prevent excessive memory usage, Domain objects themselves\nare not implicitly added as children of the active domain.  If they\nwere, then it would be too easy to prevent request and response objects\nfrom being properly garbage collected.\n-->\n\n<p>&#x5FC5;&#x8981;&#x4EE5;&#x4E0A;&#x306B;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x306E;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x305D;&#x308C;&#x81EA;&#x8EAB;&#x306F;\n&#x6697;&#x9ED9;&#x7684;&#x306B;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x5B50;&#x3068;&#x3057;&#x3066;&#x6697;&#x9ED9;&#x7684;&#x306B;&#x306F;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x3092;&#x3059;&#x308C;&#x3070;&#x3001;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3084;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C;&#x304D;&#x3061;&#x3093;&#x3068; GC &#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;\n&#x3042;&#x307E;&#x308A;&#x306B;&#x3082;&#x7C21;&#x5358;&#x306B;&#x59A8;&#x5BB3;&#x3057;&#x3066;&#x3057;&#x307E;&#x3046;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nIf you *want* to nest Domain objects as children of a parent Domain,\nthen you must explicitly add them.\n-->\n\n<p>&#x3082;&#x3057;&#x30CD;&#x30B9;&#x30C8;&#x3057;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x5B50;&#x3068;&#x3057;&#x3066;&#x4ED6;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B; <em>&#x52A0;&#x3048;&#x305F;&#x3051;&#x308C;&#x3070;</em>\n&#x660E;&#x793A;&#x7684;&#x306B;&#x305D;&#x308C;&#x3092;&#x52A0;&#x3048;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nImplicit binding routes thrown errors and `'error'` events to the\nDomain's `error` event, but does not register the EventEmitter on the\nDomain, so `domain.dispose()` will not shut down the EventEmitter.\nImplicit binding only takes care of thrown errors and `'error'` events.\n-->\n\n<p>&#x6697;&#x9ED9;&#x7684;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x3084; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x3001;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x305D;&#x306E; EventEmitter &#x3092;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x767B;&#x9332;&#x3057;&#x306A;&#x3044;&#x306E;&#x3067;&#x3001;<code>domain.dispose()</code> &#x306F;\nEventEmitter &#x3092;&#x30B7;&#x30E3;&#x30C3;&#x30C8;&#x30C0;&#x30A6;&#x30F3;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x6697;&#x9ED9;&#x7684;&#x306A;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x4F8B;&#x5916;&#x3068; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3060;&#x3051;\n&#x6CE8;&#x610F;&#x3092;&#x6255;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Explicit Binding&quot;,
          &quot;name&quot;: &quot;Explicit Binding&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nSometimes, the domain in use is not the one that ought to be used for a\nspecific event emitter.  Or, the event emitter could have been created\nin the context of one domain, but ought to instead be bound to some\nother domain.\n-->\n\n<p>&#x6642;&#x306B;&#x306F;&#x3001;&#x4F7F;&#x7528;&#x4E2D;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F;&#x7279;&#x5B9A;&#x306E; EventEmitter &#x306B;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3042;&#x308B;&#x3044;&#x306F;&#x3001;EventEmitter &#x306F;&#x3042;&#x308B;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x4E2D;&#x3067;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x305D;&#x306E;&#x4ED6;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x7D50;&#x3073;&#x3064;&#x3051;&#x3089;&#x308C;&#x308B;&#x3079;&#x304D;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nFor example, there could be one domain in use for an HTTP server, but\nperhaps we would like to have a separate domain to use for each request.\n-->\n\n<p>&#x4F8B;&#x3048;&#x3070;&#x3001;HTTP &#x30B5;&#x30FC;&#x30D0;&#x3067;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x4E00;&#x3064;&#x3042;&#x308B;&#x3068;&#x3057;&#x3066;&#x3082;&#x3001;\n&#x304A;&#x305D;&#x3089;&#x304F;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x6BCE;&#x306B;&#x72EC;&#x7ACB;&#x3057;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x6301;&#x3061;&#x305F;&#x3044;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nThat is possible via explicit binding.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x660E;&#x793A;&#x7684;&#x306A;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306B;&#x3088;&#x3063;&#x3066;&#x53EF;&#x80FD;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>// create a top-level domain for the server\nvar serverDomain = domain.create();\n\nserverDomain.run(function() {\n  // server is created in the scope of serverDomain\n  http.createServer(function(req, res) {\n    // req and res are also created in the scope of serverDomain\n    // however, we&apos;d prefer to have a separate domain for each request.\n    // create it first thing, and add req and res to it.\n    var reqd = domain.create();\n    reqd.add(req);\n    reqd.add(res);\n    reqd.on(&apos;error&apos;, function(er) {\n      console.error(&apos;Error&apos;, er, req.url);\n      try {\n        res.writeHead(500);\n        res.end(&apos;Error occurred, sorry.&apos;);\n      } catch (er) {\n        console.error(&apos;Error sending 500&apos;, er, req.url);\n      }\n    });\n  }).listen(1337);\n});</code></pre>\n&quot;
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;domain.create()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;create&quot;,
          &quot;signatures&quot;: [
            {
              &quot;return&quot;: {
                &quot;textRaw&quot;: &quot;return: {Domain} &quot;,
                &quot;name&quot;: &quot;return&quot;,
                &quot;type&quot;: &quot;Domain&quot;
              },
              &quot;params&quot;: []
            },
            {
              &quot;params&quot;: []
            }
          ],
          &quot;desc&quot;: &quot;<!--\nReturns a new Domain object.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: Domain&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Domain&quot;,
          &quot;desc&quot;: &quot;<!--\nThe Domain class encapsulates the functionality of routing errors and\nuncaught exceptions to the active Domain object.\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30AF;&#x30E9;&#x30B9;&#x306F;&#x30A8;&#x30E9;&#x30FC;&#x306E;&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x3084;&#x6355;&#x307E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x4F8B;&#x5916;&#x3092;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x3059;&#x308B;&#x6A5F;&#x80FD;&#x3092;&#x30AB;&#x30D7;&#x30BB;&#x30EB;&#x5316;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nDomain is a child class of [EventEmitter][].  To handle the errors that it\ncatches, listen to its `error` event.\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F; [EventEmitter][] &#x306E;&#x5B50;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x304C;&#x6355;&#x307E;&#x3048;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x6271;&#x3044;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;<code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;domain.run(fn)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;run&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`fn` {Function} &quot;,
                      &quot;name&quot;: &quot;fn&quot;,
                      &quot;type&quot;: &quot;Function&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;fn&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nRun the supplied function in the context of the domain, implicitly\nbinding all event emitters, timers, and lowlevel requests that are\ncreated in that context.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x95A2;&#x6570;&#x3092;&#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x5168;&#x3066;&#x306E; EventEmitter&#x3001;&#x30BF;&#x30A4;&#x30DE;&#x3001;&#x305D;&#x3057;&#x3066;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x8981;&#x6C42;&#x306F;\n&#x6697;&#x9ED9;&#x7684;&#x306B;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis is the most basic way to use a domain.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3082;&#x3063;&#x3068;&#x3082;&#x4E00;&#x822C;&#x7684;&#x306A;&#x65B9;&#x6CD5;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var d = domain.create();\nd.on(&apos;error&apos;, function(er) {\n  console.error(&apos;Caught error!&apos;, er);\n});\nd.run(function() {\n  process.nextTick(function() {\n    setTimeout(function() { // simulating some various async stuff\n      fs.open(&apos;non-existent file&apos;, &apos;r&apos;, function(er, fd) {\n        if (er) throw er;\n        // proceed...\n      });\n    }, 100);\n  });\n});</code></pre>\n<!--\nIn this example, the `d.on('error')` handler will be triggered, rather\nthan crashing the program.\n-->\n\n<p>&#x3053;&#x306E;&#x4F8B;&#x3067;&#x306F;&#x3001;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x30AF;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x305B;&#x305A;&#x306B; <code>d.on(&apos;error&apos;)</code> &#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x304C;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;domain.add(emitter)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;add&quot;,
              &quot;desc&quot;: &quot;<!--\n* `emitter` {EventEmitter | Timer} emitter or timer to be added to the domain\n-->\n\n<ul>\n<li><code>emitter</code> {EventEmitter | Timer} &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x52A0;&#x3048;&#x3089;&#x308C;&#x308B; EventEmitter\n&#x307E;&#x305F;&#x306F;&#x30BF;&#x30A4;&#x30DE;</li>\n</ul>\n<!--\nExplicitly adds an emitter to the domain.  If any event handlers called by\nthe emitter throw an error, or if the emitter emits an `error` event, it\nwill be routed to the domain's `error` event, just like with implicit\nbinding.\n-->\n\n<p>&#x660E;&#x793A;&#x7684;&#x306B; EventEmitter &#x3092;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E; EventEmitter &#x304B;&#x3089;&#x547C;&#x3070;&#x308C;&#x305F;&#x3069;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x304C;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x3066;&#x3082;&#x3001;\n&#x3042;&#x308B;&#x3044;&#x306F;&#x3053;&#x306E; EventEmitter &#x304C; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x767A;&#x751F;&#x3057;&#x3066;&#x3082;&#x3001;\n&#x6697;&#x9ED9;&#x7684;&#x306B;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x305F;&#x306E;&#x3068;&#x540C;&#x69D8;&#x3001;&#x305D;&#x308C;&#x306F;&#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E; <code>&apos;error</code>&apos;\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis also works with timers that are returned from `setInterval` and\n`setTimeout`.  If their callback function throws, it will be caught by\nthe domain 'error' handler.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x540C;&#x69D8;&#x306B; <code>setIntervalu</code> &#x304A;&#x3088;&#x3073; <code>setTimeout</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30BF;&#x30A4;&#x30DE;&#x3067;&#x3082;\n&#x50CD;&#x304D;&#x307E;&#x3059;&#x3002;&#x305D;&#x308C;&#x3089;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;&#x304C;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3059;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E; <code>&apos;error&apos;</code> &#x30CF;&#x30F3;&#x30C9;&#x306B;&#x6355;&#x307E;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the Timer or EventEmitter was already bound to a domain, it is removed\nfrom that one, and bound to this one instead.\n-->\n\n<p>&#x3082;&#x3057;&#x30BF;&#x30A4;&#x30DE;&#x307E;&#x305F;&#x306F; EventEmitter &#x304C;&#x65E2;&#x306B;&#x4ED6;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x3066;&#x3044;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x5143;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x524A;&#x9664;&#x3055;&#x308C;&#x3001;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;emitter&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.remove(emitter)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;remove&quot;,
              &quot;desc&quot;: &quot;<!--\n* `emitter` {EventEmitter | Timer} emitter or timer to be removed from the domain\n-->\n\n<ul>\n<li><code>emitter</code> {EventEmitter | Timer} &#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x524A;&#x9664;&#x3055;&#x308C;&#x308B; EventEmitter\n&#x307E;&#x305F;&#x306F;&#x30BF;&#x30A4;&#x30DE;</li>\n</ul>\n<!--\nThe opposite of `domain.add(emitter)`.  Removes domain handling from the\nspecified emitter.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; <code>domain.add(emitter)</code> &#x3068;&#x5BFE;&#x7167;&#x7684;&#x3067;&#x3059;&#x3002;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F; EventEmitter &#x3092;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x524A;&#x9664;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;emitter&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.bind(callback)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;bind&quot;,
              &quot;desc&quot;: &quot;<!--\n* `callback` {Function} The callback function\n* return: {Function} The bound function\n-->\n\n<ul>\n<li><code>callback</code> {Function} &#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;</li>\n<li>return: {Function} &#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x95A2;&#x6570;</li>\n</ul>\n<!--\nThe returned function will be a wrapper around the supplied callback\nfunction.  When the returned function is called, any errors that are\nthrown will be routed to the domain's `error` event.\n-->\n\n<p>&#x8FD4;&#x3055;&#x308C;&#x308B;&#x95A2;&#x6570;&#x306F;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;&#x306E;&#x30E9;&#x30C3;&#x30D1;&#x30FC;&#x3067;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x305F;&#x95A2;&#x6570;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x306F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E; <code>&apos;error&apos;</code>\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<h4>Example</h4>\n<pre><code>var d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &apos;utf8&apos;, d.bind(function(er, data) {\n    // if this throws, it will also be passed to the domain\n    return cb(er, data ? JSON.parse(data) : null);\n  }));\n}\n\nd.on(&apos;error&apos;, function(er) {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;callback&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.intercept(callback)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;intercept&quot;,
              &quot;desc&quot;: &quot;<!--\n* `callback` {Function} The callback function\n* return: {Function} The intercepted function\n-->\n\n<ul>\n<li><code>callback</code> {Function} &#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;</li>\n<li>return: {Function} &#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30BB;&#x30D7;&#x30C8;&#x3055;&#x308C;&#x305F;&#x95A2;&#x6570;</li>\n</ul>\n<!--\nThis method is almost identical to `domain.bind(callback)`.  However, in\naddition to catching thrown errors, it will also intercept `Error`\nobjects sent as the first argument to the function.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x307B;&#x3068;&#x3093;&#x3069; <code>domain.bind(callback)</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n&#x305F;&#x3060;&#x3057;&#x3001;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x6355;&#x307E;&#x3048;&#x308B;&#x3053;&#x3068;&#x306B;&#x52A0;&#x3048;&#x3066;&#x3001;&#x95A2;&#x6570;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x6700;&#x521D;&#x306E;&#x5F15;&#x6570;&#x304C;\n<code>Error</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x5834;&#x5408;&#x3082;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30BB;&#x30D7;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn this way, the common `if (er) return callback(er);` pattern can be replaced\nwith a single error handler in a single place.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;&#x4E00;&#x822C;&#x7684;&#x306A; <code>if (er) return callback(er);</code> &#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x3092;&#x4E00;&#x30AB;&#x6240;&#x3067;&#x5358;&#x4E00;&#x306E;\n&#x30A8;&#x30E9;&#x30FC;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x306B;&#x7F6E;&#x304D;&#x63DB;&#x3048;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<h4>Example</h4>\n<pre><code>var d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &apos;utf8&apos;, d.intercept(function(data) {\n    // note, the first argument is never passed to the\n    // callback since it is assumed to be the &apos;Error&apos; argument\n    // and thus intercepted by the domain.\n\n    // if this throws, it will also be passed to the domain\n    // so the error-handling logic can be moved to the &apos;error&apos;\n    // event on the domain instead of being repeated throughout\n    // the program.\n    return cb(null, JSON.parse(data));\n  }));\n}\n\nd.on(&apos;error&apos;, function(er) {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;callback&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.enter()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;enter&quot;,
              &quot;desc&quot;: &quot;<!--\nThe `enter` method is plumbing used by the `run`, `bind`, and `intercept`\nmethods to set the active domain. It sets `domain.active` and `process.domain`\nto the domain, and implicitly pushes the domain onto the domain stack managed\nby the domain module (see `domain.exit()` for details on the domain stack). The\ncall to `enter` delimits the beginning of a chain of asynchronous calls and I/O\noperations bound to a domain.\n-->\n\n<p><code>enter()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3001;<code>run()</code>&#x3001;<code>bind()</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>intercept()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;\n&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x7D50;&#x3073;&#x3064;&#x3051;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; (&#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3001;&#x3059;&#x306A;&#x308F;&#x3061; <code>this</code> &#x3092;) <code>domain.active</code> &#x304A;&#x3088;&#x3073;\n<code>process.domain</code> &#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x3088;&#x3063;&#x3066;&#x7BA1;&#x7406;&#x3055;&#x308C;&#x308B;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x306B;&#x6697;&#x9ED9;&#x7684;&#x306B;&#x7A4D;&#x307F;&#x4E0A;&#x3052;&#x307E;&#x3059; (&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x306B;&#x95A2;&#x3059;&#x308B;&#x8A73;&#x7D30;&#x306F;\n<code>domain.exit()</code> &#x3092;&#x53C2;&#x7167;)&#x3002;\n\n</p>\n<!--\nCalling `enter` changes only the active domain, and does not alter the domain\nitself. `Enter` and `exit` can be called an arbitrary number of times on a\nsingle domain.\n-->\n\n<p><code>enter()</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306F;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x3053;&#x3068;&#x3060;&#x3051;&#x3067;&#x3001;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x81EA;&#x8EAB;&#x306F;&#x5909;&#x5316;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>enter()</code> &#x3068; <code>exit()</code> &#x306F;&#x4E00;&#x3064;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x4F55;&#x5EA6;&#x3067;&#x3082;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the domain on which `enter` is called has been disposed, `enter` will return\nwithout setting the domain.\n-->\n\n<p>&#x3082;&#x3057; <code>enter()</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x7834;&#x68C4;&#x6E08;&#x307F;&#x3060;&#x3068;&#x3001;\n<code>enter()</code> &#x306F;&#x4F55;&#x3082;&#x8A2D;&#x5B9A;&#x305B;&#x305A;&#x306B;&#x30EA;&#x30BF;&#x30FC;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.exit()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;exit&quot;,
              &quot;desc&quot;: &quot;<!--\nThe `exit` method exits the current domain, popping it off the domain stack.\nAny time execution is going to switch to the context of a different chain of\nasynchronous calls, it's important to ensure that the current domain is exited.\nThe call to `exit` delimits either the end of or an interruption to the chain\nof asynchronous calls and I/O operations bound to a domain.\n-->\n\n<p><code>exit()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x73FE;&#x5728;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x629C;&#x3051;&#x51FA;&#x3057;&#x3001;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x304B;&#x3089;&#x53D6;&#x308A;&#x9664;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x975E;&#x540C;&#x671F;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306E;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x304C;&#x7570;&#x306A;&#x308B;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308B;&#x5834;&#x5408;&#x306F;&#x3069;&#x3093;&#x306A;&#x6642;&#x3067;&#x3082;&#x3001;\n&#x73FE;&#x5728;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x78BA;&#x5B9F;&#x306B;&#x629C;&#x3051;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306F;&#x91CD;&#x8981;&#x3067;&#x3059;&#x3002;\n<code>exit()</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306F;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x975E;&#x540C;&#x671F;&#x547C;&#x3073;&#x51FA;&#x3057;&#x304A;&#x3088;&#x3073;\nI/O &#x64CD;&#x4F5C;&#x306E;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3092;&#x3001;&#x7D42;&#x7AEF;&#x307E;&#x305F;&#x306F;&#x9014;&#x4E2D;&#x3067;&#x533A;&#x5207;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf there are multiple, nested domains bound to the current execution context,\n`exit` will exit any domains nested within this domain.\n-->\n\n<p>&#x3082;&#x3057;&#x8907;&#x6570;&#x306E;&#x30CD;&#x30B9;&#x30C8;&#x3057;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x73FE;&#x5728;&#x306E;&#x5B9F;&#x884C;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x3068;&#x3001;\n<code>exit()</code> &#x306F;&#x30CD;&#x30B9;&#x30C8;&#x3057;&#x305F;&#x3069;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x3082;&#x629C;&#x3051;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCalling `exit` changes only the active domain, and does not alter the domain\nitself. `Enter` and `exit` can be called an arbitrary number of times on a\nsingle domain.\n-->\n\n<p><code>exit()</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306F;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x3053;&#x3068;&#x3060;&#x3051;&#x3067;&#x3001;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x81EA;&#x8EAB;&#x306F;&#x5909;&#x5316;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>enter()</code> &#x3068; <code>exit()</code> &#x306F;&#x4E00;&#x3064;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x4F55;&#x5EA6;&#x3067;&#x3082;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the domain on which `exit` is called has been disposed, `exit` will return\nwithout exiting the domain.\n-->\n\n<p>&#x3082;&#x3057; <code>exit()</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x7834;&#x68C4;&#x6E08;&#x307F;&#x3060;&#x3068;&#x3001;\n<code>exit()</code> &#x306F;&#x4F55;&#x3082;&#x8A2D;&#x5B9A;&#x305B;&#x305A;&#x306B;&#x30EA;&#x30BF;&#x30FC;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.dispose()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;dispose&quot;,
              &quot;desc&quot;: &quot;<!--\nThe dispose method destroys a domain, and makes a best effort attempt to\nclean up any and all IO that is associated with the domain.  Streams are\naborted, ended, closed, and/or destroyed.  Timers are cleared.\nExplicitly bound callbacks are no longer called.  Any error events that\nare raised as a result of this are ignored.\n-->\n\n<p><code>dispose()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x7834;&#x68C4;&#x3057;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x95A2;&#x9023;&#x3065;&#x3051;&#x3089;&#x308C;&#x305F;&#x5168;&#x3066;&#x306E;\nI/O &#x3092;&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x30AF;&#x30EA;&#x30FC;&#x30F3;&#x30CA;&#x30C3;&#x30D7;&#x3057;&#x3088;&#x3046;&#x3068;&#x8A66;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x30A2;&#x30DC;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3001;&#x7D42;&#x4E86;&#x3055;&#x308C;&#x3001;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x3001;&#x305D;&#x3057;&#x3066;&#xFF0F;&#x307E;&#x305F;&#x306F;&#x7834;&#x68C4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30BF;&#x30A4;&#x30DE;&#x306F;&#x30AF;&#x30EA;&#x30A2;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x660E;&#x793A;&#x7684;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x3082;&#x3046;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x7D50;&#x679C;&#x3068;&#x3057;&#x3066;&#x767A;&#x751F;&#x3059;&#x308B;&#x3069;&#x3093;&#x306A;&#x30A8;&#x30E9;&#x30FC;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3082;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe intention of calling `dispose` is generally to prevent cascading\nerrors when a critical part of the Domain context is found to be in an\nerror state.\n-->\n\n<p><code>dispose()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x610F;&#x56F3;&#x306F;&#x901A;&#x5E38;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x72B6;&#x614B;&#x306E;&#x4E2D;&#x3067;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306E;\n&#x30AF;&#x30EA;&#x30C6;&#x30A3;&#x30AB;&#x30EB;&#x306A;&#x90E8;&#x5206;&#x304C;&#x898B;&#x3064;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x3001;&#x30AB;&#x30B9;&#x30B1;&#x30FC;&#x30C9;&#x3057;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x9632;&#x3050;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nOnce the domain is disposed the `dispose` event will emit.\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x7834;&#x68C4;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;<code>&apos;dispose&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that IO might still be performed.  However, to the highest degree\npossible, once a domain is disposed, further errors from the emitters in\nthat set will be ignored.  So, even if some remaining actions are still\nin flight, Node.js will not communicate further about them.\n-->\n\n<p>I/O &#x304C;&#x307E;&#x3060;&#x884C;&#x308F;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x9AD8;&#x3044;&#x8996;&#x70B9;&#x304B;&#x3089;&#x898B;&#x308B;&#x3068;&#x3001;&#x4E00;&#x5EA6;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x7834;&#x68C4;&#x3055;&#x308C;&#x308C;&#x3070;&#x3001;\n&#x305D;&#x306E;&#x96C6;&#x5408;&#x306E;&#x4E2D;&#x306E; EventEmitter &#x304B;&#x3089;&#x306E;&#x3055;&#x3089;&#x306A;&#x308B;&#x30A8;&#x30E9;&#x30FC;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;&#x305F;&#x3068;&#x3048;&#x6B8B;&#x308A;&#x306E;&#x30A2;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x307E;&#x3060;&#x5B9F;&#x884C;&#x4E2D;&#x3060;&#x3068;&#x3057;&#x3066;&#x3082;&#x3001;\nNode.js &#x306F;&#x305D;&#x308C;&#x3089;&#x3068;&#x30B3;&#x30DF;&#x30E5;&#x30CB;&#x30B1;&#x30FC;&#x30C8;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;`members` {Array} &quot;,
              &quot;name&quot;: &quot;members&quot;,
              &quot;desc&quot;: &quot;<!--\nAn array of timers and event emitters that have been explicitly added\nto the domain.\n-->\n\n<p>&#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x660E;&#x793A;&#x7684;&#x306B;&#x52A0;&#x3048;&#x3089;&#x308C;&#x305F;&#x30BF;&#x30A4;&#x30DE;&#x307E;&#x305F;&#x306F; EventEmitter &#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Domain&quot;
    }
  ]
}
