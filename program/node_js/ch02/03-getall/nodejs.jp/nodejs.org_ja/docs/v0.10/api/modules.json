{
  &quot;source&quot;: &quot;doc/api/modules.markdown&quot;,
  &quot;modules&quot;: [
    {
      &quot;textRaw&quot;: &quot;Modules&quot;,
      &quot;name&quot;: &quot;module&quot;,
      &quot;stability&quot;: 5,
      &quot;stabilityText&quot;: &quot;Locked&quot;,
      &quot;desc&quot;: &quot;<!--\nNode has a simple module loading system.  In Node, files and modules are in\none-to-one correspondence.  As an example, `foo.js` loads the module\n`circle.js` in the same directory.\n-->\n\n<p>Node &#x306F;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306A;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30ED;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\nNode &#x3067;&#x306F;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#xFF11;&#x5BFE;&#xFF11;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3068;&#x3057;&#x3066;&#x3001; <code>foo.js</code> &#x306F;&#x3001;&#x540C;&#x3058;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x3042;&#x308B; <code>circle.js</code> &#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe contents of `foo.js`:\n-->\n\n<p><code>foo.js</code> &#x306E;&#x5185;&#x5BB9;:\n\n</p>\n<pre><code>var circle = require(&apos;./circle.js&apos;);\nconsole.log( &apos;The area of a circle of radius 4 is &apos;\n           + circle.area(4));</code></pre>\n<!--\nThe contents of `circle.js`:\n-->\n\n<p><code>circle.js</code> &#x306E;&#x5185;&#x5BB9;:\n\n</p>\n<pre><code>var PI = Math.PI;\n\nexports.area = function (r) {\n  return PI * r * r;\n};\n\nexports.circumference = function (r) {\n  return 2 * PI * r;\n};</code></pre>\n<!--\nThe module `circle.js` has exported the functions `area()` and\n`circumference()`.  To add functions and objects to the root of your module,\nyou can add them to the special `exports` object.\n-->\n\n<p><code>circle.js</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F; <code>area()</code> &#x3068; <code>circumference()</code> &#x3092;&#x516C;&#x958B;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x95A2;&#x6570;&#x3084;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30EB;&#x30FC;&#x30C8;&#x306B;&#x52A0;&#x3048;&#x308B;&#x306B;&#x306F;&#x3001;\n<code>exports</code> &#x3068;&#x3044;&#x3046;&#x7279;&#x5225;&#x306A;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x52A0;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nVariables local to the module will be private, as though the module was wrapped\nin a function. In this example the variable `PI` is private to `circle.js`.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x5909;&#x6570;&#x306F;&#x95A2;&#x6570;&#x306B;&#x5305;&#x307E;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x306E;&#x3088;&#x3046;&#x306B;&#x30D7;&#x30E9;&#x30A4;&#x30D9;&#x30FC;&#x30C8;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x4F8B;&#x306E;&#x5834;&#x5408;&#x3001;&#x5909;&#x6570; <code>PI</code> &#x306F; <code>circle.js</code> &#x306E;&#x30D7;&#x30E9;&#x30A4;&#x30D9;&#x30FC;&#x30C8;&#x5909;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you want the root of your module's export to be a function (such as a\nconstructor) or if you want to export a complete object in one assignment\ninstead of building it one property at a time, assign it to `module.exports`\ninstead of `exports`.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30EB;&#x30FC;&#x30C8;&#x3068;&#x3057;&#x3066;&#x95A2;&#x6570; (&#x305F;&#x3068;&#x3048;&#x3070;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;) &#x3092;&#x5F8C;&#x6094;&#x3057;&#x305F;&#x308A;&#x3001;\n&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x4E00;&#x3064;&#x305A;&#x3064;&#x4EE3;&#x5165;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5B8C;&#x5168;&#x306A;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4E00;&#x5EA6;&#x306B;\n&#x516C;&#x958B;&#x3057;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;<code>exports</code> &#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B; <code>module.exports</code>&#x306B;&#x4EE3;&#x5165;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBelow, `bar.js` makes use of the `square` module, which exports a constructor:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x3067;&#x306F;&#x3001;<code>bar.js</code> &#x306F; <code>square</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x516C;&#x958B;&#x3059;&#x308B;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;\n&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var square = require(&apos;./square.js&apos;);\nvar mySquare = square(2);\nconsole.log(&apos;The area of my square is &apos; + mySquare.area());</code></pre>\n<!--\nThe `square` module is defined in `square.js`:\n-->\n\n<p><code>square.js</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F; <code>square.js</code> &#x3067;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>// assigning to exports will not modify module, must use module.exports\nmodule.exports = function(width) {\n  return {\n    area: function() {\n      return width * width;\n    }\n  };\n}</code></pre>\n<!--\nThe module system is implemented in the `require(\"module\")` module.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306F; <code>require(&quot;module&quot;)</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x3088;&#x3063;&#x3066;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;Cycles&quot;,
          &quot;name&quot;: &quot;Cycles&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nWhen there are circular `require()` calls, a module might not be\ndone being executed when it is returned.\n\nConsider this situation:\n-->\n\n<p><code>require()</code> &#x304C;&#x5FAA;&#x74B0;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;&#x5B9F;&#x884C;&#x304C;&#x5B8C;&#x4E86;&#x3057;&#x3066;&#x3044;&#x306A;&#x3044;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x6B21;&#x306E;&#x72B6;&#x6CC1;&#x3092;&#x8003;&#x3048;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;:\n\n</p>\n<p><code>a.js</code>:\n\n</p>\n<pre><code>console.log(&apos;a starting&apos;);\nexports.done = false;\nvar b = require(&apos;./b.js&apos;);\nconsole.log(&apos;in a, b.done = %j&apos;, b.done);\nexports.done = true;\nconsole.log(&apos;a done&apos;);</code></pre>\n<p><code>b.js</code>:\n\n</p>\n<pre><code>console.log(&apos;b starting&apos;);\nexports.done = false;\nvar a = require(&apos;./a.js&apos;);\nconsole.log(&apos;in b, a.done = %j&apos;, a.done);\nexports.done = true;\nconsole.log(&apos;b done&apos;);</code></pre>\n<p><code>main.js</code>:\n\n</p>\n<pre><code>console.log(&apos;main starting&apos;);\nvar a = require(&apos;./a.js&apos;);\nvar b = require(&apos;./b.js&apos;);\nconsole.log(&apos;in main, a.done=%j, b.done=%j&apos;, a.done, b.done);</code></pre>\n<!--\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`.  At that\npoint, `b.js` tries to load `a.js`.  In order to prevent an infinite\nloop an **unfinished copy** of the `a.js` exports object is returned to the\n`b.js` module.  `b.js` then finishes loading, and its `exports` object is\nprovided to the `a.js` module.\n\nBy the time `main.js` has loaded both modules, they're both finished.\nThe output of this program would thus be:\n-->\n\n<p><code>main.js</code> &#x304C; <code>a.js</code> &#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x3068;&#x3001;<code>a.js</code> &#x306F; <code>b.js</code> &#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306F;&#x3001;<code>b.js</code> &#x306F; <code>a.js</code> &#x306E;&#x30ED;&#x30FC;&#x30C9;&#x3092;&#x8A66;&#x307F;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n&#x7121;&#x9650;&#x30EB;&#x30FC;&#x30D7;&#x3092;&#x907F;&#x3051;&#x308B;&#x305F;&#x3081;&#x3001;<code>a.js</code> &#x304C;&#x30A8;&#x30AF;&#x30B9;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;\n<strong>&#x672A;&#x5B8C;&#x4E86;&#x306E;&#x30B3;&#x30D4;&#x30FC;</strong> &#x304C; <code>b.js</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>b.js</code> &#x306E;&#x30ED;&#x30FC;&#x30C9;&#x304C;&#x5B8C;&#x4E86;&#x3059;&#x308B;&#x3068;&#x3001;<code>exports</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C; <code>a.js</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;\n&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>main.js</code> &#x304C;&#x4E21;&#x65B9;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x307E;&#x3067;&#x306B;&#x306F;&#x3001;&#x3069;&#x3061;&#x3089;&#x3082;&#x5B8C;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x51FA;&#x529B;&#x306F;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<pre><code>$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done=true, b.done=true</code></pre>\n<!--\nIf you have cyclic module dependencies in your program, make sure to\nplan accordingly.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x5FAA;&#x74B0;&#x53C2;&#x7167;&#x3059;&#x308B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x6301;&#x3064;&#x5834;&#x5408;&#x306F;&#x3001;&#x8A08;&#x753B;&#x304C;&#x9069;&#x5207;&#x304B;&#x78BA;&#x8A8D;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Core Modules&quot;,
          &quot;name&quot;: &quot;Core Modules&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nNode has several modules compiled into the binary.  These modules are\ndescribed in greater detail elsewhere in this documentation.\n\nThe core modules are defined in node's source in the `lib/` folder.\n\nCore modules are always preferentially loaded if their identifier is\npassed to `require()`.  For instance, `require('http')` will always\nreturn the built in HTTP module, even if there is a file by that name.\n-->\n\n<p>Node &#x306B;&#x306F;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x306B;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x6E08;&#x307F;&#x306E;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F;&#x3001;&#x3053;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x306E;&#x4ED6;&#x306E;&#x5834;&#x6240;&#x3067;&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x8A18;&#x8FF0;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30B3;&#x30A2;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x3001; Node &#x306E;&#x30BD;&#x30FC;&#x30B9;&#x306E; <code>lib/</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x306B;&#x3066;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>require()</code> &#x3067;&#x306F;&#x5E38;&#x306B;&#x30B3;&#x30A2;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x8B58;&#x5225;&#x540D;&#x3092;&#x512A;&#x5148;&#x7684;&#x306B;&#x89E3;&#x91C8;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070; <code>require(&apos;http&apos;)</code> &#x306F;&#x3001;&#x4F8B;&#x3048;&#x540C;&#x540D;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x5B58;&#x5728;&#x3057;&#x3066;&#x3044;&#x305F;&#x3068;&#x3057;&#x3066;&#x3082;&#x3001;&#x5E38;&#x306B;&#x30D3;&#x30EB;&#x30C8;&#x30A4;&#x30A4;&#x30F3;&#x306E; HTTP &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;File Modules&quot;,
          &quot;name&quot;: &quot;File Modules&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nIf the exact filename is not found, then node will attempt to load the\nrequired filename with the added extension of `.js`, `.json`, and then `.node`.\n\n`.js` files are interpreted as JavaScript text files, and `.json` files are\nparsed as JSON text files. `.node` files are interpreted as compiled addon\nmodules loaded with `dlopen`.\n\nA module prefixed with `'/'` is an absolute path to the file.  For\nexample, `require('/home/marco/foo.js')` will load the file at\n`/home/marco/foo.js`.\n\nA module prefixed with `'./'` is relative to the file calling `require()`.\nThat is, `circle.js` must be in the same directory as `foo.js` for\n`require('./circle')` to find it.\n\nWithout a leading '/' or './' to indicate a file, the module is either a\n\"core module\" or is loaded from a `node_modules` folder.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x540D;&#x524D;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001; Node &#x306F;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x306B;\n<code>.js</code>&#x3001;<code>.json</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>.node</code> &#x3092;&#x4ED8;&#x3051;&#x305F;&#x3082;&#x306E;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3082;&#x3046;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>.js</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F; JavaScript &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x3057;&#x3066;&#x89E3;&#x91C8;&#x3055;&#x308C;&#x3001;\n<code>.json</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F; JSON &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x3057;&#x3066;&#x89E3;&#x91C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x65B9; <code>.node</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x6E08;&#x307F;&#x306E;&#x30A2;&#x30C9;&#x30AA;&#x30F3;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3068;&#x3057;&#x3066;&#x89E3;&#x91C8;&#x3055;&#x308C;&#x3001;\n<code>dlopen</code> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>&apos;/&apos;</code> &#x304B;&#x3089;&#x59CB;&#x307E;&#x308B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3078;&#x306E;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3068;&#x898B;&#x306A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001; <code>require(&apos;/home/marco/foo.js&apos;)</code> &#x306F; <code>/home/macro/foo.js</code> &#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>&apos;./&apos;</code> &#x304B;&#x3089;&#x59CB;&#x307E;&#x308B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x3001; <code>require()</code> &#x3092;&#x547C;&#x3093;&#x3060;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304B;&#x3089;&#x306E;&#x76F8;&#x5BFE;&#x30D1;&#x30B9;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3059;&#x306A;&#x308F;&#x3061;&#x3001; <code>foo.js</code> &#x304B;&#x3089; <code>require(&apos;./circle&apos;)</code> &#x306B;&#x3088;&#x3063;&#x3066; <code>circle.js</code> &#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x306B;&#x306F;&#x3001; <code>circle.js</code> &#x306F; <code>foo.js</code> &#x3068;&#x540C;&#x3058;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x5B58;&#x5728;&#x3057;&#x3066;&#x3044;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<p>&apos;/&apos; &#x3084; &apos;./&apos; &#x304C;&#x5148;&#x982D;&#x306B;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F; &quot;&#x30B3;&#x30A2;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&quot; &#x3067;&#x3042;&#x308B;&#x304B;&#x3082;&#x3057;&#x304F;&#x306F; <code>node_modules</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the given path does not exist, `require()` will throw an Error with its\n`code` property set to `'MODULE_NOT_FOUND'`.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30D1;&#x30B9;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3001;<code>require()</code> &#x306F; <code>code</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306B;\n<code>&apos;MODULE_NOT_FOUND&apos;</code> &#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Loading from `node_modules` Folders&quot;,
          &quot;name&quot;: &quot;Loading from `node_modules` Folders&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nIf the module identifier passed to `require()` is not a native module,\nand does not begin with `'/'`, `'../'`, or `'./'`, then node starts at the\nparent directory of the current module, and adds `/node_modules`, and\nattempts to load the module from that location.\n\nIf it is not found there, then it moves to the parent directory, and so\non, until the root of the tree is reached.\n\nFor example, if the file at `'/home/ry/projects/foo.js'` called\n`require('bar.js')`, then node would look in the following locations, in\nthis order:\n-->\n\n<p>&#x3082;&#x3057; <code>require()</code> &#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x8B58;&#x5225;&#x5B50;&#x304C;&#x30CD;&#x30A4;&#x30C6;&#x30A3;&#x30D6;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x304B;&#x3064;  <code>&apos;/&apos;</code> &#x3084; <code>&apos;../&apos;</code> &#x3084; <code>&apos;./&apos;</code> &#x304B;&#x3089;&#x59CB;&#x307E;&#x3089;&#x306A;&#x3044;&#x306A;&#x3089;&#x3070;&#x3001; Node &#x306F;&#x73FE;&#x5728;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x89AA;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B; <code>&apos;/node_modules&apos;</code> &#x3092;&#x4ED8;&#x4E0E;&#x3057;&#x3066;&#x305D;&#x3053;&#x304B;&#x3089;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3082;&#x3046;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x305D;&#x3053;&#x306B;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x3055;&#x3089;&#x306B;&#x89AA;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x79FB;&#x52D5;&#x3057;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x898B;&#x3064;&#x304B;&#x308B;&#x304B; root &#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x5230;&#x9054;&#x3059;&#x308B;&#x307E;&#x3067;&#x540C;&#x69D8;&#x306E;&#x3053;&#x3068;&#x3092;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x3066;&#x3044;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x4F8B;&#x3048;&#x3070; <code>&apos;/home/ry/projects/foo.js&apos;</code> &#x306E;&#x4E2D;&#x3067; <code>require(&apos;bar.js&apos;)</code> &#x3092;&#x547C;&#x3093;&#x3067;&#x3044;&#x305F;&#x5834;&#x5408;&#x3001; Node &#x306F;&#x4E0B;&#x8A18;&#x306E;&#x4F4D;&#x7F6E;&#x3092;&#x4E0A;&#x304B;&#x3089;&#x9806;&#x756A;&#x306B;&#x898B;&#x3066;&#x3044;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<ul>\n<li><code>/home/ry/projects/node_modules/bar.js</code></li>\n<li><code>/home/ry/node_modules/bar.js</code></li>\n<li><code>/home/node_modules/bar.js</code></li>\n<li><code>/node_modules/bar.js</code></li>\n</ul>\n<!--\nThis allows programs to localize their dependencies, so that they do not\nclash.\n-->\n\n<p>&#x3053;&#x306E;&#x4ED5;&#x7D44;&#x307F;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x30AF;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x3092;&#x907F;&#x3051;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x3092;&#x4E0A;&#x66F8;&#x304D;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x306E;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Folders as Modules&quot;,
          &quot;name&quot;: &quot;Folders as Modules&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nIt is convenient to organize programs and libraries into self-contained\ndirectories, and then provide a single entry point to that library.\nThere are three ways in which a folder may be passed to `require()` as\nan argument.\n\nThe first is to create a `package.json` file in the root of the folder,\nwhich specifies a `main` module.  An example package.json file might\nlook like this:\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3068;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3092;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x5185;&#x306B;&#x307E;&#x3068;&#x3081;&#x3066;&#x3001;&#x305D;&#x306E;&#x30A8;&#x30F3;&#x30C8;&#x30EA;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x63D0;&#x793A;&#x3059;&#x308B;&#x3068;&#x3044;&#x3046;&#x4FBF;&#x5229;&#x306A;&#x65B9;&#x6CD5;&#x3082;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306B;&#x306F; <code>require()</code> &#x306B;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x4F55;&#x3092;&#x6E21;&#x3059;&#x304B;&#x306B;&#x3088;&#x3063;&#x3066;3&#x901A;&#x308A;&#x306E;&#x65B9;&#x6CD5;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>1&#x3064;&#x76EE;&#x306F;&#x3001; <code>package.json</code> &#x3068;&#x3044;&#x3046;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x76F4;&#x4E0B;&#x306B;&#x4F5C;&#x6210;&#x3057;&#x3001; <code>main</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3044;&#x3046;&#x65B9;&#x6CD5;&#x3067;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001; package.json &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x3088;&#x3046;&#x306A;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<pre><code>{ &quot;name&quot; : &quot;some-library&quot;,\n  &quot;main&quot; : &quot;./lib/some-library.js&quot; }</code></pre>\n<!--\nIf this was in a folder at `./some-library`, then\n`require('./some-library')` would attempt to load\n`./some-library/lib/some-library.js`.\n\nThis is the extent of Node's awareness of package.json files.\n\nIf there is no package.json file present in the directory, then node\nwill attempt to load an `index.js` or `index.node` file out of that\ndirectory.  For example, if there was no package.json file in the above\nexample, then `require('./some-library')` would attempt to load:\n-->\n\n<p>&#x3082;&#x3057; <code>./some-library</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x5185;&#x306B;&#x3053;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x3042;&#x308C;&#x3070;&#x3001; <code>require(&apos;./some-library&apos;)</code> &#x306F; <code>./some-library/lib/some-library.js</code> &#x3092;&#x8AAD;&#x307F;&#x306B;&#x3044;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x3001; Node &#x304C; package.json &#x306E;&#x5B58;&#x5728;&#x306B;&#x6C17;&#x3065;&#x304F;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x3082;&#x305F;&#x3089;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; package.json &#x304C;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x5B58;&#x5728;&#x3057;&#x3066;&#x3044;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001; Node &#x306F;&#x305D;&#x306E;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3067; <code>index.js</code> &#x3082;&#x3057;&#x304F;&#x306F; <code>index.node</code> &#x3092;&#x63A2;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;&#x3082;&#x3057;&#x4E0A;&#x306E;&#x4F8B;&#x3067; package.json &#x304C;&#x3044;&#x308B;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x3068;&#x3059;&#x308B;&#x3068;&#x3001; <code>require(&apos;./some-library&apos;)</code> &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3082;&#x3046;&#x3068;&#x3057;&#x307E;&#x3059;: \n\n</p>\n<ul>\n<li><code>./some-library/index.js</code></li>\n<li><code>./some-library/index.node</code></li>\n</ul>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Caching&quot;,
          &quot;name&quot;: &quot;Caching&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nModules are cached after the first time they are loaded.  This means\n(among other things) that every call to `require('foo')` will get\nexactly the same object returned, if it would resolve to the same file.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x521D;&#x3081;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x3068;&#x304D;&#x306B;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3059;&#x306A;&#x308F;&#x3061;&#xFF08;&#x4ED6;&#x306E;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x3068;&#x540C;&#x69D8;&#x306B;&#xFF09; <code>require(&apos;foo&apos;)</code> &#x3092;&#x547C;&#x3076;&#x305F;&#x3073;&#x306B;&#x3001;&#x3082;&#x3057;&#x5F15;&#x6570;&#x306E;&#x610F;&#x5473;&#x3059;&#x308B;&#x3082;&#x306E;&#x304C;&#x540C;&#x4E00;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3067;&#x3042;&#x3063;&#x305F;&#x306A;&#x3089;&#x5168;&#x304F;&#x540C;&#x4E00;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nMultiple calls to `require('foo')` may not cause the module code to be\nexecuted multiple times.  This is an important feature.  With it,\n\"partially done\" objects can be returned, thus allowing transitive\ndependencies to be loaded even when they would cause cycles.\n-->\n\n<p><code>require(&apos;foo&apos;)</code> &#x304C;&#x8907;&#x6570;&#x56DE;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x8907;&#x6570;&#x56DE;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x306F;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x91CD;&#x8981;&#x306A;&#x7279;&#x5FB4;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;&#x300C;&#x90E8;&#x5206;&#x7684;&#x306B;&#x5B8C;&#x4E86;&#x3057;&#x305F;&#x300D;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x3067;&#x3001;\n&#x63A8;&#x79FB;&#x7684;&#x306A;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x304C;&#x5FAA;&#x74B0;&#x3057;&#x3066;&#x3044;&#x3066;&#x3082;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you want to have a module execute code multiple times, then export a\nfunction, and call that function.\n-->\n\n<p>&#x3082;&#x3057;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x8907;&#x6570;&#x56DE;&#x5B9F;&#x884C;&#x3057;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;&#x95A2;&#x6570;&#x3092;&#x516C;&#x958B;&#x3057;&#x3066;&#x3001;\n&#x305D;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;miscs&quot;: [
            {
              &quot;textRaw&quot;: &quot;Module Caching Caveats&quot;,
              &quot;name&quot;: &quot;Module Caching Caveats&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;desc&quot;: &quot;<!--\nModules are cached based on their resolved filename.  Since modules may\nresolve to a different filename based on the location of the calling\nmodule (loading from `node_modules` folders), it is not a *guarantee*\nthat `require('foo')` will always return the exact same object, if it\nwould resolve to different files.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x306B;&#x57FA;&#x3065;&#x3044;&#x3066;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x7570;&#x306A;&#x308B;&#x5834;&#x6240;&#x306B;&#x3042;&#x308B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304B;&#x3089;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x3001;\n(<code>node_module</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x304B;&#x3089;&#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;) &#x7570;&#x306A;&#x3063;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3067;\n&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308B;&#x305F;&#x3081;&#x3001; <code>require(&apos;foo&apos;)</code> &#x304C;&#x5E38;&#x306B;&#x540C;&#x3058;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3059;\n<em>&#x4FDD;&#x8A3C;</em>&#x306F;&#x306A;&#x304F;&#x3001;&#x7570;&#x306A;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x3057;&#x3066;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;All Together...&quot;,
          &quot;name&quot;: &quot;All Together...&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nTo get the exact filename that will be loaded when `require()` is called, use\nthe `require.resolve()` function.\n-->\n\n<p><code>require()</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x6B63;&#x78BA;&#x306A;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3092;&#x5F97;&#x308B;&#x305F;&#x3081;&#x306B; <code>require.resolve()</code> &#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nPutting together all of the above, here is the high-level algorithm\nin pseudocode of what require.resolve does:\n-->\n\n<p>&#x4E0A;&#x3067;&#x8FF0;&#x3079;&#x305F;&#x3053;&#x3068;&#x3092;&#x307E;&#x3068;&#x3081;&#x308B;&#x3068;&#x3001; require.resolve &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x64EC;&#x4F3C;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x8A18;&#x8FF0;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306A;&#x30CF;&#x30A4;&#x30EC;&#x30D9;&#x30EB;&#x306A;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x306B;&#x5247;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;:\n\n</p>\n<pre><code>require(X) from module at path Y\n1. If X is a core module,\n   a. return the core module\n   b. STOP\n2. If X begins with &apos;./&apos; or &apos;/&apos; or &apos;../&apos;\n   a. LOAD_AS_FILE(Y + X)\n   b. LOAD_AS_DIRECTORY(Y + X)\n3. LOAD_NODE_MODULES(X, dirname(Y))\n4. THROW &quot;not found&quot;\n\nLOAD_AS_FILE(X)\n1. If X is a file, load X as JavaScript text.  STOP\n2. If X.js is a file, load X.js as JavaScript text.  STOP\n3. If X.node is a file, load X.node as binary addon.  STOP\n\nLOAD_AS_DIRECTORY(X)\n1. If X/package.json is a file,\n   a. Parse X/package.json, and look for &quot;main&quot; field.\n   b. let M = X + (json main field)\n   c. LOAD_AS_FILE(M)\n2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n3. If X/index.node is a file, load X/index.node as binary addon.  STOP\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS=NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_AS_FILE(DIR/X)\n   b. LOAD_AS_DIRECTORY(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let ROOT = index of first instance of &quot;node_modules&quot; in PARTS, or 0\n3. let I = count of PARTS - 1\n4. let DIRS = []\n5. while I &gt; ROOT,\n   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE\n   c. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)\n   b. DIRS = DIRS + DIR\n   c. let I = I - 1\n6. return DIRS</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Loading from the global folders&quot;,
          &quot;name&quot;: &quot;Loading from the global folders&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nIf the `NODE_PATH` environment variable is set to a colon-delimited list\nof absolute paths, then node will search those paths for modules if they\nare not found elsewhere.  (Note: On Windows, `NODE_PATH` is delimited by\nsemicolons instead of colons.)\n\nAdditionally, node will search in the following locations:\n-->\n\n<p><code>NODE_PATH</code> &#x74B0;&#x5883;&#x5909;&#x6570;&#x306B;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x30B3;&#x30ED;&#x30F3;&#x3067;&#x533A;&#x5207;&#x3063;&#x305F;&#x30EA;&#x30B9;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;\nnode &#x306F;&#x4ED6;&#x3067;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x304B;&#x3063;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x305D;&#x308C;&#x3089;&#x306E;&#x30D1;&#x30B9;&#x304B;&#x3089;&#x63A2;&#x3057;&#x307E;&#x3059;&#x3002;\n(&#x6CE8;&#x610F;: Windows &#x3067;&#x306F;&#x3001;<code>NODE_PATH</code> &#x306F;&#x30B3;&#x30ED;&#x30F3;&#x3067;&#x306F;&#x306A;&#x304F;&#x30BB;&#x30DF;&#x30B3;&#x30ED;&#x30F3;&#x3067;&#x533A;&#x5207;&#x3089;&#x308C;&#x307E;&#x3059;)\n\n</p>\n<p>&#x52A0;&#x3048;&#x308B;&#x3068;&#x3001;node &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x5834;&#x6240;&#x304B;&#x3089;&#x691C;&#x7D22;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<ul>\n<li>1: <code>$HOME/.node_modules</code></li>\n<li>2: <code>$HOME/.node_libraries</code></li>\n<li>3: <code>$PREFIX/lib/node</code></li>\n</ul>\n<!--\nWhere `$HOME` is the user's home directory, and `$PREFIX` is node's\nconfigured `node_prefix`.\n\nThese are mostly for historic reasons.  You are highly encouraged to\nplace your dependencies locally in `node_modules` folders.  They will be\nloaded faster, and more reliably.\n-->\n\n<p><code>$HOME</code> &#x306F;&#x30E6;&#x30FC;&#x30B6;&#x306E;&#x30DB;&#x30FC;&#x30E0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3001;<code>$PREFIX</code> &#x306F; node &#x3092;\nconfigure &#x3057;&#x305F;&#x6642;&#x306E; <code>node_prefix</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x3089;&#x306F;&#x4E3B;&#x306B;&#x6B74;&#x53F2;&#x7684;&#x306A;&#x7406;&#x7531;&#x306B;&#x3088;&#x308B;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x3042;&#x306A;&#x305F;&#x304C;&#x4F9D;&#x5B58;&#x3059;&#x308B;&#x3082;&#x306E;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x306E; <code>node_modules</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x306B;&#x7F6E;&#x304F;&#x3053;&#x3068;&#x304C;\n&#x5F37;&#x304F;&#x63A8;&#x5968;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x305D;&#x308C;&#x306F;&#x7D20;&#x65E9;&#x304F;&#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x3001;&#x78BA;&#x5B9F;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Accessing the main module&quot;,
          &quot;name&quot;: &quot;Accessing the main module&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nWhen a file is run directly from Node, `require.main` is set to its\n`module`. That means that you can determine whether a file has been run\ndirectly by testing\n-->\n\n<p>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;Node&#x306B;&#x3088;&#x3063;&#x3066;&#x76F4;&#x63A5;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;&#x305D;&#x306E; <code>module</code> &#x304C;\n<code>require.main</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x76F4;&#x63A5;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x305F;&#x304B;&#x3092;&#x6C7A;&#x5B9A;&#x3067;&#x304D;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>require.main === module</code></pre>\n<!--\nFor a file `foo.js`, this will be `true` if run via `node foo.js`, but\n`false` if run by `require('./foo')`.\n\nBecause `module` provides a `filename` property (normally equivalent to\n`__filename`), the entry point of the current application can be obtained\nby checking `require.main.filename`.\n-->\n\n<p><code>foo.js</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x5834;&#x5408;&#x3001;<code>node foo.js</code> &#x3068;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x3053;&#x308C;&#x306F; <code>true</code> \n&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x304C;&#x3001;<code>require(&apos;./foo&apos;)</code> &#x3067;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F; <code>false</code> &#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>module</code> &#x306F; <code>filename</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3; (&#x901A;&#x5E38; <code>__filename</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;) \n&#x3092;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x305F;&#x3081;&#x3001;&#x73FE;&#x5728;&#x306E;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30A8;&#x30F3;&#x30C8;&#x30EA;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306F;\n<code>require.main.filename</code> &#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x5F97;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Addenda: Package Manager Tips&quot;,
          &quot;name&quot;: &quot;Addenda: Package Manager Tips&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nThe semantics of Node's `require()` function were designed to be general\nenough to support a number of sane directory structures. Package manager\nprograms such as `dpkg`, `rpm`, and `npm` will hopefully find it possible to\nbuild native packages from Node modules without modification.\n-->\n\n<p>Node &#x306E; <code>require()</code> &#x306F;&#x666E;&#x901A;&#x306E;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x69CB;&#x9020;&#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x6C4E;&#x7528;&#x7684;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n<code>dpkg</code> &#x3084; <code>rpm</code> &#x3084; <code>npm</code> &#x306E;&#x3088;&#x3046;&#x306A;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x7BA1;&#x7406;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x4FEE;&#x6B63;&#x306A;&#x3057;&#x306B; Node &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304B;&#x3089;&#x30CD;&#x30A4;&#x30C6;&#x30A3;&#x30D6;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3092;&#x7D44;&#x307F;&#x7ACB;&#x3066;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nBelow we give a suggested directory structure that could work:\n\nLet's say that we wanted to have the folder at\n`/usr/lib/node/<some-package>/<some-version>` hold the contents of a\nspecific version of a package.\n-->\n\n<p>&#x63A8;&#x5968;&#x3059;&#x308B;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x69CB;&#x9020;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<p>&#x4F8B;&#x3048;&#x3070; <code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x306B;&#x3001;&#x3042;&#x308B;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306E;&#x7279;&#x5B9A;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x4FDD;&#x6301;&#x3059;&#x308B;&#x5F62;&#x5F0F;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nPackages can depend on one another. In order to install package `foo`, you\nmay have to install a specific version of package `bar`.  The `bar` package\nmay itself have dependencies, and in some cases, these dependencies may even\ncollide or form cycles.\n-->\n\n<p>&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306F;&#x76F8;&#x4E92;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x3042;&#x3046;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>foo</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3092;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x306F;&#x3042;&#x308B;&#x7279;&#x5B9A;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E; <code>bar</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3092;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>bar</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x81EA;&#x8EAB;&#x3082;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x3092;&#x3082;&#x3063;&#x3066;&#x3044;&#x308B;&#x306E;&#x3067;&#x3001;&#x3068;&#x304D;&#x306B;&#x306F;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x304C;&#x885D;&#x7A81;&#x3057;&#x305F;&#x308A;&#x5FAA;&#x74B0;&#x3057;&#x305F;&#x308A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nSince Node looks up the `realpath` of any modules it loads (that is,\nresolves symlinks), and then looks for their dependencies in the\n`node_modules` folders as described above, this situation is very simple to\nresolve with the following architecture:\n-->\n\n<p>Node &#x306F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E; <code>realpath</code> &#xFF08;&#x30B7;&#x30F3;&#x30DC;&#x30EA;&#x30C3;&#x30AF;&#x30EA;&#x30F3;&#x30AF;&#x3092;&#x89E3;&#x91C8;&#x3057;&#x307E;&#x3059;&#xFF09;&#x3092;&#x8ABF;&#x3079;&#x3001;&#x305D;&#x306E;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x3092;&#x4E0A;&#x8FF0;&#x306E; <code>node_modules</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x306E;&#x4ED5;&#x7D44;&#x307F;&#x3067;&#x63A2;&#x3057;&#x306B;&#x3044;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306B;&#x3088;&#x3063;&#x3066;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306A;&#x69CB;&#x9020;&#x3092;&#x3068;&#x3066;&#x3082;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306B;&#x89E3;&#x91C8;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* `/usr/lib/node/foo/1.2.3/` - Contents of the `foo` package, version 1.2.3.\n* `/usr/lib/node/bar/4.3.2/` - Contents of the `bar` package that `foo`\n  depends on.\n* `/usr/lib/node/foo/1.2.3/node_modules/bar` - Symbolic link to\n  `/usr/lib/node/bar/4.3.2/`.\n* `/usr/lib/node/bar/4.3.2/node_modules/*` - Symbolic links to the packages\n  that `bar` depends on.\n-->\n\n<ul>\n<li><code>/usr/lib/node/foo/1.2.3/</code> - <code>foo</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306E;&#x4E2D;&#x8EAB;&#x3002;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;1.2.3&#x3002;</li>\n<li><code>/usr/lib/node/bar/4.3.2/</code> - <code>bar</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306E;&#x4E2D;&#x8EAB;&#x3002; <code>foo</code> &#x304C;&#x4F9D;&#x5B58;&#x3057;&#x3066;&#x3044;&#x308B;&#x3002;</li>\n<li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> - <code>/usr/lib/node/bar/4.3.2/</code> &#x3078;&#x306E;&#x30B7;&#x30F3;&#x30DC;&#x30EA;&#x30C3;&#x30AF;&#x30EA;&#x30F3;&#x30AF;&#x3002;</li>\n<li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code> - <code>bar</code> &#x304C;&#x4F9D;&#x5B58;&#x3057;&#x3066;&#x3044;&#x308B;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3078;&#x306E;&#x30B7;&#x30F3;&#x30DC;&#x30EA;&#x30C3;&#x30AF;&#x30EA;&#x30F3;&#x30AF;&#x3002;</li>\n</ul>\n<!--\nThus, even if a cycle is encountered, or if there are dependency\nconflicts, every module will be able to get a version of its dependency\nthat it can use.\n\nWhen the code in the `foo` package does `require('bar')`, it will get the\nversion that is symlinked into `/usr/lib/node/foo/1.2.3/node_modules/bar`.\nThen, when the code in the `bar` package calls `require('quux')`, it'll get\nthe version that is symlinked into\n`/usr/lib/node/bar/4.3.2/node_modules/quux`.\n\nFurthermore, to make the module lookup process even more optimal, rather\nthan putting packages directly in `/usr/lib/node`, we could put them in\n`/usr/lib/node_modules/<name>/<version>`.  Then node will not bother\nlooking for missing dependencies in `/usr/node_modules` or `/node_modules`.\n\nIn order to make modules available to the node REPL, it might be useful to\nalso add the `/usr/lib/node_modules` folder to the `$NODE_PATH` environment\nvariable.  Since the module lookups using `node_modules` folders are all\nrelative, and based on the real path of the files making the calls to\n`require()`, the packages themselves can be anywhere.\n-->\n\n<p>&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x3057;&#x3066;&#x3001;&#x3082;&#x3057;&#x4EEE;&#x306B;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x306B;&#x5FAA;&#x74B0;&#x3084;&#x885D;&#x7A81;&#x304C;&#x898B;&#x3064;&#x304B;&#x3063;&#x305F;&#x3068;&#x3057;&#x3066;&#x3082;&#x3001;&#x5168;&#x3066;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x4F9D;&#x5B58;&#x3057;&#x3066;&#x3044;&#x308B;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306E;&#x7279;&#x5B9A;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>foo</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306E;&#x4E2D;&#x3067; <code>require(&apos;bar&apos;)</code> &#x3057;&#x305F;&#x3089;&#x3001; <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> &#x304B;&#x3089;&#x30EA;&#x30F3;&#x30AF;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3057;&#x3066;&#x3001; <code>bar</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x5185;&#x3067; <code>require(&apos;quux&apos;)</code> &#x3092;&#x547C;&#x3093;&#x3060;&#x3089;&#x3001; <code>/usr/lib/node/bar/4.3.2/node_modules/quux</code> &#x304B;&#x3089;&#x30EA;&#x30F3;&#x30AF;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3055;&#x3089;&#x306B;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x63A2;&#x7D22;&#x3059;&#x308B;&#x904E;&#x7A0B;&#x3092;&#x3088;&#x308A;&#x6700;&#x9069;&#x5316;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001; <code>/usr/lib/node</code> &#x306B;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3092;&#x7F6E;&#x304F;&#x3088;&#x308A;&#x3082; <code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code> &#x306B;&#x7F6E;&#x304F;&#x306E;&#x3092;&#x304A;&#x52E7;&#x3081;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067; Node &#x306F;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x3044;&#x4F9D;&#x5B58;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3092; <code>/usr/node_modules</code> &#x3084; <code>/node_modules</code> &#x306B;&#x63A2;&#x3057;&#x306B;&#x3044;&#x304B;&#x306A;&#x304F;&#x3066;&#x3082;&#x3088;&#x3046;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>Node &#x306E; REPL &#x3067;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x4F7F;&#x3048;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001; <code>/usr/lib/node_modules</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x3092; <code>$NODE_PATH</code> &#x74B0;&#x5883;&#x5909;&#x6570;&#x306B;&#x8FFD;&#x52A0;&#x3059;&#x308B;&#x3068;&#x3088;&#x3044;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n<code>node_modules</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x3092;&#x4F7F;&#x3063;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x63A2;&#x7D22;&#x306F;&#x5168;&#x3066;&#x76F8;&#x5BFE;&#x7684;&#x306A;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001; <code>require()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x57FA;&#x6E96;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x306E;&#x3067;&#x3001;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x81EA;&#x4F53;&#x306F;&#x3069;&#x3053;&#x306B;&#x3067;&#x3082;&#x914D;&#x7F6E;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n</p>\n&quot;
        }
      ],
      &quot;vars&quot;: [
        {
          &quot;textRaw&quot;: &quot;The `module` Object&quot;,
          &quot;name&quot;: &quot;The `module` Object&quot;,
          &quot;type&quot;: &quot;var&quot;,
          &quot;desc&quot;: &quot;<p>!-- name=module --&gt;\n\n</p>\n<ul>\n<li>{Object}</li>\n</ul>\n<!--\nIn each module, the `module` free variable is a reference to the object\nrepresenting the current module.  For convenience, `module.exports` is\nalso accessible via the `exports` module-global. `module` isn't actually\na global but rather local to each module.\n-->\n\n<p>&#x3069;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3067;&#x3082;&#x3001;<code>module</code> &#x81EA;&#x7531;&#x5909;&#x6570;&#x306F;&#x73FE;&#x5728;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;\n&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5229;&#x4FBF;&#x6027;&#x306E;&#x305F;&#x3081;&#x3001;<code>module.exports</code> &#x306F; <code>exports</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x901A;&#x3058;&#x3066;\n&#x53C2;&#x7167;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>module</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x5909;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;`exports` {Object} &quot;,
              &quot;name&quot;: &quot;exports&quot;,
              &quot;desc&quot;: &quot;<!--\nThe `module.exports` object is created by the Module system. Sometimes this is not\nacceptable; many want their module to be an instance of some class. To do this\nassign the desired export object to `module.exports`. Note that assigning the\ndesired object to `exports` will simply rebind the local `exports` variable,\nwhich is probably not what you want to do.\n-->\n\n<p><code>module.exports</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6642;&#x3005;&#x3053;&#x308C;&#x306F;&#x53D7;&#x3051;&#x5165;&#x308C;&#x3089;&#x307E;&#x305B;&#x3093;;\n&#x591A;&#x304F;&#x306E;&#x4EBA;&#x3005;&#x306F;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x4F55;&#x3089;&#x304B;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x671B;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306B;&#x306F;&#x3001;&#x516C;&#x958B;&#x3057;&#x305F;&#x3044;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092; <code>module.exports</code> &#x306B;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n&#x671B;&#x307E;&#x3057;&#x3044;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092; <code>exports</code> &#x3078;&#x4EE3;&#x5165;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3001;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x5909;&#x6570; <code>exports</code> &#x3078;&#x306E;\n&#x518D;&#x4EE3;&#x5165;&#x306B;&#x904E;&#x304E;&#x305A;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3059;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x304A;&#x305D;&#x3089;&#x304F;&#x3001;&#x3084;&#x308A;&#x305F;&#x304B;&#x3063;&#x305F;&#x3053;&#x3068;&#x3067;&#x306F;&#x306A;&#x3044;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nFor example suppose we were making a module called `a.js`\n-->\n\n<p>&#x4F8B;&#x3048;&#x3070; <code>a.js</code> &#x3068;&#x547C;&#x3070;&#x308C;&#x308B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x4F5C;&#x308B;&#x3068;&#x3057;&#x305F;&#x3089;\n\n</p>\n<pre><code>var EventEmitter = require(&apos;events&apos;).EventEmitter;\n\nmodule.exports = new EventEmitter();\n\n// Do some work, and after some time emit\n// the &apos;ready&apos; event from the module itself.\nsetTimeout(function() {\n  module.exports.emit(&apos;ready&apos;);\n}, 1000);</code></pre>\n<!--\nThen in another file we could do\n-->\n\n<p>&#x305D;&#x3057;&#x3066;&#x5225;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3067;\n\n</p>\n<pre><code>var a = require(&apos;./a&apos;);\na.on(&apos;ready&apos;, function() {\n  console.log(&apos;module a is ready&apos;);\n});</code></pre>\n<!--\nNote that assignment to `module.exports` must be done immediately. It cannot be\ndone in any callbacks.  This does not work:\n-->\n\n<p><code>module.exports</code> &#x3078;&#x306E;&#x4EE3;&#x5165;&#x306F;&#x3059;&#x3050;&#x306B;&#x884C;&#x308F;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306E;&#x4E2D;&#x3067;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;&#x4EE5;&#x4E0B;&#x306F;&#x52D5;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<p>x.js:\n\n</p>\n<pre><code>setTimeout(function() {\n  module.exports = { a: &quot;hello&quot; };\n}, 0);</code></pre>\n<p>y.js:\n\n</p>\n<pre><code>var x = require(&apos;./x&apos;);\nconsole.log(x.a);</code></pre>\n&quot;,
              &quot;modules&quot;: [
                {
                  &quot;textRaw&quot;: &quot;exports alias&quot;,
                  &quot;name&quot;: &quot;exports_alias&quot;,
                  &quot;desc&quot;: &quot;<!--\nThe `exports` variable that is available within a module starts as a reference\nto `module.exports`. As with any variable, if you assign a new value to it, it\nis no longer bound to the previous value.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x5185;&#x3067;&#x5229;&#x7528;&#x51FA;&#x6765;&#x308B; <code>exports</code> &#x5909;&#x6570;&#x306F;&#x3001;&#x6700;&#x521D;&#x306F; <code>module.exports</code>\n&#x3078;&#x306E;&#x53C2;&#x7167;&#x3067;&#x3059;&#x3002;\n&#x4ED6;&#x306E;&#x5909;&#x6570;&#x3068;&#x540C;&#x69D8;&#x3001;&#x305D;&#x308C;&#x306B;&#x65B0;&#x3057;&#x3044;&#x5024;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x308B;&#x3068;&#x5143;&#x306E;&#x5024;&#x306F;&#x3082;&#x306F;&#x3084;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nTo illustrate the behaviour, imagine this hypothetical implementation of\n`require()`:\n-->\n\n<p>&#x305D;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x3092;&#x793A;&#x3059;&#x305F;&#x3081;&#x306B;&#x3001;&#x3053;&#x306E;&#x4EEE;&#x5B9A;&#x306E;&#x5B9F;&#x88C5;&#x3092;&#x60F3;&#x50CF;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>function require(...) {\n  // ...\n  function (module, exports) {\n    // Your module code here\n    exports = some_func;        // re-assigns exports, exports is no longer\n                                // a shortcut, and nothing is exported.\n    module.exports = some_func; // makes your module export 0\n  } (module, module.exports);\n  return module;\n}</code></pre>\n<!--\nAs a guideline, if the relationship between `exports` and `module.exports`\nseems like magic to you, ignore `exports` and only use `module.exports`.\n-->\n\n<p>&#x30AC;&#x30A4;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x3068;&#x3057;&#x3066;&#x3001;&#x3082;&#x3057; <code>exports</code> &#x3068; <code>module.exports</code> &#x306E;&#x9593;&#x306E;&#x95A2;&#x4FC2;&#x304C;&#x9B54;&#x6CD5;&#x306E;&#x3088;&#x3046;&#x306B;\n&#x898B;&#x3048;&#x308B;&#x306A;&#x3089;&#x3001;<code>exports</code> &#x3092;&#x7121;&#x8996;&#x3057;&#x3066; <code>module.exports</code> &#x3060;&#x3051;&#x3092;&#x4F7F;&#x3046;&#x3088;&#x3046;&#x306B;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
                  &quot;type&quot;: &quot;module&quot;,
                  &quot;displayName&quot;: &quot;exports alias&quot;
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;`id` {String} &quot;,
              &quot;name&quot;: &quot;id&quot;,
              &quot;desc&quot;: &quot;<!--\nThe identifier for the module.  Typically this is the fully resolved\nfilename.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x8B58;&#x5225;&#x5B50;&#x3002;&#x901A;&#x5E38;&#x306F;&#x5B8C;&#x5168;&#x306B;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`filename` {String} &quot;,
              &quot;name&quot;: &quot;filename&quot;,
              &quot;desc&quot;: &quot;<!--\nThe fully resolved filename to the module.\n-->\n\n<p>&#x5B8C;&#x5168;&#x306B;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`loaded` {Boolean} &quot;,
              &quot;name&quot;: &quot;loaded&quot;,
              &quot;desc&quot;: &quot;<!--\nWhether or not the module is done loading, or is in the process of\nloading.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30ED;&#x30FC;&#x30C9;&#x304C;&#x5B8C;&#x4E86;&#x3057;&#x305F;&#x304B;&#xFF0C;&#x3042;&#x308B;&#x3044;&#x306F;&#x30ED;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x4E2D;&#x304B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`parent` {Module Object} &quot;,
              &quot;name&quot;: &quot;parent&quot;,
              &quot;desc&quot;: &quot;<!--\nThe module that required this one.\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x8981;&#x6C42;&#x3057;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`children` {Array} &quot;,
              &quot;name&quot;: &quot;children&quot;,
              &quot;desc&quot;: &quot;<!--\nThe module objects required by this one.\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x8981;&#x6C42;&#x3057;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n\n\n</p>\n&quot;
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;module.require(id)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;require&quot;,
              &quot;desc&quot;: &quot;<!--\n* `id` {String}\n* Return: {Object} `module.exports` from the resolved module\n-->\n\n<ul>\n<li><code>id</code> {String}</li>\n<li>Return: {Object} &#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E; <code>module.exports</code></li>\n</ul>\n<!--\nThe `module.require` method provides a way to load a module as if\n`require()` was called from the original module.\n-->\n\n<p><code>module.require</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3001;&#x5143;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C; <code>require()</code>\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x304B;&#x306E;&#x3088;&#x3046;&#x306B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that in order to do this, you must get a reference to the `module`\nobject.  Since `require()` returns the `module.exports`, and the `module` is\ntypically *only* available within a specific module's code, it must be\nexplicitly exported in order to be used.\n-->\n\n<p>&#x305D;&#x308C;&#x306B;&#x306F; <code>module</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x53C2;&#x7167;&#x304C;&#x5FC5;&#x8981;&#x306A;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n<code>require()</code> &#x304C; <code>module.exports</code> &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5F8C;&#x3001;&#x4E00;&#x822C;&#x7684;&#x306B; <code>module</code> \n&#x306F;&#x305D;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3067; <em>&#x306E;&#x307F;</em> &#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;&#x660E;&#x793A;&#x7684;&#x306B;&#x30A8;&#x30AF;&#x30B9;&#x30DD;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;id&quot;
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;module&quot;
    }
  ]
}
