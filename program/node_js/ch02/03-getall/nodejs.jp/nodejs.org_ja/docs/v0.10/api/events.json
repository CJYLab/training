{
  &quot;source&quot;: &quot;doc/api/events.markdown&quot;,
  &quot;modules&quot;: [
    {
      &quot;textRaw&quot;: &quot;Events&quot;,
      &quot;name&quot;: &quot;Events&quot;,
      &quot;stability&quot;: 4,
      &quot;stabilityText&quot;: &quot;API Frozen&quot;,
      &quot;type&quot;: &quot;module&quot;,
      &quot;desc&quot;: &quot;<!--\nMany objects in Node emit events: a `net.Server` emits an event each time\na peer connects to it, a `fs.readStream` emits an event when the file is\nopened. All objects which emit events are instances of `events.EventEmitter`.\nYou can access this module by doing: `require(\"events\");`\n-->\n\n<p>Node &#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x591A;&#x304F;&#x306F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;:\n<code>net.Server</code>&#x306F;&#x76F8;&#x624B;&#x304B;&#x3089;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x305F;&#x3073;&#x306B;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x3001;\n<code>fs.readStream</code>&#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3055;&#x308C;&#x308B;&#x305F;&#x3073;&#x306B;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x5168;&#x3066;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; <code>events.EventEmitter</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3067;&#x304D;&#x307E;&#x3059;: <code>require(&quot;events&quot;);</code>\n\n</p>\n<!--\nTypically, event names are represented by a camel-cased string, however,\nthere aren't any strict restrictions on that, as any string will be accepted.\n-->\n\n<p>&#x901A;&#x5E38;&#x3001;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x540D;&#x306F;&#x30AD;&#x30E3;&#x30E1;&#x30EB;&#x8A18;&#x6CD5;&#x306B;&#x3088;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3067;&#x8868;&#x73FE;&#x3055;&#x308C;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x53B3;&#x683C;&#x306A;&#x5236;&#x9650;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x3069;&#x3093;&#x306A;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFunctions can then be attached to objects, to be executed when an event\nis emitted. These functions are called _listeners_. Inside a listener\nfunction, `this` refers to the `EventEmitter` that the listener was\nattached to.\n-->\n\n<p>&#x95A2;&#x6570;&#x3092;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x30A2;&#x30BF;&#x30C3;&#x30C1;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x3001;&#x305D;&#x308C;&#x306F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x95A2;&#x6570;&#x306F;<em>&#x30EA;&#x30B9;&#x30CA;&#x30FC;</em>&#x3068;&#x547C;&#x3070;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30EA;&#x30B9;&#x30CA;&#x95A2;&#x6570;&#x306E;&#x4E2D;&#x3067;&#x306F;&#x3001;<code>this</code> &#x306F;&#x305D;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x30A2;&#x30BF;&#x30C3;&#x30C1;&#x3055;&#x308C;&#x305F; <code>EventEmitter</code>\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: events.EventEmitter&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;events.EventEmitter&quot;,
          &quot;desc&quot;: &quot;<!--\nTo access the EventEmitter class, `require('events').EventEmitter`.\n-->\n\n<p>EventEmitter&#x30AF;&#x30E9;&#x30B9;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;<code>require(&apos;events&apos;).EventEmitter</code> &#x3092;&#x4F7F;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nWhen an `EventEmitter` instance experiences an error, the typical action is\nto emit an `'error'` event.  Error events are treated as a special case in node.\nIf there is no listener for it, then the default action is to print a stack\ntrace and exit the program.\n-->\n\n<p><code>EventEmitter</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x304C;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x906D;&#x9047;&#x3057;&#x305F;&#x6642;&#x3001;\n&#x5178;&#x578B;&#x7684;&#x306A;&#x52D5;&#x4F5C;&#x306F; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\nnode &#x3067;&#x306F;&#x30A8;&#x30E9;&#x30FC;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x7279;&#x5225;&#x306B;&#x6271;&#x308F;&#x308C;&#x307E;&#x3059;&#xFF0E;\n&#x3082;&#x3057;&#x305D;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x304C;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x52D5;&#x4F5C;&#x306F;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3092;&#x51FA;&#x529B;&#x3057;&#x3066;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nAll EventEmitters emit the event `'newListener'` when new listeners are\nadded and `'removeListener'` when a listener is removed.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; EventEmitter &#x306F;&#x3001;&#x65B0;&#x3057;&#x3044;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x304C;&#x52A0;&#x3048;&#x3089;&#x308C;&#x308B;&#x3068;&#x30A4;&#x30D9;&#x30F3;&#x30C8; <code>&apos;newListener&apos;</code> &#x3092;&#x751F;&#x6210;&#x3057;&#x3001;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x304C;&#x524A;&#x9664;&#x3055;&#x308C;&#x308B;&#x3068; <code>&apos;removeListener&apos;</code> &#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;emitter.addListener(event, listener)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;addListener&quot;,
              &quot;desc&quot;: &quot;<!--\nAdds a listener to the end of the listeners array for the specified event.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x914D;&#x5217;&#x306E;&#x6700;&#x5F8C;&#x306B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>server.on(&apos;connection&apos;, function (stream) {\n  console.log(&apos;someone connected!&apos;);\n});</code></pre>\n<!--\nReturns emitter, so calls can be chained.\n-->\n\n<p>EventEmitter &#x81EA;&#x8EAB;&#x3092;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3092;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;listener&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;listener&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.on(event, listener)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;on&quot;,
              &quot;desc&quot;: &quot;<!--\nAdds a listener to the end of the listeners array for the specified event.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x914D;&#x5217;&#x306E;&#x6700;&#x5F8C;&#x306B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>server.on(&apos;connection&apos;, function (stream) {\n  console.log(&apos;someone connected!&apos;);\n});</code></pre>\n<!--\nReturns emitter, so calls can be chained.\n-->\n\n<p>EventEmitter &#x81EA;&#x8EAB;&#x3092;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3092;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;listener&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.once(event, listener)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;once&quot;,
              &quot;desc&quot;: &quot;<!--\nAdds a **one time** listener for the event. This listener is\ninvoked only the next time the event is fired, after which\nit is removed.\n-->\n\n<p><strong>&#x4E00;&#x56DE;&#x9650;&#x308A;</strong>&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x306F;&#x6B21;&#x306B;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x6642;&#x306B;&#x9650;&#x308A;&#x8D77;&#x52D5;&#x3055;&#x308C;&#x3001;&#x305D;&#x306E;&#x5F8C;&#x3067;&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>server.once(&apos;connection&apos;, function (stream) {\n  console.log(&apos;Ah, we have our first user!&apos;);\n});</code></pre>\n<!--\nReturns emitter, so calls can be chained.\n-->\n\n<p>EventEmitter &#x81EA;&#x8EAB;&#x3092;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3092;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;listener&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.removeListener(event, listener)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;removeListener&quot;,
              &quot;desc&quot;: &quot;<!--\nRemove a listener from the listener array for the specified event.\n**Caution**: changes array indices in the listener array behind the listener.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x914D;&#x5217;&#x304B;&#x3089;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x524A;&#x9664;&#x3057;&#x307E;&#x3059;&#x3002;\n<strong>&#x6CE8;&#x610F;</strong>: &#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x306E;&#x80CC;&#x5F8C;&#x306B;&#x3042;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x914D;&#x5217;&#x306E;&#x30A4;&#x30F3;&#x30C7;&#x30C3;&#x30AF;&#x30B9;&#x304C;&#x5909;&#x5316;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var callback = function(stream) {\n  console.log(&apos;someone connected!&apos;);\n};\nserver.on(&apos;connection&apos;, callback);\n// ...\nserver.removeListener(&apos;connection&apos;, callback);</code></pre>\n<!--\nReturns emitter, so calls can be chained.\n-->\n\n<p>EventEmitter &#x81EA;&#x8EAB;&#x3092;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3092;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;listener&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.removeAllListeners([event])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;removeAllListeners&quot;,
              &quot;desc&quot;: &quot;<!--\nRemoves all listeners, or those of the specified event.\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x307E;&#x305F;&#x306F;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x524A;&#x9664;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns emitter, so calls can be chained.\n-->\n\n<p>EventEmitter &#x81EA;&#x8EAB;&#x3092;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3092;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.setMaxListeners(n)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setMaxListeners&quot;,
              &quot;desc&quot;: &quot;<!--\nBy default EventEmitters will print a warning if more than 10 listeners are\nadded for a particular event. This is a useful default which helps finding memory leaks.\nObviously not all Emitters should be limited to 10. This function allows\nthat to be increased. Set to zero for unlimited.\n-->\n\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x3001;EventEmitter &#x306F; 10 &#x3092;&#x8D8A;&#x3048;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x7279;&#x5B9A;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x308B;&#x3068;&#x8B66;&#x544A;&#x3092;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30E1;&#x30E2;&#x30EA;&#x30EA;&#x30FC;&#x30AF;&#x3092;&#x898B;&#x3064;&#x3051;&#x308B;&#x305F;&#x3081;&#x306B;&#x5F79;&#x306B;&#x7ACB;&#x3064;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x3067;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E; EventEmitter &#x304C; 10 &#x306B;&#x5236;&#x9650;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x308F;&#x3051;&#x3067;&#x306F;&#x306A;&#x3044;&#x3053;&#x3068;&#x306F;&#x660E;&#x3089;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x5236;&#x9650;&#x3092;&#x5897;&#x3084;&#x3059;&#x3053;&#x3068;&#x3092;&#x8A31;&#x53EF;&#x3057;&#x307E;&#x3059;&#x3002;\n0 &#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x7121;&#x5236;&#x9650;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;n&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.listeners(event)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listeners&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns an array of listeners for the specified event.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>server.on(&apos;connection&apos;, function (stream) {\n  console.log(&apos;someone connected!&apos;);\n});\nconsole.log(util.inspect(server.listeners(&apos;connection&apos;))); // [ [Function] ]</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.emit(event, [arg1], [arg2], [...])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;emit&quot;,
              &quot;desc&quot;: &quot;<!--\nExecute each of the listeners in order with the supplied arguments.\n-->\n\n<p>&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x5F15;&#x6570;&#x306E;&#x4E26;&#x3073;&#x3067;&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns `true` if event had listeners, `false` otherwise.\n-->\n\n<p>&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x5FDC;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x3042;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; <code>true</code>&#x3001;&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306F; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;arg1&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;arg2&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;...&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ],
          &quot;classMethods&quot;: [
            {
              &quot;textRaw&quot;: &quot;Class Method: EventEmitter.listenerCount(emitter, event)&quot;,
              &quot;type&quot;: &quot;classMethod&quot;,
              &quot;name&quot;: &quot;listenerCount&quot;,
              &quot;desc&quot;: &quot;<!--\nReturn the number of listeners for a given event.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x6570;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;emitter&quot;
                    },
                    {
                      &quot;name&quot;: &quot;event&quot;
                    }
                  ]
                }
              ]
            }
          ],
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;newListener&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;newListener&quot;,
              &quot;params&quot;: [],
              &quot;desc&quot;: &quot;<!--\nThis event is emitted any time someone adds a new listener.  It is unspecified\nif `listener` is in the list returned by `emitter.listeners(event)`.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x65B0;&#x3057;&#x3044;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x304C;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x308B;&#x305F;&#x3073;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>emitter.listeners(event)</code> &#x304C;&#x8FD4;&#x3059;&#x30EA;&#x30B9;&#x30C8;&#x306B; <code>listener</code> &#x304C;&#x542B;&#x307E;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x306F;\n&#x672A;&#x5B9A;&#x7FA9;&#x3067;&#x3059;&#x3002;\n\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;removeListener&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;removeListener&quot;,
              &quot;desc&quot;: &quot;<!--\n* `event` {String} The event name\n* `listener` {Function} The event handler function\n-->\n\n<ul>\n<li><code>event</code> {String} &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x540D;</li>\n<li><code>listener</code> {Function} &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x95A2;&#x6570;</li>\n</ul>\n<!--\nThis event is emitted any time someone removes a listener.  It is unspecified\nif `listener` is in the list returned by `emitter.listeners(event)`.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x308B;&#x305F;&#x3073;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>emitter.listeners(event)</code> &#x304C;&#x8FD4;&#x3059;&#x30EA;&#x30B9;&#x30C8;&#x304B;&#x3089; <code>listener</code> &#x304C;&#x9664;&#x304B;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x306F;\n&#x672A;&#x5B9A;&#x7FA9;&#x3067;&#x3059;&#x3002;\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ]
        }
      ]
    }
  ]
}
