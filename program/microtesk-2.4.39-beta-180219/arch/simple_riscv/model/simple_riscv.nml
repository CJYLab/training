/*
 * Copyright 2014-2017 ISP RAS (http://www.ispras.ru)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

/*
 * Description:
 *
 * Example of a specification of a trivial microprocessor ISA.
 * Provided to demonstrate various features of nML.
 */

////////////////////////////////////////////////////////////////////////////////
// Constants

let   MEM_SIZE = 2 ** 8 // Memory size, 2 to the power of 8
let REG_NUMBER = 32     // Number of general-purpose registers

////////////////////////////////////////////////////////////////////////////////
// Types

type Addr_t    = card(32) // 32-bit unsigned integer
type Word_t    = int(32)  // 32-bit signed integer
type HWord_t   = int(16)  // 16-bit unsigned integer
type RegAddr_t = card(5)  // 5-bit unsigned integer

////////////////////////////////////////////////////////////////////////////////
// Registers and Memory

// General-purpose registers.
reg GPR[REG_NUMBER, Word_t] // Format: <name>[<number>, <type>]

// A register for storing the program counter.
reg PC[Addr_t] // This format means that there is 1 register of type Addr_t

// A memory line
mem M[MEM_SIZE, Word_t]

////////////////////////////////////////////////////////////////////////////////
// Temporary Variables
//
// They are not preserved across instruction calls and serve to exchange data
// between operations that make up an instruction.

var SRC1[Word_t]
var SRC2[Word_t]
var DEST[Word_t]

////////////////////////////////////////////////////////////////////////////////
// Addressing Modes

// An addressing mode for an immediate value.
mode IMM(i: int(16)) = sign_extend(HWord_t, i) // Value expression
  syntax = format("%x", i) // Textual format
  image  = format("%16s", i)  // Binary format

// An addressing mode for a register access.
mode REG(i: RegAddr_t) = GPR[i]
  syntax = format("x%d", i)
  image  = format("00%5s", i)

// An addressing mode for a memory access.
mode MEM(i: card(6)) = M[i]
  syntax = format("(%d)", i)
  image  = format("%6s", i)

// Addressing modes are united into groups.
mode OPRNDL = REG
mode OPRNDR = OPRNDL

////////////////////////////////////////////////////////////////////////////////
// Arithmetic and Logic Instructions

op RISCV_ADD()
  syntax = "add"
  image  = "00"
  action = {
    DEST = SRC1 + SRC2;
    // Function 'trace' prints text messages to the simulator log
    trace("%d + %d = %d", SRC1, SRC2, DEST);
  }

op RISCV_SUB()
  syntax = "sub"
  image  = "01"
  action = { DEST = SRC1 - SRC2; }

// op RISCV_MOV()
//   syntax = "mov"
//   image  = "10"
//   action = { DEST = SRC2; }

// A common alias for ADD, SUB and MOV
op ALU = RISCV_ADD | RISCV_SUB

// A common specification of all ALU instructions that describes their common
// format, performs all common actions and delegates unique responsibilities
// to specific operations (or subinstructions).

op alu_instr(command: ALU, dst: OPRNDL, op1: OPRNDR, op2: OPRNDR)
  syntax = format("%s %s %s %s", command.syntax, dst.syntax, op1.syntax, op2.syntax)
  image  = format("%s%s00%s%s", command.image, dst.image, op1.image, op2.image)
  action = {
    SRC1 = op1;
    SRC2 = op2;
    command.action;
    op1 = DEST;
    PC = PC + 4;
  }

////////////////////////////////////////////////////////////////////////////////
// Control Transfer Instructions

// Transfers control to the specified address.
//
// IMPORTANT NOTE: The target address can be specified via a label. In order to
// use the label name rather than an address constant in the generated test
// program, special label-based addressing modes must be described in
// the specifications.

label mode J_LABEL(value: Addr_t) = value
  syntax = ""
  image  = format("%s", value)

mode J_IMM(value: Addr_t) = value
  syntax =  format("0x%X", value)
  image  = format("%s", value)

mode J_ADDR = J_LABEL | J_IMM

op J (target : J_ADDR)
  syntax = format("j %s", target.syntax)
  image  = format("01%s", target.image)
  action = { PC = target; }

// Transfers control to the specified address if source equals 0.
op JZ (source: OPRNDL, target: J_ADDR)
  syntax = format("jz %s", target.syntax)
  image  = format("11%s%s", source.image, target.image)
  action = {
    if source == 0 then
      PC = target;
    else
      PC = PC + 2;
    endif;
  }

op branch_instr = J | JZ

////////////////////////////////////////////////////////////////////////////////
// Entry Point
//
// By nML conventions, the "instruction" operation is the root of the tree
// describing a microprocessor ISA.

op instruction = alu_instr
               | branch_instr
