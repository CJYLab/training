/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.vliw.metadata;

import static ru.ispras.microtesk.model.vliw.TypeDefs.*;

import java.math.BigInteger;
import ru.ispras.microtesk.model.data.Type;
import ru.ispras.microtesk.model.metadata.MetaModel;
import ru.ispras.microtesk.model.metadata.MetaModelBuilder;

/**
 * The {@code MetaModelFactory} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class MetaModelFactory {
  private MetaModelFactory() {}

  public static MetaModel newMetaModel() {
    final MetaModelBuilder builder = new MetaModelBuilder();

    builder.addRegister("GPR", WORD, 32);
    builder.addRegister("FPR", SINGLE, 32);
    builder.addRegister("CIA", WORD, 1);
    builder.addRegister("FCCR", WORD, 1);

    builder.addMemory("M", WORD, 0x40000000);

    builder.addMode(R.get());
    builder.addMode(F.get());
    builder.addMode(BRANCH_LABEL.get());
    builder.addMode(BRANCH_IMM.get());
    builder.addMode(BRANCH_OFFSET.get());

    builder.addOperation(NOP.get());
    builder.addOperation(ADD.get());
    builder.addOperation(ADDI.get());
    builder.addOperation(SUB.get());
    builder.addOperation(MUL.get());
    builder.addOperation(SLL.get());
    builder.addOperation(SRL.get());
    builder.addOperation(MOVN.get());
    builder.addOperation(MOVZ.get());
    builder.addOperation(MOVE.get());
    builder.addOperation(AND.get());
    builder.addOperation(OR.get());
    builder.addOperation(XOR.get());
    builder.addOperation(SLT.get());
    builder.addOperation(SLTI.get());
    builder.addOperation(LUI.get());
    builder.addOperation(LW.get());
    builder.addOperation(SW.get());
    builder.addOperation(B.get());
    builder.addOperation(BEQ.get());
    builder.addOperation(BNE.get());
    builder.addOperation(ADD_S.get());
    builder.addOperation(SUB_S.get());
    builder.addOperation(MUL_S.get());
    builder.addOperation(NEG_S.get());
    builder.addOperation(ABS_S.get());
    builder.addOperation(C_EQ_S.get());
    builder.addOperation(C_LT_S.get());
    builder.addOperation(C_LE_S.get());
    builder.addOperation(MOV_S.get());
    builder.addOperation(MTF.get());
    builder.addOperation(MFF.get());
    builder.addOperation(MOVT_S.get());
    builder.addOperation(MOVF_S.get());
    builder.addOperation(MOVN_S.get());
    builder.addOperation(MOVZ_S.get());
    builder.addOperation(BFF.get());
    builder.addOperation(BFT.get());
    builder.addOperation(ALU.get());
    builder.addOperation(LoadStore.get());
    builder.addOperation(Branch.get());
    builder.addOperation(FP.get());
    builder.addOperation(FPBranch.get());
    builder.addOperation(channel1.get());
    builder.addOperation(channel2.get());
    builder.addOperation(vliw.get());
    builder.addOperation(instruction.get());

    return builder.build();
  }
}
