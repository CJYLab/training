/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.vmem.mmu.spec;

import ru.ispras.fortress.data.types.bitvector.BitVector;
import ru.ispras.fortress.data.Data;
import ru.ispras.fortress.data.DataType;
import ru.ispras.fortress.expression.Nodes;
import ru.ispras.fortress.expression.NodeValue;
import ru.ispras.fortress.expression.NodeVariable;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuSegment;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuSubsystem;
import java.util.Arrays;
import java.math.BigInteger;
import ru.ispras.microtesk.mmu.basis.BufferAccessEvent;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuAction;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuBinding;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuBufferAccess;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuGuard;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuSegment;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuTransition;
import java.util.ArrayList;
import java.util.List;

/**
 * The {@code MAPPED} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class MAPPED extends MmuSegment {
  private static MAPPED INSTANCE = null;

  public static MAPPED get() {
    if (null == INSTANCE) {
      INSTANCE = new MAPPED();
    }
    return INSTANCE;
  }

  private MAPPED() {
    this("MAPPED");
  }

  private MAPPED(final String name) {
    super(
        "MAPPED",
        VA.get(),
        PA.get(),
        BitVector.valueOf(0x0, 16),
        BitVector.valueOf(0x3FFF, 16)
        );
  }

  private int callIndex = 0;

  public final Function newCall(final MmuSubsystem.Builder builder, final VA va, final PA pa) {
    return new Function(builder, callIndex++, va, pa);
  }

  public static final class Function {
    public final VA va;
    public final PA pa;

    private final TLB.Entry tlbEntry;
    private final VA pteAddr;
    private final PageTable.Entry pteData;

    public final MmuAction START;
    public final MmuAction STOP;

    private final MmuAction BRANCH_0;
    private final MmuAction ASSIGN_0;
    private final MmuAction JOIN_0;
    private final MmuAction BRANCH_1;
    private final MmuAction ASSIGN_1;
    private final MmuAction ASSIGN_2;
    private final MmuAction ASSIGN_3;
    private final MmuAction ASSIGN_4;
    private final MmuAction BRANCH_2;
    private final MmuAction AddressError;
    private final MmuAction BRANCH_3;
    private final MmuAction ASSIGN_5;
    private final MmuAction ASSIGN_6;
    private final MmuAction ASSIGN_7;
    private final MmuAction ASSIGN_8;
    private final MmuAction ASSIGN_9;

    private Function(final MmuSubsystem.Builder builder, final int instanceIndex, final VA va, final PA pa) {
      this(builder, String.format("MAPPED_%d", instanceIndex), va, pa);
    }

    private Function(final MmuSubsystem.Builder builder, final String name, final VA va, final PA pa) {
      this.va = va;
      this.pa = pa;

      this.tlbEntry = new TLB.Entry(name + ".tlbEntry");
      builder.registerVariable(tlbEntry);

      this.pteAddr = new VA(name + ".pteAddr");
      builder.registerVariable(pteAddr);

      this.pteData = new PageTable.Entry(name + ".pteData");
      builder.registerVariable(pteData);


      this.START = new MmuAction(name + ".START");
      builder.registerAction(START);
      this.STOP = new MmuAction(name + ".STOP");
      builder.registerAction(STOP);

      this.BRANCH_0 = new MmuAction(name + ".BRANCH_0");
      builder.registerAction(BRANCH_0);
      builder.registerTransition(new MmuTransition(START, BRANCH_0, new MmuGuard(new MmuBufferAccess(TLB.get(), BufferAccessEvent.HIT, TLB.get().getAddress(), TLB.get(), va))));
      this.ASSIGN_0 = new MmuAction(name + ".ASSIGN_0", new MmuBufferAccess(TLB.get(), BufferAccessEvent.READ, TLB.get().getAddress(), TLB.get(), va), tlbEntry, TLB.get());
      builder.registerAction(ASSIGN_0);
      builder.registerTransition(new MmuTransition(BRANCH_0, ASSIGN_0));
      this.JOIN_0 = new MmuAction(name + ".JOIN_0");
      builder.registerAction(JOIN_0);
      builder.registerTransition(new MmuTransition(ASSIGN_0, JOIN_0));
      this.BRANCH_1 = new MmuAction(name + ".BRANCH_1");
      builder.registerAction(BRANCH_1);
      builder.registerTransition(new MmuTransition(START, BRANCH_1, new MmuGuard(new MmuBufferAccess(TLB.get(), BufferAccessEvent.MISS, TLB.get().getAddress(), TLB.get(), va))));
      this.ASSIGN_1 = new MmuAction(name + ".ASSIGN_1", new MmuBinding(pteAddr.value, NodeValue.newInteger(0)));
      builder.registerAction(ASSIGN_1);
      builder.registerTransition(new MmuTransition(BRANCH_1, ASSIGN_1));
      this.ASSIGN_2 = new MmuAction(name + ".ASSIGN_2", new MmuBinding(Nodes.bvextract(15, 14, pteAddr.value), NodeValue.newInteger(3)));
      builder.registerAction(ASSIGN_2);
      builder.registerTransition(new MmuTransition(ASSIGN_1, ASSIGN_2));
      this.ASSIGN_3 = new MmuAction(name + ".ASSIGN_3", new MmuBinding(Nodes.bvextract(6, 1, pteAddr.value), Nodes.bvextract(13, 8, va.value)));
      builder.registerAction(ASSIGN_3);
      builder.registerTransition(new MmuTransition(ASSIGN_2, ASSIGN_3));
      this.ASSIGN_4 = new MmuAction(name + ".ASSIGN_4", new MmuBufferAccess(PageTable.get(), BufferAccessEvent.READ, PageTable.get().getAddress(), PageTable.get(), pteAddr), pteData, PageTable.get());
      builder.registerAction(ASSIGN_4);
      builder.registerTransition(new MmuTransition(ASSIGN_3, ASSIGN_4));
      this.BRANCH_2 = new MmuAction(name + ".BRANCH_2");
      builder.registerAction(BRANCH_2);
      builder.registerTransition(new MmuTransition(ASSIGN_4, BRANCH_2, new MmuGuard(Nodes.noteq(pteData.vpn, Nodes.bvextract(13, 8, va.value)))));
      this.AddressError = new MmuAction(name + ".AddressError", true);
      builder.registerAction(AddressError);
      builder.registerTransition(new MmuTransition(BRANCH_2, AddressError));
      this.BRANCH_3 = new MmuAction(name + ".BRANCH_3");
      builder.registerAction(BRANCH_3);
      builder.registerTransition(new MmuTransition(ASSIGN_4, BRANCH_3, new MmuGuard(Nodes.eq(pteData.vpn, Nodes.bvextract(13, 8, va.value)))));
      this.ASSIGN_5 = new MmuAction(name + ".ASSIGN_5", new MmuBinding(tlbEntry.vpn, pteData.vpn));
      builder.registerAction(ASSIGN_5);
      builder.registerTransition(new MmuTransition(BRANCH_3, ASSIGN_5));
      this.ASSIGN_6 = new MmuAction(name + ".ASSIGN_6", new MmuBinding(tlbEntry.pfn, pteData.pfn));
      builder.registerAction(ASSIGN_6);
      builder.registerTransition(new MmuTransition(ASSIGN_5, ASSIGN_6));
      this.ASSIGN_7 = new MmuAction(name + ".ASSIGN_7", new MmuBufferAccess(TLB.get(), BufferAccessEvent.WRITE, TLB.get().getAddress(), TLB.get(), null));
      builder.registerAction(ASSIGN_7);
      builder.registerTransition(new MmuTransition(ASSIGN_6, ASSIGN_7));
      builder.registerTransition(new MmuTransition(ASSIGN_7, JOIN_0));
      this.ASSIGN_8 = new MmuAction(name + ".ASSIGN_8", new MmuBinding(Nodes.bvextract(13, 8, pa.value), tlbEntry.pfn));
      builder.registerAction(ASSIGN_8);
      builder.registerTransition(new MmuTransition(JOIN_0, ASSIGN_8));
      this.ASSIGN_9 = new MmuAction(name + ".ASSIGN_9", new MmuBinding(Nodes.bvextract(7, 0, pa.value), Nodes.bvextract(7, 0, va.value)));
      builder.registerAction(ASSIGN_9);
      builder.registerTransition(new MmuTransition(ASSIGN_8, ASSIGN_9));
      builder.registerTransition(new MmuTransition(ASSIGN_9, STOP));
    }
  }
}
