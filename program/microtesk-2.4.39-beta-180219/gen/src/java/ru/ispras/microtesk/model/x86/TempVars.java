/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.x86;

import java.math.BigInteger;
import ru.ispras.microtesk.model.TemporaryVariables;
import ru.ispras.microtesk.model.data.Type;
import ru.ispras.microtesk.model.memory.Memory;

/**
 * The {@code TempVars} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class TempVars extends TemporaryVariables {
  public final Memory rm;
  public final Memory mod;
  public final Memory instruction_image_size;
  public final Memory base;
  public final Memory tmpdw_op1;
  public final Memory tmpdw_op2;
  public final Memory tmpb_op1;
  public final Memory tmpb_op2;
  public final Memory tmpb_res;
  public final Memory tmpw_op1;
  public final Memory tmpw_op2;
  public final Memory tmpw_res;
  public final Memory temp_bit;
  public final Memory jump_address;

  private TempVars() {
    this.rm = Memory.def(Memory.Kind.VAR, "rm", Type.CARD(3), 1);
    this.mod = Memory.def(Memory.Kind.VAR, "mod", Type.CARD(2), 1);
    this.instruction_image_size = Memory.def(Memory.Kind.VAR, "instruction_image_size", TypeDefs.SIZE, 1);
    this.base = Memory.def(Memory.Kind.VAR, "base", TypeDefs.addR, 1);
    this.tmpdw_op1 = Memory.def(Memory.Kind.VAR, "tmpdw_op1", TypeDefs.DWORD, 1);
    this.tmpdw_op2 = Memory.def(Memory.Kind.VAR, "tmpdw_op2", TypeDefs.DWORD, 1);
    this.tmpb_op1 = Memory.def(Memory.Kind.VAR, "tmpb_op1", TypeDefs.BYTE, 1);
    this.tmpb_op2 = Memory.def(Memory.Kind.VAR, "tmpb_op2", TypeDefs.BYTE, 1);
    this.tmpb_res = Memory.def(Memory.Kind.VAR, "tmpb_res", Type.CARD(9), 1);
    this.tmpw_op1 = Memory.def(Memory.Kind.VAR, "tmpw_op1", TypeDefs.WORD, 1);
    this.tmpw_op2 = Memory.def(Memory.Kind.VAR, "tmpw_op2", TypeDefs.WORD, 1);
    this.tmpw_res = Memory.def(Memory.Kind.VAR, "tmpw_res", Type.CARD(17), 1);
    this.temp_bit = Memory.def(Memory.Kind.VAR, "temp_bit", TypeDefs.BIT, 1);
    this.jump_address = Memory.def(Memory.Kind.VAR, "jump_address", TypeDefs.WORD, 1);

    addVariable(rm);
    addVariable(mod);
    addVariable(instruction_image_size);
    addVariable(base);
    addVariable(tmpdw_op1);
    addVariable(tmpdw_op2);
    addVariable(tmpb_op1);
    addVariable(tmpb_op2);
    addVariable(tmpb_res);
    addVariable(tmpw_op1);
    addVariable(tmpw_op2);
    addVariable(tmpw_res);
    addVariable(temp_bit);
    addVariable(jump_address);
  }

  private static final class TempVarsFactory implements Factory {
    @Override
    public TempVars create() {
      return new TempVars();
    }
  }

  public static Factory newFactory() {
    return new TempVarsFactory();
  }
}
