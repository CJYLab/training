/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.x86.decoder;

import static ru.ispras.microtesk.model.x86.TypeDefs.*;

import ru.ispras.microtesk.model.decoder.DecoderItem;
import ru.ispras.microtesk.model.decoder.DecoderResult;
import ru.ispras.fortress.data.types.bitvector.BitVector;
import ru.ispras.microtesk.model.data.Type;
import ru.ispras.microtesk.model.x86.op.mov_m16rseg;
import ru.ispras.microtesk.model.x86.mode.RSEG16;
import ru.ispras.microtesk.model.IsaPrimitive;

/**
 * The {@code DecoderMov_m16rseg} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class DecoderMov_m16rseg extends DecoderItem {
  private static DecoderMov_m16rseg instance = null;

  public static DecoderMov_m16rseg get() {
    if (null == instance) {
      instance = new DecoderMov_m16rseg();
    }
    return instance;
  }

  private DecoderMov_m16rseg() {
    super(
        42,
        false,
        null,
        null
        );
  }

  public DecoderResult decode(final BitVector image) {
    if (!isOpcMatch(image)) {
      return null;
    }

    resetPosition();

    RSEG16 seg_ovrd = null;
    IsaPrimitive dst = null;
    RSEG16 src = null;

    if (!matchNextOpc(image, BitVector.valueOf("001", 2, 3))) {
      return null;
    }

    seg_ovrd = (RSEG16) readNextPrimitive(image, DecoderRSEG16.get());
    if (null == seg_ovrd) {
      return null;
    }

    if (!matchNextOpc(image, BitVector.valueOf("11010001100", 2, 11))) {
      return null;
    }

    if (!matchNextOpc(image, BitVector.valueOf("00", 2, 2))) {
      return null;
    }

    if (!matchNextOpc(image, BitVector.valueOf("0", 2, 1))) {
      return null;
    }

    src = (RSEG16) readNextPrimitive(image, DecoderRSEG16.get());
    if (null == src) {
      return null;
    }

    if (!matchNextOpc(image, BitVector.valueOf("000", 2, 3))) {
      return null;
    }

    dst = (IsaPrimitive) readNextPrimitive(image, DecoderMOFFS.get());
    if (null == dst) {
      return null;
    }

    return newResult(new mov_m16rseg(seg_ovrd, dst, src));
  }
}
