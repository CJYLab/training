/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.vmem.mmu.sim;

import java.math.BigInteger;
import ru.ispras.microtesk.model.Execution;
import ru.ispras.microtesk.mmu.model.api.*;
import ru.ispras.fortress.data.types.bitvector.*;

/**
 * The {@code TLB} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class TLB extends Cache<TLB.Entry, VA> {
  private static TLB instance = null;

  public static TLB get() {
    if (null == instance) {
      instance = new TLB();
    }
    return instance;
  }

  public static final class Entry implements Data {
    public final BitVector vpn;
    public final BitVector pfn;

    public Entry() {
      this.vpn = BitVector.newEmpty(6);
      this.pfn = BitVector.newEmpty(6);
    }

    public Entry(final BitVector value) {
      this();
      asBitVector().assign(value);
    }

    public void assign(final Entry other) {
      this.vpn.assign(other.vpn);
      this.pfn.assign(other.pfn);
    }

    @Override
    public BitVector asBitVector() {
      return BitVector.newMapping(
          pfn,
          vpn
          );
    }

    @Override
    public String toString() {
      return String.format(
          "Entry [vpn=0x%s, pfn=0x%s]",
          vpn.toHexString(),
          pfn.toHexString()
          );
    }
  }
  private static final Indexer<VA> INDEXER = new Indexer<VA>() {
    @Override
    public BitVector getIndex(final VA va) {
      return BitVector.valueOf(0x0, 16);
    }
  };

  private static final Matcher<TLB.Entry, VA> MATCHER = new Matcher<TLB.Entry, VA>() {
    @Override
    public boolean areMatching(final TLB.Entry data, final VA va) {
      return va.value.field(13, 8).equals(data.vpn);
    }
  };

  private TLB() {
    super(
      new BigInteger("1", 10),
      4,
      PolicyId.FIFO,
      INDEXER,
      MATCHER
      );
  }

  @Override
  protected VA newAddress() {
    return new VA();
  }

  @Override
  protected Entry newData(final BitVector value) {
    return new Entry(value);
  }
}
