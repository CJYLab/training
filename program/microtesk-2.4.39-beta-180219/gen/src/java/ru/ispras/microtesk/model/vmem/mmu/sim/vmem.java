/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.vmem.mmu.sim;

import java.math.BigInteger;
import ru.ispras.microtesk.model.Execution;
import ru.ispras.microtesk.mmu.model.api.*;
import ru.ispras.fortress.data.types.bitvector.*;

/**
 * The {@code vmem} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class vmem extends Mmu<VA> {
  private static vmem instance = null;

  public static vmem get() {
    if (null == instance) {
      instance = new vmem();
    }
    return instance;
  }

  private vmem() {}

  @Override
  public int getAddressBitSize() {
    return 16;
  }

  @Override
  public int getDataBitSize() {
    return 16;
  }

  @Override
  protected VA newAddress() {
    return new VA();
  }

  @Override
  public BitVector getData(final VA va) {
    final BitVector data = BitVector.newEmpty(16);

    final PA pa = new PA();
    final L1.Entry l1Entry = new L1.Entry();
    final MEM.Entry memEntry = new MEM.Entry();

    Execution.trace("Read(%s)", va.value.toHexString());
    pa.assign(TranslateAddress.call(va));
    if (L1.get().isHit(pa)) {
      Execution.trace("L1(%s).hit", pa.value.toHexString());
      l1Entry.assign(L1.get().getData(pa));
    } else {
      Execution.trace("L1(%s).miss", pa.value.toHexString());
      memEntry.assign(MEM.get().getData(pa));
      l1Entry.tag.assign(pa.value.field(13, 2));
      l1Entry.data.assign(memEntry.data);
      L1.get().setData(pa).assign(l1Entry);
    }
    data.assign(l1Entry.data);
    Execution.trace("Done: %s", data.toHexString());

    return data;
  }

  @Override
  public BitVector setData(final VA va, final BitVector data) {
    final PA pa = new PA();
    final L1.Entry l1Entry = new L1.Entry();
    final MEM.Entry memEntry = new MEM.Entry();

    Execution.trace("Write(%s) <= %s", va.value.toHexString(), data.toHexString());
    pa.assign(TranslateAddress.call(va));
    l1Entry.tag.assign(pa.value.field(13, 2));
    l1Entry.data.assign(data);
    L1.get().setData(pa).assign(l1Entry);
    memEntry.data.assign(data);
    MEM.get().setData(pa).assign(memEntry);
    Execution.trace("Done");

    return null;
  }
}
