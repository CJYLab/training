/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.vliw.decoder;

import static ru.ispras.microtesk.model.vliw.TypeDefs.*;

import ru.ispras.microtesk.model.decoder.DecoderItem;
import ru.ispras.microtesk.model.decoder.DecoderResult;
import ru.ispras.fortress.data.types.bitvector.BitVector;
import ru.ispras.microtesk.model.data.Type;
import ru.ispras.microtesk.model.vliw.op.MOVN;
import ru.ispras.microtesk.model.vliw.mode.R;

/**
 * The {@code DecoderMOVN} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class DecoderMOVN extends DecoderItem {
  private static DecoderMOVN instance = null;

  public static DecoderMOVN get() {
    if (null == instance) {
      instance = new DecoderMOVN();
    }
    return instance;
  }

  private DecoderMOVN() {
    super(
        32,
        true,
        "00000000000000000000000000001011",
        "11111100000000000000011111111111"
        );
  }

  public DecoderResult decode(final BitVector image) {
    if (!isOpcMatch(image)) {
      return null;
    }

    resetPosition();

    R rd = null;
    R rs = null;
    R rt = null;

    if (!matchNextOpc(image, BitVector.valueOf("000000", 2, 6))) {
      return null;
    }

    rs = (R) readNextPrimitive(image, DecoderR.get());
    if (null == rs) {
      return null;
    }

    rt = (R) readNextPrimitive(image, DecoderR.get());
    if (null == rt) {
      return null;
    }

    rd = (R) readNextPrimitive(image, DecoderR.get());
    if (null == rd) {
      return null;
    }

    if (!matchNextOpc(image, BitVector.valueOf("00000001011", 2, 11))) {
      return null;
    }

    return newResult(new MOVN(rd, rs, rt));
  }
}
