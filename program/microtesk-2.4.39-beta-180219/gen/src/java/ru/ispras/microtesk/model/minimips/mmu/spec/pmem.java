/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.minimips.mmu.spec;

import ru.ispras.fortress.data.Data;
import ru.ispras.fortress.data.DataType;
import ru.ispras.fortress.data.Variable;
import ru.ispras.fortress.data.types.bitvector.BitVector;
import ru.ispras.fortress.expression.Nodes;
import ru.ispras.fortress.expression.NodeValue;
import ru.ispras.fortress.expression.NodeVariable;
import ru.ispras.microtesk.mmu.basis.MemoryOperation;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuSubsystem;
import java.util.Arrays;
import java.math.BigInteger;
import ru.ispras.microtesk.mmu.basis.BufferAccessEvent;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuAction;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuBinding;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuBufferAccess;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuGuard;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuSegment;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuTransition;

/**
 * The {@code pmem} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class pmem {
  public final VA va = VA.get();
  private final PA pa = PA.get();

  public final NodeVariable data;
  private final NodeVariable c;
  private final L1.Entry l1Entry;
  private final L2.Entry l2Entry;
  private final NodeVariable cacheData;
  private final NodeVariable offset;

  public final MmuAction START;
  public final MmuAction STOP;

  private final MmuAction IF_READ;
  private final MmuAction ASSIGN_0;
  private final MmuAction ASSIGN_1;
  private final MmuAction ASSIGN_2;
  private final MmuAction ASSIGN_3;
  private final MmuAction BRANCH_0;
  private final MmuAction BRANCH_1;
  private final MmuAction ASSIGN_4;
  private final MmuAction ASSIGN_5;
  private final MmuAction ASSIGN_6;
  private final MmuAction JOIN_0;
  private final MmuAction BRANCH_2;
  private final MmuAction BRANCH_3;
  private final MmuAction BRANCH_4;
  private final MmuAction ASSIGN_7;
  private final MmuAction ASSIGN_8;
  private final MmuAction ASSIGN_9;
  private final MmuAction ASSIGN_10;
  private final MmuAction ASSIGN_11;
  private final MmuAction ASSIGN_12;
  private final MmuAction ASSIGN_13;
  private final MmuAction JOIN_1;
  private final MmuAction BRANCH_5;
  private final MmuAction ASSIGN_14;
  private final MmuAction ASSIGN_15;
  private final MmuAction ASSIGN_16;
  private final MmuAction ASSIGN_17;
  private final MmuAction ASSIGN_18;
  private final MmuAction ASSIGN_19;
  private final MmuAction ASSIGN_20;
  private final MmuAction ASSIGN_21;
  private final MmuAction ASSIGN_22;
  private final MmuAction ASSIGN_23;
  private final MmuAction JOIN_2;
  private final MmuAction BRANCH_6;
  private final MmuAction ASSIGN_24;
  private final MmuAction ASSIGN_25;
  private final MmuAction ASSIGN_26;
  private final MmuAction ASSIGN_27;
  private final MmuAction ASSIGN_28;
  private final MmuAction ASSIGN_29;
  private final MmuAction JOIN_3;
  private final MmuAction BRANCH_7;
  private final MmuAction ASSIGN_30;
  private final MmuAction ASSIGN_31;

  private final MmuAction IF_WRITE;
  private final MmuAction ASSIGN_32;
  private final MmuAction ASSIGN_33;
  private final MmuAction ASSIGN_34;
  private final MmuAction BRANCH_8;
  private final MmuAction BRANCH_9;
  private final MmuAction ASSIGN_35;
  private final MmuAction ASSIGN_36;
  private final MmuAction ASSIGN_37;
  private final MmuAction JOIN_4;
  private final MmuAction BRANCH_10;
  private final MmuAction BRANCH_11;
  private final MmuAction BRANCH_12;
  private final MmuAction ASSIGN_38;
  private final MmuAction ASSIGN_39;
  private final MmuAction ASSIGN_40;
  private final MmuAction ASSIGN_41;
  private final MmuAction ASSIGN_42;
  private final MmuAction ASSIGN_43;
  private final MmuAction ASSIGN_44;
  private final MmuAction JOIN_5;
  private final MmuAction BRANCH_13;
  private final MmuAction ASSIGN_45;
  private final MmuAction ASSIGN_46;
  private final MmuAction ASSIGN_47;
  private final MmuAction ASSIGN_48;
  private final MmuAction ASSIGN_49;
  private final MmuAction ASSIGN_50;
  private final MmuAction ASSIGN_51;
  private final MmuAction ASSIGN_52;
  private final MmuAction ASSIGN_53;
  private final MmuAction ASSIGN_54;
  private final MmuAction JOIN_6;
  private final MmuAction BRANCH_14;
  private final MmuAction ASSIGN_55;
  private final MmuAction ASSIGN_56;
  private final MmuAction ASSIGN_57;
  private final MmuAction ASSIGN_58;
  private final MmuAction ASSIGN_59;
  private final MmuAction ASSIGN_60;
  private final MmuAction JOIN_7;
  private final MmuAction BRANCH_15;
  private final MmuAction ASSIGN_61;
  private final MmuAction ASSIGN_62;

  protected pmem(final MmuSubsystem.Builder builder) {
    this(builder, "pmem");
  }

  private pmem(final MmuSubsystem.Builder builder, final String name) {
    builder.setName("pmem");

    this.data = new NodeVariable(name + ".data", DataType.bitVector(32));
    builder.setDataVariable(data);

    this.c = new NodeVariable(name + ".c", DataType.bitVector(3));
    builder.registerVariable(c);

    this.l1Entry = new L1.Entry(name + ".l1Entry");
    builder.registerVariable(l1Entry);

    this.l2Entry = new L2.Entry(name + ".l2Entry");
    builder.registerVariable(l2Entry);

    this.cacheData = new NodeVariable(name + ".cacheData", DataType.bitVector(256));
    builder.registerVariable(cacheData);

    this.offset = new NodeVariable(name + ".offset", DataType.bitVector(3));
    builder.registerVariable(offset);


    this.START = new MmuAction(name + ".START");
    builder.registerAction(START);
    this.STOP = new MmuAction(name + ".STOP");
    builder.registerAction(STOP);

    this.IF_READ = new MmuAction(name + ".IF_READ");
    builder.registerAction(IF_READ);
    builder.registerTransition(new MmuTransition(START, IF_READ, new MmuGuard(MemoryOperation.LOAD)));
    this.ASSIGN_0 = new MmuAction(name + ".ASSIGN_0", new MmuBinding(c, NodeValue.newInteger(3)));
    builder.registerAction(ASSIGN_0);
    builder.registerTransition(new MmuTransition(IF_READ, ASSIGN_0));
    this.ASSIGN_1 = new MmuAction(name + ".ASSIGN_1", new MmuBinding(pa.value, va.value));
    builder.registerAction(ASSIGN_1);
    builder.registerTransition(new MmuTransition(ASSIGN_0, ASSIGN_1));
    this.ASSIGN_2 = new MmuAction(name + ".ASSIGN_2", new MmuBufferAccess(MMU_PA.get(), BufferAccessEvent.WRITE, MMU_PA.get().getAddress(), MMU_PA.get(), null), new MmuBinding(MMU_PA.get().value, pa.value));
    builder.registerAction(ASSIGN_2);
    builder.registerTransition(new MmuTransition(ASSIGN_1, ASSIGN_2));
    this.ASSIGN_3 = new MmuAction(name + ".ASSIGN_3", new MmuBinding(offset, Nodes.bvextract(4, 2, pa.value)));
    builder.registerAction(ASSIGN_3);
    builder.registerTransition(new MmuTransition(ASSIGN_2, ASSIGN_3));
    this.BRANCH_0 = new MmuAction(name + ".BRANCH_0");
    builder.registerAction(BRANCH_0);
    builder.registerTransition(new MmuTransition(ASSIGN_3, BRANCH_0, new MmuGuard(Nodes.noteq(Nodes.bvextract(1, 0, c), NodeValue.newBitVector(0x2, 2)))));
    this.BRANCH_1 = new MmuAction(name + ".BRANCH_1");
    builder.registerAction(BRANCH_1);
    builder.registerTransition(new MmuTransition(BRANCH_0, BRANCH_1, new MmuGuard(new MmuBufferAccess(L1.get(), BufferAccessEvent.HIT, L1.get().getAddress(), L1.get(), pa))));
    this.ASSIGN_4 = new MmuAction(name + ".ASSIGN_4", new MmuBufferAccess(L1.get(), BufferAccessEvent.READ, L1.get().getAddress(), L1.get(), pa), l1Entry, L1.get());
    builder.registerAction(ASSIGN_4);
    builder.registerTransition(new MmuTransition(BRANCH_1, ASSIGN_4));
    this.ASSIGN_5 = new MmuAction(name + ".ASSIGN_5", new MmuBinding(cacheData, l1Entry.DATA));
    builder.registerAction(ASSIGN_5);
    builder.registerTransition(new MmuTransition(ASSIGN_4, ASSIGN_5));
    final NodeVariable TMP_0 = new NodeVariable(name + ".TMP_0", DataType.bitVector(32));
    readData.Function call_0 = readData.get().newCall(builder, TMP_0, cacheData, offset);
    builder.registerTransition(new MmuTransition(ASSIGN_5, call_0.START));
    this.ASSIGN_6 = new MmuAction(name + ".ASSIGN_6", new MmuBinding(data, TMP_0));
    builder.registerAction(ASSIGN_6);
    builder.registerTransition(new MmuTransition(call_0.STOP, ASSIGN_6));
    this.JOIN_0 = new MmuAction(name + ".JOIN_0");
    builder.registerAction(JOIN_0);
    builder.registerTransition(new MmuTransition(ASSIGN_6, JOIN_0));
    this.BRANCH_2 = new MmuAction(name + ".BRANCH_2");
    builder.registerAction(BRANCH_2);
    builder.registerTransition(new MmuTransition(BRANCH_0, BRANCH_2, new MmuGuard(new MmuBufferAccess(L1.get(), BufferAccessEvent.MISS, L1.get().getAddress(), L1.get(), pa))));
    this.BRANCH_3 = new MmuAction(name + ".BRANCH_3");
    builder.registerAction(BRANCH_3);
    builder.registerTransition(new MmuTransition(BRANCH_2, BRANCH_3, new MmuGuard(Nodes.eq(Nodes.bvextract(1, 0, c), NodeValue.newBitVector(0x3, 2)))));
    this.BRANCH_4 = new MmuAction(name + ".BRANCH_4");
    builder.registerAction(BRANCH_4);
    builder.registerTransition(new MmuTransition(BRANCH_3, BRANCH_4, new MmuGuard(new MmuBufferAccess(L2.get(), BufferAccessEvent.HIT, L2.get().getAddress(), L2.get(), pa))));
    this.ASSIGN_7 = new MmuAction(name + ".ASSIGN_7", new MmuBufferAccess(L2.get(), BufferAccessEvent.READ, L2.get().getAddress(), L2.get(), pa), l2Entry, L2.get());
    builder.registerAction(ASSIGN_7);
    builder.registerTransition(new MmuTransition(BRANCH_4, ASSIGN_7));
    this.ASSIGN_8 = new MmuAction(name + ".ASSIGN_8", new MmuBinding(cacheData, l2Entry.DATA));
    builder.registerAction(ASSIGN_8);
    builder.registerTransition(new MmuTransition(ASSIGN_7, ASSIGN_8));
    final NodeVariable TMP_1 = new NodeVariable(name + ".TMP_1", DataType.bitVector(32));
    readData.Function call_1 = readData.get().newCall(builder, TMP_1, cacheData, offset);
    builder.registerTransition(new MmuTransition(ASSIGN_8, call_1.START));
    this.ASSIGN_9 = new MmuAction(name + ".ASSIGN_9", new MmuBinding(data, TMP_1));
    builder.registerAction(ASSIGN_9);
    builder.registerTransition(new MmuTransition(call_1.STOP, ASSIGN_9));
    this.ASSIGN_10 = new MmuAction(name + ".ASSIGN_10", new MmuBinding(l1Entry.V, NodeValue.newInteger(1)));
    builder.registerAction(ASSIGN_10);
    builder.registerTransition(new MmuTransition(ASSIGN_9, ASSIGN_10));
    this.ASSIGN_11 = new MmuAction(name + ".ASSIGN_11", new MmuBinding(l1Entry.TAG, Nodes.bvextract(31, 12, pa.value)));
    builder.registerAction(ASSIGN_11);
    builder.registerTransition(new MmuTransition(ASSIGN_10, ASSIGN_11));
    this.ASSIGN_12 = new MmuAction(name + ".ASSIGN_12", new MmuBinding(l1Entry.DATA, cacheData));
    builder.registerAction(ASSIGN_12);
    builder.registerTransition(new MmuTransition(ASSIGN_11, ASSIGN_12));
    this.ASSIGN_13 = new MmuAction(name + ".ASSIGN_13", new MmuBufferAccess(L1.get(), BufferAccessEvent.WRITE, L1.get().getAddress(), L1.get(), null));
    builder.registerAction(ASSIGN_13);
    builder.registerTransition(new MmuTransition(ASSIGN_12, ASSIGN_13));
    this.JOIN_1 = new MmuAction(name + ".JOIN_1");
    builder.registerAction(JOIN_1);
    builder.registerTransition(new MmuTransition(ASSIGN_13, JOIN_1));
    this.BRANCH_5 = new MmuAction(name + ".BRANCH_5");
    builder.registerAction(BRANCH_5);
    builder.registerTransition(new MmuTransition(BRANCH_3, BRANCH_5, new MmuGuard(new MmuBufferAccess(L2.get(), BufferAccessEvent.MISS, L2.get().getAddress(), L2.get(), pa))));
    this.ASSIGN_14 = new MmuAction(name + ".ASSIGN_14", new MmuBufferAccess(M.get(), BufferAccessEvent.READ, M.get().getAddress(), M.get(), pa), new MmuBinding(cacheData, M.get().DATA));
    builder.registerAction(ASSIGN_14);
    builder.registerTransition(new MmuTransition(BRANCH_5, ASSIGN_14));
    final NodeVariable TMP_2 = new NodeVariable(name + ".TMP_2", DataType.bitVector(32));
    readData.Function call_2 = readData.get().newCall(builder, TMP_2, cacheData, offset);
    builder.registerTransition(new MmuTransition(ASSIGN_14, call_2.START));
    this.ASSIGN_15 = new MmuAction(name + ".ASSIGN_15", new MmuBinding(data, TMP_2));
    builder.registerAction(ASSIGN_15);
    builder.registerTransition(new MmuTransition(call_2.STOP, ASSIGN_15));
    this.ASSIGN_16 = new MmuAction(name + ".ASSIGN_16", new MmuBinding(l2Entry.V, NodeValue.newInteger(1)));
    builder.registerAction(ASSIGN_16);
    builder.registerTransition(new MmuTransition(ASSIGN_15, ASSIGN_16));
    this.ASSIGN_17 = new MmuAction(name + ".ASSIGN_17", new MmuBinding(l2Entry.TAG, Nodes.bvextract(31, 17, pa.value)));
    builder.registerAction(ASSIGN_17);
    builder.registerTransition(new MmuTransition(ASSIGN_16, ASSIGN_17));
    this.ASSIGN_18 = new MmuAction(name + ".ASSIGN_18", new MmuBinding(l2Entry.DATA, cacheData));
    builder.registerAction(ASSIGN_18);
    builder.registerTransition(new MmuTransition(ASSIGN_17, ASSIGN_18));
    this.ASSIGN_19 = new MmuAction(name + ".ASSIGN_19", new MmuBufferAccess(L2.get(), BufferAccessEvent.WRITE, L2.get().getAddress(), L2.get(), null));
    builder.registerAction(ASSIGN_19);
    builder.registerTransition(new MmuTransition(ASSIGN_18, ASSIGN_19));
    this.ASSIGN_20 = new MmuAction(name + ".ASSIGN_20", new MmuBinding(l1Entry.V, NodeValue.newInteger(1)));
    builder.registerAction(ASSIGN_20);
    builder.registerTransition(new MmuTransition(ASSIGN_19, ASSIGN_20));
    this.ASSIGN_21 = new MmuAction(name + ".ASSIGN_21", new MmuBinding(l1Entry.TAG, Nodes.bvextract(31, 12, pa.value)));
    builder.registerAction(ASSIGN_21);
    builder.registerTransition(new MmuTransition(ASSIGN_20, ASSIGN_21));
    this.ASSIGN_22 = new MmuAction(name + ".ASSIGN_22", new MmuBinding(l1Entry.DATA, cacheData));
    builder.registerAction(ASSIGN_22);
    builder.registerTransition(new MmuTransition(ASSIGN_21, ASSIGN_22));
    this.ASSIGN_23 = new MmuAction(name + ".ASSIGN_23", new MmuBufferAccess(L1.get(), BufferAccessEvent.WRITE, L1.get().getAddress(), L1.get(), null));
    builder.registerAction(ASSIGN_23);
    builder.registerTransition(new MmuTransition(ASSIGN_22, ASSIGN_23));
    builder.registerTransition(new MmuTransition(ASSIGN_23, JOIN_1));
    this.JOIN_2 = new MmuAction(name + ".JOIN_2");
    builder.registerAction(JOIN_2);
    builder.registerTransition(new MmuTransition(JOIN_1, JOIN_2));
    this.BRANCH_6 = new MmuAction(name + ".BRANCH_6");
    builder.registerAction(BRANCH_6);
    builder.registerTransition(new MmuTransition(BRANCH_2, BRANCH_6, new MmuGuard(Nodes.noteq(Nodes.bvextract(1, 0, c), NodeValue.newBitVector(0x3, 2)))));
    this.ASSIGN_24 = new MmuAction(name + ".ASSIGN_24", new MmuBufferAccess(M.get(), BufferAccessEvent.READ, M.get().getAddress(), M.get(), pa), new MmuBinding(cacheData, M.get().DATA));
    builder.registerAction(ASSIGN_24);
    builder.registerTransition(new MmuTransition(BRANCH_6, ASSIGN_24));
    final NodeVariable TMP_3 = new NodeVariable(name + ".TMP_3", DataType.bitVector(32));
    readData.Function call_3 = readData.get().newCall(builder, TMP_3, cacheData, offset);
    builder.registerTransition(new MmuTransition(ASSIGN_24, call_3.START));
    this.ASSIGN_25 = new MmuAction(name + ".ASSIGN_25", new MmuBinding(data, TMP_3));
    builder.registerAction(ASSIGN_25);
    builder.registerTransition(new MmuTransition(call_3.STOP, ASSIGN_25));
    this.ASSIGN_26 = new MmuAction(name + ".ASSIGN_26", new MmuBinding(l1Entry.V, NodeValue.newInteger(1)));
    builder.registerAction(ASSIGN_26);
    builder.registerTransition(new MmuTransition(ASSIGN_25, ASSIGN_26));
    this.ASSIGN_27 = new MmuAction(name + ".ASSIGN_27", new MmuBinding(l1Entry.TAG, Nodes.bvextract(31, 12, pa.value)));
    builder.registerAction(ASSIGN_27);
    builder.registerTransition(new MmuTransition(ASSIGN_26, ASSIGN_27));
    this.ASSIGN_28 = new MmuAction(name + ".ASSIGN_28", new MmuBinding(l1Entry.DATA, cacheData));
    builder.registerAction(ASSIGN_28);
    builder.registerTransition(new MmuTransition(ASSIGN_27, ASSIGN_28));
    this.ASSIGN_29 = new MmuAction(name + ".ASSIGN_29", new MmuBufferAccess(L1.get(), BufferAccessEvent.WRITE, L1.get().getAddress(), L1.get(), null));
    builder.registerAction(ASSIGN_29);
    builder.registerTransition(new MmuTransition(ASSIGN_28, ASSIGN_29));
    builder.registerTransition(new MmuTransition(ASSIGN_29, JOIN_2));
    builder.registerTransition(new MmuTransition(JOIN_2, JOIN_0));
    this.JOIN_3 = new MmuAction(name + ".JOIN_3");
    builder.registerAction(JOIN_3);
    builder.registerTransition(new MmuTransition(JOIN_0, JOIN_3));
    this.BRANCH_7 = new MmuAction(name + ".BRANCH_7");
    builder.registerAction(BRANCH_7);
    builder.registerTransition(new MmuTransition(ASSIGN_3, BRANCH_7, new MmuGuard(Nodes.eq(Nodes.bvextract(1, 0, c), NodeValue.newBitVector(0x2, 2)))));
    this.ASSIGN_30 = new MmuAction(name + ".ASSIGN_30", new MmuBufferAccess(M.get(), BufferAccessEvent.READ, M.get().getAddress(), M.get(), pa), new MmuBinding(cacheData, M.get().DATA));
    builder.registerAction(ASSIGN_30);
    builder.registerTransition(new MmuTransition(BRANCH_7, ASSIGN_30));
    final NodeVariable TMP_4 = new NodeVariable(name + ".TMP_4", DataType.bitVector(32));
    readData.Function call_4 = readData.get().newCall(builder, TMP_4, cacheData, offset);
    builder.registerTransition(new MmuTransition(ASSIGN_30, call_4.START));
    this.ASSIGN_31 = new MmuAction(name + ".ASSIGN_31", new MmuBinding(data, TMP_4));
    builder.registerAction(ASSIGN_31);
    builder.registerTransition(new MmuTransition(call_4.STOP, ASSIGN_31));
    builder.registerTransition(new MmuTransition(ASSIGN_31, JOIN_3));
    builder.registerTransition(new MmuTransition(JOIN_3, STOP));

    this.IF_WRITE = new MmuAction(name + ".IF_WRITE");
    builder.registerAction(IF_WRITE);
    builder.registerTransition(new MmuTransition(START, IF_WRITE, new MmuGuard(MemoryOperation.STORE)));
    this.ASSIGN_32 = new MmuAction(name + ".ASSIGN_32", new MmuBinding(c, NodeValue.newInteger(3)));
    builder.registerAction(ASSIGN_32);
    builder.registerTransition(new MmuTransition(IF_WRITE, ASSIGN_32));
    this.ASSIGN_33 = new MmuAction(name + ".ASSIGN_33", new MmuBinding(pa.value, va.value));
    builder.registerAction(ASSIGN_33);
    builder.registerTransition(new MmuTransition(ASSIGN_32, ASSIGN_33));
    this.ASSIGN_34 = new MmuAction(name + ".ASSIGN_34", new MmuBinding(offset, Nodes.bvextract(4, 2, pa.value)));
    builder.registerAction(ASSIGN_34);
    builder.registerTransition(new MmuTransition(ASSIGN_33, ASSIGN_34));
    this.BRANCH_8 = new MmuAction(name + ".BRANCH_8");
    builder.registerAction(BRANCH_8);
    builder.registerTransition(new MmuTransition(ASSIGN_34, BRANCH_8, new MmuGuard(Nodes.noteq(Nodes.bvextract(1, 0, c), NodeValue.newBitVector(0x2, 2)))));
    this.BRANCH_9 = new MmuAction(name + ".BRANCH_9");
    builder.registerAction(BRANCH_9);
    builder.registerTransition(new MmuTransition(BRANCH_8, BRANCH_9, new MmuGuard(new MmuBufferAccess(L1.get(), BufferAccessEvent.HIT, L1.get().getAddress(), L1.get(), pa))));
    this.ASSIGN_35 = new MmuAction(name + ".ASSIGN_35", new MmuBufferAccess(L1.get(), BufferAccessEvent.READ, L1.get().getAddress(), L1.get(), pa), l1Entry, L1.get());
    builder.registerAction(ASSIGN_35);
    builder.registerTransition(new MmuTransition(BRANCH_9, ASSIGN_35));
    writeData.Function call_5 = writeData.get().newCall(builder, l1Entry.DATA, offset, data);
    builder.registerTransition(new MmuTransition(ASSIGN_35, call_5.START));
    this.ASSIGN_36 = new MmuAction(name + ".ASSIGN_36", new MmuBufferAccess(L1.get(), BufferAccessEvent.WRITE, L1.get().getAddress(), L1.get(), null));
    builder.registerAction(ASSIGN_36);
    builder.registerTransition(new MmuTransition(call_5.STOP, ASSIGN_36));
    this.ASSIGN_37 = new MmuAction(name + ".ASSIGN_37", new MmuBufferAccess(M.get(), BufferAccessEvent.WRITE, M.get().getAddress(), M.get(), null), new MmuBinding(M.get().DATA, l1Entry.DATA));
    builder.registerAction(ASSIGN_37);
    builder.registerTransition(new MmuTransition(ASSIGN_36, ASSIGN_37));
    this.JOIN_4 = new MmuAction(name + ".JOIN_4");
    builder.registerAction(JOIN_4);
    builder.registerTransition(new MmuTransition(ASSIGN_37, JOIN_4));
    this.BRANCH_10 = new MmuAction(name + ".BRANCH_10");
    builder.registerAction(BRANCH_10);
    builder.registerTransition(new MmuTransition(BRANCH_8, BRANCH_10, new MmuGuard(new MmuBufferAccess(L1.get(), BufferAccessEvent.MISS, L1.get().getAddress(), L1.get(), pa))));
    this.BRANCH_11 = new MmuAction(name + ".BRANCH_11");
    builder.registerAction(BRANCH_11);
    builder.registerTransition(new MmuTransition(BRANCH_10, BRANCH_11, new MmuGuard(Nodes.eq(Nodes.bvextract(1, 0, c), NodeValue.newBitVector(0x3, 2)))));
    this.BRANCH_12 = new MmuAction(name + ".BRANCH_12");
    builder.registerAction(BRANCH_12);
    builder.registerTransition(new MmuTransition(BRANCH_11, BRANCH_12, new MmuGuard(new MmuBufferAccess(L2.get(), BufferAccessEvent.HIT, L2.get().getAddress(), L2.get(), pa))));
    this.ASSIGN_38 = new MmuAction(name + ".ASSIGN_38", new MmuBufferAccess(L2.get(), BufferAccessEvent.READ, L2.get().getAddress(), L2.get(), pa), l2Entry, L2.get());
    builder.registerAction(ASSIGN_38);
    builder.registerTransition(new MmuTransition(BRANCH_12, ASSIGN_38));
    writeData.Function call_6 = writeData.get().newCall(builder, l2Entry.DATA, offset, data);
    builder.registerTransition(new MmuTransition(ASSIGN_38, call_6.START));
    this.ASSIGN_39 = new MmuAction(name + ".ASSIGN_39", new MmuBufferAccess(L2.get(), BufferAccessEvent.WRITE, L2.get().getAddress(), L2.get(), null));
    builder.registerAction(ASSIGN_39);
    builder.registerTransition(new MmuTransition(call_6.STOP, ASSIGN_39));
    this.ASSIGN_40 = new MmuAction(name + ".ASSIGN_40", new MmuBinding(l1Entry.V, NodeValue.newInteger(1)));
    builder.registerAction(ASSIGN_40);
    builder.registerTransition(new MmuTransition(ASSIGN_39, ASSIGN_40));
    this.ASSIGN_41 = new MmuAction(name + ".ASSIGN_41", new MmuBinding(l1Entry.TAG, Nodes.bvextract(31, 12, pa.value)));
    builder.registerAction(ASSIGN_41);
    builder.registerTransition(new MmuTransition(ASSIGN_40, ASSIGN_41));
    this.ASSIGN_42 = new MmuAction(name + ".ASSIGN_42", new MmuBinding(l1Entry.DATA, l2Entry.DATA));
    builder.registerAction(ASSIGN_42);
    builder.registerTransition(new MmuTransition(ASSIGN_41, ASSIGN_42));
    this.ASSIGN_43 = new MmuAction(name + ".ASSIGN_43", new MmuBufferAccess(L1.get(), BufferAccessEvent.WRITE, L1.get().getAddress(), L1.get(), null));
    builder.registerAction(ASSIGN_43);
    builder.registerTransition(new MmuTransition(ASSIGN_42, ASSIGN_43));
    this.ASSIGN_44 = new MmuAction(name + ".ASSIGN_44", new MmuBufferAccess(M.get(), BufferAccessEvent.WRITE, M.get().getAddress(), M.get(), null), new MmuBinding(M.get().DATA, l1Entry.DATA));
    builder.registerAction(ASSIGN_44);
    builder.registerTransition(new MmuTransition(ASSIGN_43, ASSIGN_44));
    this.JOIN_5 = new MmuAction(name + ".JOIN_5");
    builder.registerAction(JOIN_5);
    builder.registerTransition(new MmuTransition(ASSIGN_44, JOIN_5));
    this.BRANCH_13 = new MmuAction(name + ".BRANCH_13");
    builder.registerAction(BRANCH_13);
    builder.registerTransition(new MmuTransition(BRANCH_11, BRANCH_13, new MmuGuard(new MmuBufferAccess(L2.get(), BufferAccessEvent.MISS, L2.get().getAddress(), L2.get(), pa))));
    this.ASSIGN_45 = new MmuAction(name + ".ASSIGN_45", new MmuBufferAccess(M.get(), BufferAccessEvent.READ, M.get().getAddress(), M.get(), pa), new MmuBinding(cacheData, M.get().DATA));
    builder.registerAction(ASSIGN_45);
    builder.registerTransition(new MmuTransition(BRANCH_13, ASSIGN_45));
    writeData.Function call_7 = writeData.get().newCall(builder, cacheData, offset, data);
    builder.registerTransition(new MmuTransition(ASSIGN_45, call_7.START));
    this.ASSIGN_46 = new MmuAction(name + ".ASSIGN_46", new MmuBufferAccess(M.get(), BufferAccessEvent.WRITE, M.get().getAddress(), M.get(), null), new MmuBinding(M.get().DATA, cacheData));
    builder.registerAction(ASSIGN_46);
    builder.registerTransition(new MmuTransition(call_7.STOP, ASSIGN_46));
    this.ASSIGN_47 = new MmuAction(name + ".ASSIGN_47", new MmuBinding(l2Entry.V, NodeValue.newInteger(1)));
    builder.registerAction(ASSIGN_47);
    builder.registerTransition(new MmuTransition(ASSIGN_46, ASSIGN_47));
    this.ASSIGN_48 = new MmuAction(name + ".ASSIGN_48", new MmuBinding(l2Entry.TAG, Nodes.bvextract(31, 17, pa.value)));
    builder.registerAction(ASSIGN_48);
    builder.registerTransition(new MmuTransition(ASSIGN_47, ASSIGN_48));
    this.ASSIGN_49 = new MmuAction(name + ".ASSIGN_49", new MmuBinding(l2Entry.DATA, cacheData));
    builder.registerAction(ASSIGN_49);
    builder.registerTransition(new MmuTransition(ASSIGN_48, ASSIGN_49));
    this.ASSIGN_50 = new MmuAction(name + ".ASSIGN_50", new MmuBufferAccess(L2.get(), BufferAccessEvent.WRITE, L2.get().getAddress(), L2.get(), null));
    builder.registerAction(ASSIGN_50);
    builder.registerTransition(new MmuTransition(ASSIGN_49, ASSIGN_50));
    this.ASSIGN_51 = new MmuAction(name + ".ASSIGN_51", new MmuBinding(l1Entry.V, NodeValue.newInteger(1)));
    builder.registerAction(ASSIGN_51);
    builder.registerTransition(new MmuTransition(ASSIGN_50, ASSIGN_51));
    this.ASSIGN_52 = new MmuAction(name + ".ASSIGN_52", new MmuBinding(l1Entry.TAG, Nodes.bvextract(31, 12, pa.value)));
    builder.registerAction(ASSIGN_52);
    builder.registerTransition(new MmuTransition(ASSIGN_51, ASSIGN_52));
    this.ASSIGN_53 = new MmuAction(name + ".ASSIGN_53", new MmuBinding(l1Entry.DATA, cacheData));
    builder.registerAction(ASSIGN_53);
    builder.registerTransition(new MmuTransition(ASSIGN_52, ASSIGN_53));
    this.ASSIGN_54 = new MmuAction(name + ".ASSIGN_54", new MmuBufferAccess(L1.get(), BufferAccessEvent.WRITE, L1.get().getAddress(), L1.get(), null));
    builder.registerAction(ASSIGN_54);
    builder.registerTransition(new MmuTransition(ASSIGN_53, ASSIGN_54));
    builder.registerTransition(new MmuTransition(ASSIGN_54, JOIN_5));
    this.JOIN_6 = new MmuAction(name + ".JOIN_6");
    builder.registerAction(JOIN_6);
    builder.registerTransition(new MmuTransition(JOIN_5, JOIN_6));
    this.BRANCH_14 = new MmuAction(name + ".BRANCH_14");
    builder.registerAction(BRANCH_14);
    builder.registerTransition(new MmuTransition(BRANCH_10, BRANCH_14, new MmuGuard(Nodes.noteq(Nodes.bvextract(1, 0, c), NodeValue.newBitVector(0x3, 2)))));
    this.ASSIGN_55 = new MmuAction(name + ".ASSIGN_55", new MmuBufferAccess(M.get(), BufferAccessEvent.READ, M.get().getAddress(), M.get(), pa), new MmuBinding(cacheData, M.get().DATA));
    builder.registerAction(ASSIGN_55);
    builder.registerTransition(new MmuTransition(BRANCH_14, ASSIGN_55));
    writeData.Function call_8 = writeData.get().newCall(builder, cacheData, offset, data);
    builder.registerTransition(new MmuTransition(ASSIGN_55, call_8.START));
    this.ASSIGN_56 = new MmuAction(name + ".ASSIGN_56", new MmuBufferAccess(M.get(), BufferAccessEvent.WRITE, M.get().getAddress(), M.get(), null), new MmuBinding(M.get().DATA, cacheData));
    builder.registerAction(ASSIGN_56);
    builder.registerTransition(new MmuTransition(call_8.STOP, ASSIGN_56));
    this.ASSIGN_57 = new MmuAction(name + ".ASSIGN_57", new MmuBinding(l1Entry.V, NodeValue.newInteger(1)));
    builder.registerAction(ASSIGN_57);
    builder.registerTransition(new MmuTransition(ASSIGN_56, ASSIGN_57));
    this.ASSIGN_58 = new MmuAction(name + ".ASSIGN_58", new MmuBinding(l1Entry.TAG, Nodes.bvextract(31, 12, pa.value)));
    builder.registerAction(ASSIGN_58);
    builder.registerTransition(new MmuTransition(ASSIGN_57, ASSIGN_58));
    this.ASSIGN_59 = new MmuAction(name + ".ASSIGN_59", new MmuBinding(l1Entry.DATA, cacheData));
    builder.registerAction(ASSIGN_59);
    builder.registerTransition(new MmuTransition(ASSIGN_58, ASSIGN_59));
    this.ASSIGN_60 = new MmuAction(name + ".ASSIGN_60", new MmuBufferAccess(L1.get(), BufferAccessEvent.WRITE, L1.get().getAddress(), L1.get(), null));
    builder.registerAction(ASSIGN_60);
    builder.registerTransition(new MmuTransition(ASSIGN_59, ASSIGN_60));
    builder.registerTransition(new MmuTransition(ASSIGN_60, JOIN_6));
    builder.registerTransition(new MmuTransition(JOIN_6, JOIN_4));
    this.JOIN_7 = new MmuAction(name + ".JOIN_7");
    builder.registerAction(JOIN_7);
    builder.registerTransition(new MmuTransition(JOIN_4, JOIN_7));
    this.BRANCH_15 = new MmuAction(name + ".BRANCH_15");
    builder.registerAction(BRANCH_15);
    builder.registerTransition(new MmuTransition(ASSIGN_34, BRANCH_15, new MmuGuard(Nodes.eq(Nodes.bvextract(1, 0, c), NodeValue.newBitVector(0x2, 2)))));
    this.ASSIGN_61 = new MmuAction(name + ".ASSIGN_61", new MmuBufferAccess(M.get(), BufferAccessEvent.READ, M.get().getAddress(), M.get(), pa), new MmuBinding(cacheData, M.get().DATA));
    builder.registerAction(ASSIGN_61);
    builder.registerTransition(new MmuTransition(BRANCH_15, ASSIGN_61));
    writeData.Function call_9 = writeData.get().newCall(builder, cacheData, offset, data);
    builder.registerTransition(new MmuTransition(ASSIGN_61, call_9.START));
    this.ASSIGN_62 = new MmuAction(name + ".ASSIGN_62", new MmuBufferAccess(M.get(), BufferAccessEvent.WRITE, M.get().getAddress(), M.get(), null), new MmuBinding(M.get().DATA, cacheData));
    builder.registerAction(ASSIGN_62);
    builder.registerTransition(new MmuTransition(call_9.STOP, ASSIGN_62));
    builder.registerTransition(new MmuTransition(ASSIGN_62, JOIN_7));
    builder.registerTransition(new MmuTransition(JOIN_7, STOP));
  }
}
