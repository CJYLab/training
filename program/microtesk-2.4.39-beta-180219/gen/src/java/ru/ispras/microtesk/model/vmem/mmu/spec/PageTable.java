/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.vmem.mmu.spec;

import java.util.Collections;
import java.util.Arrays;
import java.math.BigInteger;
import ru.ispras.fortress.data.DataType;
import ru.ispras.fortress.expression.NodeVariable;
import ru.ispras.fortress.data.types.bitvector.BitVector;
import ru.ispras.fortress.expression.Nodes;
import ru.ispras.fortress.expression.NodeValue;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuBinding;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuBuffer;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuStruct;

/**
 * The {@code PageTable} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class PageTable extends MmuBuffer {
  private static PageTable INSTANCE = null;

  public static PageTable get() {
    if (null == INSTANCE) {
      INSTANCE = new PageTable();
    }
    return INSTANCE;
  }

  private final VA va = VA.get();

  public static final class Entry extends MmuStruct {
    public final NodeVariable vpn;
    public final NodeVariable pfn;
    public final NodeVariable unused;

    public Entry(final String name) {
      super(name);

      this.vpn = new NodeVariable(name + ".vpn", DataType.bitVector(6));
      this.pfn = new NodeVariable(name + ".pfn", DataType.bitVector(6));
      this.unused = new NodeVariable(name + ".unused", DataType.bitVector(4));

      addField(vpn);
      addField(pfn);
      addField(unused);
    }
  }

  public final NodeVariable vpn;
  public final NodeVariable pfn;
  public final NodeVariable unused;

  private PageTable() {
    this("PageTable");
  }

  private PageTable(final String name) {
    super(
        name,
        Kind.MEMORY,
        1L,
        64L,
        VA.get(),
        Nodes.bvextract(13, 8, VA.get().value),
        Nodes.bvextract(13, 8, VA.get().value),
        Nodes.bvconcat(Nodes.bvextract(15, 14, VA.get().value), Nodes.bvextract(7, 0, VA.get().value)),
        Collections.<MmuBinding>emptyList(), // set up with setMatchBindings
        false,
        null
    );

    this.vpn = new NodeVariable(name + ".vpn", DataType.bitVector(6));
    this.pfn = new NodeVariable(name + ".pfn", DataType.bitVector(6));
    this.unused = new NodeVariable(name + ".unused", DataType.bitVector(4));

    addField(vpn);
    addField(pfn);
    addField(unused);

    setMatchBindings(Arrays.<MmuBinding>asList(
        new MmuBinding(vpn, Nodes.bvextract(13, 8, VA.get().value))));
  }
}
