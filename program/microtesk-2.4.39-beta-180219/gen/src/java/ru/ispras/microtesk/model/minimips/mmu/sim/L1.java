/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.minimips.mmu.sim;

import java.math.BigInteger;
import ru.ispras.microtesk.model.Execution;
import ru.ispras.microtesk.mmu.model.api.*;
import ru.ispras.fortress.data.types.bitvector.*;

/**
 * The {@code L1} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class L1 extends Cache<L1.Entry, PA> {
  private static L1 instance = null;

  public static L1 get() {
    if (null == instance) {
      instance = new L1();
    }
    return instance;
  }

  public static final class Entry implements Data {
    public final BitVector V;
    public final BitVector TAG;
    public final BitVector DATA;

    public Entry() {
      this.V = BitVector.valueOf(0x0, 1);
      this.TAG = BitVector.newEmpty(20);
      this.DATA = BitVector.newEmpty(256);
    }

    public Entry(final BitVector value) {
      this();
      asBitVector().assign(value);
    }

    public void assign(final Entry other) {
      this.V.assign(other.V);
      this.TAG.assign(other.TAG);
      this.DATA.assign(other.DATA);
    }

    @Override
    public BitVector asBitVector() {
      return BitVector.newMapping(
          DATA,
          TAG,
          V
          );
    }

    @Override
    public String toString() {
      return String.format(
          "Entry [V=0x%s, TAG=0x%s, DATA=0x%s]",
          V.toHexString(),
          TAG.toHexString(),
          DATA.toHexString()
          );
    }
  }
  private static final Indexer<PA> INDEXER = new Indexer<PA>() {
    @Override
    public BitVector getIndex(final PA pa) {
      return pa.value.field(11, 5);
    }
  };

  private static final Matcher<L1.Entry, PA> MATCHER = new Matcher<L1.Entry, PA>() {
    @Override
    public boolean areMatching(final L1.Entry data, final PA pa) {
      return data.V.equals(BitVector.valueOf(0x1, 1)) && data.TAG.equals(pa.value.field(31, 12));
    }
  };

  private L1() {
    super(
      new BigInteger("128", 10),
      4,
      PolicyId.PLRU,
      INDEXER,
      MATCHER
      );
  }

  @Override
  protected PA newAddress() {
    return new PA();
  }

  @Override
  protected Entry newData(final BitVector value) {
    return new Entry(value);
  }
}
