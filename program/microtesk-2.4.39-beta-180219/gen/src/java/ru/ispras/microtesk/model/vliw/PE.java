/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.vliw;

import java.math.BigInteger;
import ru.ispras.microtesk.model.ProcessingElement;
import ru.ispras.microtesk.model.data.Type;
import ru.ispras.microtesk.model.memory.Label;
import ru.ispras.microtesk.model.memory.Memory;

/**
 * The {@code PE} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class PE extends ProcessingElement {
  public final Memory GPR;
  public final Memory FPR;
  public final Memory M;
  public final Memory CIA;
  public final Memory FCCR;

  private PE() {
    super();
    this.GPR = Memory.def(Memory.Kind.REG, "GPR", TypeDefs.WORD, 32);
    this.FPR = Memory.def(Memory.Kind.REG, "FPR", TypeDefs.SINGLE, 32);
    this.M = Memory.def(Memory.Kind.MEM, "M", TypeDefs.WORD, 0x40000000);
    this.CIA = Memory.def(Memory.Kind.REG, "CIA", TypeDefs.WORD, 1);
    this.FCCR = Memory.def(Memory.Kind.REG, "FCCR", TypeDefs.WORD, 1);

    registerAll();
  }

  private PE(final PE other, final boolean shared) {
    super(other);
    this.GPR = other.GPR.copy();
    this.FPR = other.FPR.copy();
    this.M = shared ? other.M : other.M.copy();
    this.CIA = other.CIA.copy();
    this.FCCR = other.FCCR.copy();

    registerAll();
  }

  private void registerAll() {
    addStorage(GPR);
    addStorage(FPR);
    addStorage(M);
    addStorage(CIA);
    addStorage(FCCR);

    addLabel(new Label("PC", CIA, 0));
  }

  @Override
  public ProcessingElement copy(final boolean shared) {
    return new PE(this, shared);
  }

  private static final class PEFactory implements Factory {
    @Override
    public PE create() {
      return new PE();
    }
  }

  public static Factory newFactory() {
    return new PEFactory();
  }
}
