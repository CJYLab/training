/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.minimips;

import java.math.BigInteger;
import ru.ispras.microtesk.model.TemporaryVariables;
import ru.ispras.microtesk.model.data.Type;
import ru.ispras.microtesk.model.memory.Memory;

/**
 * The {@code TempVars} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class TempVars extends TemporaryVariables {
  public final Memory is_delay_slot;
  public final Memory jump_address;
  public final Memory nia;
  public final Memory temp;
  public final Memory temp_jump;
  public final Memory mult_result;
  public final Memory mult_result_unsigned;

  private TempVars() {
    this.is_delay_slot = Memory.def(Memory.Kind.VAR, "is_delay_slot", TypeDefs.BIT, 1);
    this.jump_address = Memory.def(Memory.Kind.VAR, "jump_address", TypeDefs.WORD, 1);
    this.nia = Memory.def(Memory.Kind.VAR, "nia", TypeDefs.WORD, 1);
    this.temp = Memory.def(Memory.Kind.VAR, "temp", Type.INT(33), 1);
    this.temp_jump = Memory.def(Memory.Kind.VAR, "temp_jump", Type.CARD(28), 1);
    this.mult_result = Memory.def(Memory.Kind.VAR, "mult_result", Type.INT(64), 1);
    this.mult_result_unsigned = Memory.def(Memory.Kind.VAR, "mult_result_unsigned", Type.CARD(64), 1);

    addVariable(is_delay_slot);
    addVariable(jump_address);
    addVariable(nia);
    addVariable(temp);
    addVariable(temp_jump);
    addVariable(mult_result);
    addVariable(mult_result_unsigned);
  }

  private static final class TempVarsFactory implements Factory {
    @Override
    public TempVars create() {
      return new TempVars();
    }
  }

  public static Factory newFactory() {
    return new TempVarsFactory();
  }
}
