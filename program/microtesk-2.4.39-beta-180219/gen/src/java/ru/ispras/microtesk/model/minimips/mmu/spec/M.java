/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.minimips.mmu.spec;

import java.util.Collections;
import java.util.Arrays;
import java.math.BigInteger;
import ru.ispras.fortress.data.DataType;
import ru.ispras.fortress.expression.NodeVariable;
import ru.ispras.fortress.data.types.bitvector.BitVector;
import ru.ispras.fortress.expression.Nodes;
import ru.ispras.fortress.expression.NodeValue;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuBinding;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuBuffer;
import ru.ispras.microtesk.mmu.translator.ir.spec.MmuStruct;

/**
 * The {@code M} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class M extends MmuBuffer {
  private static M INSTANCE = null;

  public static M get() {
    if (null == INSTANCE) {
      INSTANCE = new M();
    }
    return INSTANCE;
  }

  private final PA pa = PA.get();

  public static final class Entry extends MmuStruct {
    public final NodeVariable DATA;

    public Entry(final String name) {
      super(name);

      this.DATA = new NodeVariable(name + ".DATA", DataType.bitVector(256));

      addField(DATA);
    }
  }

  public final NodeVariable DATA;

  private M() {
    this("M");
  }

  private M(final String name) {
    super(
        name,
        Kind.UNMAPPED,
        1L,
        134217728L,
        PA.get(),
        Nodes.FALSE,
        Nodes.bvextract(31, 5, PA.get().value),
        Nodes.bvextract(4, 0, PA.get().value),
        Collections.<MmuBinding>emptyList(), // set up with setMatchBindings
        false,
        null
    );

    this.DATA = new NodeVariable(name + ".DATA", DataType.bitVector(256));

    addField(DATA);
  }
}
