/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.vliw;

import java.math.BigInteger;
import ru.ispras.microtesk.model.TemporaryVariables;
import ru.ispras.microtesk.model.data.Type;
import ru.ispras.microtesk.model.memory.Memory;

/**
 * The {@code TempVars} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class TempVars extends TemporaryVariables {
  public final Memory NIA;
  public final Memory JMPADDR;
  public final Memory BRANCH;
  public final Memory temp;

  private TempVars() {
    this.NIA = Memory.def(Memory.Kind.VAR, "NIA", TypeDefs.WORD, 1);
    this.JMPADDR = Memory.def(Memory.Kind.VAR, "JMPADDR", TypeDefs.WORD, 1);
    this.BRANCH = Memory.def(Memory.Kind.VAR, "BRANCH", TypeDefs.BIT, 1);
    this.temp = Memory.def(Memory.Kind.VAR, "temp", Type.CARD(33), 1);

    addVariable(NIA);
    addVariable(JMPADDR);
    addVariable(BRANCH);
    addVariable(temp);
  }

  private static final class TempVarsFactory implements Factory {
    @Override
    public TempVars create() {
      return new TempVars();
    }
  }

  public static Factory newFactory() {
    return new TempVarsFactory();
  }
}
