/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.vliw.decoder;

import static ru.ispras.microtesk.model.vliw.TypeDefs.*;

import ru.ispras.microtesk.model.decoder.DecoderItem;
import ru.ispras.microtesk.model.decoder.DecoderResult;
import ru.ispras.fortress.data.types.bitvector.BitVector;
import ru.ispras.microtesk.model.data.Type;
import ru.ispras.microtesk.model.vliw.op.C_LT_S;
import ru.ispras.microtesk.model.vliw.mode.F;
import ru.ispras.microtesk.model.Immediate;

/**
 * The {@code DecoderC_LT_S} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class DecoderC_LT_S extends DecoderItem {
  private static DecoderC_LT_S instance = null;

  public static DecoderC_LT_S get() {
    if (null == instance) {
      instance = new DecoderC_LT_S();
    }
    return instance;
  }

  private DecoderC_LT_S() {
    super(
        32,
        true,
        "01000110000000000000000000111100",
        "11111111111000000000000011111111"
        );
  }

  public DecoderResult decode(final BitVector image) {
    if (!isOpcMatch(image)) {
      return null;
    }

    resetPosition();

    F ft = null;
    F fs = null;
    Immediate cc = null;

    if (!matchNextOpc(image, BitVector.valueOf("01000110000", 2, 11))) {
      return null;
    }

    ft = (F) readNextPrimitive(image, DecoderF.get());
    if (null == ft) {
      return null;
    }

    fs = (F) readNextPrimitive(image, DecoderF.get());
    if (null == fs) {
      return null;
    }

    cc = readNextImmediate(image, COND_CODE);

    if (!matchNextOpc(image, BitVector.valueOf("00111100", 2, 8))) {
      return null;
    }

    return newResult(new C_LT_S(ft, fs, cc));
  }
}
