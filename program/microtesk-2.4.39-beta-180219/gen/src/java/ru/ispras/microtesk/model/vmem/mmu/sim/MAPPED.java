/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.vmem.mmu.sim;

import java.math.BigInteger;
import ru.ispras.microtesk.model.Execution;
import ru.ispras.microtesk.mmu.model.api.*;
import ru.ispras.fortress.data.types.bitvector.*;

/**
 * The {@code MAPPED} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class MAPPED extends Segment<PA, VA> {
  private static MAPPED instance = null;

  public static MAPPED get() {
    if (null == instance) {
      instance = new MAPPED();
    }
    return instance;
  }

  private MAPPED() {
    super(
        BitVector.valueOf(0x0, 16),
        BitVector.valueOf(0x3FFF, 16)
    );
  }

  @Override
  public PA getData(final VA va) {
    final PA pa = new PA();

    final TLB.Entry tlbEntry = new TLB.Entry();
    final VA pteAddr = new VA();
    final PageTable.Entry pteData = new PageTable.Entry();

    if (TLB.get().isHit(va)) {
      Execution.trace("TLB(%s).hit", va.value.toHexString());
      tlbEntry.assign(TLB.get().getData(va));
    } else {
      Execution.trace("TLB(%s).miss", va.value.toHexString());
      pteAddr.value.assign(BitVector.valueOf(0x0, 16));
      pteAddr.value.field(15, 14).assign(BitVector.valueOf(0x3, 2));
      pteAddr.value.field(6, 1).assign(va.value.field(13, 8));
      pteData.assign(PageTable.get().getData(pteAddr));
      if (!pteData.vpn.equals(va.value.field(13, 8))) {
        Execution.exception("AddressError");
      }
      tlbEntry.vpn.assign(pteData.vpn);
      tlbEntry.pfn.assign(pteData.pfn);
      TLB.get().setData(va).assign(tlbEntry);
    }
    Execution.trace("Translation: VPN=0x%s => PFN=0x%s", tlbEntry.vpn.toHexString(), tlbEntry.pfn.toHexString());
    pa.value.field(13, 8).assign(tlbEntry.pfn);
    pa.value.field(7, 0).assign(va.value.field(7, 0));

    return pa;
  }
}
