/*
 * Copyright (c) Institute for System Programming of the Russian Academy of Sciences
 * All Rights Reserved
 *
 * Institute for System Programming of the Russian Academy of Sciences (ISP RAS)
 * 25 Alexander Solzhenitsyn st., Moscow, 109004, Russia
 * http://www.ispras.ru
 *
 * The present file was automatically generated on the basis of formal specifications.
 * It is distributed under the same terms and conditions as the derived specifications.
 *
 * N.B. PLEASE DO NOT MODIFY THIS FILE.
 */

package ru.ispras.microtesk.model.x86.metadata;

import static ru.ispras.microtesk.model.x86.TypeDefs.*;

import java.math.BigInteger;
import ru.ispras.microtesk.model.data.Type;
import ru.ispras.microtesk.model.metadata.MetaModel;
import ru.ispras.microtesk.model.metadata.MetaModelBuilder;

/**
 * The {@code MetaModelFactory} class is automatically generated by MicroTESK.
 *
 * @author <a href="mailto:microtesk-support@ispras.ru">MicroTESK</a>
 */
public final class MetaModelFactory {
  private MetaModelFactory() {}

  public static MetaModel newMetaModel() {
    final MetaModelBuilder builder = new MetaModelBuilder();

    builder.addRegister("program_counter", addR, 1);
    builder.addRegister("GPR", WORD, 8);
    builder.addRegister("AX", WORD, 1);
    builder.addRegister("AL", BYTE, 1);
    builder.addRegister("AH", BYTE, 1);
    builder.addRegister("CX", WORD, 1);
    builder.addRegister("CL", BYTE, 1);
    builder.addRegister("CH", BYTE, 1);
    builder.addRegister("DX", WORD, 1);
    builder.addRegister("DL", BYTE, 1);
    builder.addRegister("DH", BYTE, 1);
    builder.addRegister("BX", WORD, 1);
    builder.addRegister("BL", BYTE, 1);
    builder.addRegister("BH", BYTE, 1);
    builder.addRegister("SP", WORD, 1);
    builder.addRegister("BP", WORD, 1);
    builder.addRegister("SI", WORD, 1);
    builder.addRegister("DI", WORD, 1);
    builder.addRegister("RSEG", WORD, 4);
    builder.addRegister("ES", WORD, 1);
    builder.addRegister("CS", WORD, 1);
    builder.addRegister("SS", WORD, 1);
    builder.addRegister("DS", WORD, 1);
    builder.addRegister("IP", WORD, 1);
    builder.addRegister("FLAGS", WORD, 1);
    builder.addRegister("CF", BIT, 1);
    builder.addRegister("PF", BIT, 1);
    builder.addRegister("AF", BIT, 1);
    builder.addRegister("ZF", BIT, 1);
    builder.addRegister("SF", BIT, 1);
    builder.addRegister("TF", BIT, 1);
    builder.addRegister("IF", BIT, 1);
    builder.addRegister("DF", BIT, 1);
    builder.addRegister("OF", BIT, 1);

    builder.addMemory("MEM", BYTE, 0x100000);
    builder.addMemory("BRANCH", BIT, 0x1);
    builder.addMemory("NEXTPC", WORD, 0x1);

    builder.addMode(R16.get());
    builder.addMode(RSEG16.get());
    builder.addMode(R8.get());
    builder.addMode(IMM8.get());
    builder.addMode(IMM16.get());
    builder.addMode(DOAM.get());
    builder.addMode(RIAM_BX.get());
    builder.addMode(RIAM_SI.get());
    builder.addMode(RIAM_DI.get());
    builder.addMode(BIAM_BX_SI.get());
    builder.addMode(BIAM_BX_DI.get());
    builder.addMode(BIAM_BP_SI.get());
    builder.addMode(BIAM_BP_DI.get());
    builder.addMode(IAM_BX_D8.get());
    builder.addMode(IAM_BP_D8.get());
    builder.addMode(IAM_SI_D8.get());
    builder.addMode(IAM_DI_D8.get());
    builder.addMode(BIDAM_BX_SI_D8.get());
    builder.addMode(BIDAM_BX_DI_D8.get());
    builder.addMode(BIDAM_BP_SI_D8.get());
    builder.addMode(BIDAM_BP_DI_D8.get());
    builder.addMode(IAM_BX_D16.get());
    builder.addMode(IAM_BP_D16.get());
    builder.addMode(IAM_SI_D16.get());
    builder.addMode(IAM_DI_D16.get());
    builder.addMode(BIDAM_BX_SI_D16.get());
    builder.addMode(BIDAM_BX_DI_D16.get());
    builder.addMode(BIDAM_BP_SI_D16.get());
    builder.addMode(BIDAM_BP_DI_D16.get());
    builder.addMode(MOFFS.get());

    builder.addOperation(mov_m8r8.get());
    builder.addOperation(mov_r8m8.get());
    builder.addOperation(mov_r8r8.get());
    builder.addOperation(mov_m16r16.get());
    builder.addOperation(mov_r16r16.get());
    builder.addOperation(mov_r16m16.get());
    builder.addOperation(mov_r16rseg.get());
    builder.addOperation(mov_m16rseg.get());
    builder.addOperation(mov_rsegr16.get());
    builder.addOperation(mov_rsegm16.get());
    builder.addOperation(mov_r8i8.get());
    builder.addOperation(mov_r16i16.get());
    builder.addOperation(mov_m8i8.get());
    builder.addOperation(mov_m16i16.get());
    builder.addOperation(mov.get());
    builder.addOperation(xchg_r8r8.get());
    builder.addOperation(xchg_r8m8.get());
    builder.addOperation(xchg_r16r16.get());
    builder.addOperation(xchg_r16m16.get());
    builder.addOperation(xchg.get());
    builder.addOperation(push_rseg.get());
    builder.addOperation(push_r16.get());
    builder.addOperation(push_m16.get());
    builder.addOperation(push.get());
    builder.addOperation(pushA.get());
    builder.addOperation(pop_rseg.get());
    builder.addOperation(pop_r16.get());
    builder.addOperation(pop_m16.get());
    builder.addOperation(pop.get());
    builder.addOperation(popA.get());
    builder.addOperation(add_m8r8.get());
    builder.addOperation(add_m16r16.get());
    builder.addOperation(add_r8r8.get());
    builder.addOperation(add_r8m8.get());
    builder.addOperation(add_r16r16.get());
    builder.addOperation(add_r16m16.get());
    builder.addOperation(add_r8i8.get());
    builder.addOperation(add_m8i8.get());
    builder.addOperation(add_r16i16.get());
    builder.addOperation(add_m16i16.get());
    builder.addOperation(add.get());
    builder.addOperation(adc_m8r8.get());
    builder.addOperation(adc_m16r16.get());
    builder.addOperation(adc_r8r8.get());
    builder.addOperation(adc_r8m8.get());
    builder.addOperation(adc_r16r16.get());
    builder.addOperation(adc_r16m16.get());
    builder.addOperation(adc_r8i8.get());
    builder.addOperation(adc_m8i8.get());
    builder.addOperation(adc_r16i16.get());
    builder.addOperation(adc_m16i16.get());
    builder.addOperation(adc.get());
    builder.addOperation(sub_m8r8.get());
    builder.addOperation(sub_m16r16.get());
    builder.addOperation(sub_r8r8.get());
    builder.addOperation(sub_r8m8.get());
    builder.addOperation(sub_r16r16.get());
    builder.addOperation(sub_r16m16.get());
    builder.addOperation(sub_r8i8.get());
    builder.addOperation(sub_m8i8.get());
    builder.addOperation(sub_r16i16.get());
    builder.addOperation(sub_m16i16.get());
    builder.addOperation(sub.get());
    builder.addOperation(sbb_m8r8.get());
    builder.addOperation(sbb_m16r16.get());
    builder.addOperation(sbb_r8r8.get());
    builder.addOperation(sbb_r8m8.get());
    builder.addOperation(sbb_r16r16.get());
    builder.addOperation(sbb_r16m16.get());
    builder.addOperation(sbb_r8i8.get());
    builder.addOperation(sbb_m8i8.get());
    builder.addOperation(sbb_r16i16.get());
    builder.addOperation(sbb_m16i16.get());
    builder.addOperation(sbb.get());
    builder.addOperation(inc_r8.get());
    builder.addOperation(inc_m8.get());
    builder.addOperation(inc_r16.get());
    builder.addOperation(inc_m16.get());
    builder.addOperation(inc.get());
    builder.addOperation(dec_r8.get());
    builder.addOperation(dec_m8.get());
    builder.addOperation(dec_r16.get());
    builder.addOperation(dec_m16.get());
    builder.addOperation(dec.get());
    builder.addOperation(mul_r8.get());
    builder.addOperation(mul_m8.get());
    builder.addOperation(mul_r16.get());
    builder.addOperation(mul_m16.get());
    builder.addOperation(mul.get());
    builder.addOperation(imul_r8.get());
    builder.addOperation(imul_m8.get());
    builder.addOperation(imul_r16.get());
    builder.addOperation(imul_m16.get());
    builder.addOperation(imul.get());
    builder.addOperation(div_r8.get());
    builder.addOperation(div_m8.get());
    builder.addOperation(div_r16.get());
    builder.addOperation(div_m16.get());
    builder.addOperation(div.get());
    builder.addOperation(idiv_r8.get());
    builder.addOperation(idiv_m8.get());
    builder.addOperation(idiv_r16.get());
    builder.addOperation(idiv_m16.get());
    builder.addOperation(idiv.get());
    builder.addOperation(test_r8r8.get());
    builder.addOperation(test_m8r8.get());
    builder.addOperation(test_r16r16.get());
    builder.addOperation(test_m16r16.get());
    builder.addOperation(test_r8i8.get());
    builder.addOperation(test_m8i8.get());
    builder.addOperation(test_r16i16.get());
    builder.addOperation(test_m16i16.get());
    builder.addOperation(test.get());
    builder.addOperation(and_r8r8.get());
    builder.addOperation(and_m8r8.get());
    builder.addOperation(and_r8m8.get());
    builder.addOperation(and_r16r16.get());
    builder.addOperation(and_m16r16.get());
    builder.addOperation(and_r16m16.get());
    builder.addOperation(and_r8i8.get());
    builder.addOperation(and_m8i8.get());
    builder.addOperation(and_r16i16.get());
    builder.addOperation(and_m16i16.get());
    builder.addOperation(and.get());
    builder.addOperation(or_r8r8.get());
    builder.addOperation(or_m8r8.get());
    builder.addOperation(or_r8m8.get());
    builder.addOperation(or_r16r16.get());
    builder.addOperation(or_m16r16.get());
    builder.addOperation(or_r16m16.get());
    builder.addOperation(or_r8i8.get());
    builder.addOperation(or_m8i8.get());
    builder.addOperation(or_r16i16.get());
    builder.addOperation(or_m16i16.get());
    builder.addOperation(or.get());
    builder.addOperation(xor_r8r8.get());
    builder.addOperation(xor_m8r8.get());
    builder.addOperation(xor_r8m8.get());
    builder.addOperation(xor_r16r16.get());
    builder.addOperation(xor_m16r16.get());
    builder.addOperation(xor_r16m16.get());
    builder.addOperation(xor_r8i8.get());
    builder.addOperation(xor_m8i8.get());
    builder.addOperation(xor_r16i16.get());
    builder.addOperation(xor_m16i16.get());
    builder.addOperation(xor.get());
    builder.addOperation(not_r8.get());
    builder.addOperation(not_m8.get());
    builder.addOperation(not_r16.get());
    builder.addOperation(not_m16.get());
    builder.addOperation(not.get());
    builder.addOperation(neg_r8.get());
    builder.addOperation(neg_m8.get());
    builder.addOperation(neg_r16.get());
    builder.addOperation(neg_m16.get());
    builder.addOperation(neg.get());
    builder.addOperation(cmp_m8r8.get());
    builder.addOperation(cmp_m16r16.get());
    builder.addOperation(cmp_r8r8.get());
    builder.addOperation(cmp_r8m8.get());
    builder.addOperation(cmp_r16r16.get());
    builder.addOperation(cmp_r16m16.get());
    builder.addOperation(cmp_r8i8.get());
    builder.addOperation(cmp_m8i8.get());
    builder.addOperation(cmp_r16i16.get());
    builder.addOperation(cmp_m16i16.get());
    builder.addOperation(cmp.get());
    builder.addOperation(jmp_short.get());
    builder.addOperation(jmp_long.get());
    builder.addOperation(jmp_r16.get());
    builder.addOperation(jmp_m16.get());
    builder.addOperation(jmp.get());
    builder.addOperation(jo.get());
    builder.addOperation(jno.get());
    builder.addOperation(jc.get());
    builder.addOperation(jnc.get());
    builder.addOperation(jz.get());
    builder.addOperation(jnz.get());
    builder.addOperation(js.get());
    builder.addOperation(jns.get());
    builder.addOperation(jp.get());
    builder.addOperation(jpe.get());
    builder.addOperation(jnp.get());
    builder.addOperation(jpo.get());
    builder.addOperation(ja.get());
    builder.addOperation(jae.get());
    builder.addOperation(jb.get());
    builder.addOperation(jbe.get());
    builder.addOperation(je.get());
    builder.addOperation(jne.get());
    builder.addOperation(jna.get());
    builder.addOperation(jnae.get());
    builder.addOperation(jnb.get());
    builder.addOperation(jnbe.get());
    builder.addOperation(jg.get());
    builder.addOperation(jge.get());
    builder.addOperation(jl.get());
    builder.addOperation(jle.get());
    builder.addOperation(jng.get());
    builder.addOperation(jnge.get());
    builder.addOperation(jnl.get());
    builder.addOperation(jnle.get());
    builder.addOperation(int_.get());
    builder.addOperation(lea_r16label.get());
    builder.addOperation(lea.get());
    builder.addOperation(x86.get());
    builder.addOperation(instruction.get());

    return builder.build();
  }
}
