{
  &quot;source&quot;: &quot;doc/api/dgram.markdown&quot;,
  &quot;modules&quot;: [
    {
      &quot;textRaw&quot;: &quot;UDP / Datagram Sockets&quot;,
      &quot;name&quot;: &quot;dgram&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nDatagram sockets are available through `require('dgram')`.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F; <code>require(&apos;dgram&apos;)</code> &#x3067;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nImportant note: the behavior of `dgram.Socket#bind()` has changed in v0.10\nand is always asynchronous now.  If you have code that looks like this:\n-->\n\n<p>&#x91CD;&#x8981;&#x306A;&#x6CE8;&#x610F;: <code>dgram.Socket#bind()</code> &#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F; v0.10 &#x3067;&#x5909;&#x66F4;&#x3055;&#x308C;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x5E38;&#x306B;&#x975E;&#x540C;&#x671F;&#x306B;&#x306A;&#x308A;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x3082;&#x3057;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306A;&#x30B3;&#x30FC;&#x30C9;&#x304C;&#x3042;&#x308B;&#x3068;:\n\n</p>\n<pre><code>var s = dgram.createSocket(&apos;udp4&apos;);\ns.bind(1234);\ns.addMembership(&apos;224.0.0.114&apos;);</code></pre>\n<!--\nYou have to change it to this:\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x5909;&#x66F4;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code>var s = dgram.createSocket(&apos;udp4&apos;);\ns.bind(1234, function() {\n  s.addMembership(&apos;224.0.0.114&apos;);\n});</code></pre>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;dgram.createSocket(type, [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createSocket&quot;,
          &quot;desc&quot;: &quot;<!--\n* `type` String. Either 'udp4' or 'udp6'\n* `callback` Function. Attached as a listener to `message` events.\n  Optional\n* Returns: Socket object\n-->\n\n<ul>\n<li><code>type</code> String. &apos;udp4&apos; &#x307E;&#x305F;&#x306F; &apos;udp6&apos; &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;</li>\n<li><code>callback</code> Function. <code>&apos;message&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x308B;&#x3001;\nOptional</li>\n<li>Returns: Socket object</li>\n</ul>\n<!--\nCreates a datagram Socket of the specified types.  Valid types are `udp4`\nand `udp6`.\n\nTakes an optional callback which is added as a listener for `message` events.\n\nCall `socket.bind` if you want to receive datagrams. `socket.bind()` will bind\nto the \"all interfaces\" address on a random port (it does the right thing for\nboth `udp4` and `udp6` sockets). You can then retrieve the address and port\nwith `socket.address().address` and `socket.address().port`.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x7A2E;&#x985E;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x59A5;&#x5F53;&#x306A;&#x7A2E;&#x985E;&#x306F; <code>udp4</code> &#x3068; <code>udp6</code>&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; <code>message</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x3044;&#x5834;&#x5408;&#x306F; <code>socket.bind()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>socket.bind()</code> &#x306F;&#x300C;&#x5168;&#x3066;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x300D;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306B;&#x30E9;&#x30F3;&#x30C0;&#x30E0;&#x306A;&#x30DD;&#x30FC;&#x30C8;\n(<code>udp4</code> &#x3068; <code>udp6</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x4E21;&#x65B9;&#x3067;&#x6B63;&#x3057;&#x3044;&#x3082;&#x306E;&#x3067;&#x3059;) &#x3092;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3068;&#x30DD;&#x30FC;&#x30C8;&#x306F; <code>socket.address().address</code> &#x304A;&#x3088;&#x3073;\n<code>socket.address().port</code> &#x3067;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;type&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: dgram.Socket&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;dgram.Socket&quot;,
          &quot;desc&quot;: &quot;<!--\nThe dgram Socket class encapsulates the datagram functionality.  It\nshould be created via `dgram.createSocket(type, [callback])`.\n-->\n\n<p>dgram Scoket &#x30AF;&#x30E9;&#x30B9;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x6A5F;&#x80FD;&#x3092;&#x30AB;&#x30D7;&#x30BB;&#x30EB;&#x5316;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; <code>dgram.createSocket(type, [callback])</code> &#x3092;&#x901A;&#x3058;&#x3066;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;message&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;message&quot;,
              &quot;desc&quot;: &quot;<!--\n* `msg` Buffer object. The message\n* `rinfo` Object. Remote address information\n-->\n\n<ul>\n<li><code>msg</code> Buffer object. &#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;</li>\n<li><code>rinfo</code> Object. &#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306E;&#x60C5;&#x5831;</li>\n</ul>\n<!--\nEmitted when a new datagram is available on a socket.  `msg` is a `Buffer` and `rinfo` is\nan object with the sender's address information and the number of bytes in the datagram.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x4E0A;&#x3067;&#x65B0;&#x3057;&#x3044;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x5230;&#x7740;&#x3057;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;<code>msg</code> &#x306F; <code>Buffer</code> &#x3067;&#x3001;\n<code>rinfo</code> &#x306F;&#x9001;&#x4FE1;&#x8005;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x60C5;&#x5831;&#x3068;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3092;&#x6301;&#x3063;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;listening&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;listening&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when a socket starts listening for datagrams.  This happens as soon as UDP sockets\nare created.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x3092;&#x958B;&#x59CB;&#x3059;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; UDP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x3068;&#x3059;&#x3050;&#x306B;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when a socket is closed with `close()`.  No new `message` events will be emitted\non this socket.\n-->\n\n<p><code>close()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3059;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x306F;&#x65B0;&#x3057;&#x3044; <code>message</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;params&quot;: [],
              &quot;desc&quot;: &quot;<!--\nEmitted when an error occurs.\n-->\n\n<p>&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;socket.send(buf, offset, length, port, address, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;send&quot;,
              &quot;desc&quot;: &quot;<!--\n* `buf` Buffer object.  Message to be sent\n* `offset` Integer. Offset in the buffer where the message starts.\n* `length` Integer. Number of bytes in the message.\n* `port` Integer. Destination port.\n* `address` String. Destination hostname or IP address.\n* `callback` Function. Called when the message has been sent. Optional.\n-->\n\n<ul>\n<li><code>buf</code> Buffer &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3002;</li>\n<li><code>offset</code> &#x6574;&#x6570;&#x3002;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x306E;&#x958B;&#x59CB;&#x4F4D;&#x7F6E;&#x3068;&#x306A;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x5185;&#x306E;&#x30AA;&#x30D5;&#x30BB;&#x30C3;&#x30C8;&#x3002;</li>\n<li><code>length</code> &#x6574;&#x6570;&#x3002;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x9577;&#x3002;</li>\n<li><code>port</code> &#x6574;&#x6570;&#x3002;&#x63A5;&#x7D9A;&#x5148;&#x306E;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x3002;</li>\n<li><code>address</code> &#x6587;&#x5B57;&#x5217;&#x3002;&#x63A5;&#x7D9A;&#x5148;&#x306E;&#x30DB;&#x30B9;&#x30C8;&#x540D;&#x307E;&#x305F;&#x306F; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3002;</li>\n<li><code>callback</code> &#x95A2;&#x6570;&#x3002;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x304C;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x3068;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3055;&#x308C;&#x308B;&#x3002;&#x4EFB;&#x610F;&#x3002;</li>\n</ul>\n<!--\nFor UDP sockets, the destination port and address must be specified.  A string\nmay be supplied for the `address` parameter, and it will be resolved with DNS.\n-->\n\n<p>UDP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x306F;&#x3001;&#x76F8;&#x624B;&#x5148;&#x306E;&#x30DD;&#x30FC;&#x30C8;&#x3068;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306F;&#x5FC5;&#x305A;&#x6307;&#x5B9A;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>address</code> &#x30D1;&#x30E9;&#x30E1;&#x30FC;&#x30BF;&#x306B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F; DNS &#x306B;&#x3088;&#x3063;&#x3066;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the address is omitted or is an empty string, `'0.0.0.0'` or `'::0'` is used\ninstead.  Depending on the network configuration, those defaults may or may not\nwork; it's best to be explicit about the destination address.\n-->\n\n<p>&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3084;&#x7A7A;&#x6587;&#x5B57;&#x5217;&#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x4EE3;&#x308F;&#x308A;&#x306B; <code>&apos;0.0.0.0&apos;</code> &#x307E;&#x305F;&#x306F;\n<code>&apos;::0&apos;</code> &#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x306E;&#x69CB;&#x6210;&#x306B;&#x3088;&#x3063;&#x3066;&#x306F;&#x3001;&#x3053;&#x308C;&#x3089;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x306F;\n&#x52D5;&#x4F5C;&#x3057;&#x305F;&#x308A;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x308A;&#x3057;&#x307E;&#x3059;; &#x76F8;&#x624B;&#x5148;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306F;&#x660E;&#x793A;&#x7684;&#x306B;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x6700;&#x9069;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the socket has not been previously bound with a call to `bind`, it gets\nassigned a random port number and is bound to the \"all interfaces\" address\n(`'0.0.0.0'` for `udp4` sockets, `'::0'` for `udp6` sockets.)\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x4EE5;&#x524D;&#x306B; <code>bind</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306B;&#x3088;&#x3063;&#x3066;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x30E9;&#x30F3;&#x30C0;&#x30E0;&#x306A;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x304C;&#x300C;&#x5168;&#x3066;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x300D;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;\n(<code>udp4</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x306F; 0.0.0.0&#x3001;<code>udp6</code> &#x3067;&#x306F; ::0)&#x3002;\n\n</p>\n<!--\nAn optional callback may be specified to detect DNS errors or for determining\nwhen it's safe to reuse the `buf` object.  Note that DNS lookups delay the time\nto send for at least one tick.  The only way to know for sure that the datagram\nhas been sent is by using a callback.\n-->\n\n<p>DNS &#x306B;&#x304A;&#x3051;&#x308B;&#x30A8;&#x30E9;&#x30FC;&#x691C;&#x51FA;&#x3068;&#x3001;<code>buf</code> &#x304C;&#x518D;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x3053;&#x3068;&#x3092;&#x5B89;&#x5168;&#x306B;&#x77E5;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\nDNS &#x30EB;&#x30C3;&#x30AF;&#x30A2;&#x30C3;&#x30D7;&#x306F;&#x9001;&#x4FE1;&#x3092;&#x5C11;&#x306A;&#x304F;&#x3068;&#x3082;&#x6B21;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x307E;&#x3067;&#x9045;&#x3089;&#x305B;&#x308B;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x9001;&#x4FE1;&#x304C;&#x884C;&#x308F;&#x308C;&#x305F;&#x3053;&#x3068;&#x3092;&#x78BA;&#x5B9F;&#x306B;&#x77E5;&#x308B;&#x552F;&#x4E00;&#x306E;&#x624B;&#x6BB5;&#x306F;&#x3001;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of sending a UDP packet to a random port on `localhost`;\n-->\n\n<p><code>localhost</code> &#x306E;&#x9069;&#x5F53;&#x306A;&#x30DD;&#x30FC;&#x30C8;&#x306B; UDP &#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x4F8B;;\n\n</p>\n<pre><code>var dgram = require(&apos;dgram&apos;);\nvar message = new Buffer(&quot;Some bytes&quot;);\nvar client = dgram.createSocket(&quot;udp4&quot;);\nclient.send(message, 0, message.length, 41234, &quot;localhost&quot;, function(err, bytes) {\n  client.close();\n});</code></pre>\n<!--\n**A Note about UDP datagram size**\n\nThe maximum size of an `IPv4/v6` datagram depends on the `MTU` (_Maximum Transmission Unit_)\nand on the `Payload Length` field size.\n\n- The `Payload Length` field is `16 bits` wide, which means that a normal payload\n  cannot be larger than 64K octets including internet header and data\n  (65,507 bytes = 65,535 − 8 bytes UDP header − 20 bytes IP header);\n  this is generally true for loopback interfaces, but such long datagrams\n  are impractical for most hosts and networks.\n\n- The `MTU` is the largest size a given link layer technology can support for datagrams.\n  For any link, `IPv4` mandates a minimum `MTU` of `68` octets, while the recommended `MTU`\n  for IPv4 is `576` (typically recommended as the `MTU` for dial-up type applications),\n  whether they arrive whole or in fragments.\n\n  For `IPv6`, the minimum `MTU` is `1280` octets, however, the mandatory minimum\n  fragment reassembly buffer size is `1500` octets.\n  The value of `68` octets is very small, since most current link layer technologies have\n  a minimum `MTU` of `1500` (like Ethernet).\n\nNote that it's impossible to know in advance the MTU of each link through which\na packet might travel, and that generally sending a datagram greater than\nthe (receiver) `MTU` won't work (the packet gets silently dropped, without\ninforming the source that the data did not reach its intended recipient).\n-->\n\n<p><strong>UDP &#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x306B;&#x3064;&#x3044;&#x3066;</strong>\n\n</p>\n<p><code>IPv4/v6</code> &#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x6700;&#x5927;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x306F; <code>MTU</code> (<em>Maximum Transmission Unit</em>) &#x3068;&#x3001;\n<code>Payload Length</code> &#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x30B5;&#x30A4;&#x30BA;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<ul>\n<li><p><code>Payload Length</code> &#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x30B5;&#x30A4;&#x30BA;&#x306F; 16bit &#x9577;&#x3067;&#x3001;&#x3053;&#x308C;&#x306F;&#x901A;&#x5E38;&#x306E;&#x30DA;&#x30A4;&#x30ED;&#x30FC;&#x30C9;&#x304C;\nIP &#x30D8;&#x30C3;&#x30C0;&#x3068;&#x30C7;&#x30FC;&#x30BF;&#x542B;&#x3081;&#x3066; 64K &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x3088;&#x308A;&#x9577;&#x304F;&#x306A;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;\n(65,507 &#x30D0;&#x30A4;&#x30C8; = 65,535 &#x2212; 8 &#x30D0;&#x30A4;&#x30C8;&#x306E; UDP &#x30D8;&#x30C3;&#x30C0; &#x2212; 20 &#x30D0;&#x30A4;&#x30C8;&#x306E; IP &#x30D8;&#x30C3;&#x30C0;);\n&#x3053;&#x308C;&#x306F;&#x4E00;&#x822C;&#x7684;&#x306B;&#x30EB;&#x30FC;&#x30D7;&#x30D0;&#x30C3;&#x30AF;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x6B63;&#x3057;&#x3044;&#x3082;&#x306E;&#x306E;&#x3001;\n&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30DB;&#x30B9;&#x30C8;&#x3068;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x306B;&#x3068;&#x3063;&#x3066;&#x9577;&#x5927;&#x306A;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306F;\n&#x73FE;&#x5B9F;&#x7684;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</p>\n</li>\n<li><p><code>MTU</code> &#x306F;&#x30EA;&#x30F3;&#x30AF;&#x5C64;&#x306B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x30B5;&#x30A4;&#x30BA;&#x3092;&#x4E0E;&#x3048;&#x308B;&#x6280;&#x8853;&#x3067;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x3082;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x3069;&#x3093;&#x306A;&#x30EA;&#x30F3;&#x30AF;&#x3067;&#x3082;&#x3001;&#x305D;&#x308C;&#x3089;&#x304C;&#x5168;&#x4F53;&#x3068;&#x3057;&#x3066;&#x5230;&#x7740;&#x3059;&#x308B;&#x304B;&#x65AD;&#x7247;&#x5316;&#x3055;&#x308C;&#x308B;&#x304B;&#x306B;&#x95A2;&#x308F;&#x3089;&#x305A;&#x3001;\n<code>IPv4</code> &#x306F;&#x6700;&#x4F4E; <code>69</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x5FC5;&#x8981;&#x3067;&#x3001;&#x63A8;&#x5968;&#x3055;&#x308C;&#x308B; <code>IPv4</code> &#x306E; <code>MTU</code> &#x306F; <code>576</code> &#x3067;&#x3059;\n(&#x5178;&#x578B;&#x7684;&#x306A;&#x30C0;&#x30A4;&#x30E4;&#x30EB;&#x30A2;&#x30C3;&#x30D7;&#x578B;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>MUT</code> &#x63A8;&#x5968;&#x5024;)&#x3002;</p>\n<p><code>IPv6</code> &#x3067;&#x306F;&#x6700;&#x5C0F;&#x306E; <code>MTU</code> &#x306F; <code>1280</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x3067;&#x3059;&#x304C;&#x3001;&#x30D5;&#x30E9;&#x30B0;&#x30E1;&#x30F3;&#x30C8;&#x3092;&#x518D;&#x69CB;&#x7BC9;&#x3059;&#x308B;\n&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30B5;&#x30A4;&#x30BA;&#x306F;&#x6700;&#x4F4E; <code>1500</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x304C;&#x5FC5;&#x8981;&#x3067;&#x3059;&#x3002;\n<code>68</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x306F;&#x3068;&#x3066;&#x3082;&#x5C0F;&#x3055;&#x3044;&#x306E;&#x3067;&#x3001;&#x3082;&#x3063;&#x3068;&#x3082;&#x73FE;&#x4EE3;&#x7684;&#x306A;&#x30EA;&#x30F3;&#x30AF;&#x5C64;&#x6280;&#x8853;&#x3067;&#x306F;&#x3001;\n&#x6700;&#x5C0F;&#x306E; <code>MTU</code> &#x306F; <code>1500</code> &#x3067;&#x3059; (&#x30A4;&#x30FC;&#x30B5;&#x30CD;&#x30C3;&#x30C8;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;)&#x3002;</p>\n</li>\n</ul>\n<p>&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x901A;&#x904E;&#x3059;&#x308B;&#x5404;&#x30EA;&#x30F3;&#x30AF;&#x306E; MTU &#x3092;&#x3042;&#x3089;&#x304B;&#x3058;&#x3081;&#x77E5;&#x308B;&#x3053;&#x3068;&#x306F;\n&#x3067;&#x304D;&#x306A;&#x3044;&#x3053;&#x3068;&#x3001;(&#x53D7;&#x4FE1;&#x5074;&#x306E;) <code>MTU</code> &#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x3066;&#x3082;\n&#x901A;&#x5E38;&#x306F;&#x52D5;&#x4F5C;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;\n(&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x9001;&#x308A;&#x4E3B;&#x306B;&#x77E5;&#x3089;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F;&#x9ED9;&#x3063;&#x3066;&#x6368;&#x3066;&#x3089;&#x308C;&#x3001;\n&#x610F;&#x56F3;&#x3057;&#x305F;&#x53D7;&#x4FE1;&#x8005;&#x306B;&#x5230;&#x9054;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;)&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;buf&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;length&quot;
                    },
                    {
                      &quot;name&quot;: &quot;port&quot;
                    },
                    {
                      &quot;name&quot;: &quot;address&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.bind(port, [address], [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;bind&quot;,
              &quot;desc&quot;: &quot;<!--\n* `port` Integer\n* `address` String, Optional\n* `callback` Function with no parameters, Optional. Callback when\n  binding is done.\n-->\n\n<ul>\n<li><code>port</code> Integer</li>\n<li><code>address</code> String&#x3001;&#x4EFB;&#x610F;</li>\n<li><code>callback</code> &#x5F15;&#x6570;&#x306E;&#x306A;&#x3044;&#x95A2;&#x6570;&#x3001;&#x4EFB;&#x610F;&#x3002;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x6642;&#x306B;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nFor UDP sockets, listen for datagrams on a named `port` and optional\n`address`. If `address` is not specified, the OS will try to listen on\nall addresses.  After binding is done, a \"listening\" event is emitted\nand the `callback`(if specified) is called. Specifying both a\n\"listening\" event listener and `callback` is not harmful but not very\nuseful.\n-->\n\n<p>UDP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x3001;<code>port</code> &#x3068;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>address</code> &#x3067;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x3092;\n&#x5F85;&#x3061;&#x53D7;&#x3051;&#x307E;&#x3059;&#x3002;\n<code>address</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;OS &#x306F;&#x5168;&#x3066;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x304B;&#x3089;&#x306E;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x3092;&#x8A66;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x5B8C;&#x4E86;&#x3059;&#x308B;&#x3068;&#x3001;<code>&apos;listening&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x3001;\n(&#x3082;&#x3057;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;) <code>callback</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>&apos;listening&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EA;&#x30B9;&#x30CA;&#x3068; <code>callback</code> &#x306E;&#x4E21;&#x65B9;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x3066;&#x3082;&#x6709;&#x5BB3;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x304C;\n&#x3042;&#x307E;&#x308A;&#x5F79;&#x306B;&#x306F;&#x7ACB;&#x3061;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nA bound datagram socket keeps the node process running to receive\ndatagrams.\n-->\n\n<p>&#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x53D7;&#x4FE1;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B; node &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;\n&#x5B9F;&#x884C;&#x3092;&#x7DAD;&#x6301;&#x3057;&#x7D9A;&#x3051;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf binding fails, an \"error\" event is generated. In rare case (e.g.\nbinding a closed socket), an `Error` may be thrown by this method.\n-->\n\n<p>&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x5931;&#x6557;&#x3059;&#x308B;&#x3068;&#x3001;<code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x307E;&#x308C;&#x306A;&#x30B1;&#x30FC;&#x30B9; (&#x305F;&#x3068;&#x3048;&#x3070;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3078;&#x306E;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;) &#x3067;&#x306F;&#x3001;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; <code>Error</code> &#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of a UDP server listening on port 41234:\n-->\n\n<p>41234 &#x756A;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x308B; UDP &#x30B5;&#x30FC;&#x30D0;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>var dgram = require(&quot;dgram&quot;);\n\nvar server = dgram.createSocket(&quot;udp4&quot;);\n\nserver.on(&quot;error&quot;, function (err) {\n  console.log(&quot;server error:\\n&quot; + err.stack);\n  server.close();\n});\n\nserver.on(&quot;message&quot;, function (msg, rinfo) {\n  console.log(&quot;server got: &quot; + msg + &quot; from &quot; +\n    rinfo.address + &quot;:&quot; + rinfo.port);\n});\n\nserver.on(&quot;listening&quot;, function () {\n  var address = server.address();\n  console.log(&quot;server listening &quot; +\n      address.address + &quot;:&quot; + address.port);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;port&quot;
                    },
                    {
                      &quot;name&quot;: &quot;address&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.close()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nClose the underlying socket and stop listening for data on it.\n-->\n\n<p>&#x4E0B;&#x5C64;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.address()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;address&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns an object containing the address information for a socket.  For UDP sockets,\nthis object will contain `address` , `family` and `port`.\n-->\n\n<p>&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C;&#x6301;&#x3063;&#x3066;&#x3044;&#x308B;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x60C5;&#x5831;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; <code>address</code>&#x3001;<code>port</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>family</code> &#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.setBroadcast(flag)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setBroadcast&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`flag` Boolean &quot;,
                      &quot;name&quot;: &quot;flag&quot;,
                      &quot;desc&quot;: &quot;Boolean&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;flag&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nSets or clears the `SO_BROADCAST` socket option.  When this option is set, UDP packets\nmay be sent to a local interface's broadcast address.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3; <code>SO_BROADCAST</code> &#x3092;&#x8A2D;&#x5B9A;&#x307E;&#x305F;&#x306F;&#x30AF;&#x30EA;&#x30A2;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;UDP &#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306E;&#x30D6;&#x30ED;&#x30FC;&#x30C9;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x7528;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306B;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.setTTL(ttl)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setTTL&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`ttl` Integer &quot;,
                      &quot;name&quot;: &quot;ttl&quot;,
                      &quot;desc&quot;: &quot;Integer&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;ttl&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nSets the `IP_TTL` socket option.  TTL stands for \"Time to Live,\" but in this context it\nspecifies the number of IP hops that a packet is allowed to go through.  Each router or\ngateway that forwards a packet decrements the TTL.  If the TTL is decremented to 0 by a\nrouter, it will not be forwarded.  Changing TTL values is typically done for network\nprobes or when multicasting.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>IP_TTL</code> &#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\nTTL &#x306F;&#x300C;&#x751F;&#x5B58;&#x671F;&#x9593;&#x300D;&#x3092;&#x8868;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;&#x3053;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x306F;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x901A;&#x904E;&#x3092;&#x8A31;&#x53EF;&#x3055;&#x308C;&#x308B; IP &#x306E;&#x30DB;&#x30C3;&#x30D7;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5404;&#x30EB;&#x30FC;&#x30BF;&#x307E;&#x305F;&#x306F;&#x30B2;&#x30FC;&#x30C8;&#x30A6;&#x30A7;&#x30A4;&#x306F;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x9001;&#x51FA;&#x3059;&#x308B;&#x969B; TTL &#x3092;&#x30C7;&#x30AF;&#x30EA;&#x30E1;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30EB;&#x30FC;&#x30BF;&#x306B;&#x3088;&#x3063;&#x3066; TTL &#x304C;&#x30C7;&#x30AF;&#x30EA;&#x30E1;&#x30F3;&#x30C8;&#x3055;&#x308C;&#x3066; 0 &#x306B;&#x306A;&#x308B;&#x3068;&#x305D;&#x308C;&#x306F;&#x9001;&#x51FA;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\nTTL &#x5024;&#x306E;&#x5909;&#x66F4;&#x306F;&#x901A;&#x5E38;&#x3001;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x306E;&#x8ABF;&#x67FB;&#x3084;&#x30DE;&#x30EB;&#x30C1;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x3067;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe argument to `setTTL()` is a number of hops between 1 and 255.  The default on most\nsystems is 64.\n-->\n\n<p><code>setTTL()</code> &#x306E;&#x5F15;&#x6570;&#x306F; 1 &#x304B;&#x3089; 255 &#x306E;&#x30DB;&#x30C3;&#x30D7;&#x6570;&#x3067;&#x3067;&#x3059;&#x3002;&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3067;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 64 &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.setMulticastTTL(ttl)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setMulticastTTL&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`ttl` Integer &quot;,
                      &quot;name&quot;: &quot;ttl&quot;,
                      &quot;desc&quot;: &quot;Integer&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;ttl&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nSets the `IP_MULTICAST_TTL` socket option.  TTL stands for \"Time to Live,\" but in this\ncontext it specifies the number of IP hops that a packet is allowed to go through,\nspecifically for multicast traffic.  Each router or gateway that forwards a packet\ndecrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.\n\nThe argument to `setMulticastTTL()` is a number of hops between 0 and 255.  The default on most\nsystems is 1.\n-->\n\n<p><code>IP_MULTICAST_TTL</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\nTTL &#x306F;&#x300C;&#x751F;&#x5B58;&#x671F;&#x9593;&#x300D;&#x3092;&#x8868;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;&#x3053;&#x306E;&#x6587;&#x8108;&#x3067;&#x306F;&#x7279;&#x306B;&#x30DE;&#x30EB;&#x30C1;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x306E;&#x30C8;&#x30E9;&#x30D5;&#x30A3;&#x30C3;&#x30AF;&#x306B;&#x304A;&#x3044;&#x3066;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x901A;&#x904E;&#x3067;&#x304D;&#x308B;IP&#x30DB;&#x30C3;&#x30D7;&#x306E;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x30EB;&#x30FC;&#x30BF;&#x30FC;&#x307E;&#x305F;&#x306F;&#x30B2;&#x30FC;&#x30C8;&#x30A6;&#x30A7;&#x30A4;&#x306F;&#x3001;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x8EE2;&#x9001;&#x3059;&#x308B;&#x969B;&#x306B; TTL &#x3092;&#x30C7;&#x30AF;&#x30EA;&#x30E1;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\nTTL &#x304C;&#x30EB;&#x30FC;&#x30BF;&#x30FC;&#x306B;&#x3088;&#x3063;&#x3066; 0 &#x307E;&#x3067;&#x30C7;&#x30AF;&#x30EA;&#x30E1;&#x30F3;&#x30C8;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F;&#x8EE2;&#x9001;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>setMulticastTTL()</code> &#x306E;&#x5F15;&#x6570;&#x306F;&#x30DB;&#x30C3;&#x30D7;&#x3092;&#x8868;&#x3059;&#x6570;&#x5024;&#x3067;&#x3001;0 &#x304B;&#x3089; 255 &#x306E;&#x9593;&#x3067;&#x3059;&#x3002;\n&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3067;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 1 &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.setMulticastLoopback(flag)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setMulticastLoopback&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`flag` Boolean &quot;,
                      &quot;name&quot;: &quot;flag&quot;,
                      &quot;desc&quot;: &quot;Boolean&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;flag&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nSets or clears the `IP_MULTICAST_LOOP` socket option.  When this option is set, multicast\npackets will also be received on the local interface.\n-->\n\n<p><code>IP_MULTICAST_LOOP</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x8A2D;&#x5B9A;&#x307E;&#x305F;&#x306F;&#x30AF;&#x30EA;&#x30A2;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30DE;&#x30EB;&#x30C1;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x306E;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3067;&#x3082;&#x53D7;&#x4FE1;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.addMembership(multicastAddress, [multicastInterface])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;addMembership&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`multicastAddress` String &quot;,
                      &quot;name&quot;: &quot;multicastAddress&quot;,
                      &quot;desc&quot;: &quot;String&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`multicastInterface` String, Optional &quot;,
                      &quot;name&quot;: &quot;multicastInterface&quot;,
                      &quot;optional&quot;: true,
                      &quot;desc&quot;: &quot;String&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;multicastAddress&quot;
                    },
                    {
                      &quot;name&quot;: &quot;multicastInterface&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nTells the kernel to join a multicast group with `IP_ADD_MEMBERSHIP` socket option.\n\nIf `multicastInterface` is not specified, the OS will try to add membership to all valid\ninterfaces.\n-->\n\n<p><code>IP_ADD_MEMBERSHIP</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x3001;&#x30DE;&#x30EB;&#x30C1;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x306B;&#x53C2;&#x52A0;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x30AB;&#x30FC;&#x30CD;&#x30EB;&#x306B;&#x4F1D;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>multicastInterface</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5168;&#x3066;&#x306E;&#x59A5;&#x5F53;&#x306A;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x30E1;&#x30F3;&#x30D0;&#x30FC;&#x30B7;&#x30C3;&#x30D7;&#x306B;&#x52A0;&#x3048;&#x3088;&#x3046;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.dropMembership(multicastAddress, [multicastInterface])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;dropMembership&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`multicastAddress` String &quot;,
                      &quot;name&quot;: &quot;multicastAddress&quot;,
                      &quot;desc&quot;: &quot;String&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`multicastInterface` String, Optional &quot;,
                      &quot;name&quot;: &quot;multicastInterface&quot;,
                      &quot;optional&quot;: true,
                      &quot;desc&quot;: &quot;String&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;multicastAddress&quot;
                    },
                    {
                      &quot;name&quot;: &quot;multicastInterface&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nOpposite of `addMembership` - tells the kernel to leave a multicast group with\n`IP_DROP_MEMBERSHIP` socket option. This is automatically called by the kernel\nwhen the socket is closed or process terminates, so most apps will never need to call\nthis.\n\nIf `multicastInterface` is not specified, the OS will try to drop membership to all valid\ninterfaces.\n-->\n\n<p><code>addMembership</code> &#x306E;&#x53CD;&#x5BFE;&#x3067;&#x3059; - <code>IP_DROP_MEMBERSHIP</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;&#x30DE;&#x30EB;&#x30C1;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x304B;&#x3089;&#x629C;&#x3051;&#x308B;&#x3053;&#x3068;&#x3092;&#x30AB;&#x30FC;&#x30CD;&#x30EB;&#x306B;&#x4F1D;&#x3048;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x6642;&#x3084;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x7D42;&#x4E86;&#x6642;&#x306B;&#x30AB;&#x30FC;&#x30CD;&#x30EB;&#x306B;&#x3088;&#x3063;&#x3066;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;&#x3001;&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x3053;&#x308C;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<p><code>multicastInterface</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5168;&#x3066;&#x306E;&#x59A5;&#x5F53;&#x306A;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x30E1;&#x30F3;&#x30D0;&#x30FC;&#x30B7;&#x30C3;&#x30D7;&#x304B;&#x3089;&#x524A;&#x9664;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.unref()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;unref&quot;,
              &quot;desc&quot;: &quot;<!--\nCalling `unref` on a socket will allow the program to exit if this is the only\nactive socket in the event system. If the socket is already `unref`d calling\n`unref` again will have no effect.\n-->\n\n<p>&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;&#x3053;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3060;&#x3051;&#x304C;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x5834;&#x5408;&#x306B;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;\n&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;<code>unref</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x65E2;&#x306B; <code>unref</code> &#x3055;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x518D;&#x3073; <code>unref</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x5F71;&#x97FF;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.ref()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;ref&quot;,
              &quot;desc&quot;: &quot;<!--\nOpposite of `unref`, calling `ref` on a previously `unref`d socket will *not*\nlet the program exit if it's the only socket left (the default behavior). If\nthe socket is `ref`d calling `ref` again will have no effect.\n-->\n\n<p><code>unref</code> &#x3068;&#x306F;&#x9006;&#x306B;&#x3001;&#x4EE5;&#x524D;&#x306B; <code>unref</code> &#x3055;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x552F;&#x4E00;&#x6B8B;&#x3063;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x306A;&#x3063;&#x3066;&#x3082;&#x3001;\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x7D42;&#x4E86; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x52D5;&#x4F5C;&#x3067;&#x3059;) &#x3057;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3001;<code>ref</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x65E2;&#x306B; <code>ref</code> &#x3055;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x518D;&#x3073; <code>ref</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x5F71;&#x97FF;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;dgram&quot;
    }
  ]
}
