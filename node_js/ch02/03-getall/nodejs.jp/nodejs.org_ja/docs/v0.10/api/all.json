{
  &quot;source&quot;: &quot;doc/api/all.markdown&quot;,
  &quot;miscs&quot;: [
    {
      &quot;textRaw&quot;: &quot;About this Documentation&quot;,
      &quot;name&quot;: &quot;About this Documentation&quot;,
      &quot;type&quot;: &quot;misc&quot;,
      &quot;desc&quot;: &quot;<!--\nThe goal of this documentation is to comprehensively explain the Node.js\nAPI, both from a reference as well as a conceptual point of view.  Each\nsection describes a built-in module or high-level concept.\n\nWhere appropriate, property types, method arguments, and the arguments\nprovided to event handlers are detailed in a list underneath the topic\nheading.\n\nEvery `.html` document has a corresponding `.json` document presenting\nthe same information in a structured manner.  This feature is\nexperimental, and added for the benefit of IDEs and other utilities that\nwish to do programmatic things with the documentation.\n\nEvery `.html` and `.json` file is generated based on the corresponding\n`.markdown` file in the `doc/api/` folder in node's source tree.  The\ndocumentation is generated using the `tools/doc/generate.js` program.\nThe HTML template is located at `doc/template.html`.\n-->\n\n<p>&#x3053;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x306E;&#x30B4;&#x30FC;&#x30EB;&#x306F;&#x3001;Node.js &#x306E; API &#x306B;&#x3064;&#x3044;&#x3066;&#x30EA;&#x30D5;&#x30A1;&#x30EC;&#x30F3;&#x30B9;&#x3068;&#x3057;&#x3066;&#x3082;&#xFF0C;\n&#x6982;&#x5FF5;&#x7684;&#x306A;&#x8996;&#x70B9;&#x3068;&#x3057;&#x3066;&#x3082;&#xFF0C;&#x5305;&#x62EC;&#x7684;&#x306A;&#x8AAC;&#x660E;&#x3092;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x7D44;&#x8FBC;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x307E;&#x305F;&#x306F;&#x9AD8;&#x6C34;&#x6E96;&#x306E;&#x6982;&#x5FF5;&#x306B;&#x3064;&#x3044;&#x3066;&#x8A18;&#x8FF0;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x5FC5;&#x8981;&#x306B;&#x5FDC;&#x3058;&#x3066;&#x3001;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306E;&#x578B;&#x3084;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306E;&#x5F15;&#x6570;&#x3001;&#x305D;&#x3057;&#x3066;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x306B;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x308B;&#x5F15;&#x6570;&#x306A;&#x3069;&#x306E;&#x8A73;&#x7D30;&#x306F;&#x898B;&#x51FA;&#x3057;&#x76F4;&#x5F8C;&#x306E;&#x30EA;&#x30B9;&#x30C8;&#x3067;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3059;&#x3079;&#x3066;&#x306E; <code>.html</code> &#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x306F;&#x3001;&#x5BFE;&#x5FDC;&#x3059;&#x308B; <code>.json</code> &#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x540C;&#x3058;&#x60C5;&#x5831;&#x3092;&#x540C;&#x69D8;&#x306E;&#x69CB;&#x9020;&#x3067;&#x8868;&#x73FE;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x5B9F;&#x9A13;&#x7684;&#x3067;&#x3001;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x3092;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x7684;&#x306B;&#x6271;&#x3044;&#x305F;&#x3044; IDE &#x3084;&#x4ED6;&#x306E;\n&#x30E6;&#x30FC;&#x30C6;&#x30A3;&#x30EA;&#x30C6;&#x30A3;&#x306E;&#x305F;&#x3081;&#x306B;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3057;&#x305F;&#x3002;\n\n</p>\n<p>&#x3059;&#x3079;&#x3066;&#x306E; <code>.html</code> &#x3068; <code>.json</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F;&#x3001;node &#x30BD;&#x30FC;&#x30B9;&#x30C4;&#x30EA;&#x30FC;&#x306E; <code>doc/api/</code>\n&#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x306B;&#x3042;&#x308B;&#x3001;&#x5BFE;&#x5FDC;&#x3059;&#x308B; <code>.markdown</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x57FA;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x306B;&#x306F; <code>tools/doc/generate.js</code> &#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\nHTML &#x306E;&#x30C6;&#x30F3;&#x30D7;&#x30EC;&#x30FC;&#x30C8;&#x306F; <code>doc/template.html</code> &#x306B;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;Stability Index&quot;,
          &quot;name&quot;: &quot;Stability Index&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nThroughout the documentation, you will see indications of a section's\nstability.  The Node.js API is still somewhat changing, and as it\nmatures, certain parts are more reliable than others.  Some are so\nproven, and so relied upon, that they are unlikely to ever change at\nall.  Others are brand new and experimental, or known to be hazardous\nand in the process of being redesigned.\n-->\n\n<p>&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x5168;&#x4F53;&#x3092;&#x901A;&#x3057;&#x3066;&#x3001;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x5B89;&#x5B9A;&#x5EA6;&#x306B;&#x95A2;&#x3059;&#x308B;&#x76EE;&#x5B89;&#x3092;&#x898B;&#x308B;&#x3053;&#x3068;&#x304C;\n&#x3067;&#x304D;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\nNode.js &#x306E; API &#x306F;&#x307E;&#x3060;&#x5C11;&#x3057;&#x5909;&#x66F4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x304C;&#x6210;&#x719F;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x3042;&#x308B;&#x90E8;&#x5206;&#x306F;&#x4ED6;&#x3088;&#x308A;&#x3082;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306F;&#x305D;&#x306E;&#x3088;&#x3046;&#x306B;&#x8A3C;&#x660E;&#x3055;&#x308C;&#x3001;&#x3057;&#x305F;&#x304C;&#x3063;&#x3066;&#x4FE1;&#x983C;&#x3055;&#x308C;&#x3001;&#x305D;&#x308C;&#x3089;&#x306F;&#x304A;&#x305D;&#x3089;&#x304F;\n&#x5909;&#x66F4;&#x3055;&#x308C;&#x305D;&#x3046;&#x3082;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x306E;&#x4ED6;&#x306F;&#x65B0;&#x3057;&#x304F;&#x3066;&#x5B9F;&#x9A13;&#x7684;&#x304B;&#x3001;&#x5371;&#x967A;&#x304C;&#x77E5;&#x3089;&#x308C;&#x3066;&#x3044;&#x305F;&#x308A;&#x3001;&#x518D;&#x5B9F;&#x88C5;&#x304C;&#x59CB;&#x307E;&#x3063;&#x3066;&#x3044;&#x305F;&#x308A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe stability indices are as follows:\n-->\n\n<p>Stability (&#x5B89;&#x5B9A;&#x5EA6;) &#x3092;&#x4EE5;&#x4E0B;&#x306E;&#x3088;&#x3046;&#x306B;&#x793A;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<!--\n```\nStability: 0 - Deprecated\nThis feature is known to be problematic, and changes are\nplanned.  Do not rely on it.  Use of the feature may cause warnings.  Backwards\ncompatibility should not be expected.\n```\n-->\n\n<pre><code>Stability: 0 - &#x5EC3;&#x6B62;&#x4E88;&#x5B9A;\n&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x306B;&#x306F;&#x554F;&#x984C;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x304C;&#x77E5;&#x3089;&#x308C;&#x3066;&#x3044;&#x3066;&#x3001;&#x5909;&#x66F4;&#x304C;&#x8A08;&#x753B;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3068;&#x8B66;&#x544A;&#x304C;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n&#x5F8C;&#x65B9;&#x4E92;&#x63DB;&#x6027;&#x3092;&#x671F;&#x5F85;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</code></pre>\n<!--\n```\nStability: 1 - Experimental\nThis feature was introduced recently, and may change\nor be removed in future versions.  Please try it out and provide feedback.\nIf it addresses a use-case that is important to you, tell the node core team.\n```\n-->\n\n<pre><code>Stability: 1 - &#x5B9F;&#x9A13;&#x7684;\n&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x306F;&#x6700;&#x8FD1;&#x5C0E;&#x5165;&#x3055;&#x308C;&#x3001;&#x5C06;&#x6765;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x5909;&#x66F4;&#x3055;&#x308C;&#x308B;&#x304B;&#x524A;&#x9664;&#x3055;&#x308C;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x3092;&#x8A66;&#x3057;&#x3066;&#x30D5;&#x30A3;&#x30FC;&#x30C9;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x91CD;&#x8981;&#x306A;&#x30E6;&#x30FC;&#x30B9;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x306A;&#x3089;&#x3001;node &#x30B3;&#x30A2;&#x30C1;&#x30FC;&#x30E0;&#x306B;&#x6559;&#x3048;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</code></pre>\n<!--\n```\nStability: 2 - Unstable\nThe API is in the process of settling, but has not yet had\nsufficient real-world testing to be considered stable. Backwards-compatibility\nwill be maintained if reasonable.\n```\n-->\n\n<pre><code>Stability: 2 - &#x4E0D;&#x5B89;&#x5B9A;\nAPI &#x306F;&#x5B89;&#x5B9A;&#x5316;&#x306E;&#x9014;&#x4E2D;&#x3067;&#x3059;&#x304C;&#x3001;&#x307E;&#x3060;&#x5B89;&#x5B9A;&#x3057;&#x3066;&#x3044;&#x308B;&#x3068;&#x8003;&#x3048;&#x3089;&#x308C;&#x308B;&#x307B;&#x3069;&#x306B;&#x306F;\n&#x73FE;&#x5B9F;&#x4E16;&#x754C;&#x3067;&#x30C6;&#x30B9;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3082;&#x3057;&#x5408;&#x7406;&#x7684;&#x306A;&#x3089;&#x5F8C;&#x65B9;&#x4E92;&#x63DB;&#x6027;&#x304C;&#x7DAD;&#x6301;&#x3055;&#x308C;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;</code></pre>\n<!--\n```\nStability: 3 - Stable\nThe API has proven satisfactory, but cleanup in the underlying\ncode may cause minor changes.  Backwards-compatibility is guaranteed.\n```\n-->\n\n<pre><code>Stability: 3 - &#x5B89;&#x5B9A;\nAPI &#x306F;&#x8981;&#x6C42;&#x3092;&#x6E80;&#x305F;&#x3059;&#x3053;&#x3068;&#x304C;&#x308F;&#x304B;&#x308A;&#x307E;&#x3057;&#x305F;&#x304C;&#x3001;&#x5B9F;&#x88C5;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x30AF;&#x30EA;&#x30FC;&#x30F3;&#x30CA;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n&#x5C0F;&#x3055;&#x306A;&#x5909;&#x66F4;&#x304C;&#x884C;&#x308F;&#x308C;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x5F8C;&#x65B9;&#x4E92;&#x63DB;&#x6027;&#x306F;&#x4FDD;&#x8A3C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</code></pre>\n<!--\n```\nStability: 4 - API Frozen\nThis API has been tested extensively in production and is\nunlikely to ever have to change.\n```\n-->\n\n<pre><code>Stability: 4 - API &#x51CD;&#x7D50;\nAPI &#x306F;&#x5B9F;&#x904B;&#x7528;&#x3067;&#x5E83;&#x7BC4;&#x56F2;&#x306B;&#x30C6;&#x30B9;&#x30C8;&#x3055;&#x308C;&#x3066;&#x304A;&#x308A;&#x3001;&#x304A;&#x305D;&#x3089;&#x304F;&#x5909;&#x66F4;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</code></pre>\n<!--\n```\nStability: 5 - Locked\nUnless serious bugs are found, this code will not ever\nchange.  Please do not suggest changes in this area; they will be refused.\n-->\n\n<pre><code>Stability: 5 - &#x56FA;&#x5B9A;\n&#x6DF1;&#x523B;&#x306A;&#x30D0;&#x30B0;&#x304C;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x30B3;&#x30FC;&#x30C9;&#x306F;&#x5909;&#x66F4;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x30A8;&#x30EA;&#x30A2;&#x306E;&#x5909;&#x66F4;&#x3092;&#x63D0;&#x6848;&#x3057;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;; &#x305D;&#x3048;&#x306F;&#x62D2;&#x5426;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;JSON Output&quot;,
          &quot;name&quot;: &quot;json_output&quot;,
          &quot;desc&quot;: &quot;<!--\n    Stability: 1 - Experimental\n-->\n\n<pre><code>Stability: 1 - &#x5B9F;&#x9A13;&#x7684;</code></pre>\n<!--\nEvery HTML file in the markdown has a corresponding JSON file with the\nsame data.\n-->\n\n<p>markdown &#x304B;&#x3089;&#x4F5C;&#x3089;&#x308C;&#x308B;&#x5168;&#x3066;&#x306E; HTML &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F;&#x3001;&#x5BFE;&#x5FDC;&#x3059;&#x308B; JSON &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis feature is new as of node v0.6.12.  It is experimental.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; v0.6.12 &#x304B;&#x3089;&#x306E;&#x65B0;&#x6A5F;&#x80FD;&#x3067;&#x3001;&#x5B9F;&#x9A13;&#x7684;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;displayName&quot;: &quot;JSON Output&quot;
        }
      ]
    },
    {
      &quot;textRaw&quot;: &quot;Synopsis&quot;,
      &quot;name&quot;: &quot;Synopsis&quot;,
      &quot;type&quot;: &quot;misc&quot;,
      &quot;desc&quot;: &quot;<!--\nAn example of a [web server](http.html) written with Node which responds with 'Hello\nWorld':\n-->\n\n<p>&apos;Hello World&apos; &#x3068;&#x8FD4;&#x7B54;&#x3059;&#x308B; Node &#x3067;&#x66F8;&#x304B;&#x308C;&#x305F;Web&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>var http = require(&apos;http&apos;);\n\nhttp.createServer(function (request, response) {\n  response.writeHead(200, {&apos;Content-Type&apos;: &apos;text/plain&apos;});\n  response.end(&apos;Hello World\\n&apos;);\n}).listen(8124);\n\nconsole.log(&apos;Server running at http://127.0.0.1:8124/&apos;);</code></pre>\n<!--\nTo run the server, put the code into a file called `example.js` and execute\nit with the node program\n-->\n\n<p>&#x3053;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;&#x30B3;&#x30FC;&#x30C9;&#x3092; <code>example.js</code> &#x3068;&#x3044;&#x3046;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x4FDD;&#x5B58;&#x3057;&#x3001;\nnode &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3067;&#x5B9F;&#x884C;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>&gt; node example.js\nServer running at http://127.0.0.1:8124/</code></pre>\n<!--\nAll of the examples in the documentation can be run similarly.\n-->\n\n<p>&#x3053;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x306E;&#x5168;&#x3066;&#x306E;&#x30B5;&#x30F3;&#x30D7;&#x30EB;&#x306F;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Global Objects&quot;,
      &quot;name&quot;: &quot;Global Objects&quot;,
      &quot;type&quot;: &quot;misc&quot;,
      &quot;desc&quot;: &quot;<!--\nThese objects are available in all modules. Some of these objects aren't\nactually in the global scope but in the module scope - this will be noted.\n-->\n\n<p>&#x3053;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x5168;&#x3066;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3067;&#x6709;&#x52B9;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x3044;&#x304F;&#x3064;&#x304B;&#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x3067;&#x306F;&#x306A;&#x304F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x3067;&#x3059; - &#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
      &quot;globals&quot;: [
        {
          &quot;textRaw&quot;: &quot;global&quot;,
          &quot;name&quot;: &quot;global&quot;,
          &quot;type&quot;: &quot;global&quot;,
          &quot;desc&quot;: &quot;<!--\n* {Object} The global namespace object.\n-->\n\n<ul>\n<li>{Object} &#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x306A;&#x30CD;&#x30FC;&#x30E0;&#x30B9;&#x30DA;&#x30FC;&#x30B9;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;</li>\n</ul>\n<!--\nIn browsers, the top-level scope is the global scope. That means that in\nbrowsers if you're in the global scope `var something` will define a global\nvariable. In Node this is different. The top-level scope is not the global\nscope; `var something` inside a Node module will be local to that module.\n-->\n\n<p>&#x30D6;&#x30E9;&#x30A6;&#x30B6;&#x3067;&#x306F;&#x3001;&#x30C8;&#x30C3;&#x30D7;&#x30EC;&#x30D9;&#x30EB;&#x306E;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;&#x30D6;&#x30E9;&#x30A6;&#x30B6;&#x3067;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x3067; <code>var something</code> &#x3068;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x3068;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x5909;&#x6570;&#x306B;&#x306A;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\nNode &#x3067;&#x306F;&#x7570;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30C8;&#x30C3;&#x30D7;&#x30EC;&#x30D9;&#x30EB;&#x306E;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;;\nNode &#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x5185;&#x3067;&#x306E; <code>var something</code> &#x306F;&#x305D;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3067;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process&quot;,
          &quot;name&quot;: &quot;process&quot;,
          &quot;type&quot;: &quot;global&quot;,
          &quot;desc&quot;: &quot;<!--\nThe process object. See the [process object][] section.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;[process &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;][] &#x306E;&#x7BC0;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;console&quot;,
          &quot;name&quot;: &quot;console&quot;,
          &quot;type&quot;: &quot;global&quot;,
          &quot;desc&quot;: &quot;<!--\nUsed to print to stdout and stderr. See the [console][] section.\n-->\n\n<p>&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x304A;&#x3088;&#x3073;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x3078;&#x306E;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n[&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: Buffer&quot;,
          &quot;type&quot;: &quot;global&quot;,
          &quot;name&quot;: &quot;Buffer&quot;,
          &quot;desc&quot;: &quot;<!--\nUsed to handle binary data. See the [buffer section][]\n-->\n\n<p>&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6271;&#x3046;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n[&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;clearInterval(t)&quot;,
          &quot;type&quot;: &quot;global&quot;,
          &quot;name&quot;: &quot;clearInterval&quot;,
          &quot;desc&quot;: &quot;<!--\nStop a timer that was previously created with `setInterval()`. The callback\nwill not execute.\n-->\n\n<p><code>setInterval()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x4EE5;&#x524D;&#x306B;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe timer functions are global variables. See the [timers][] section.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x30FC;&#x95A2;&#x6570;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x5909;&#x6570;&#x3067;&#x3059;&#x3002;[&#x30BF;&#x30A4;&#x30DE;&#x30FC;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\n[buffer section]: buffer.html\n[module section]: modules.html\n[module system documentation]: modules.html\n[Modules]: modules.html#modules_modules\n[process object]: process.html#process_process\n[console]: console.html\n[timers]: timers.html\n-->\n\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;console&quot;,
          &quot;name&quot;: &quot;console&quot;,
          &quot;stability&quot;: 4,
          &quot;stabilityText&quot;: &quot;API Frozen&quot;,
          &quot;type&quot;: &quot;global&quot;,
          &quot;desc&quot;: &quot;<!--\nFor printing to stdout and stderr.  Similar to the console object functions\nprovided by most web browsers, here the output is sent to stdout or stderr.\n-->\n\n<p>&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3068;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x51FA;&#x529B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30D6;&#x30E9;&#x30A6;&#x30B6;&#x3067;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;\n&#x51FA;&#x529B;&#x306F;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x304B;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306B;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe console functions are synchronous when the destination is a terminal or\na file (to avoid lost messages in case of premature exit) and asynchronous\nwhen it's a pipe (to avoid blocking for long periods of time).\n-->\n\n<p>&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x95A2;&#x6570;&#x306F;&#x51FA;&#x529B;&#x5148;&#x304C;&#x30BF;&#x30FC;&#x30DF;&#x30CA;&#x30EB;&#x307E;&#x305F;&#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x5834;&#x5408;&#x306F;&#x540C;&#x671F;\n(&#x65E9;&#x3059;&#x304E;&#x308B;&#x7D42;&#x4E86;&#x306B;&#x3088;&#x308A;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x304C;&#x5931;&#x308F;&#x308C;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;)&#x3001;\n&#x30D1;&#x30A4;&#x30D7;&#x306E;&#x5834;&#x5408;&#x306F;&#x975E;&#x540C;&#x671F; (&#x9577;&#x6642;&#x9593;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;) &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThat is, in the following example, stdout is non-blocking while stderr\nis blocking:\n-->\n\n<p>&#x3064;&#x307E;&#x308A;&#x3001;&#x4EE5;&#x4E0B;&#x306E;&#x4F8B;&#x3067;&#x306F;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x306F;&#x30CE;&#x30F3;&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x3067;&#x3059;&#x304C;&#x3001;\n&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x3067;&#x3059;:\n\n</p>\n<pre><code>$ node script.js 2&gt; error.log | tee info.log</code></pre>\n<!--\nIn daily use, the blocking/non-blocking dichotomy is not something you\nshould worry about unless you log huge amounts of data.\n-->\n\n<p>&#x901A;&#x5E38;&#x306E;&#x4F7F;&#x7528;&#x3067;&#x306F;&#x3001;&#x81A8;&#x5927;&#x306A;&#x91CF;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8A18;&#x9332;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;\n&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#xFF0F;&#x30CE;&#x30F3;&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x306E;&#x3069;&#x3061;&#x3089;&#x306A;&#x306E;&#x304B;&#x3092;&#x5FC3;&#x914D;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;console.log([data], [...])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;log&quot;,
              &quot;desc&quot;: &quot;<!--\nPrints to stdout with newline. This function can take multiple arguments in a\n`printf()`-like way. Example:\n-->\n\n<p>&#x6539;&#x884C;&#x3092;&#x4F34;&#x3063;&#x3066;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3078;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; <code>printf()</code> &#x306E;&#x3088;&#x3046;&#x306B;&#x8907;&#x6570;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;count: %d&apos;, count);</code></pre>\n<!--\nIf formatting elements are not found in the first string then `util.inspect`\nis used on each argument.  See [util.format()][] for more information.\n-->\n\n<p>&#x6700;&#x521D;&#x306E;&#x5F15;&#x6570;&#x6587;&#x5B57;&#x5217;&#x304B;&#x3089;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x8981;&#x7D20;&#x304C;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n<code>util.inspect</code> &#x304C;&#x5404;&#x5F15;&#x6570;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F; [util.format()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;...&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;console.info([data], [...])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;info&quot;,
              &quot;desc&quot;: &quot;<!--\nSame as `console.log`.\n-->\n\n<p><code>console.log</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;...&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;console.error([data], [...])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;desc&quot;: &quot;<!--\nSame as `console.log` but prints to stderr.\n-->\n\n<p><code>console.log</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306B;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;...&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;console.warn([data], [...])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;warn&quot;,
              &quot;desc&quot;: &quot;<!--\nSame as `console.error`.\n-->\n\n<p><code>console.error()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;...&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;console.dir(obj)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;dir&quot;,
              &quot;desc&quot;: &quot;<!--\nUses `util.inspect` on `obj` and prints resulting string to stdout.\n-->\n\n<p><code>util.inspect</code> &#x3092;&#x4F7F;&#x3063;&#x3066; <code>obj</code> &#x3092;&#x6587;&#x5B57;&#x5217;&#x5316;&#x3057;&#x305F;&#x7D50;&#x679C;&#x3092;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x306B;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;obj&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;console.time(label)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;time&quot;,
              &quot;desc&quot;: &quot;<!--\nMark a time.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;label&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;console.timeEnd(label)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;timeEnd&quot;,
              &quot;desc&quot;: &quot;<!--\nFinish timer, record output. Example:\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x3001;&#x7D50;&#x679C;&#x3092;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>console.time(&apos;100-elements&apos;);\nfor (var i = 0; i &lt; 100; i++) {\n  ;\n}\nconsole.timeEnd(&apos;100-elements&apos;);</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;label&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;console.trace(label)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;trace&quot;,
              &quot;desc&quot;: &quot;<!--\nPrint a stack trace to stderr of the current position.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3092;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306B;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;label&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;console.assert(expression, [message])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;assert&quot;,
              &quot;desc&quot;: &quot;<!--\nSame as [assert.ok()][] where if the `expression` evaluates as `false` throw an\nAssertionError with `message`.\n-->\n\n<p>[assert.ok()][] &#x3068;&#x540C;&#x69D8;&#x306B;&#x3001;&#x3082;&#x3057; <code>expression</code> &#x304C; <code>false</code> &#x306B;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;\n<code>message</code> &#x3092;&#x6301;&#x3064; AssertionError &#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;expression&quot;
                    },
                    {
                      &quot;name&quot;: &quot;message&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process&quot;,
          &quot;name&quot;: &quot;process&quot;,
          &quot;type&quot;: &quot;global&quot;,
          &quot;desc&quot;: &quot;<!--\nThe `process` object is a global object and can be accessed from anywhere.\nIt is an instance of [EventEmitter][].\n-->\n\n<p><code>process</code> &#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3001;&#x3069;&#x3053;&#x304B;&#x3089;&#x3067;&#x3082;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; [EventEmitter][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;exit&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;exit&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when the process is about to exit. There is no way to prevent the\nexiting of the event loop at this point, and once all `exit` listeners have\nfinished running the process will exit. Therefore you **must** only perform\n**synchronous** operations in this handler. This is a good hook to perform\nchecks on the module's state (like for unit tests). The callback takes one\nargument, the code the process is exiting with.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x4F4D;&#x7F6E;&#x304B;&#x3089;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x3092;&#x629C;&#x3051;&#x308B;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x65B9;&#x6CD5;&#x306F;&#x306A;&#x304F;&#x3001;&#x5168;&#x3066;&#x306E; <code>&apos;exit&apos;</code>\n&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x306E;&#x5B9F;&#x884C;&#x304C;&#x5B8C;&#x4E86;&#x3059;&#x308B;&#x3068;&#x3001;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5F93;&#x3063;&#x3066;&#x3001;&#x3053;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3067;&#x3067;&#x304D;&#x308B;&#x3053;&#x3068;&#x306F; <strong>&#x540C;&#x671F;</strong> &#x64CD;&#x4F5C; <strong>&#x3060;&#x3051;</strong> &#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; (&#x30E6;&#x30CB;&#x30C3;&#x30C8;&#x30C6;&#x30B9;&#x30C8;&#x306E;&#x3088;&#x3046;&#x306B;) &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x72B6;&#x614B;&#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x306E;&#x306B;&#x9069;&#x3057;&#x305F;\n&#x30D5;&#x30C3;&#x30AF;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x552F;&#x4E00;&#x306E;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of listening for `exit`:\n-->\n\n<p><code>exit</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.on(&apos;exit&apos;, function(code) {\n  // do *NOT* do this\n  setTimeout(function() {\n    console.log(&apos;This will not run&apos;);\n  }, 0);\n  console.log(&apos;About to exit with code:&apos;, code);\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;uncaughtException&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;uncaughtException&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when an exception bubbles all the way back to the event loop. If a\nlistener is added for this exception, the default action (which is to print\na stack trace and exit) will not occur.\n-->\n\n<p>&#x767A;&#x751F;&#x3057;&#x305F;&#x4F8B;&#x5916;&#x304C;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x307E;&#x3067;&#x305F;&#x3069;&#x308A;&#x7740;&#x3044;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x3053;&#x306E;&#x4F8B;&#x5916;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x304C;&#x52A0;&#x3048;&#x3089;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;&#x3001;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x52D5;&#x4F5C; (&#x305D;&#x308C;&#x306F;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3092;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;) &#x306F;&#x8D77;&#x3053;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nExample of listening for `uncaughtException`:\n-->\n\n<p><code>uncaughtException</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.on(&apos;uncaughtException&apos;, function(err) {\n  console.log(&apos;Caught exception: &apos; + err);\n});\n\nsetTimeout(function() {\n  console.log(&apos;This will still run.&apos;);\n}, 500);\n\n// Intentionally cause an exception, but don&apos;t catch it.\nnonexistentFunc();\nconsole.log(&apos;This will not run.&apos;);</code></pre>\n<!--\nNote that `uncaughtException` is a very crude mechanism for exception\nhandling and may be removed in the future.\n-->\n\n<p><code>uncaughtException</code> &#x306F;&#x4F8B;&#x5916;&#x3092;&#x6271;&#x3046;&#x3068;&#x3066;&#x3082;&#x8352;&#x524A;&#x308A;&#x306A;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x3067;&#x3042;&#x308A;&#x3001;\n&#x5C06;&#x6765;&#x524A;&#x9664;&#x3055;&#x308C;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nDon't use it, use [domains](domain.html) instead. If you do use it, restart\nyour application after every unhandled exception!\n-->\n\n<p>&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;<a href="\&quot;domain.html\&quot;">&#x30C9;&#x30E1;&#x30A4;&#x30F3;</a> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x3092;&#x4F7F;&#x3048;&#x3070;&#x3001;&#x6355;&#x307E;&#x3048;&#x3089;&#x308C;&#x306A;&#x3044;&#x4F8B;&#x5916;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x5F8C;&#x3067;&#x3082;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3092;\n&#x518D;&#x958B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#xFF01;\n\n</p>\n<!--\nDo *not* use it as the node.js equivalent of `On Error Resume Next`. An\nunhandled exception means your application - and by extension node.js itself -\nis in an undefined state. Blindly resuming means *anything* could happen.\n-->\n\n<p>&#x3053;&#x308C;&#x3092; Node.js &#x306B;&#x304A;&#x3051;&#x308B; <code>On Error Resume Next</code> &#x3068;&#x3057;&#x3066; <em>&#x4F7F;&#x308F;&#x306A;&#x3044;&#x3067;</em> &#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x6355;&#x307E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x4F8B;&#x5916;&#x306F;&#x3001;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;\n- &#x304A;&#x3088;&#x3073; Node.js &#x81EA;&#x8EAB;&#x306E;&#x62E1;&#x5F35; - &#x304C;&#x672A;&#x5B9A;&#x7FA9;&#x306E;&#x72B6;&#x614B;&#x3068;&#x306A;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3084;&#x307F;&#x304F;&#x3082;&#x306A;&#x518D;&#x958B;&#x306F; <em>&#x3069;&#x3093;&#x306A;&#x3053;&#x3068;&#x3067;&#x3082;</em> &#x8D77;&#x3053;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThink of resuming as pulling the power cord when you are upgrading your system.\nNine out of ten times nothing happens - but the 10th time, your system is bust.\n-->\n\n<p>&#x96FB;&#x6E90;&#x3092;&#x5F15;&#x304D;&#x629C;&#x304D;&#x306A;&#x304C;&#x3089;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x30A2;&#x30C3;&#x30D7;&#x30B0;&#x30EC;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;\n&#x60F3;&#x50CF;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n10 &#x56DE;&#x4E2D; 9 &#x56DE;&#x306F;&#x4F55;&#x3082;&#x8D77;&#x3053;&#x308A;&#x307E;&#x305B;&#x3093;\n- &#x3057;&#x304B;&#x3057; 10 &#x56DE;&#x76EE;&#x306B;&#x306F;&#x305D;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306F;&#x4F7F;&#x3048;&#x306A;&#x304F;&#x306A;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nYou have been warned.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x8B66;&#x544A;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Signal Events&quot;,
              &quot;name&quot;: &quot;SIGINT, SIGHUP, etc.&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when the processes receives a signal. See sigaction(2) for a list of\nstandard POSIX signal names such as SIGINT, SIGHUP, etc.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\nSIGINT&#x3001;SIGHUP&#x3001;&#x305D;&#x306E;&#x4ED6;&#x306E; POSIX &#x6A19;&#x6E96;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x540D;&#x306E;&#x4E00;&#x89A7;&#x306B;&#x3064;&#x3044;&#x3066; &#x306F; sigaction(2) &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExample of listening for `SIGINT`:\n-->\n\n<p><code>SIGINT</code>&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>// Start reading from stdin so we don&apos;t exit.\nprocess.stdin.resume();\n\nprocess.on(&apos;SIGINT&apos;, function() {\n  console.log(&apos;Got SIGINT.  Press Control-D to exit.&apos;);\n});</code></pre>\n<!--\nAn easy way to send the `SIGINT` signal is with `Control-C` in most terminal\nprograms.\n-->\n\n<p>&#x591A;&#x304F;&#x306E;&#x7AEF;&#x672B;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067;&#x7C21;&#x5358;&#x306B; <code>SIGINT</code> &#x3092;&#x9001;&#x308B;&#x65B9;&#x6CD5;&#x306F; <code>Control-C</code> &#x3092;&#x62BC;&#x3059;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nNote:\n-->\n\n<p>&#x6CE8;&#x610F;:\n\n</p>\n<!--\n- `SIGUSR1` is reserved by node.js to start the debugger.  It's possible to\n  install a listener but that won't stop the debugger from starting.\n- `SIGTERM` and `SIGINT` have default handlers on non-Windows platforms that resets\n  the terminal mode before exiting with code `128 + signal number`. If one of\n  these signals has a listener installed, its default behaviour will be removed\n  (node will no longer exit).\n- `SIGPIPE` is ignored by default, it can have a listener installed.\n- `SIGHUP` is generated on Windows when the console window is closed, and on other\n  platforms under various similar conditions, see signal(7). It can have a\n  listener installed, however node will be unconditionally terminated by Windows\n  about 10 seconds later. On non-Windows platforms, the default behaviour of\n  `SIGHUP` is to terminate node, but once a listener has been installed its\n  default behaviour will be removed.\n- `SIGTERM` is not supported on Windows, it can be listened on.\n- `SIGINT` from the terminal is supported on all platforms, and can usually be\n  generated with `CTRL+C` (though this may be configurable). It is not generated\n  when terminal raw mode is enabled.\n- `SIGBREAK` is delivered on Windows when `CTRL+BREAK` is pressed, on non-Windows\n  platforms it can be listened on, but there is no way to send or generate it.\n- `SIGWINCH` is delivered when the console has been resized. On Windows, this will\n  only happen on write to the console when the cursor is being moved, or when a\n  readable tty is used in raw mode.\n- `SIGKILL` cannot have a listener installed, it will unconditionally terminate\n  node on all platforms.\n- `SIGSTOP` cannot have a listener installed.\n-->\n\n<ul>\n<li><code>SIGUSR1</code> &#x306F; Node.js &#x304C;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4E88;&#x7D04;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x3059;&#x304C;&#x3001;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x306E;&#x8D77;&#x52D5;&#x3092;&#x6B62;&#x3081;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n<li><code>SIGTERM</code> &#x304A;&#x3088;&#x3073; <code>SIGINT</code> &#x306F;&#x3001;Windows &#x4EE5;&#x5916;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x306F;\n<code>128</code> + &#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x756A;&#x53F7;&#x3067;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x524D;&#x306B;&#x30BF;&#x30FC;&#x30DF;&#x30CA;&#x30EB;&#x306E;&#x30E2;&#x30FC;&#x30C9;&#x3092;&#x30EA;&#x30BB;&#x30C3;&#x30C8;&#x3059;&#x308B;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x3069;&#x3061;&#x3089;&#x304B;&#x306B;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x767B;&#x9332;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;\n&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059; (node &#x306F;&#x7D42;&#x4E86;&#x3057;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;)&#x3002;</li>\n<li><code>SIGPIPE</code> &#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x3001;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGHUP</code> &#x306F; Windows &#x3067;&#x306F;&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x30A6;&#x30A3;&#x30F3;&#x30C9;&#x30A6;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x3068;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4ED6;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x3082;&#x540C;&#x69D8;&#x306E;&#x6761;&#x4EF6;&#x3067;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;&#x8A73;&#x7D30;&#x306F; signal(7)\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x3059;&#x304C;&#x3001;Windows &#x3067;&#x306F;&#x7D04; 10 &#x79D2;&#x5F8C;&#x306B; node &#x306F;&#x7121;&#x6761;&#x4EF6;&#x306B;\nWindows &#x306B;&#x3088;&#x3063;&#x3066;&#x7D42;&#x4E86;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\nWindows &#x4EE5;&#x5916;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x306F;&#x3001;<code>SIGHUP</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;\nnode&#x3092;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x304C;&#x3001;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3068;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;\n&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGTERM</code> &#x306F; Windows &#x3067;&#x306F;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x3001;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;</li>\n<li>&#x7AEF;&#x672B;&#x304B;&#x3089;&#x306E; <code>SIGINT</code> &#x306F;&#x5168;&#x3066;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3001;&#x901A;&#x5E38; <code>CTRL+C</code>\n(&#x304A;&#x305D;&#x3089;&#x304F;&#x8A2D;&#x5B9A;&#x53EF;&#x80FD;&#x3067;&#x3057;&#x3087;&#x3046;) &#x306B;&#x3088;&#x3063;&#x3066;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30BF;&#x30FC;&#x30DF;&#x30CA;&#x30EB;&#x304C; raw &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x5834;&#x5408;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n<li><code>SIGBREAK</code> &#x306F; Windows &#x306B;&#x304A;&#x3044;&#x3066; <code>CTRL+BREAK</code> &#x304C;&#x63A8;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\nWindows &#x4EE5;&#x5916;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x3082;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x305D;&#x308C;&#x3092;&#x751F;&#x6210;&#x3057;&#x305F;&#x308A;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n<li><code>SIGWINCH</code> &#x306F;&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x304C;&#x5909;&#x66F4;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\nWindows &#x3067;&#x306F;&#x3001;&#x30AB;&#x30FC;&#x30BD;&#x30EB;&#x304C;&#x79FB;&#x52D5;&#x3059;&#x308B;&#x304B;&#x3001;tty &#x304C; raw &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x5834;&#x5408;&#x306B;&#x3001;\n&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x3078;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3068;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGKILL</code> &#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x7D44;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x5168;&#x3066;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067; node &#x3092;&#x7121;&#x6761;&#x4EF6;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGSTOP</code> &#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x7D44;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n</ul>\n<!--\nNote that Windows does not support sending Signals, but node offers some\nemulation with `process.kill()`, and `child_process.kill()`:\n- Sending signal `0` can be used to search for the existence of a process\n- Sending `SIGINT`, `SIGTERM`, and `SIGKILL` cause the unconditional exit of the\n  target process.\n-->\n\n<p>Windows &#x306F;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x9001;&#x4FE1;&#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;node&#x306F;<code>process.kill()</code> &#x3084;\n<code>child_process.kill()</code> &#x3092;&#x30A8;&#x30DF;&#x30E5;&#x30EC;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<ul>\n<li>&#x30B7;&#x30B0;&#x30CA;&#x30EB; <code>0</code> &#x306F;&#x65E2;&#x5B58;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x691C;&#x7D22;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;</li>\n<li><code>SIGINT</code>&#x3001;<code>SIGTERM</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>SIGKILL</code> &#x306F;&#x3001;&#x30BF;&#x30FC;&#x30B2;&#x30C3;&#x30C8;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7121;&#x6761;&#x4EF6;&#x306B;\n&#x7D42;&#x4E86;&#x3059;&#x308B;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;process.stdout&quot;,
              &quot;name&quot;: &quot;stdout&quot;,
              &quot;desc&quot;: &quot;<!--\nA `Writable Stream` to `stdout`.\n-->\n\n<p><code>stdout</code> &#x306B;&#x5BFE;&#x3059;&#x308B; <code>Writable Stream</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: the definition of `console.log`\n-->\n\n<p>&#x4F8B;: <code>console.log</code> &#x306E;&#x5B9A;&#x7FA9;\n\n</p>\n<pre><code>console.log = function(d) {\n  process.stdout.write(d + &apos;\\n&apos;);\n};</code></pre>\n<!--\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.\n-->\n\n<p><code>process.stderr</code> &#x3068; <code>process.stdout</code> &#x306F; Node &#x306E;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x7570;&#x306A;&#x308A;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x3078;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306F;&#x901A;&#x5E38;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n- They are blocking in the case that they refer to regular files or TTY file\n  descriptors.\n- In the case they refer to pipes:\n  - They are blocking in Linux/Unix.\n  - They are non-blocking like other streams in Windows.\n-->\n\n<ul>\n<li>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;&#x901A;&#x5E38;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3084; TTY &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;:<ul>\n<li>Linux/Unix &#x3067;&#x306F;&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>Windows &#x3067;&#x306F;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x540C;&#x69D8;&#x306B;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n</ul>\n</li>\n</ul>\n<!--\nTo check if Node is being run in a TTY context, read the `isTTY` property\non `process.stderr`, `process.stdout`, or `process.stdin`:\n-->\n\n<p>Node &#x304C; TTY &#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;\n<code>process.stderr</code>, <code>process.stdout</code>, &#x307E;&#x305F;&#x306F; <code>process.stdin</code> &#x306E;\n<code>isTTY</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>$ node -p &quot;Boolean(process.stdin.isTTY)&quot;\ntrue\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\nfalse\n\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse</code></pre>\n<!--\nSee [the tty docs](tty.html#tty_tty) for more information.\n-->\n\n<p>&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F; <a href="\&quot;tty.html#tty_tty\&quot;">the tty docs</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.stderr&quot;,
              &quot;name&quot;: &quot;stderr&quot;,
              &quot;desc&quot;: &quot;<!--\nA writable stream to stderr.\n\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.\n-->\n\n<p><code>stderr</code> &#x306B;&#x5BFE;&#x3059;&#x308B; <code>Writable Stream</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>process.stderr</code> &#x3068; <code>process.stdout</code> &#x306F; Node &#x306E;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x7570;&#x306A;&#x308A;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x3078;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306F;&#x901A;&#x5E38;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n- They are blocking in the case that they refer to regular files or TTY file\n  descriptors.\n- In the case they refer to pipes:\n  - They are blocking in Linux/Unix.\n  - They are non-blocking like other streams in Windows.\n-->\n\n<ul>\n<li>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;&#x901A;&#x5E38;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3084; TTY &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;:<ul>\n<li>Linux/Unix &#x3067;&#x306F;&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>Windows &#x3067;&#x306F;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x540C;&#x69D8;&#x306B;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n</ul>\n</li>\n</ul>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.stdin&quot;,
              &quot;name&quot;: &quot;stdin&quot;,
              &quot;desc&quot;: &quot;<!--\nA `Readable Stream` for stdin. \n-->\n\n<p>&#x6A19;&#x6E96;&#x5165;&#x529B;&#x306B;&#x5BFE;&#x3059;&#x308B; <code>Readable Stream</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of opening standard input and listening for both events:\n-->\n\n<p>&#x6A19;&#x6E96;&#x5165;&#x529B;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x3066;&#x4E8C;&#x3064;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.stdin.setEncoding(&apos;utf8&apos;);\n\nprocess.stdin.on(&apos;readable&apos;, function(chunk) {\n  var chunk = process.stdin.read();\n  if (chunk !== null) {\n    process.stdout.write(&apos;data: &apos; + chunk);\n  }\n});\n\nprocess.stdin.on(&apos;end&apos;, function() {\n  process.stdout.write(&apos;end&apos;);\n});</code></pre>\n<!--\nAs a Stream, `process.stdin` can also be used in \"old\" mode that is compatible\nwith scripts written for node prior v0.10.\nFor more information see\n[Stream compatibility](stream.html#stream_compatibility_with_older_node_versions).\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3042;&#x308B;&#x305F;&#x3081;&#x3001;<code>process.stdin</code> &#x306F; v0.10 &#x4EE5;&#x524D;&#x306E; node &#x5411;&#x3051;&#x306B;&#x66F8;&#x304B;&#x308C;&#x305F;\n&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3068;&#x4E92;&#x63DB;&#x6027;&#x306E;&#x3042;&#x308B; &quot;old&quot; &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306A;&#x60C5;&#x5831;&#x306F;\n<a href="\&quot;stream.html#stream_compatibility_with_older_node_versions\&quot;">Stream compatibility</a>\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nIn \"old\" Streams mode the stdin stream is paused by default, so one\nmust call `process.stdin.resume()` to read from it. Note also that calling\n`process.stdin.resume()` itself would switch stream to \"old\" mode.\n-->\n\n<p>&quot;old&quot; &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x306F;&#x6A19;&#x6E96;&#x5165;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x4E2D;&#x65AD;&#x72B6;&#x614B;&#x306E;&#x305F;&#x3081;&#x3001;\n&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x306B;&#x306F; <code>process.stdin.resume()</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x304C;&#x5FC5;&#x9808;&#x3067;&#x3059;&#x3002;\n<code>process.stdin.resume()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x305D;&#x308C;&#x81EA;&#x4F53;&#x304C;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&quot;old&quot; &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nIf you are starting a new project you should prefer a more recent \"new\" Streams\nmode over \"old\" one.\n-->\n\n<p>&#x3082;&#x3057;&#x65B0;&#x3057;&#x3044;&#x30D7;&#x30ED;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x59CB;&#x3081;&#x308B;&#x306A;&#x3089;&#x3001;&quot;old&quot; &#x3088;&#x308A;&#x3082;\n&quot;new&quot; &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x597D;&#x3080;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.argv&quot;,
              &quot;name&quot;: &quot;argv&quot;,
              &quot;desc&quot;: &quot;<!--\nAn array containing the command line arguments.  The first element will be\n'node', the second element will be the name of the JavaScript file.  The\nnext elements will be any additional command line arguments.\n-->\n\n<p>&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x5F15;&#x6570;&#x3092;&#x542B;&#x3080;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x6700;&#x521D;&#x306E;&#x8981;&#x7D20;&#x306F; &apos;node&apos;&#x3001;2 &#x756A;&#x76EE;&#x306E;&#x8981;&#x7D20;&#x306F; JavaScript &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x540D;&#x524D;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x5F8C;&#x306E;&#x8981;&#x7D20;&#x306F;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x306E;&#x8FFD;&#x52A0;&#x306E;&#x5F15;&#x6570;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>// print process.argv\nprocess.argv.forEach(function(val, index, array) {\n  console.log(index + &apos;: &apos; + val);\n});</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x51FA;&#x529B;&#x3055;&#x308C;&#x307E;&#x3059;:\n\n</p>\n<pre><code>$ node process-2.js one two=three four\n0: node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.execPath&quot;,
              &quot;name&quot;: &quot;execPath&quot;,
              &quot;desc&quot;: &quot;<!--\nThis is the absolute pathname of the executable that started the process.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x3088;&#x3063;&#x3066;&#x958B;&#x59CB;&#x3055;&#x308C;&#x305F;&#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>/usr/local/bin/node</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.execArgv&quot;,
              &quot;name&quot;: &quot;execArgv&quot;,
              &quot;desc&quot;: &quot;<!--\nThis is the set of node-specific command line options from the\nexecutable that started the process.  These options do not show up in\n`process.argv`, and do not include the node executable, the name of\nthe script, or any options following the script name. These options\nare useful in order to spawn child processes with the same execution\nenvironment as the parent.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x8D77;&#x52D5;&#x6642;&#x306B;&#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; node &#x56FA;&#x6709;&#x306E;\n&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x30FB;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x7FA4;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F; <code>process.argv</code> &#x306B;&#x306F;&#x73FE;&#x308C;&#x305A;&#x3001;node &#x306E;&#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3084;\n&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x540D;&#x3001;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x540D;&#x306B;&#x7D9A;&#x304F;&#x3069;&#x3093;&#x306A;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3082;&#x542B;&#x307E;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x540C;&#x3058;&#x5B9F;&#x884C;&#x74B0;&#x5883;&#x3092;&#x6301;&#x3064;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n&#x5F79;&#x306B;&#x7ACB;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>$ node --harmony script.js --version</code></pre>\n<!--\nresults in process.execArgv:\n-->\n\n<p><code>process.execArgv</code> &#x306E;&#x7D50;&#x679C;:\n\n</p>\n<pre><code>[&apos;--harmony&apos;]</code></pre>\n<!--\nand process.argv:\n-->\n\n<p>&#x305D;&#x3057;&#x3066; <code>process.argv</code> &#x306E;&#x7D50;&#x679C;:\n\n</p>\n<pre><code>[&apos;/usr/local/bin/node&apos;, &apos;script.js&apos;, &apos;--version&apos;]</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.env&quot;,
              &quot;name&quot;: &quot;env&quot;,
              &quot;desc&quot;: &quot;<!--\nAn object containing the user environment. See environ(7).\n-->\n\n<p>&#x30E6;&#x30FC;&#x30B6;&#x306E;&#x74B0;&#x5883;&#x3092;&#x542B;&#x3080;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;environ(7) &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.version&quot;,
              &quot;name&quot;: &quot;version&quot;,
              &quot;desc&quot;: &quot;<!--\nA compiled-in property that exposes `NODE_VERSION`.\n-->\n\n<p><code>NODE_VERSION</code> &#x3092;&#x63D0;&#x793A;&#x3059;&#x308B;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x6E08;&#x307F;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;Version: &apos; + process.version);</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.versions&quot;,
              &quot;name&quot;: &quot;versions&quot;,
              &quot;desc&quot;: &quot;<!--\nA property exposing version strings of node and its dependencies.\n-->\n\n<p>node &#x3068;&#x4F9D;&#x5B58;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x6587;&#x5B57;&#x5217;&#x3092;&#x63D0;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(process.versions);</code></pre>\n<!--\nWill print something like:\n-->\n\n<p>&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x3088;&#x3046;&#x306B;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>{ http_parser: &apos;1.0&apos;,\n  node: &apos;0.10.4&apos;,\n  v8: &apos;3.14.5.8&apos;,\n  ares: &apos;1.9.0-DEV&apos;,\n  uv: &apos;0.10.3&apos;,\n  zlib: &apos;1.2.3&apos;,\n  modules: &apos;11&apos;,\n  openssl: &apos;1.0.1e&apos; }</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.config&quot;,
              &quot;name&quot;: &quot;config&quot;,
              &quot;desc&quot;: &quot;<!--\nAn Object containing the JavaScript representation of the configure options\nthat were used to compile the current node executable. This is the same as\nthe \"config.gypi\" file that was produced when running the `./configure` script.\n\nAn example of the possible output looks like:\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;node&#x5B9F;&#x884C;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x305F;&#x969B;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x305F; configure &#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;\nJavaScript &#x3067;&#x8868;&#x73FE;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4FDD;&#x6301;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>./configure</code> &#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x5B9F;&#x884C;&#x3057;&#x305F;&#x969B;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F; &quot;cofnig.gypi&quot;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x5B9F;&#x969B;&#x306E;&#x51FA;&#x529B;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code>{ target_defaults:\n   { cflags: [],\n     default_configuration: &apos;Release&apos;,\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   { host_arch: &apos;x64&apos;,\n     node_install_npm: &apos;true&apos;,\n     node_prefix: &apos;&apos;,\n     node_shared_cares: &apos;false&apos;,\n     node_shared_http_parser: &apos;false&apos;,\n     node_shared_libuv: &apos;false&apos;,\n     node_shared_v8: &apos;false&apos;,\n     node_shared_zlib: &apos;false&apos;,\n     node_use_dtrace: &apos;false&apos;,\n     node_use_openssl: &apos;true&apos;,\n     node_shared_openssl: &apos;false&apos;,\n     strict_aliasing: &apos;true&apos;,\n     target_arch: &apos;x64&apos;,\n     v8_use_snapshot: &apos;true&apos; } }</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.pid&quot;,
              &quot;name&quot;: &quot;pid&quot;,
              &quot;desc&quot;: &quot;<!--\nThe PID of the process.\n-->\n\n<p>&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; PID &#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;This process is pid &apos; + process.pid);</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.title&quot;,
              &quot;name&quot;: &quot;title&quot;,
              &quot;desc&quot;: &quot;<!--\nGetter/setter to set what is displayed in 'ps'.\n-->\n\n<p>&apos;ps&apos; &#x3067;&#x3069;&#x306E;&#x3088;&#x3046;&#x8868;&#x793A;&#x3055;&#x308C;&#x308B;&#x304B;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E; getter/setter &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nWhen used as a setter, the maximum length is platform-specific and probably\nshort.\n-->\n\n<p>setter &#x304C;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;&#x305D;&#x306E;&#x6700;&#x5927;&#x9577;&#x306F;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x4F9D;&#x5B58;&#x3067;&#x3001;&#x304A;&#x305D;&#x3089;&#x304F;&#x77ED;&#x3044;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nOn Linux and OS X, it's limited to the size of the binary name plus the\nlength of the command line arguments because it overwrites the argv memory.\n-->\n\n<p>Linux &#x3068; OS X &#x3067;&#x306F;&#x3001;&#x305D;&#x308C;&#x306F; argv &#x306E;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x4E0A;&#x66F8;&#x304D;&#x3059;&#x308B;&#x305F;&#x3081;&#x3001;\n&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x540D;&#x306B;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x5F15;&#x6570;&#x3092;&#x52A0;&#x3048;&#x305F;&#x3082;&#x306E;&#x306B;&#x5236;&#x9650;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nv0.8 allowed for longer process title strings by also overwriting the environ\nmemory but that was potentially insecure/confusing in some (rather obscure)\ncases.\n-->\n\n<p>v0.8 &#x306F;&#x3088;&#x308A;&#x9577;&#x3044;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x30BF;&#x30A4;&#x30C8;&#x30EB;&#x6587;&#x5B57;&#x5217;&#x3067;&#x74B0;&#x5883;&#x3092;&#x4E0A;&#x66F8;&#x304D;&#x3057;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x304C;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E; (&#x306F;&#x3063;&#x304D;&#x308A;&#x3057;&#x306A;&#x3044;) &#x30B1;&#x30FC;&#x30B9;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;\n&#x6F5C;&#x5728;&#x7684;&#x306B;&#x5371;&#x967A;&#x3067;&#x6DF7;&#x4E71;&#x3057;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.arch&quot;,
              &quot;name&quot;: &quot;arch&quot;,
              &quot;desc&quot;: &quot;<!--\nWhat processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n-->\n\n<p>&#x5B9F;&#x884C;&#x3057;&#x3066;&#x3044;&#x308B;&#x30D7;&#x30ED;&#x30BB;&#x30C3;&#x30B5;&#x306E;&#x30A2;&#x30FC;&#x30AD;&#x30C6;&#x30AF;&#x30C1;&#x30E3;: <code>&apos;arm&apos;</code>&#x3001;<code>&apos;ia32&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F;\n<code>&apos;x64&apos;</code>&#x3002;\n\n</p>\n<pre><code>console.log(&apos;This processor architecture is &apos; + process.arch);</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;process.platform&quot;,
              &quot;name&quot;: &quot;platform&quot;,
              &quot;desc&quot;: &quot;<!--\nWhat platform you're running on:\n`'darwin'`, `'freebsd'`, `'linux'`, `'sunos'` or `'win32'`\n-->\n\n<p>&#x3069;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x52D5;&#x3044;&#x3066;&#x3044;&#x308B;&#x304B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;:\n<code>&apos;darwin&apos;</code>&#x3001;<code>&apos;freebsd&apos;</code>&#x3001;<code>&apos;linux&apos;</code>&#x3001;<code>&apos;sunos&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;win32&apos;</code>\n\n</p>\n<pre><code>console.log(&apos;This platform is &apos; + process.platform);</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`maxTickDepth` {Number} Default = 1000 &quot;,
              &quot;name&quot;: &quot;maxTickDepth&quot;,
              &quot;desc&quot;: &quot;<!--\nCallbacks passed to `process.nextTick` will *usually* be called at the\nend of the current flow of execution, and are thus approximately as fast\nas calling a function synchronously.  Left unchecked, this would starve\nthe event loop, preventing any I/O from occurring.\n-->\n\n<p><code>process.nextTick()</code> &#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x3001;<em>&#x901A;&#x5E38;</em> &#x73FE;&#x5728;&#x306E;&#x5B9F;&#x884C;&#x30D5;&#x30ED;&#x30FC;&#x306E;\n&#x5F8C;&#x3067;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3001;&#x305D;&#x308C;&#x306F;&#x95A2;&#x6570;&#x3092;&#x540C;&#x671F;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3059;&#x306E;&#x3068;&#x540C;&#x3058;&#x304F;&#x3089;&#x3044;&#x9AD8;&#x901F;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3092;&#x653E;&#x7F6E;&#x3059;&#x308B;&#x3068;&#x3042;&#x3089;&#x3086;&#x308B; I/O &#x304C;&#x963B;&#x307E;&#x308C;&#x3001;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x306F;&#x98E2;&#x9913;&#x72B6;&#x614B;&#x3068;&#x306A;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nConsider this code:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x8003;&#x3048;&#x3066;&#x307F;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>process.nextTick(function foo() {\n  process.nextTick(foo);\n});</code></pre>\n<!--\nIn order to avoid the situation where Node is blocked by an infinite\nloop of recursive series of nextTick calls, it defers to allow some I/O\nto be done every so often.\n-->\n\n<p>nextTick &#x306E;&#x518D;&#x5E30;&#x304C;&#x9023;&#x9396;&#x3059;&#x308B;&#x7121;&#x9650;&#x30EB;&#x30FC;&#x30D7;&#x306B;&#x3088;&#x3063;&#x3066; Node &#x304C;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x72B6;&#x6CC1;&#x3092;\n&#x907F;&#x3051;&#x308B;&#x306B;&#x306F;&#x3001;&#x305D;&#x308C;&#x3092;&#x5148;&#x9001;&#x308A;&#x3057;&#x3066;&#x6642;&#x3005; I/O &#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `process.maxTickDepth` value is the maximum depth of\nnextTick-calling nextTick-callbacks that will be evaluated before\nallowing other forms of I/O to occur.\n-->\n\n<p><code>process.maxTickDepth</code> &#x306E;&#x5024;&#x306F;&#x3001;nextTick &#x304C; nextTick &#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;\n&#x6700;&#x5927;&#x306E;&#x6DF1;&#x3055;&#x3067;&#x3001;&#x4ED6;&#x306E; I/O &#x3092;&#x53EF;&#x80FD;&#x306B;&#x3059;&#x308B;&#x524D;&#x306B;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;shortDesc&quot;: &quot;Default = 1000&quot;
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;process.abort()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;abort&quot;,
              &quot;desc&quot;: &quot;<!--\nThis causes node to emit an abort. This will cause node to exit and\ngenerate a core file.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; node &#x3092;&#x30A2;&#x30DC;&#x30FC;&#x30C8;&#x3055;&#x305B;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; node &#x304C;&#x7D42;&#x4E86;&#x3057;&#x3066;&#x30B3;&#x30A2;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.chdir(directory)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;chdir&quot;,
              &quot;desc&quot;: &quot;<!--\nChanges the current working directory of the process or throws an exception if that fails.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3092;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x5931;&#x6557;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x4F8B;&#x5916;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;Starting directory: &apos; + process.cwd());\ntry {\n  process.chdir(&apos;/tmp&apos;);\n  console.log(&apos;New directory: &apos; + process.cwd());\n}\ncatch (err) {\n  console.log(&apos;chdir: &apos; + err);\n}</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;directory&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.cwd()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;cwd&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the current working directory of the process.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;Current directory: &apos; + process.cwd());</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.exit([code])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;exit&quot;,
              &quot;desc&quot;: &quot;<!--\nEnds the process with the specified `code`.  If omitted, exit uses the\n'success' code `0`.\n-->\n\n<p>&#x6307;&#x5B9A;&#x306E; <code>code</code> &#x3067;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x7701;&#x7565;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x300C;&#x6210;&#x529F;&#x300D;&#x3092;&#x793A;&#x3059;&#x30B3;&#x30FC;&#x30C9; <code>0</code> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nTo exit with a 'failure' code:\n-->\n\n<p>&#x300C;&#x5931;&#x6557;&#x300D;&#x3092;&#x793A;&#x3059;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.exit(1);</code></pre>\n<!--\nThe shell that executed node should see the exit code as 1.\n-->\n\n<p>node &#x3092;&#x5B9F;&#x884C;&#x3057;&#x305F;&#x30B7;&#x30A7;&#x30EB;&#x3067;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x304C; 1 &#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x898B;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;code&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.getgid()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getgid&quot;,
              &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nGets the group identity of the process. (See getgid(2).)\nThis is the numerical group id, not the group name.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059; (getgid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x3067;&#x3001;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code>if (process.getgid) {\n  console.log(&apos;Current gid: &apos; + process.getgid());\n}</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.setgid(id)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setgid&quot;,
              &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSets the group identity of the process. (See setgid(2).)  This accepts either\na numerical ID or a groupname string. If a groupname is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059; (setgid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x3082;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x306E;&#x6587;&#x5B57;&#x5217;&#x306E;&#x3069;&#x3061;&#x3089;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x304C;&#x89E3;&#x6C7A;&#x3067;&#x304D;&#x308B;&#x307E;&#x3067;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>if (process.getgid &amp;&amp; process.setgid) {\n  console.log(&apos;Current gid: &apos; + process.getgid());\n  try {\n    process.setgid(501);\n    console.log(&apos;New gid: &apos; + process.getgid());\n  }\n  catch (err) {\n    console.log(&apos;Failed to set gid: &apos; + err);\n  }\n}</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;id&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.getuid()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getuid&quot;,
              &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nGets the user identity of the process. (See getuid(2).)\nThis is the numerical userid, not the username.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30E6;&#x30FC;&#x30B6;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059; (getuid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B;&#x30E6;&#x30FC;&#x30B6; ID &#x3067;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code>if (process.getuid) {\n  console.log(&apos;Current uid: &apos; + process.getuid());\n}</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.setuid(id)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setuid&quot;,
              &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSets the user identity of the process. (See setuid(2).)  This accepts either\na numerical ID or a username string.  If a username is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30E6;&#x30FC;&#x30B6;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059; (setuid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x3082;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x306E;&#x6587;&#x5B57;&#x5217;&#x306E;&#x3069;&#x3061;&#x3089;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x304C;&#x89E3;&#x6C7A;&#x3067;&#x304D;&#x308B;&#x307E;&#x3067;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>if (process.getuid &amp;&amp; process.setuid) {\n  console.log(&apos;Current uid: &apos; + process.getuid());\n  try {\n    process.setuid(501);\n    console.log(&apos;New uid: &apos; + process.getuid());\n  }\n  catch (err) {\n    console.log(&apos;Failed to set uid: &apos; + err);\n  }\n}</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;id&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.getgroups()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getgroups&quot;,
              &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIC &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3064;&#x307E;&#x308A; Windows &#x4EE5;&#x5916;)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns an array with the supplementary group IDs. POSIX leaves it unspecified\nif the effective group ID is included but node.js ensures it always is.\n-->\n\n<p>&#x88DC;&#x52A9;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x306E;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\nPOSIX &#x306F;&#x5B9F;&#x52B9;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x304C;&#x542B;&#x307E;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x660E;&#x793A;&#x3057;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;\nNode.js &#x3067;&#x306F;&#x5E38;&#x306B;&#x305D;&#x308C;&#x304C;&#x542B;&#x307E;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x4FDD;&#x8A3C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.setgroups(groups)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setgroups&quot;,
              &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIC &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3064;&#x307E;&#x308A; Windows &#x4EE5;&#x5916;)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSets the supplementary group IDs. This is a privileged operation, meaning you\nneed to be root or have the CAP_SETGID capability.\n-->\n\n<p>&#x88DC;&#x52A9;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x7279;&#x6A29;&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3042;&#x308A;&#x3001;&#x30EB;&#x30FC;&#x30C8;&#x3067;&#x3042;&#x308B;&#x304B;&#x3001;&#x307E;&#x305F;&#x306F; CAP_SETGID &#x30B1;&#x30FC;&#x30D1;&#x30D3;&#x30EA;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3064;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe list can contain group IDs, group names or both.\n-->\n\n<p>&#x30EA;&#x30B9;&#x30C8;&#x306F;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID&#x3001;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x3001;&#x307E;&#x305F;&#x306F;&#x4E21;&#x65B9;&#x3092;&#x542B;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;groups&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.initgroups(user, extra_group)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;initgroups&quot;,
              &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIC &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3064;&#x307E;&#x308A; Windows &#x4EE5;&#x5916;)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nReads /etc/group and initializes the group access list, using all groups of\nwhich the user is a member. This is a privileged operation, meaning you need\nto be root or have the CAP_SETGID capability.\n-->\n\n<p><code>/etc/group</code> &#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3093;&#x3067;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x30EA;&#x30B9;&#x30C8;&#x3092;&#x521D;&#x671F;&#x5316;&#x3057;&#x3001;\nuser &#x304C;&#x30E1;&#x30F3;&#x30D0;&#x30FC;&#x3067;&#x3042;&#x308B;&#x5168;&#x3066;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x7279;&#x6A29;&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3042;&#x308A;&#x3001;&#x30EB;&#x30FC;&#x30C8;&#x3067;&#x3042;&#x308B;&#x304B;&#x3001;&#x307E;&#x305F;&#x306F; CAP_SETGID &#x30B1;&#x30FC;&#x30D1;&#x30D3;&#x30EA;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3064;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`user` is a user name or user ID. `extra_group` is a group name or group ID.\n-->\n\n<p><code>user</code> &#x306F;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x307E;&#x305F;&#x306F;&#x30E6;&#x30FC;&#x30B6; ID&#x3001;\n<code>extra_group</code> &#x306F;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x307E;&#x305F;&#x306F;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSome care needs to be taken when dropping privileges. Example:\n-->\n\n<p>&#x7279;&#x6A29;&#x3092;&#x843D;&#x3068;&#x3059;&#x969B;&#x306F;&#x3001;&#x3044;&#x304F;&#x3064;&#x304B;&#x6CE8;&#x610F;&#x3059;&#x3079;&#x304D;&#x4E8B;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>console.log(process.getgroups());         // [ 0 ]\nprocess.initgroups(&apos;bnoordhuis&apos;, 1000);   // switch user\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     // drop root gid\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;user&quot;
                    },
                    {
                      &quot;name&quot;: &quot;extra_group&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.kill(pid, [signal])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;kill&quot;,
              &quot;desc&quot;: &quot;<!--\nSend a signal to a process. `pid` is the process id and `signal` is the\nstring describing the signal to send.  Signal names are strings like\n'SIGINT' or 'SIGHUP'.  If omitted, the signal will be 'SIGTERM'.\nSee [Signal Events](#process_signal_events) and kill(2) for more information.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>pid</code> &#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9; ID &#x3067; <code>signal</code> &#x306F;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x6587;&#x5B57;&#x5217;&#x3067;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x540D;&#x524D;&#x306F; &apos;SIGINT&apos; &#x3084; &apos;SIGHUP&apos; &#x306E;&#x3088;&#x3046;&#x306A;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x7701;&#x7565;&#x3059;&#x308B;&#x3068;&#x3001;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306F; &apos;SIGTERM&apos; &#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <a href="\&quot;#process_signal_events\&quot;">Signal Events</a> &#x307E;&#x305F;&#x306F; kill(2)\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nWill throw an error if target does not exist, and as a special case, a signal of\n`0` can be used to test for the existence of a process.\n-->\n\n<p>&#x5BFE;&#x8C61;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x7279;&#x5225;&#x306A;&#x30B1;&#x30FC;&#x30B9;&#x3068;&#x3057;&#x3066;&#x3001;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x30C6;&#x30B9;&#x30C8;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;\n<code>0</code> &#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that just because the name of this function is `process.kill`, it is\nreally just a signal sender, like the `kill` system call.  The signal sent\nmay do something other than kill the target process.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306E;&#x540D;&#x524D;&#x304C; <code>process.kill</code> &#x3067;&#x3042;&#x308B;&#x3068;&#x304A;&#x308A;&#x3001;&#x3053;&#x308C;&#x306F; <code>kill</code>\n&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x30B3;&#x30FC;&#x30EB;&#x306E;&#x3088;&#x3046;&#x306B;&#x5358;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x5BFE;&#x8C61;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x6BBA;&#x3059;&#x305F;&#x3081;&#x3060;&#x3051;&#x3067;&#x306A;&#x304F;&#x3001;&#x4ED6;&#x306E;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3082;&#x9001;&#x4FE1;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of sending a signal to yourself:\n-->\n\n<p>&#x81EA;&#x8EAB;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.on(&apos;SIGHUP&apos;, function() {\n  console.log(&apos;Got SIGHUP signal.&apos;);\n});\n\nsetTimeout(function() {\n  console.log(&apos;Exiting.&apos;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &apos;SIGHUP&apos;);</code></pre>\n<!--\nNote: When SIGUSR1 is received by Node.js it starts the debugger, see\n[Signal Events](#process_signal_events).\n-->\n\n<p>&#x6CE8;&#x610F;: SIGUSR1&#x306F;node.js&#x306B;&#x3088;&#x3063;&#x3066;&#x53D7;&#x4FE1;&#x3055;&#x308C;&#x3001;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <a href="\&quot;#process_signal_events\&quot;">Signal Events</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;pid&quot;
                    },
                    {
                      &quot;name&quot;: &quot;signal&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.memoryUsage()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;memoryUsage&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns an object describing the memory usage of the Node process\nmeasured in bytes.\n-->\n\n<p>Node &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30E1;&#x30E2;&#x30EA;&#x4F7F;&#x7528;&#x72B6;&#x6CC1;&#x3092;&#x30D0;&#x30A4;&#x30C8;&#x5358;&#x4F4D;&#x3067;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nconsole.log(util.inspect(process.memoryUsage()));</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;:\n\n</p>\n<pre><code>{ rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472 }</code></pre>\n<!--\n`heapTotal` and `heapUsed` refer to V8's memory usage.\n-->\n\n<p><code>heapTotal</code> &#x3068; <code>heapUsed</code> &#x306F; V8 &#x306E;&#x30E1;&#x30E2;&#x30EA;&#x4F7F;&#x7528;&#x72B6;&#x6CC1;&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.nextTick(callback)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;nextTick&quot;,
              &quot;desc&quot;: &quot;<!--\nOn the next loop around the event loop call this callback.\nThis is *not* a simple alias to `setTimeout(fn, 0)`, it's much more\nefficient.  It typically runs before any other I/O events fire, but there\nare some exceptions.  See `process.maxTickDepth` below.\n-->\n\n<p>&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x306E;&#x6B21;&#x4EE5;&#x964D;&#x306E;&#x30EB;&#x30FC;&#x30D7;&#x3067;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>setTimeout(fn, 0)</code> &#x306E;&#x5358;&#x7D14;&#x306A;&#x30A8;&#x30A4;&#x30EA;&#x30A2;&#x30B9;<em>&#x3067;&#x306F;&#x306A;&#x304F;</em>&#x3001;\n&#x306F;&#x308B;&#x304B;&#x306B;&#x52B9;&#x7387;&#x7684;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x901A;&#x5E38;&#x4ED6;&#x306E; I/O &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3088;&#x308A;&#x3082;&#x524D;&#x306B;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x4F8B;&#x5916;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x5F8C;&#x8FF0;&#x306E; <code>process.maxTickDepth</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>process.nextTick(function() {\n  console.log(&apos;nextTick callback&apos;);\n});</code></pre>\n<!--\nThis is important in developing APIs where you want to give the user the\nchance to assign event handlers after an object has been constructed,\nbut before any I/O has occurred.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; API &#x306E;&#x958B;&#x767A;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C;&#x69CB;&#x7BC9;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3067;\n&#x3069;&#x3093;&#x306A; I/O &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3088;&#x308A;&#x3082;&#x524D;&#x306B;&#x3001;\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x308B;&#x30C1;&#x30E3;&#x30F3;&#x30B9;&#x3092;&#x30E6;&#x30FC;&#x30B6;&#x306B;&#x4E0E;&#x3048;&#x305F;&#x3044;&#x5834;&#x5408;&#x306B;&#x91CD;&#x8981;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(function() {\n    this.startDoingStuff();\n  }.bind(this));\n}\n\nvar thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.</code></pre>\n<!--\nIt is very important for APIs to be either 100% synchronous or 100%\nasynchronous.  Consider this example:\n-->\n\n<p>API &#x306F; 100% &#x540C;&#x671F;&#x7684;&#x304B;&#x3001;100% &#x975E;&#x540C;&#x671F;&#x7684;&#x304B;&#x306E;&#x3069;&#x3061;&#x3089;&#x304B;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x304C;&#x3068;&#x3066;&#x3082;&#x91CD;&#x8981;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x4F8B;&#x3092;&#x8003;&#x3048;&#x3066;&#x307F;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;:\n\n</p>\n<pre><code>// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&apos;file&apos;, cb);\n}</code></pre>\n<!--\nThis API is hazardous.  If you do this:\n-->\n\n<p>&#x3053;&#x306E; API &#x306F;&#x5371;&#x967A;&#x3067;&#x3059;&#x3002;&#x3053;&#x3046;&#x3059;&#x308B;&#x3068;:\n\n</p>\n<pre><code>maybeSync(true, function() {\n  foo();\n});\nbar();</code></pre>\n<!--\nthen it's not clear whether `foo()` or `bar()` will be called first.\n-->\n\n<p><code>foo()</code> &#x3068; <code>bar()</code> &#x306E;&#x3069;&#x3061;&#x3089;&#x304C;&#x5148;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x304B;&#x4E0D;&#x660E;&#x77AD;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis approach is much better:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E;&#x30A2;&#x30D7;&#x30ED;&#x30FC;&#x30C1;&#x306F;&#x305A;&#x3063;&#x3068;&#x512A;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;:\n\n</p>\n<pre><code>function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&apos;file&apos;, cb);\n}</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;callback&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.umask([mask])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;umask&quot;,
              &quot;desc&quot;: &quot;<!--\nSets or reads the process's file mode creation mask. Child processes inherit\nthe mask from the parent process. Returns the old mask if `mask` argument is\ngiven, otherwise returns the current mask.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30E2;&#x30FC;&#x30C9;&#x4F5C;&#x6210;&#x30DE;&#x30B9;&#x30AF;&#x3092;&#x8A2D;&#x5B9A;&#x307E;&#x305F;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304B;&#x3089;&#x30DE;&#x30B9;&#x30AF;&#x3092;&#x7D99;&#x627F;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>mask</code> &#x5F15;&#x6570;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x308B;&#x3068;&#x5143;&#x306E;&#x30DE;&#x30B9;&#x30AF;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x3001;&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x73FE;&#x5728;&#x306E;&#x30DE;&#x30B9;&#x30AF;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var oldmask, newmask = 0644;\n\noldmask = process.umask(newmask);\nconsole.log(&apos;Changed umask from: &apos; + oldmask.toString(8) +\n            &apos; to &apos; + newmask.toString(8));</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;mask&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.uptime()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;uptime&quot;,
              &quot;desc&quot;: &quot;<!--\nNumber of seconds Node has been running.\n-->\n\n<p>Node &#x304C;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x304B;&#x3089;&#x306E;&#x79D2;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;process.hrtime()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;hrtime&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the current high-resolution real time in a `[seconds, nanoseconds]`\ntuple Array. It is relative to an arbitrary time in the past. It is not\nrelated to the time of day and therefore not subject to clock drift. The\nprimary use is for measuring performance between intervals.\n\nYou may pass in the result of a previous call to `process.hrtime()` to get\na diff reading, useful for benchmarks and measuring intervals:\n-->\n\n<p>&#x9AD8;&#x5206;&#x89E3;&#x80FD;&#x306A;&#x73FE;&#x5728;&#x6642;&#x523B;&#x3092; <code>[seconds, nanoseconds]</code> &#x306E;&#x914D;&#x5217;&#x3067;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x904E;&#x53BB;&#x306E;&#x4EFB;&#x610F;&#x306E;&#x6642;&#x9593;&#x3068;&#x306E;&#x6BD4;&#x8F03;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x4E00;&#x65E5;&#x306B;&#x304A;&#x3051;&#x308B;&#x6642;&#x523B;&#x306B;&#x306F;&#x95A2;&#x9023;&#x304C;&#x7121;&#x3044;&#x305F;&#x3081;&#x3001;&#x30AF;&#x30ED;&#x30C3;&#x30AF;&#x30C9;&#x30EA;&#x30D5;&#x30C8;&#x306B;&#x5F71;&#x97FF;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x4E3B;&#x306A;&#x7528;&#x9014;&#x306F;&#x30D9;&#x30F3;&#x30C1;&#x30DE;&#x30FC;&#x30AF;&#x3084;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D0;&#x30EB;&#x306E;&#x6E2C;&#x5B9A;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x4EE5;&#x524D;&#x306B; <code>process.hrtime()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x7D50;&#x679C;&#x3092;&#x6E21;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;\n&#x5DEE;&#x5206;&#x3092;&#x5F97;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;&#x3053;&#x308C;&#x306F;&#x30D9;&#x30F3;&#x30C1;&#x30DE;&#x30FC;&#x30AF;&#x3084;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D0;&#x30EB;&#x306E;&#x6E2C;&#x5B9A;&#x306B;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>var time = process.hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(function() {\n  var diff = process.hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(&apos;benchmark took %d nanoseconds&apos;, diff[0] * 1e9 + diff[1]);\n  // benchmark took 1000000527 nanoseconds\n}, 1000);</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ]
        }
      ],
      &quot;vars&quot;: [
        {
          &quot;textRaw&quot;: &quot;require()&quot;,
          &quot;type&quot;: &quot;var&quot;,
          &quot;name&quot;: &quot;require&quot;,
          &quot;desc&quot;: &quot;<!--\nTo require modules. See the [Modules][] section.  `require` isn't actually a\nglobal but rather local to each module.\n-->\n\n<p>require &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x6307;&#x3057;&#x307E;&#x3059;&#x3002;[&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;][] &#x306E;&#x7BC0;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n<code>require</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x6BCE;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;require.resolve()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;resolve&quot;,
              &quot;desc&quot;: &quot;<!--\nUse the internal `require()` machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.\n-->\n\n<p><code>require()</code> &#x306E;&#x5185;&#x90E8;&#x3067;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x4F4D;&#x7F6E;&#x3092;&#x691C;&#x7D22;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30ED;&#x30FC;&#x30C9;&#x306F;&#x884C;&#x308F;&#x305A;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3092;&#x89E3;&#x6C7A;&#x3057;&#x3066;&#x8FD4;&#x3059;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;`cache` {Object} &quot;,
              &quot;name&quot;: &quot;cache&quot;,
              &quot;desc&quot;: &quot;<!--\nModules are cached in this object when they are required. By deleting a key\nvalue from this object, the next `require` will reload the module.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x8981;&#x6C42;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x3053;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x4E2D;&#x306B;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304B;&#x3089;&#x30AD;&#x30FC;&#x3068;&#x5024;&#x3092;&#x524A;&#x9664;&#x3059;&#x308B;&#x3068;&#x3001;&#x6B21;&#x306B;&#x305D;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;\n<code>require</code> &#x3055;&#x308C;&#x305F;&#x3068;&#x304D;&#x306B;&#x30EA;&#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`extensions` {Object} &quot;,
              &quot;name&quot;: &quot;extensions&quot;,
              &quot;stability&quot;: 0,
              &quot;stabilityText&quot;: &quot;Deprecated&quot;,
              &quot;desc&quot;: &quot;<!--\nInstruct `require` on how to handle certain file extensions.\n\nProcess files with the extension `.sjs` as `.js`:\n-->\n\n<p><code>require</code> &#x306B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x62E1;&#x5F35;&#x5B50;&#x3092;&#x6271;&#x3046;&#x65B9;&#x6CD5;&#x3092;&#x6559;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x62E1;&#x5F35;&#x5B50;&#x304C; <code>.sjs</code> &#x3067;&#x3042;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x51E6;&#x7406;&#x3092; <code>.js</code> &#x3068;&#x540C;&#x3058;&#x306B;&#x3059;&#x308B;&#x306B;&#x306F;:\n\n</p>\n<pre><code>require.extensions[&apos;.sjs&apos;] = require.extensions[&apos;.js&apos;];</code></pre>\n<!--\n**Deprecated**  In the past, this list has been used to load\nnon-JavaScript modules into Node by compiling them on-demand.\nHowever, in practice, there are much better ways to do this, such as\nloading modules via some other Node program, or compiling them to\nJavaScript ahead of time.\n-->\n\n<p><strong>&#x5EC3;&#x6B62;&#x4E88;&#x5B9A;</strong> &#x304B;&#x3064;&#x3066;&#x3001;&#x3053;&#x306E;&#x30EA;&#x30B9;&#x30C8;&#x306F;&#x975E; JavaScript &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x5FC5;&#x8981;&#x306B;&#x5FDC;&#x3058;&#x3066;\n&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x3001;Node &#x306B;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x5B9F;&#x969B;&#x306B;&#x306F;&#x3001;&#x4ED6;&#x306E; Node &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x901A;&#x3058;&#x3066;&#x30ED;&#x30FC;&#x30C9;&#x3057;&#x305F;&#x308A;&#x3001;\n&#x4E8B;&#x524D;&#x306B; JavaScript &#x306B;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3059;&#x308B;&#x306A;&#x3069;&#x3001;&#x3088;&#x308A;&#x3088;&#x3044;&#x65B9;&#x6CD5;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nSince the Module system is locked, this feature will probably never go\naway.  However, it may have subtle bugs and complexities that are best\nleft untouched.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306F;&#x30ED;&#x30C3;&#x30AF;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x306E;&#x3067;&#x3001;&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x306F;&#x304A;&#x305D;&#x3089;&#x304F;\n&#x7121;&#x304F;&#x306A;&#x3089;&#x306A;&#x3044;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F;&#x5FAE;&#x5999;&#x306A;&#x30D0;&#x30B0;&#x3084;&#x8907;&#x96D1;&#x3055;&#x304C;&#x3042;&#x3063;&#x3066;&#x3082;&#x305D;&#x306E;&#x307E;&#x307E;&#x653E;&#x7F6E;&#x3055;&#x308C;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;__filename&quot;,
          &quot;name&quot;: &quot;__filename&quot;,
          &quot;type&quot;: &quot;var&quot;,
          &quot;desc&quot;: &quot;<!--\nThe filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.\n-->\n\n<p>&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3067;&#x3059;&#x3002;&#x3053;&#x308C;&#x306F;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3067;&#x3059;&#x3002;\n&#x30E1;&#x30A4;&#x30F3;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067;&#x306F;&#x3001;&#x5FC5;&#x305A;&#x3057;&#x3082;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x5F15;&#x6570;&#x3067;&#x4F7F;&#x308F;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3068;\n&#x540C;&#x3058;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x4E2D;&#x3067;&#x306F;&#x3001;&#x3053;&#x306E;&#x5024;&#x306F;&#x305D;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x30D1;&#x30B9;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>&#x4F8B;: <code>node example.js</code> &#x3092; <code>/Users/mjr</code> &#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;\n\n</p>\n<pre><code>console.log(__filename);\n// /Users/mjr/example.js</code></pre>\n<!--\n`__filename` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__filename</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x6BCE;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;__dirname&quot;,
          &quot;name&quot;: &quot;__dirname&quot;,
          &quot;type&quot;: &quot;var&quot;,
          &quot;desc&quot;: &quot;<!--\nThe name of the directory that the currently executing script resides in.\n-->\n\n<p>&#x73FE;&#x5728;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306E;&#x540D;&#x524D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>&#x4F8B;: <code>node example.js</code> &#x3092; <code>/Users/mjr</code> &#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;\n\n</p>\n<pre><code>console.log(__dirname);\n// /Users/mjr</code></pre>\n<!--\n`__dirname` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__dirname</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x6BCE;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;module&quot;,
          &quot;name&quot;: &quot;module&quot;,
          &quot;type&quot;: &quot;var&quot;,
          &quot;desc&quot;: &quot;<!--\nA reference to the current module. In particular\n`module.exports` is used for defining what a module exports and makes\navailable through `require()`.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3078;&#x306E;&#x53C2;&#x7167;&#x3067;&#x3059;&#x3002;\n<code>module.exports</code> &#x306F;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x516C;&#x958B;&#x3057;&#x3066; <code>require()</code> &#x3092;&#x901A;&#x3058;&#x3066;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;\n&#x3082;&#x306E;&#x3092;&#x5B9A;&#x3081;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`module` isn't actually a global but rather local to each module.\n-->\n\n<p><code>module</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x6BCE;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSee the [module system documentation][] for more information.\n-->\n\n<p>&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x306F; [&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;exports&quot;,
          &quot;name&quot;: &quot;exports&quot;,
          &quot;type&quot;: &quot;var&quot;,
          &quot;desc&quot;: &quot;<!--\nA reference to the `module.exports` that is shorter to type.\nSee [module system documentation][] for details on when to use `exports` and\nwhen to use `module.exports`.\n-->\n\n<p><code>module.exports</code> &#x3078;&#x306E;&#x53C2;&#x7167;&#x3067;&#x3059;&#x3002;\n&#x3044;&#x3064; <code>exports</code> &#x3092;&#x4F7F;&#x3044;&#x3001;&#x3044;&#x3064; <code>module.exports</code> &#x3092;&#x4F7F;&#x3046;&#x304B;&#x306E;&#x8A73;&#x7D30;&#x306F;\n[&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\n`exports` isn't actually a global but rather local to each module.\n-->\n\n<p><code>exports</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x6BCE;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSee the [module system documentation][] for more information.\n\nSee the [module section][] for more information.\n-->\n\n<p>&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x306F; [&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;setTimeout(cb, ms)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setTimeout&quot;,
          &quot;desc&quot;: &quot;<!--\nRun callback `cb` after *at least* `ms` milliseconds. The actual delay depends\non external factors like OS timer granularity and system load.\n-->\n\n<p><em>&#x5C11;&#x306A;&#x304F;&#x3068;&#x3082;</em> <code>ms</code> &#x30DF;&#x30EA;&#x79D2;&#x304C;&#x7D4C;&#x904E;&#x3057;&#x305F;&#x5F8C;&#x3001;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF; <code>cb</code> &#x3092;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5B9F;&#x969B;&#x306E;&#x9045;&#x5EF6;&#x306F; OS &#x306E;&#x30BF;&#x30A4;&#x30DE;&#x5206;&#x89E3;&#x80FD;&#x3084;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x8CA0;&#x8377;&#x306A;&#x3069;&#x5916;&#x90E8;&#x8981;&#x56E0;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe timeout must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it's changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x5024;&#x306F; 1&#xFF5E;2,147,483,647 &#x306E;&#x7BC4;&#x56F2;&#x5185;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3082;&#x3057;&#x5024;&#x304C;&#x3053;&#x306E;&#x7BC4;&#x56F2;&#x5916;&#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; 1 &#x30DF;&#x30EA;&#x79D2;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x5927;&#x96D1;&#x628A;&#x306B;&#x8A00;&#x3063;&#x3066;&#x3001;&#x30BF;&#x30A4;&#x30DE;&#x306F; 24.8 &#x65E5;&#x3092;&#x8D8A;&#x3048;&#x308B;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nReturns an opaque value that represents the timer.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x4E0D;&#x900F;&#x660E;&#x306A;&#x5024;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;cb&quot;
                },
                {
                  &quot;name&quot;: &quot;ms&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;clearTimeout(t)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;clearTimeout&quot;,
          &quot;desc&quot;: &quot;<!--\nStop a timer that was previously created with `setTimeout()`. The callback will\nnot execute.\n-->\n\n<p><code>setTimeout()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x4EE5;&#x524D;&#x306B;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;t&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;setInterval(cb, ms)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setInterval&quot;,
          &quot;desc&quot;: &quot;<!--\nRun callback `cb` repeatedly every `ms` milliseconds. Note that the actual\ninterval may vary, depending on external factors like OS timer granularity and\nsystem load. It's never less than `ms` but it may be longer.\n-->\n\n<p><code>ms</code> &#x30DF;&#x30EA;&#x79D2;&#x3054;&#x3068;&#x306B;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF; <code>cb</code> &#x3092;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;\nOS &#x306E;&#x30BF;&#x30A4;&#x30DE;&#x5206;&#x89E3;&#x80FD;&#x3084;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x8CA0;&#x8377;&#x306A;&#x3069;&#x5916;&#x90E8;&#x8981;&#x56E0;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;\n&#x5B9F;&#x969B;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D0;&#x30EB;&#x304C;&#x7570;&#x306A;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x6C7A;&#x3057;&#x3066; <code>ms</code> &#x3088;&#x308A;&#x77ED;&#x3044;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;&#x3088;&#x308A;&#x9577;&#x3044;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe interval must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it's changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n-->\n\n<p>&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D0;&#x30EB;&#x5024;&#x306F; 1&#xFF5E;2,147,483,647 &#x306E;&#x7BC4;&#x56F2;&#x5185;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3082;&#x3057;&#x5024;&#x304C;&#x3053;&#x306E;&#x7BC4;&#x56F2;&#x5916;&#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; 1 &#x30DF;&#x30EA;&#x79D2;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x5927;&#x96D1;&#x628A;&#x306B;&#x8A00;&#x3063;&#x3066;&#x3001;&#x30BF;&#x30A4;&#x30DE;&#x306F; 24.8 &#x65E5;&#x3092;&#x8D8A;&#x3048;&#x308B;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nReturns an opaque value that represents the timer.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x4E0D;&#x900F;&#x660E;&#x306A;&#x5024;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;cb&quot;
                },
                {
                  &quot;name&quot;: &quot;ms&quot;
                }
              ]
            }
          ]
        }
      ]
    },
    {
      &quot;textRaw&quot;: &quot;Debugger&quot;,
      &quot;name&quot;: &quot;Debugger&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;type&quot;: &quot;misc&quot;,
      &quot;desc&quot;: &quot;<!--\nV8 comes with an extensive debugger which is accessible out-of-process via a\nsimple [TCP protocol](http://code.google.com/p/v8/wiki/DebuggerProtocol).\nNode has a built-in client for this debugger. To use this, start Node with the\n`debug` argument; a prompt will appear:\n-->\n\n<p>V8&#x306F;&#x5916;&#x90E8;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304B;&#x3089; <a href="\&quot;http://code.google.com/p/v8/wiki/DebuggerProtocol\&quot;">TCP &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;</a>&#x7D4C;&#x7531;&#x3067;&#x63A5;&#x7D9A;&#x53EF;&#x80FD;&#x306A;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x5099;&#x3048;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\nNode &#x306B;&#x306F;&#x3053;&#x306E;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3078;&#x306E;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x7D44;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x306B;&#x306F;&#x3001; <code>debug</code> &#x5F15;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x3066; Node &#x3092;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<pre><code>% node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\ndebug&gt;</code></pre>\n<!--\nNode's debugger client doesn't support the full range of commands, but\nsimple step and inspection is possible. By putting the statement `debugger;`\ninto the source code of your script, you will enable a breakpoint.\n-->\n\n<p>Node &#x306E;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306F;&#x3042;&#x3089;&#x3086;&#x308B;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x5B8C;&#x5168;&#x306B;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x3066;&#x3044;&#x308B;&#x308F;&#x3051;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;\n&#x5358;&#x7D14;&#x306A;&#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x5B9F;&#x884C;&#x3084;&#x30A4;&#x30F3;&#x30B9;&#x30DA;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x306B; <code>debugger;</code> &#x6587;&#x3092;&#x633F;&#x5165;&#x3059;&#x308B;&#x3068;&#x3001;\n&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x304C;&#x6709;&#x52B9;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example, suppose `myscript.js` looked like this:\n-->\n\n<p>&#x4F8B;&#x3048;&#x3070;&#x3001;<code>myscript.js</code> &#x304C;&#x6B21;&#x306E;&#x3088;&#x3046;&#x3060;&#x3068;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>// myscript.js\nx = 5;\nsetTimeout(function () {\n  debugger;\n  console.log(&quot;world&quot;);\n}, 1000);\nconsole.log(&quot;hello&quot;);</code></pre>\n<!--\nThen once the debugger is run, it will break on line 4.\n-->\n\n<p>&#x3072;&#x3068;&#x305F;&#x3073;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3068;&#x3001;4&#x884C;&#x76EE;&#x3067;&#x4E2D;&#x65AD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>% node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\ndebug&gt; cont\n&lt; hello\nbreak in /home/indutny/Code/git/indutny/myscript.js:3\n  1 x = 5;\n  2 setTimeout(function () {\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\ndebug&gt; next\nbreak in /home/indutny/Code/git/indutny/myscript.js:4\n  2 setTimeout(function () {\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\n  6 console.log(&quot;hello&quot;);\ndebug&gt; repl\nPress Ctrl + C to leave debug repl\n&gt; x\n5\n&gt; 2+2\n4\ndebug&gt; next\n&lt; world\nbreak in /home/indutny/Code/git/indutny/myscript.js:5\n  3   debugger;\n  4   console.log(&quot;world&quot;);\n  5 }, 1000);\n  6 console.log(&quot;hello&quot;);\n  7\ndebug&gt; quit\n%</code></pre>\n<!--\nThe `repl` command allows you to evaluate code remotely. The `next` command\nsteps over to the next line. There are a few other commands available and more\nto come. Type `help` to see others.\n-->\n\n<p><code>repl</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306F;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x3067;&#x8A55;&#x4FA1;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>next</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306F;&#x6B21;&#x306E;&#x884C;&#x306B;&#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4ED6;&#x306B;&#x3082;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x4ED6;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F; <code>help</code> &#x3092;&#x30BF;&#x30A4;&#x30D7;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;Watchers&quot;,
          &quot;name&quot;: &quot;watchers&quot;,
          &quot;desc&quot;: &quot;<!--\nYou can watch expression and variable values while debugging your code.\nOn every breakpoint each expression from the watchers list will be evaluated\nin the current context and displayed just before the breakpoint's source code\nlisting.\n-->\n\n<p>&#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x4E2D;&#x306B;&#x5F0F;&#x3084;&#x5909;&#x6570;&#x306E;&#x5024;&#x3092;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x30EA;&#x30B9;&#x30C8;&#x306E;&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x5F0F;&#x306F;\n&#x73FE;&#x5728;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x3001;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x524D;&#x306B;\n&#x8868;&#x793A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nTo start watching an expression, type `watch(\"my_expression\")`. `watchers`\nprints the active watchers. To remove a watcher, type\n`unwatch(\"my_expression\")`.\n-->\n\n<p>&#x5F0F;&#x306E;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x3092;&#x958B;&#x59CB;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;<code>watch(&quot;my_expression&quot;)</code> &#x3092;&#x30BF;&#x30A4;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>watchers</code> &#x306F;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x306E;&#x4E00;&#x89A7;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x3092;&#x89E3;&#x9664;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;<code>unwatch(&quot;my_expression&quot;)</code> &#x3068;&#x30BF;&#x30A4;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;displayName&quot;: &quot;Watchers&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Commands reference&quot;,
          &quot;name&quot;: &quot;commands_reference&quot;,
          &quot;modules&quot;: [
            {
              &quot;textRaw&quot;: &quot;Stepping&quot;,
              &quot;name&quot;: &quot;stepping&quot;,
              &quot;desc&quot;: &quot;<!--\n* `cont`, `c` - Continue execution\n* `next`, `n` - Step next\n* `step`, `s` - Step in\n* `out`, `o` - Step out\n* `pause` - Pause running code (like pause button in Developer Tools)\n-->\n\n<ul>\n<li><code>cont</code>, <code>c</code> - &#x5B9F;&#x884C;&#x3092;&#x7D99;&#x7D9A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>next</code>, <code>n</code> - &#x6B21;&#x306E;&#x884C;&#x3078;&#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>step</code>, <code>s</code> - &#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x30A4;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>out</code>, <code>o</code> - &#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x30A2;&#x30A6;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>pause</code> - &#x30B3;&#x30FC;&#x30C9;&#x306E;&#x5B9F;&#x884C;&#x3092;&#x4E2D;&#x65AD;&#x3057;&#x307E;&#x3059; (Developer Tools &#x306E; pause\n&#x30DC;&#x30BF;&#x30F3;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Stepping&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Breakpoints&quot;,
              &quot;name&quot;: &quot;breakpoints&quot;,
              &quot;desc&quot;: &quot;<!--\n* `setBreakpoint()`, `sb()` - Set breakpoint on current line\n* `setBreakpoint(line)`, `sb(line)` - Set breakpoint on specific line\n* `setBreakpoint('fn()')`, `sb(...)` - Set breakpoint on a first statement in\nfunctions body\n* `setBreakpoint('script.js', 1)`, `sb(...)` - Set breakpoint on first line of\nscript.js\n* `clearBreakpoint`, `cb(...)` - Clear breakpoint\n-->\n\n<ul>\n<li><code>setBreakpoint()</code>, <code>sb()</code> - &#x73FE;&#x5728;&#x884C;&#x306B;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>setBreakpoint(line)</code>, <code>sb(line)</code> - &#x6307;&#x5B9A;&#x3057;&#x305F;&#x884C;&#x306B;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>setBreakpoint(&apos;fn()&apos;)</code>, <code>sb(...)</code> - &#x6307;&#x5B9A;&#x3057;&#x305F;&#x95A2;&#x6570;&#x306E;&#x5148;&#x982D;&#x884C;&#x306B;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;</li>\n<li><code>setBreakpoint(&apos;script.js&apos;, 1)</code>, <code>sb(...)</code> - &#x6307;&#x5B9A;&#x3057;&#x305F;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x884C;&#x306B;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>clearBreakpoint</code>, <code>cb(...)</code> - &#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x524A;&#x9664;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nIt is also possible to set a breakpoint in a file (module) that\nisn't loaded yet:\n-->\n\n<p>&#x307E;&#x3060;&#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x30D5;&#x30A1;&#x30A4;&#x30EB; (&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;) &#x306B;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;\n&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>% ./node debug test/fixtures/break-in-module/main.js\n&lt; debugger listening on port 5858\nconnecting to port 5858... ok\nbreak in test/fixtures/break-in-module/main.js:1\n  1 var mod = require(&apos;./mod.js&apos;);\n  2 mod.hello();\n  3 mod.hello();\ndebug&gt; setBreakpoint(&apos;mod.js&apos;, 23)\nWarning: script &apos;mod.js&apos; was not loaded yet.\n  1 var mod = require(&apos;./mod.js&apos;);\n  2 mod.hello();\n  3 mod.hello();\ndebug&gt; c\nbreak in test/fixtures/break-in-module/mod.js:23\n 21\n 22 exports.hello = function() {\n 23   return &apos;hello from module&apos;;\n 24 };\n 25\ndebug&gt;</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Breakpoints&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Info&quot;,
              &quot;name&quot;: &quot;info&quot;,
              &quot;desc&quot;: &quot;<!--\n* `backtrace`, `bt` - Print backtrace of current execution frame\n* `list(5)` - List scripts source code with 5 line context (5 lines before and\nafter)\n* `watch(expr)` - Add expression to watch list\n* `unwatch(expr)` - Remove expression from watch list\n* `watchers` - List all watchers and their values (automatically listed on each\nbreakpoint)\n* `repl` - Open debugger's repl for evaluation in debugging script's context\n-->\n\n<ul>\n<li><code>backtrace</code>, <code>bt</code> - &#x73FE;&#x5728;&#x306E;&#x5B9F;&#x884C;&#x30D5;&#x30EC;&#x30FC;&#x30E0;&#x306E;&#x30D0;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>list(5)</code> - &#x73FE;&#x5728;&#x306E;&#x884C;&#x306E;&#x524D;&#x5F8C;&#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059; (&#x4F8B;&#x3067;&#x306F;&#x524D;&#x5F8C;&#x3068;&#x3082; 5 &#x884C;&#x304C;&#x8868;&#x793A;&#x3055;&#x308C;&#x307E;&#x3059;)&#x3002;</li>\n<li><code>watch(expr)</code> - &#x5F0F;&#x3092;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>unwatch(expr)</code> - &#x5F0F;&#x3092;&#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x30EA;&#x30B9;&#x30C8;&#x304B;&#x3089;&#x524A;&#x9664;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>watchers</code> - &#x30A6;&#x30A9;&#x30C3;&#x30C1;&#x3057;&#x3066;&#x3044;&#x308B;&#x5168;&#x3066;&#x306E;&#x5F0F;&#x3068;&#x305D;&#x306E;&#x5024;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059; (&#x5404;&#x30D6;&#x30EC;&#x30FC;&#x30AF;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3067;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x8868;&#x793A;&#x3055;&#x308C;&#x307E;&#x3059;)&#x3002;</li>\n<li><code>repl</code> - &#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3068;&#x3059;&#x308B; REPL &#x3092;&#x958B;&#x304D;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Info&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Execution control&quot;,
              &quot;name&quot;: &quot;execution_control&quot;,
              &quot;desc&quot;: &quot;<!--\n* `run` - Run script (automatically runs on debugger's start)\n* `restart` - Restart script\n* `kill` - Kill script\n-->\n\n<ul>\n<li><code>run</code> - &#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059; (&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x958B;&#x59CB;&#x3059;&#x308B;&#x3068;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;)&#x3002;</li>\n<li><code>restart</code> - &#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x518D;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>kill</code> - &#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Execution control&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Various&quot;,
              &quot;name&quot;: &quot;various&quot;,
              &quot;desc&quot;: &quot;<!--\n* `scripts` - List all loaded scripts\n* `version` - Display v8's version\n-->\n\n<ul>\n<li><code>scripts</code> - &#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x5168;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x306E;&#x4E00;&#x89A7;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>version</code> - v8 &#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Various&quot;
            }
          ],
          &quot;type&quot;: &quot;misc&quot;,
          &quot;displayName&quot;: &quot;Commands reference&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Advanced Usage&quot;,
          &quot;name&quot;: &quot;advanced_usage&quot;,
          &quot;desc&quot;: &quot;<!--\nThe V8 debugger can be enabled and accessed either by starting Node with\nthe `--debug` command-line flag or by signaling an existing Node process\nwith `SIGUSR1`.\n-->\n\n<p>V8 &#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x306F; Node &#x3092;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x306E; <code>--debug</code> &#x30D5;&#x30E9;&#x30B0;&#x3067;&#x8D77;&#x52D5;&#x3057;&#x305F;&#x308A;&#x3001;&#x8D77;&#x52D5;&#x6E08;&#x307F;&#x306E; Node &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B; <code>SIGUSR1</code> &#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x308B;&#x3053;&#x3068;&#x3067;&#x3082;&#x6709;&#x52B9;&#x306B;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nOnce a process has been set in debug mode with this it can be connected to\nwith the node debugger. Either connect to the `pid` or the URI to the debugger.\nThe syntax is:\n-->\n\n<p>&#x3053;&#x308C;&#x306B;&#x3088;&#x3063;&#x3066;&#x4E00;&#x5EA6;&#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x30E2;&#x30FC;&#x30C9;&#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x3001;\n<code>pid</code> &#x307E;&#x305F;&#x306F; URI &#x306E;&#x3069;&#x3061;&#x3089;&#x3067;&#x3082; node &#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x5F62;&#x5F0F;&#x306F;:\n\n</p>\n<!--\n* `node debug -p <pid>` - Connects to the process via the `pid`\n* `node debug <URI>` - Connects to the process via the URI such as localhost:5858\n-->\n\n<ul>\n<li><code>node debug -p &lt;pid&gt;</code> - <code>pid</code> &#x3092;&#x901A;&#x3058;&#x3066;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x63A5;&#x7D9A;</li>\n<li><code>node debug &lt;URI&gt; - </code>localhost:585` &#x306E;&#x3088;&#x3046;&#x306A; URI &#x3092;&#x901A;&#x3058;&#x3066;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x63A5;&#x7D9A;</li>\n</ul>\n&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;displayName&quot;: &quot;Advanced Usage&quot;
        }
      ]
    }
  ],
  &quot;globals&quot;: [
    {
      &quot;textRaw&quot;: &quot;global&quot;,
      &quot;name&quot;: &quot;global&quot;,
      &quot;type&quot;: &quot;global&quot;,
      &quot;desc&quot;: &quot;<!--\n* {Object} The global namespace object.\n-->\n\n<ul>\n<li>{Object} &#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x306A;&#x30CD;&#x30FC;&#x30E0;&#x30B9;&#x30DA;&#x30FC;&#x30B9;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;</li>\n</ul>\n<!--\nIn browsers, the top-level scope is the global scope. That means that in\nbrowsers if you're in the global scope `var something` will define a global\nvariable. In Node this is different. The top-level scope is not the global\nscope; `var something` inside a Node module will be local to that module.\n-->\n\n<p>&#x30D6;&#x30E9;&#x30A6;&#x30B6;&#x3067;&#x306F;&#x3001;&#x30C8;&#x30C3;&#x30D7;&#x30EC;&#x30D9;&#x30EB;&#x306E;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;&#x30D6;&#x30E9;&#x30A6;&#x30B6;&#x3067;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x3067; <code>var something</code> &#x3068;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x3068;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x5909;&#x6570;&#x306B;&#x306A;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\nNode &#x3067;&#x306F;&#x7570;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30C8;&#x30C3;&#x30D7;&#x30EC;&#x30D9;&#x30EB;&#x306E;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;;\nNode &#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x5185;&#x3067;&#x306E; <code>var something</code> &#x306F;&#x305D;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3067;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
    },
    {
      &quot;textRaw&quot;: &quot;process&quot;,
      &quot;name&quot;: &quot;process&quot;,
      &quot;type&quot;: &quot;global&quot;,
      &quot;desc&quot;: &quot;<!--\nThe process object. See the [process object][] section.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;[process &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;][] &#x306E;&#x7BC0;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
    },
    {
      &quot;textRaw&quot;: &quot;console&quot;,
      &quot;name&quot;: &quot;console&quot;,
      &quot;type&quot;: &quot;global&quot;,
      &quot;desc&quot;: &quot;<!--\nUsed to print to stdout and stderr. See the [console][] section.\n-->\n\n<p>&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x304A;&#x3088;&#x3073;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x3078;&#x306E;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n[&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Class: Buffer&quot;,
      &quot;type&quot;: &quot;global&quot;,
      &quot;name&quot;: &quot;Buffer&quot;,
      &quot;desc&quot;: &quot;<!--\nUsed to handle binary data. See the [buffer section][]\n-->\n\n<p>&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6271;&#x3046;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n[&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
    },
    {
      &quot;textRaw&quot;: &quot;clearInterval(t)&quot;,
      &quot;type&quot;: &quot;global&quot;,
      &quot;name&quot;: &quot;clearInterval&quot;,
      &quot;desc&quot;: &quot;<!--\nStop a timer that was previously created with `setInterval()`. The callback\nwill not execute.\n-->\n\n<p><code>setInterval()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x4EE5;&#x524D;&#x306B;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe timer functions are global variables. See the [timers][] section.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x30FC;&#x95A2;&#x6570;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x5909;&#x6570;&#x3067;&#x3059;&#x3002;[&#x30BF;&#x30A4;&#x30DE;&#x30FC;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\n[buffer section]: buffer.html\n[module section]: modules.html\n[module system documentation]: modules.html\n[Modules]: modules.html#modules_modules\n[process object]: process.html#process_process\n[console]: console.html\n[timers]: timers.html\n-->\n\n&quot;
    },
    {
      &quot;textRaw&quot;: &quot;console&quot;,
      &quot;name&quot;: &quot;console&quot;,
      &quot;stability&quot;: 4,
      &quot;stabilityText&quot;: &quot;API Frozen&quot;,
      &quot;type&quot;: &quot;global&quot;,
      &quot;desc&quot;: &quot;<!--\nFor printing to stdout and stderr.  Similar to the console object functions\nprovided by most web browsers, here the output is sent to stdout or stderr.\n-->\n\n<p>&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3068;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x51FA;&#x529B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30D6;&#x30E9;&#x30A6;&#x30B6;&#x3067;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;\n&#x51FA;&#x529B;&#x306F;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x304B;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306B;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe console functions are synchronous when the destination is a terminal or\na file (to avoid lost messages in case of premature exit) and asynchronous\nwhen it's a pipe (to avoid blocking for long periods of time).\n-->\n\n<p>&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x95A2;&#x6570;&#x306F;&#x51FA;&#x529B;&#x5148;&#x304C;&#x30BF;&#x30FC;&#x30DF;&#x30CA;&#x30EB;&#x307E;&#x305F;&#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x5834;&#x5408;&#x306F;&#x540C;&#x671F;\n(&#x65E9;&#x3059;&#x304E;&#x308B;&#x7D42;&#x4E86;&#x306B;&#x3088;&#x308A;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x304C;&#x5931;&#x308F;&#x308C;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;)&#x3001;\n&#x30D1;&#x30A4;&#x30D7;&#x306E;&#x5834;&#x5408;&#x306F;&#x975E;&#x540C;&#x671F; (&#x9577;&#x6642;&#x9593;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;) &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThat is, in the following example, stdout is non-blocking while stderr\nis blocking:\n-->\n\n<p>&#x3064;&#x307E;&#x308A;&#x3001;&#x4EE5;&#x4E0B;&#x306E;&#x4F8B;&#x3067;&#x306F;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x306F;&#x30CE;&#x30F3;&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x3067;&#x3059;&#x304C;&#x3001;\n&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x3067;&#x3059;:\n\n</p>\n<pre><code>$ node script.js 2&gt; error.log | tee info.log</code></pre>\n<!--\nIn daily use, the blocking/non-blocking dichotomy is not something you\nshould worry about unless you log huge amounts of data.\n-->\n\n<p>&#x901A;&#x5E38;&#x306E;&#x4F7F;&#x7528;&#x3067;&#x306F;&#x3001;&#x81A8;&#x5927;&#x306A;&#x91CF;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8A18;&#x9332;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;\n&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#xFF0F;&#x30CE;&#x30F3;&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x306E;&#x3069;&#x3061;&#x3089;&#x306A;&#x306E;&#x304B;&#x3092;&#x5FC3;&#x914D;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;console.log([data], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;log&quot;,
          &quot;desc&quot;: &quot;<!--\nPrints to stdout with newline. This function can take multiple arguments in a\n`printf()`-like way. Example:\n-->\n\n<p>&#x6539;&#x884C;&#x3092;&#x4F34;&#x3063;&#x3066;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3078;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; <code>printf()</code> &#x306E;&#x3088;&#x3046;&#x306B;&#x8907;&#x6570;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;count: %d&apos;, count);</code></pre>\n<!--\nIf formatting elements are not found in the first string then `util.inspect`\nis used on each argument.  See [util.format()][] for more information.\n-->\n\n<p>&#x6700;&#x521D;&#x306E;&#x5F15;&#x6570;&#x6587;&#x5B57;&#x5217;&#x304B;&#x3089;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x8981;&#x7D20;&#x304C;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n<code>util.inspect</code> &#x304C;&#x5404;&#x5F15;&#x6570;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F; [util.format()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.info([data], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;info&quot;,
          &quot;desc&quot;: &quot;<!--\nSame as `console.log`.\n-->\n\n<p><code>console.log</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.error([data], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;error&quot;,
          &quot;desc&quot;: &quot;<!--\nSame as `console.log` but prints to stderr.\n-->\n\n<p><code>console.log</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306B;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.warn([data], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;warn&quot;,
          &quot;desc&quot;: &quot;<!--\nSame as `console.error`.\n-->\n\n<p><code>console.error()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.dir(obj)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;dir&quot;,
          &quot;desc&quot;: &quot;<!--\nUses `util.inspect` on `obj` and prints resulting string to stdout.\n-->\n\n<p><code>util.inspect</code> &#x3092;&#x4F7F;&#x3063;&#x3066; <code>obj</code> &#x3092;&#x6587;&#x5B57;&#x5217;&#x5316;&#x3057;&#x305F;&#x7D50;&#x679C;&#x3092;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x306B;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;obj&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.time(label)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;time&quot;,
          &quot;desc&quot;: &quot;<!--\nMark a time.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;label&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.timeEnd(label)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;timeEnd&quot;,
          &quot;desc&quot;: &quot;<!--\nFinish timer, record output. Example:\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x3001;&#x7D50;&#x679C;&#x3092;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>console.time(&apos;100-elements&apos;);\nfor (var i = 0; i &lt; 100; i++) {\n  ;\n}\nconsole.timeEnd(&apos;100-elements&apos;);</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;label&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.trace(label)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;trace&quot;,
          &quot;desc&quot;: &quot;<!--\nPrint a stack trace to stderr of the current position.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3092;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306B;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;label&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.assert(expression, [message])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;assert&quot;,
          &quot;desc&quot;: &quot;<!--\nSame as [assert.ok()][] where if the `expression` evaluates as `false` throw an\nAssertionError with `message`.\n-->\n\n<p>[assert.ok()][] &#x3068;&#x540C;&#x69D8;&#x306B;&#x3001;&#x3082;&#x3057; <code>expression</code> &#x304C; <code>false</code> &#x306B;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;\n<code>message</code> &#x3092;&#x6301;&#x3064; AssertionError &#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;expression&quot;
                },
                {
                  &quot;name&quot;: &quot;message&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ]
    },
    {
      &quot;textRaw&quot;: &quot;process&quot;,
      &quot;name&quot;: &quot;process&quot;,
      &quot;type&quot;: &quot;global&quot;,
      &quot;desc&quot;: &quot;<!--\nThe `process` object is a global object and can be accessed from anywhere.\nIt is an instance of [EventEmitter][].\n-->\n\n<p><code>process</code> &#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3001;&#x3069;&#x3053;&#x304B;&#x3089;&#x3067;&#x3082;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; [EventEmitter][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
      &quot;events&quot;: [
        {
          &quot;textRaw&quot;: &quot;Event: &apos;exit&apos;&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;name&quot;: &quot;exit&quot;,
          &quot;desc&quot;: &quot;<!--\nEmitted when the process is about to exit. There is no way to prevent the\nexiting of the event loop at this point, and once all `exit` listeners have\nfinished running the process will exit. Therefore you **must** only perform\n**synchronous** operations in this handler. This is a good hook to perform\nchecks on the module's state (like for unit tests). The callback takes one\nargument, the code the process is exiting with.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x4F4D;&#x7F6E;&#x304B;&#x3089;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x3092;&#x629C;&#x3051;&#x308B;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x65B9;&#x6CD5;&#x306F;&#x306A;&#x304F;&#x3001;&#x5168;&#x3066;&#x306E; <code>&apos;exit&apos;</code>\n&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x306E;&#x5B9F;&#x884C;&#x304C;&#x5B8C;&#x4E86;&#x3059;&#x308B;&#x3068;&#x3001;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5F93;&#x3063;&#x3066;&#x3001;&#x3053;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3067;&#x3067;&#x304D;&#x308B;&#x3053;&#x3068;&#x306F; <strong>&#x540C;&#x671F;</strong> &#x64CD;&#x4F5C; <strong>&#x3060;&#x3051;</strong> &#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; (&#x30E6;&#x30CB;&#x30C3;&#x30C8;&#x30C6;&#x30B9;&#x30C8;&#x306E;&#x3088;&#x3046;&#x306B;) &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x72B6;&#x614B;&#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x306E;&#x306B;&#x9069;&#x3057;&#x305F;\n&#x30D5;&#x30C3;&#x30AF;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x552F;&#x4E00;&#x306E;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of listening for `exit`:\n-->\n\n<p><code>exit</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.on(&apos;exit&apos;, function(code) {\n  // do *NOT* do this\n  setTimeout(function() {\n    console.log(&apos;This will not run&apos;);\n  }, 0);\n  console.log(&apos;About to exit with code:&apos;, code);\n});</code></pre>\n&quot;,
          &quot;params&quot;: []
        },
        {
          &quot;textRaw&quot;: &quot;Event: &apos;uncaughtException&apos;&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;name&quot;: &quot;uncaughtException&quot;,
          &quot;desc&quot;: &quot;<!--\nEmitted when an exception bubbles all the way back to the event loop. If a\nlistener is added for this exception, the default action (which is to print\na stack trace and exit) will not occur.\n-->\n\n<p>&#x767A;&#x751F;&#x3057;&#x305F;&#x4F8B;&#x5916;&#x304C;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x307E;&#x3067;&#x305F;&#x3069;&#x308A;&#x7740;&#x3044;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x3053;&#x306E;&#x4F8B;&#x5916;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x304C;&#x52A0;&#x3048;&#x3089;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;&#x3001;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x52D5;&#x4F5C; (&#x305D;&#x308C;&#x306F;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3092;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;) &#x306F;&#x8D77;&#x3053;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nExample of listening for `uncaughtException`:\n-->\n\n<p><code>uncaughtException</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.on(&apos;uncaughtException&apos;, function(err) {\n  console.log(&apos;Caught exception: &apos; + err);\n});\n\nsetTimeout(function() {\n  console.log(&apos;This will still run.&apos;);\n}, 500);\n\n// Intentionally cause an exception, but don&apos;t catch it.\nnonexistentFunc();\nconsole.log(&apos;This will not run.&apos;);</code></pre>\n<!--\nNote that `uncaughtException` is a very crude mechanism for exception\nhandling and may be removed in the future.\n-->\n\n<p><code>uncaughtException</code> &#x306F;&#x4F8B;&#x5916;&#x3092;&#x6271;&#x3046;&#x3068;&#x3066;&#x3082;&#x8352;&#x524A;&#x308A;&#x306A;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x3067;&#x3042;&#x308A;&#x3001;\n&#x5C06;&#x6765;&#x524A;&#x9664;&#x3055;&#x308C;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nDon't use it, use [domains](domain.html) instead. If you do use it, restart\nyour application after every unhandled exception!\n-->\n\n<p>&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;<a href="\&quot;domain.html\&quot;">&#x30C9;&#x30E1;&#x30A4;&#x30F3;</a> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x3092;&#x4F7F;&#x3048;&#x3070;&#x3001;&#x6355;&#x307E;&#x3048;&#x3089;&#x308C;&#x306A;&#x3044;&#x4F8B;&#x5916;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x5F8C;&#x3067;&#x3082;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3092;\n&#x518D;&#x958B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#xFF01;\n\n</p>\n<!--\nDo *not* use it as the node.js equivalent of `On Error Resume Next`. An\nunhandled exception means your application - and by extension node.js itself -\nis in an undefined state. Blindly resuming means *anything* could happen.\n-->\n\n<p>&#x3053;&#x308C;&#x3092; Node.js &#x306B;&#x304A;&#x3051;&#x308B; <code>On Error Resume Next</code> &#x3068;&#x3057;&#x3066; <em>&#x4F7F;&#x308F;&#x306A;&#x3044;&#x3067;</em> &#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x6355;&#x307E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x4F8B;&#x5916;&#x306F;&#x3001;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;\n- &#x304A;&#x3088;&#x3073; Node.js &#x81EA;&#x8EAB;&#x306E;&#x62E1;&#x5F35; - &#x304C;&#x672A;&#x5B9A;&#x7FA9;&#x306E;&#x72B6;&#x614B;&#x3068;&#x306A;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3084;&#x307F;&#x304F;&#x3082;&#x306A;&#x518D;&#x958B;&#x306F; <em>&#x3069;&#x3093;&#x306A;&#x3053;&#x3068;&#x3067;&#x3082;</em> &#x8D77;&#x3053;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThink of resuming as pulling the power cord when you are upgrading your system.\nNine out of ten times nothing happens - but the 10th time, your system is bust.\n-->\n\n<p>&#x96FB;&#x6E90;&#x3092;&#x5F15;&#x304D;&#x629C;&#x304D;&#x306A;&#x304C;&#x3089;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x30A2;&#x30C3;&#x30D7;&#x30B0;&#x30EC;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;\n&#x60F3;&#x50CF;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n10 &#x56DE;&#x4E2D; 9 &#x56DE;&#x306F;&#x4F55;&#x3082;&#x8D77;&#x3053;&#x308A;&#x307E;&#x305B;&#x3093;\n- &#x3057;&#x304B;&#x3057; 10 &#x56DE;&#x76EE;&#x306B;&#x306F;&#x305D;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306F;&#x4F7F;&#x3048;&#x306A;&#x304F;&#x306A;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nYou have been warned.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x8B66;&#x544A;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;params&quot;: []
        },
        {
          &quot;textRaw&quot;: &quot;Signal Events&quot;,
          &quot;name&quot;: &quot;SIGINT, SIGHUP, etc.&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;desc&quot;: &quot;<!--\nEmitted when the processes receives a signal. See sigaction(2) for a list of\nstandard POSIX signal names such as SIGINT, SIGHUP, etc.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\nSIGINT&#x3001;SIGHUP&#x3001;&#x305D;&#x306E;&#x4ED6;&#x306E; POSIX &#x6A19;&#x6E96;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x540D;&#x306E;&#x4E00;&#x89A7;&#x306B;&#x3064;&#x3044;&#x3066; &#x306F; sigaction(2) &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExample of listening for `SIGINT`:\n-->\n\n<p><code>SIGINT</code>&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>// Start reading from stdin so we don&apos;t exit.\nprocess.stdin.resume();\n\nprocess.on(&apos;SIGINT&apos;, function() {\n  console.log(&apos;Got SIGINT.  Press Control-D to exit.&apos;);\n});</code></pre>\n<!--\nAn easy way to send the `SIGINT` signal is with `Control-C` in most terminal\nprograms.\n-->\n\n<p>&#x591A;&#x304F;&#x306E;&#x7AEF;&#x672B;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067;&#x7C21;&#x5358;&#x306B; <code>SIGINT</code> &#x3092;&#x9001;&#x308B;&#x65B9;&#x6CD5;&#x306F; <code>Control-C</code> &#x3092;&#x62BC;&#x3059;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nNote:\n-->\n\n<p>&#x6CE8;&#x610F;:\n\n</p>\n<!--\n- `SIGUSR1` is reserved by node.js to start the debugger.  It's possible to\n  install a listener but that won't stop the debugger from starting.\n- `SIGTERM` and `SIGINT` have default handlers on non-Windows platforms that resets\n  the terminal mode before exiting with code `128 + signal number`. If one of\n  these signals has a listener installed, its default behaviour will be removed\n  (node will no longer exit).\n- `SIGPIPE` is ignored by default, it can have a listener installed.\n- `SIGHUP` is generated on Windows when the console window is closed, and on other\n  platforms under various similar conditions, see signal(7). It can have a\n  listener installed, however node will be unconditionally terminated by Windows\n  about 10 seconds later. On non-Windows platforms, the default behaviour of\n  `SIGHUP` is to terminate node, but once a listener has been installed its\n  default behaviour will be removed.\n- `SIGTERM` is not supported on Windows, it can be listened on.\n- `SIGINT` from the terminal is supported on all platforms, and can usually be\n  generated with `CTRL+C` (though this may be configurable). It is not generated\n  when terminal raw mode is enabled.\n- `SIGBREAK` is delivered on Windows when `CTRL+BREAK` is pressed, on non-Windows\n  platforms it can be listened on, but there is no way to send or generate it.\n- `SIGWINCH` is delivered when the console has been resized. On Windows, this will\n  only happen on write to the console when the cursor is being moved, or when a\n  readable tty is used in raw mode.\n- `SIGKILL` cannot have a listener installed, it will unconditionally terminate\n  node on all platforms.\n- `SIGSTOP` cannot have a listener installed.\n-->\n\n<ul>\n<li><code>SIGUSR1</code> &#x306F; Node.js &#x304C;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4E88;&#x7D04;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x3059;&#x304C;&#x3001;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x306E;&#x8D77;&#x52D5;&#x3092;&#x6B62;&#x3081;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n<li><code>SIGTERM</code> &#x304A;&#x3088;&#x3073; <code>SIGINT</code> &#x306F;&#x3001;Windows &#x4EE5;&#x5916;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x306F;\n<code>128</code> + &#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x756A;&#x53F7;&#x3067;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x524D;&#x306B;&#x30BF;&#x30FC;&#x30DF;&#x30CA;&#x30EB;&#x306E;&#x30E2;&#x30FC;&#x30C9;&#x3092;&#x30EA;&#x30BB;&#x30C3;&#x30C8;&#x3059;&#x308B;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x3069;&#x3061;&#x3089;&#x304B;&#x306B;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x767B;&#x9332;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;\n&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059; (node &#x306F;&#x7D42;&#x4E86;&#x3057;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;)&#x3002;</li>\n<li><code>SIGPIPE</code> &#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x3001;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGHUP</code> &#x306F; Windows &#x3067;&#x306F;&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x30A6;&#x30A3;&#x30F3;&#x30C9;&#x30A6;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x3068;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4ED6;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x3082;&#x540C;&#x69D8;&#x306E;&#x6761;&#x4EF6;&#x3067;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;&#x8A73;&#x7D30;&#x306F; signal(7)\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x3059;&#x304C;&#x3001;Windows &#x3067;&#x306F;&#x7D04; 10 &#x79D2;&#x5F8C;&#x306B; node &#x306F;&#x7121;&#x6761;&#x4EF6;&#x306B;\nWindows &#x306B;&#x3088;&#x3063;&#x3066;&#x7D42;&#x4E86;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\nWindows &#x4EE5;&#x5916;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x306F;&#x3001;<code>SIGHUP</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;\nnode&#x3092;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x304C;&#x3001;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3068;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;\n&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGTERM</code> &#x306F; Windows &#x3067;&#x306F;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x3001;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;</li>\n<li>&#x7AEF;&#x672B;&#x304B;&#x3089;&#x306E; <code>SIGINT</code> &#x306F;&#x5168;&#x3066;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3001;&#x901A;&#x5E38; <code>CTRL+C</code>\n(&#x304A;&#x305D;&#x3089;&#x304F;&#x8A2D;&#x5B9A;&#x53EF;&#x80FD;&#x3067;&#x3057;&#x3087;&#x3046;) &#x306B;&#x3088;&#x3063;&#x3066;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30BF;&#x30FC;&#x30DF;&#x30CA;&#x30EB;&#x304C; raw &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x5834;&#x5408;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n<li><code>SIGBREAK</code> &#x306F; Windows &#x306B;&#x304A;&#x3044;&#x3066; <code>CTRL+BREAK</code> &#x304C;&#x63A8;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\nWindows &#x4EE5;&#x5916;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x3082;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x767B;&#x9332;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x305D;&#x308C;&#x3092;&#x751F;&#x6210;&#x3057;&#x305F;&#x308A;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n<li><code>SIGWINCH</code> &#x306F;&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x304C;&#x5909;&#x66F4;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\nWindows &#x3067;&#x306F;&#x3001;&#x30AB;&#x30FC;&#x30BD;&#x30EB;&#x304C;&#x79FB;&#x52D5;&#x3059;&#x308B;&#x304B;&#x3001;tty &#x304C; raw &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x5834;&#x5408;&#x306B;&#x3001;\n&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x3078;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3068;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGKILL</code> &#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x7D44;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x5168;&#x3066;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067; node &#x3092;&#x7121;&#x6761;&#x4EF6;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>SIGSTOP</code> &#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x7D44;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n</ul>\n<!--\nNote that Windows does not support sending Signals, but node offers some\nemulation with `process.kill()`, and `child_process.kill()`:\n- Sending signal `0` can be used to search for the existence of a process\n- Sending `SIGINT`, `SIGTERM`, and `SIGKILL` cause the unconditional exit of the\n  target process.\n-->\n\n<p>Windows &#x306F;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x9001;&#x4FE1;&#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;node&#x306F;<code>process.kill()</code> &#x3084;\n<code>child_process.kill()</code> &#x3092;&#x30A8;&#x30DF;&#x30E5;&#x30EC;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<ul>\n<li>&#x30B7;&#x30B0;&#x30CA;&#x30EB; <code>0</code> &#x306F;&#x65E2;&#x5B58;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x691C;&#x7D22;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;</li>\n<li><code>SIGINT</code>&#x3001;<code>SIGTERM</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>SIGKILL</code> &#x306F;&#x3001;&#x30BF;&#x30FC;&#x30B2;&#x30C3;&#x30C8;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7121;&#x6761;&#x4EF6;&#x306B;\n&#x7D42;&#x4E86;&#x3059;&#x308B;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
          &quot;params&quot;: []
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;process.stdout&quot;,
          &quot;name&quot;: &quot;stdout&quot;,
          &quot;desc&quot;: &quot;<!--\nA `Writable Stream` to `stdout`.\n-->\n\n<p><code>stdout</code> &#x306B;&#x5BFE;&#x3059;&#x308B; <code>Writable Stream</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: the definition of `console.log`\n-->\n\n<p>&#x4F8B;: <code>console.log</code> &#x306E;&#x5B9A;&#x7FA9;\n\n</p>\n<pre><code>console.log = function(d) {\n  process.stdout.write(d + &apos;\\n&apos;);\n};</code></pre>\n<!--\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.\n-->\n\n<p><code>process.stderr</code> &#x3068; <code>process.stdout</code> &#x306F; Node &#x306E;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x7570;&#x306A;&#x308A;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x3078;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306F;&#x901A;&#x5E38;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n- They are blocking in the case that they refer to regular files or TTY file\n  descriptors.\n- In the case they refer to pipes:\n  - They are blocking in Linux/Unix.\n  - They are non-blocking like other streams in Windows.\n-->\n\n<ul>\n<li>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;&#x901A;&#x5E38;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3084; TTY &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;:<ul>\n<li>Linux/Unix &#x3067;&#x306F;&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>Windows &#x3067;&#x306F;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x540C;&#x69D8;&#x306B;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n</ul>\n</li>\n</ul>\n<!--\nTo check if Node is being run in a TTY context, read the `isTTY` property\non `process.stderr`, `process.stdout`, or `process.stdin`:\n-->\n\n<p>Node &#x304C; TTY &#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;\n<code>process.stderr</code>, <code>process.stdout</code>, &#x307E;&#x305F;&#x306F; <code>process.stdin</code> &#x306E;\n<code>isTTY</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>$ node -p &quot;Boolean(process.stdin.isTTY)&quot;\ntrue\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\nfalse\n\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse</code></pre>\n<!--\nSee [the tty docs](tty.html#tty_tty) for more information.\n-->\n\n<p>&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F; <a href="\&quot;tty.html#tty_tty\&quot;">the tty docs</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.stderr&quot;,
          &quot;name&quot;: &quot;stderr&quot;,
          &quot;desc&quot;: &quot;<!--\nA writable stream to stderr.\n\n`process.stderr` and `process.stdout` are unlike other streams in Node in\nthat writes to them are usually blocking.\n-->\n\n<p><code>stderr</code> &#x306B;&#x5BFE;&#x3059;&#x308B; <code>Writable Stream</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>process.stderr</code> &#x3068; <code>process.stdout</code> &#x306F; Node &#x306E;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x7570;&#x306A;&#x308A;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x3078;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306F;&#x901A;&#x5E38;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n- They are blocking in the case that they refer to regular files or TTY file\n  descriptors.\n- In the case they refer to pipes:\n  - They are blocking in Linux/Unix.\n  - They are non-blocking like other streams in Windows.\n-->\n\n<ul>\n<li>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;&#x901A;&#x5E38;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3084; TTY &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;:<ul>\n<li>Linux/Unix &#x3067;&#x306F;&#x305D;&#x308C;&#x3089;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li>Windows &#x3067;&#x306F;&#x4ED6;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x540C;&#x69D8;&#x306B;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n</ul>\n</li>\n</ul>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.stdin&quot;,
          &quot;name&quot;: &quot;stdin&quot;,
          &quot;desc&quot;: &quot;<!--\nA `Readable Stream` for stdin. \n-->\n\n<p>&#x6A19;&#x6E96;&#x5165;&#x529B;&#x306B;&#x5BFE;&#x3059;&#x308B; <code>Readable Stream</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of opening standard input and listening for both events:\n-->\n\n<p>&#x6A19;&#x6E96;&#x5165;&#x529B;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x3066;&#x4E8C;&#x3064;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.stdin.setEncoding(&apos;utf8&apos;);\n\nprocess.stdin.on(&apos;readable&apos;, function(chunk) {\n  var chunk = process.stdin.read();\n  if (chunk !== null) {\n    process.stdout.write(&apos;data: &apos; + chunk);\n  }\n});\n\nprocess.stdin.on(&apos;end&apos;, function() {\n  process.stdout.write(&apos;end&apos;);\n});</code></pre>\n<!--\nAs a Stream, `process.stdin` can also be used in \"old\" mode that is compatible\nwith scripts written for node prior v0.10.\nFor more information see\n[Stream compatibility](stream.html#stream_compatibility_with_older_node_versions).\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3042;&#x308B;&#x305F;&#x3081;&#x3001;<code>process.stdin</code> &#x306F; v0.10 &#x4EE5;&#x524D;&#x306E; node &#x5411;&#x3051;&#x306B;&#x66F8;&#x304B;&#x308C;&#x305F;\n&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3068;&#x4E92;&#x63DB;&#x6027;&#x306E;&#x3042;&#x308B; &quot;old&quot; &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306A;&#x60C5;&#x5831;&#x306F;\n<a href="\&quot;stream.html#stream_compatibility_with_older_node_versions\&quot;">Stream compatibility</a>\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nIn \"old\" Streams mode the stdin stream is paused by default, so one\nmust call `process.stdin.resume()` to read from it. Note also that calling\n`process.stdin.resume()` itself would switch stream to \"old\" mode.\n-->\n\n<p>&quot;old&quot; &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x306F;&#x6A19;&#x6E96;&#x5165;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x4E2D;&#x65AD;&#x72B6;&#x614B;&#x306E;&#x305F;&#x3081;&#x3001;\n&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x306B;&#x306F; <code>process.stdin.resume()</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x304C;&#x5FC5;&#x9808;&#x3067;&#x3059;&#x3002;\n<code>process.stdin.resume()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x305D;&#x308C;&#x81EA;&#x4F53;&#x304C;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&quot;old&quot; &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nIf you are starting a new project you should prefer a more recent \"new\" Streams\nmode over \"old\" one.\n-->\n\n<p>&#x3082;&#x3057;&#x65B0;&#x3057;&#x3044;&#x30D7;&#x30ED;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x59CB;&#x3081;&#x308B;&#x306A;&#x3089;&#x3001;&quot;old&quot; &#x3088;&#x308A;&#x3082;\n&quot;new&quot; &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x597D;&#x3080;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.argv&quot;,
          &quot;name&quot;: &quot;argv&quot;,
          &quot;desc&quot;: &quot;<!--\nAn array containing the command line arguments.  The first element will be\n'node', the second element will be the name of the JavaScript file.  The\nnext elements will be any additional command line arguments.\n-->\n\n<p>&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x5F15;&#x6570;&#x3092;&#x542B;&#x3080;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x6700;&#x521D;&#x306E;&#x8981;&#x7D20;&#x306F; &apos;node&apos;&#x3001;2 &#x756A;&#x76EE;&#x306E;&#x8981;&#x7D20;&#x306F; JavaScript &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x540D;&#x524D;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x5F8C;&#x306E;&#x8981;&#x7D20;&#x306F;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x306E;&#x8FFD;&#x52A0;&#x306E;&#x5F15;&#x6570;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>// print process.argv\nprocess.argv.forEach(function(val, index, array) {\n  console.log(index + &apos;: &apos; + val);\n});</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x51FA;&#x529B;&#x3055;&#x308C;&#x307E;&#x3059;:\n\n</p>\n<pre><code>$ node process-2.js one two=three four\n0: node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.execPath&quot;,
          &quot;name&quot;: &quot;execPath&quot;,
          &quot;desc&quot;: &quot;<!--\nThis is the absolute pathname of the executable that started the process.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x3088;&#x3063;&#x3066;&#x958B;&#x59CB;&#x3055;&#x308C;&#x305F;&#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>/usr/local/bin/node</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.execArgv&quot;,
          &quot;name&quot;: &quot;execArgv&quot;,
          &quot;desc&quot;: &quot;<!--\nThis is the set of node-specific command line options from the\nexecutable that started the process.  These options do not show up in\n`process.argv`, and do not include the node executable, the name of\nthe script, or any options following the script name. These options\nare useful in order to spawn child processes with the same execution\nenvironment as the parent.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x8D77;&#x52D5;&#x6642;&#x306B;&#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; node &#x56FA;&#x6709;&#x306E;\n&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x30FB;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x7FA4;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F; <code>process.argv</code> &#x306B;&#x306F;&#x73FE;&#x308C;&#x305A;&#x3001;node &#x306E;&#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3084;\n&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x540D;&#x3001;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x540D;&#x306B;&#x7D9A;&#x304F;&#x3069;&#x3093;&#x306A;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3082;&#x542B;&#x307E;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x540C;&#x3058;&#x5B9F;&#x884C;&#x74B0;&#x5883;&#x3092;&#x6301;&#x3064;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n&#x5F79;&#x306B;&#x7ACB;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>$ node --harmony script.js --version</code></pre>\n<!--\nresults in process.execArgv:\n-->\n\n<p><code>process.execArgv</code> &#x306E;&#x7D50;&#x679C;:\n\n</p>\n<pre><code>[&apos;--harmony&apos;]</code></pre>\n<!--\nand process.argv:\n-->\n\n<p>&#x305D;&#x3057;&#x3066; <code>process.argv</code> &#x306E;&#x7D50;&#x679C;:\n\n</p>\n<pre><code>[&apos;/usr/local/bin/node&apos;, &apos;script.js&apos;, &apos;--version&apos;]</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.env&quot;,
          &quot;name&quot;: &quot;env&quot;,
          &quot;desc&quot;: &quot;<!--\nAn object containing the user environment. See environ(7).\n-->\n\n<p>&#x30E6;&#x30FC;&#x30B6;&#x306E;&#x74B0;&#x5883;&#x3092;&#x542B;&#x3080;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;environ(7) &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.version&quot;,
          &quot;name&quot;: &quot;version&quot;,
          &quot;desc&quot;: &quot;<!--\nA compiled-in property that exposes `NODE_VERSION`.\n-->\n\n<p><code>NODE_VERSION</code> &#x3092;&#x63D0;&#x793A;&#x3059;&#x308B;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x6E08;&#x307F;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;Version: &apos; + process.version);</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.versions&quot;,
          &quot;name&quot;: &quot;versions&quot;,
          &quot;desc&quot;: &quot;<!--\nA property exposing version strings of node and its dependencies.\n-->\n\n<p>node &#x3068;&#x4F9D;&#x5B58;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x6587;&#x5B57;&#x5217;&#x3092;&#x63D0;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(process.versions);</code></pre>\n<!--\nWill print something like:\n-->\n\n<p>&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x3088;&#x3046;&#x306B;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>{ http_parser: &apos;1.0&apos;,\n  node: &apos;0.10.4&apos;,\n  v8: &apos;3.14.5.8&apos;,\n  ares: &apos;1.9.0-DEV&apos;,\n  uv: &apos;0.10.3&apos;,\n  zlib: &apos;1.2.3&apos;,\n  modules: &apos;11&apos;,\n  openssl: &apos;1.0.1e&apos; }</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.config&quot;,
          &quot;name&quot;: &quot;config&quot;,
          &quot;desc&quot;: &quot;<!--\nAn Object containing the JavaScript representation of the configure options\nthat were used to compile the current node executable. This is the same as\nthe \"config.gypi\" file that was produced when running the `./configure` script.\n\nAn example of the possible output looks like:\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;node&#x5B9F;&#x884C;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x305F;&#x969B;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x305F; configure &#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;\nJavaScript &#x3067;&#x8868;&#x73FE;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4FDD;&#x6301;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>./configure</code> &#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x5B9F;&#x884C;&#x3057;&#x305F;&#x969B;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F; &quot;cofnig.gypi&quot;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x5B9F;&#x969B;&#x306E;&#x51FA;&#x529B;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code>{ target_defaults:\n   { cflags: [],\n     default_configuration: &apos;Release&apos;,\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   { host_arch: &apos;x64&apos;,\n     node_install_npm: &apos;true&apos;,\n     node_prefix: &apos;&apos;,\n     node_shared_cares: &apos;false&apos;,\n     node_shared_http_parser: &apos;false&apos;,\n     node_shared_libuv: &apos;false&apos;,\n     node_shared_v8: &apos;false&apos;,\n     node_shared_zlib: &apos;false&apos;,\n     node_use_dtrace: &apos;false&apos;,\n     node_use_openssl: &apos;true&apos;,\n     node_shared_openssl: &apos;false&apos;,\n     strict_aliasing: &apos;true&apos;,\n     target_arch: &apos;x64&apos;,\n     v8_use_snapshot: &apos;true&apos; } }</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.pid&quot;,
          &quot;name&quot;: &quot;pid&quot;,
          &quot;desc&quot;: &quot;<!--\nThe PID of the process.\n-->\n\n<p>&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; PID &#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;This process is pid &apos; + process.pid);</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.title&quot;,
          &quot;name&quot;: &quot;title&quot;,
          &quot;desc&quot;: &quot;<!--\nGetter/setter to set what is displayed in 'ps'.\n-->\n\n<p>&apos;ps&apos; &#x3067;&#x3069;&#x306E;&#x3088;&#x3046;&#x8868;&#x793A;&#x3055;&#x308C;&#x308B;&#x304B;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E; getter/setter &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nWhen used as a setter, the maximum length is platform-specific and probably\nshort.\n-->\n\n<p>setter &#x304C;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;&#x305D;&#x306E;&#x6700;&#x5927;&#x9577;&#x306F;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x4F9D;&#x5B58;&#x3067;&#x3001;&#x304A;&#x305D;&#x3089;&#x304F;&#x77ED;&#x3044;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nOn Linux and OS X, it's limited to the size of the binary name plus the\nlength of the command line arguments because it overwrites the argv memory.\n-->\n\n<p>Linux &#x3068; OS X &#x3067;&#x306F;&#x3001;&#x305D;&#x308C;&#x306F; argv &#x306E;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x4E0A;&#x66F8;&#x304D;&#x3059;&#x308B;&#x305F;&#x3081;&#x3001;\n&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x540D;&#x306B;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x5F15;&#x6570;&#x3092;&#x52A0;&#x3048;&#x305F;&#x3082;&#x306E;&#x306B;&#x5236;&#x9650;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nv0.8 allowed for longer process title strings by also overwriting the environ\nmemory but that was potentially insecure/confusing in some (rather obscure)\ncases.\n-->\n\n<p>v0.8 &#x306F;&#x3088;&#x308A;&#x9577;&#x3044;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x30BF;&#x30A4;&#x30C8;&#x30EB;&#x6587;&#x5B57;&#x5217;&#x3067;&#x74B0;&#x5883;&#x3092;&#x4E0A;&#x66F8;&#x304D;&#x3057;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x304C;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E; (&#x306F;&#x3063;&#x304D;&#x308A;&#x3057;&#x306A;&#x3044;) &#x30B1;&#x30FC;&#x30B9;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;\n&#x6F5C;&#x5728;&#x7684;&#x306B;&#x5371;&#x967A;&#x3067;&#x6DF7;&#x4E71;&#x3057;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.arch&quot;,
          &quot;name&quot;: &quot;arch&quot;,
          &quot;desc&quot;: &quot;<!--\nWhat processor architecture you're running on: `'arm'`, `'ia32'`, or `'x64'`.\n-->\n\n<p>&#x5B9F;&#x884C;&#x3057;&#x3066;&#x3044;&#x308B;&#x30D7;&#x30ED;&#x30BB;&#x30C3;&#x30B5;&#x306E;&#x30A2;&#x30FC;&#x30AD;&#x30C6;&#x30AF;&#x30C1;&#x30E3;: <code>&apos;arm&apos;</code>&#x3001;<code>&apos;ia32&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F;\n<code>&apos;x64&apos;</code>&#x3002;\n\n</p>\n<pre><code>console.log(&apos;This processor architecture is &apos; + process.arch);</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;process.platform&quot;,
          &quot;name&quot;: &quot;platform&quot;,
          &quot;desc&quot;: &quot;<!--\nWhat platform you're running on:\n`'darwin'`, `'freebsd'`, `'linux'`, `'sunos'` or `'win32'`\n-->\n\n<p>&#x3069;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x52D5;&#x3044;&#x3066;&#x3044;&#x308B;&#x304B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;:\n<code>&apos;darwin&apos;</code>&#x3001;<code>&apos;freebsd&apos;</code>&#x3001;<code>&apos;linux&apos;</code>&#x3001;<code>&apos;sunos&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;win32&apos;</code>\n\n</p>\n<pre><code>console.log(&apos;This platform is &apos; + process.platform);</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;`maxTickDepth` {Number} Default = 1000 &quot;,
          &quot;name&quot;: &quot;maxTickDepth&quot;,
          &quot;desc&quot;: &quot;<!--\nCallbacks passed to `process.nextTick` will *usually* be called at the\nend of the current flow of execution, and are thus approximately as fast\nas calling a function synchronously.  Left unchecked, this would starve\nthe event loop, preventing any I/O from occurring.\n-->\n\n<p><code>process.nextTick()</code> &#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x3001;<em>&#x901A;&#x5E38;</em> &#x73FE;&#x5728;&#x306E;&#x5B9F;&#x884C;&#x30D5;&#x30ED;&#x30FC;&#x306E;\n&#x5F8C;&#x3067;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3001;&#x305D;&#x308C;&#x306F;&#x95A2;&#x6570;&#x3092;&#x540C;&#x671F;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3059;&#x306E;&#x3068;&#x540C;&#x3058;&#x304F;&#x3089;&#x3044;&#x9AD8;&#x901F;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3092;&#x653E;&#x7F6E;&#x3059;&#x308B;&#x3068;&#x3042;&#x3089;&#x3086;&#x308B; I/O &#x304C;&#x963B;&#x307E;&#x308C;&#x3001;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x306F;&#x98E2;&#x9913;&#x72B6;&#x614B;&#x3068;&#x306A;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nConsider this code:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x8003;&#x3048;&#x3066;&#x307F;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>process.nextTick(function foo() {\n  process.nextTick(foo);\n});</code></pre>\n<!--\nIn order to avoid the situation where Node is blocked by an infinite\nloop of recursive series of nextTick calls, it defers to allow some I/O\nto be done every so often.\n-->\n\n<p>nextTick &#x306E;&#x518D;&#x5E30;&#x304C;&#x9023;&#x9396;&#x3059;&#x308B;&#x7121;&#x9650;&#x30EB;&#x30FC;&#x30D7;&#x306B;&#x3088;&#x3063;&#x3066; Node &#x304C;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x72B6;&#x6CC1;&#x3092;\n&#x907F;&#x3051;&#x308B;&#x306B;&#x306F;&#x3001;&#x305D;&#x308C;&#x3092;&#x5148;&#x9001;&#x308A;&#x3057;&#x3066;&#x6642;&#x3005; I/O &#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `process.maxTickDepth` value is the maximum depth of\nnextTick-calling nextTick-callbacks that will be evaluated before\nallowing other forms of I/O to occur.\n-->\n\n<p><code>process.maxTickDepth</code> &#x306E;&#x5024;&#x306F;&#x3001;nextTick &#x304C; nextTick &#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;\n&#x6700;&#x5927;&#x306E;&#x6DF1;&#x3055;&#x3067;&#x3001;&#x4ED6;&#x306E; I/O &#x3092;&#x53EF;&#x80FD;&#x306B;&#x3059;&#x308B;&#x524D;&#x306B;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;shortDesc&quot;: &quot;Default = 1000&quot;
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;process.abort()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;abort&quot;,
          &quot;desc&quot;: &quot;<!--\nThis causes node to emit an abort. This will cause node to exit and\ngenerate a core file.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; node &#x3092;&#x30A2;&#x30DC;&#x30FC;&#x30C8;&#x3055;&#x305B;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; node &#x304C;&#x7D42;&#x4E86;&#x3057;&#x3066;&#x30B3;&#x30A2;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.chdir(directory)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;chdir&quot;,
          &quot;desc&quot;: &quot;<!--\nChanges the current working directory of the process or throws an exception if that fails.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3092;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x5931;&#x6557;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x4F8B;&#x5916;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;Starting directory: &apos; + process.cwd());\ntry {\n  process.chdir(&apos;/tmp&apos;);\n  console.log(&apos;New directory: &apos; + process.cwd());\n}\ncatch (err) {\n  console.log(&apos;chdir: &apos; + err);\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;directory&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.cwd()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;cwd&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the current working directory of the process.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;Current directory: &apos; + process.cwd());</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.exit([code])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;exit&quot;,
          &quot;desc&quot;: &quot;<!--\nEnds the process with the specified `code`.  If omitted, exit uses the\n'success' code `0`.\n-->\n\n<p>&#x6307;&#x5B9A;&#x306E; <code>code</code> &#x3067;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x7701;&#x7565;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x300C;&#x6210;&#x529F;&#x300D;&#x3092;&#x793A;&#x3059;&#x30B3;&#x30FC;&#x30C9; <code>0</code> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nTo exit with a 'failure' code:\n-->\n\n<p>&#x300C;&#x5931;&#x6557;&#x300D;&#x3092;&#x793A;&#x3059;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.exit(1);</code></pre>\n<!--\nThe shell that executed node should see the exit code as 1.\n-->\n\n<p>node &#x3092;&#x5B9F;&#x884C;&#x3057;&#x305F;&#x30B7;&#x30A7;&#x30EB;&#x3067;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x304C; 1 &#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x898B;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;code&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.getgid()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;getgid&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nGets the group identity of the process. (See getgid(2).)\nThis is the numerical group id, not the group name.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059; (getgid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x3067;&#x3001;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code>if (process.getgid) {\n  console.log(&apos;Current gid: &apos; + process.getgid());\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.setgid(id)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setgid&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSets the group identity of the process. (See setgid(2).)  This accepts either\na numerical ID or a groupname string. If a groupname is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059; (setgid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x3082;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x306E;&#x6587;&#x5B57;&#x5217;&#x306E;&#x3069;&#x3061;&#x3089;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x304C;&#x89E3;&#x6C7A;&#x3067;&#x304D;&#x308B;&#x307E;&#x3067;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>if (process.getgid &amp;&amp; process.setgid) {\n  console.log(&apos;Current gid: &apos; + process.getgid());\n  try {\n    process.setgid(501);\n    console.log(&apos;New gid: &apos; + process.getgid());\n  }\n  catch (err) {\n    console.log(&apos;Failed to set gid: &apos; + err);\n  }\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;id&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.getuid()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;getuid&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nGets the user identity of the process. (See getuid(2).)\nThis is the numerical userid, not the username.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30E6;&#x30FC;&#x30B6;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059; (getuid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B;&#x30E6;&#x30FC;&#x30B6; ID &#x3067;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code>if (process.getuid) {\n  console.log(&apos;Current uid: &apos; + process.getuid());\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.setuid(id)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setuid&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x975E; Windows)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSets the user identity of the process. (See setuid(2).)  This accepts either\na numerical ID or a username string.  If a username is specified, this method\nblocks while resolving it to a numerical ID.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30E6;&#x30FC;&#x30B6;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059; (setuid(2) &#x53C2;&#x7167;)&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x3082;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x306E;&#x6587;&#x5B57;&#x5217;&#x306E;&#x3069;&#x3061;&#x3089;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x6570;&#x5024;&#x306B;&#x3088;&#x308B; ID &#x304C;&#x89E3;&#x6C7A;&#x3067;&#x304D;&#x308B;&#x307E;&#x3067;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>if (process.getuid &amp;&amp; process.setuid) {\n  console.log(&apos;Current uid: &apos; + process.getuid());\n  try {\n    process.setuid(501);\n    console.log(&apos;New uid: &apos; + process.getuid());\n  }\n  catch (err) {\n    console.log(&apos;Failed to set uid: &apos; + err);\n  }\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;id&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.getgroups()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;getgroups&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIC &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3064;&#x307E;&#x308A; Windows &#x4EE5;&#x5916;)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns an array with the supplementary group IDs. POSIX leaves it unspecified\nif the effective group ID is included but node.js ensures it always is.\n-->\n\n<p>&#x88DC;&#x52A9;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x306E;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\nPOSIX &#x306F;&#x5B9F;&#x52B9;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x304C;&#x542B;&#x307E;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x660E;&#x793A;&#x3057;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;\nNode.js &#x3067;&#x306F;&#x5E38;&#x306B;&#x305D;&#x308C;&#x304C;&#x542B;&#x307E;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x4FDD;&#x8A3C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.setgroups(groups)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setgroups&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIC &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3064;&#x307E;&#x308A; Windows &#x4EE5;&#x5916;)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSets the supplementary group IDs. This is a privileged operation, meaning you\nneed to be root or have the CAP_SETGID capability.\n-->\n\n<p>&#x88DC;&#x52A9;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x7279;&#x6A29;&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3042;&#x308A;&#x3001;&#x30EB;&#x30FC;&#x30C8;&#x3067;&#x3042;&#x308B;&#x304B;&#x3001;&#x307E;&#x305F;&#x306F; CAP_SETGID &#x30B1;&#x30FC;&#x30D1;&#x30D3;&#x30EA;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3064;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe list can contain group IDs, group names or both.\n-->\n\n<p>&#x30EA;&#x30B9;&#x30C8;&#x306F;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID&#x3001;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x3001;&#x307E;&#x305F;&#x306F;&#x4E21;&#x65B9;&#x3092;&#x542B;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;groups&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.initgroups(user, extra_group)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;initgroups&quot;,
          &quot;desc&quot;: &quot;<!--\nNote: this function is only available on POSIX platforms (i.e. not Windows)\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; POSIC &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0; (&#x3064;&#x307E;&#x308A; Windows &#x4EE5;&#x5916;)\n&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nReads /etc/group and initializes the group access list, using all groups of\nwhich the user is a member. This is a privileged operation, meaning you need\nto be root or have the CAP_SETGID capability.\n-->\n\n<p><code>/etc/group</code> &#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3093;&#x3067;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x30EA;&#x30B9;&#x30C8;&#x3092;&#x521D;&#x671F;&#x5316;&#x3057;&#x3001;\nuser &#x304C;&#x30E1;&#x30F3;&#x30D0;&#x30FC;&#x3067;&#x3042;&#x308B;&#x5168;&#x3066;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x7279;&#x6A29;&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3042;&#x308A;&#x3001;&#x30EB;&#x30FC;&#x30C8;&#x3067;&#x3042;&#x308B;&#x304B;&#x3001;&#x307E;&#x305F;&#x306F; CAP_SETGID &#x30B1;&#x30FC;&#x30D1;&#x30D3;&#x30EA;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3064;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`user` is a user name or user ID. `extra_group` is a group name or group ID.\n-->\n\n<p><code>user</code> &#x306F;&#x30E6;&#x30FC;&#x30B6;&#x540D;&#x307E;&#x305F;&#x306F;&#x30E6;&#x30FC;&#x30B6; ID&#x3001;\n<code>extra_group</code> &#x306F;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x540D;&#x307E;&#x305F;&#x306F;&#x30B0;&#x30EB;&#x30FC;&#x30D7; ID &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSome care needs to be taken when dropping privileges. Example:\n-->\n\n<p>&#x7279;&#x6A29;&#x3092;&#x843D;&#x3068;&#x3059;&#x969B;&#x306F;&#x3001;&#x3044;&#x304F;&#x3064;&#x304B;&#x6CE8;&#x610F;&#x3059;&#x3079;&#x304D;&#x4E8B;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>console.log(process.getgroups());         // [ 0 ]\nprocess.initgroups(&apos;bnoordhuis&apos;, 1000);   // switch user\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     // drop root gid\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;user&quot;
                },
                {
                  &quot;name&quot;: &quot;extra_group&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.kill(pid, [signal])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;kill&quot;,
          &quot;desc&quot;: &quot;<!--\nSend a signal to a process. `pid` is the process id and `signal` is the\nstring describing the signal to send.  Signal names are strings like\n'SIGINT' or 'SIGHUP'.  If omitted, the signal will be 'SIGTERM'.\nSee [Signal Events](#process_signal_events) and kill(2) for more information.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>pid</code> &#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9; ID &#x3067; <code>signal</code> &#x306F;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x6587;&#x5B57;&#x5217;&#x3067;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x540D;&#x524D;&#x306F; &apos;SIGINT&apos; &#x3084; &apos;SIGHUP&apos; &#x306E;&#x3088;&#x3046;&#x306A;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x7701;&#x7565;&#x3059;&#x308B;&#x3068;&#x3001;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306F; &apos;SIGTERM&apos; &#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <a href="\&quot;#process_signal_events\&quot;">Signal Events</a> &#x307E;&#x305F;&#x306F; kill(2)\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nWill throw an error if target does not exist, and as a special case, a signal of\n`0` can be used to test for the existence of a process.\n-->\n\n<p>&#x5BFE;&#x8C61;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x7279;&#x5225;&#x306A;&#x30B1;&#x30FC;&#x30B9;&#x3068;&#x3057;&#x3066;&#x3001;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x30C6;&#x30B9;&#x30C8;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;\n<code>0</code> &#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that just because the name of this function is `process.kill`, it is\nreally just a signal sender, like the `kill` system call.  The signal sent\nmay do something other than kill the target process.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306E;&#x540D;&#x524D;&#x304C; <code>process.kill</code> &#x3067;&#x3042;&#x308B;&#x3068;&#x304A;&#x308A;&#x3001;&#x3053;&#x308C;&#x306F; <code>kill</code>\n&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x30B3;&#x30FC;&#x30EB;&#x306E;&#x3088;&#x3046;&#x306B;&#x5358;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x5BFE;&#x8C61;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x6BBA;&#x3059;&#x305F;&#x3081;&#x3060;&#x3051;&#x3067;&#x306A;&#x304F;&#x3001;&#x4ED6;&#x306E;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3082;&#x9001;&#x4FE1;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of sending a signal to yourself:\n-->\n\n<p>&#x81EA;&#x8EAB;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>process.on(&apos;SIGHUP&apos;, function() {\n  console.log(&apos;Got SIGHUP signal.&apos;);\n});\n\nsetTimeout(function() {\n  console.log(&apos;Exiting.&apos;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &apos;SIGHUP&apos;);</code></pre>\n<!--\nNote: When SIGUSR1 is received by Node.js it starts the debugger, see\n[Signal Events](#process_signal_events).\n-->\n\n<p>&#x6CE8;&#x610F;: SIGUSR1&#x306F;node.js&#x306B;&#x3088;&#x3063;&#x3066;&#x53D7;&#x4FE1;&#x3055;&#x308C;&#x3001;&#x30C7;&#x30D0;&#x30C3;&#x30AC;&#x3092;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <a href="\&quot;#process_signal_events\&quot;">Signal Events</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;pid&quot;
                },
                {
                  &quot;name&quot;: &quot;signal&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.memoryUsage()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;memoryUsage&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns an object describing the memory usage of the Node process\nmeasured in bytes.\n-->\n\n<p>Node &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30E1;&#x30E2;&#x30EA;&#x4F7F;&#x7528;&#x72B6;&#x6CC1;&#x3092;&#x30D0;&#x30A4;&#x30C8;&#x5358;&#x4F4D;&#x3067;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nconsole.log(util.inspect(process.memoryUsage()));</code></pre>\n<!--\nThis will generate:\n-->\n\n<p>&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;:\n\n</p>\n<pre><code>{ rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472 }</code></pre>\n<!--\n`heapTotal` and `heapUsed` refer to V8's memory usage.\n-->\n\n<p><code>heapTotal</code> &#x3068; <code>heapUsed</code> &#x306F; V8 &#x306E;&#x30E1;&#x30E2;&#x30EA;&#x4F7F;&#x7528;&#x72B6;&#x6CC1;&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.nextTick(callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;nextTick&quot;,
          &quot;desc&quot;: &quot;<!--\nOn the next loop around the event loop call this callback.\nThis is *not* a simple alias to `setTimeout(fn, 0)`, it's much more\nefficient.  It typically runs before any other I/O events fire, but there\nare some exceptions.  See `process.maxTickDepth` below.\n-->\n\n<p>&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x306E;&#x6B21;&#x4EE5;&#x964D;&#x306E;&#x30EB;&#x30FC;&#x30D7;&#x3067;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>setTimeout(fn, 0)</code> &#x306E;&#x5358;&#x7D14;&#x306A;&#x30A8;&#x30A4;&#x30EA;&#x30A2;&#x30B9;<em>&#x3067;&#x306F;&#x306A;&#x304F;</em>&#x3001;\n&#x306F;&#x308B;&#x304B;&#x306B;&#x52B9;&#x7387;&#x7684;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x901A;&#x5E38;&#x4ED6;&#x306E; I/O &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3088;&#x308A;&#x3082;&#x524D;&#x306B;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x4F8B;&#x5916;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x5F8C;&#x8FF0;&#x306E; <code>process.maxTickDepth</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>process.nextTick(function() {\n  console.log(&apos;nextTick callback&apos;);\n});</code></pre>\n<!--\nThis is important in developing APIs where you want to give the user the\nchance to assign event handlers after an object has been constructed,\nbut before any I/O has occurred.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; API &#x306E;&#x958B;&#x767A;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C;&#x69CB;&#x7BC9;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3067;\n&#x3069;&#x3093;&#x306A; I/O &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3088;&#x308A;&#x3082;&#x524D;&#x306B;&#x3001;\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x308B;&#x30C1;&#x30E3;&#x30F3;&#x30B9;&#x3092;&#x30E6;&#x30FC;&#x30B6;&#x306B;&#x4E0E;&#x3048;&#x305F;&#x3044;&#x5834;&#x5408;&#x306B;&#x91CD;&#x8981;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(function() {\n    this.startDoingStuff();\n  }.bind(this));\n}\n\nvar thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.</code></pre>\n<!--\nIt is very important for APIs to be either 100% synchronous or 100%\nasynchronous.  Consider this example:\n-->\n\n<p>API &#x306F; 100% &#x540C;&#x671F;&#x7684;&#x304B;&#x3001;100% &#x975E;&#x540C;&#x671F;&#x7684;&#x304B;&#x306E;&#x3069;&#x3061;&#x3089;&#x304B;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x304C;&#x3068;&#x3066;&#x3082;&#x91CD;&#x8981;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x4F8B;&#x3092;&#x8003;&#x3048;&#x3066;&#x307F;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;:\n\n</p>\n<pre><code>// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&apos;file&apos;, cb);\n}</code></pre>\n<!--\nThis API is hazardous.  If you do this:\n-->\n\n<p>&#x3053;&#x306E; API &#x306F;&#x5371;&#x967A;&#x3067;&#x3059;&#x3002;&#x3053;&#x3046;&#x3059;&#x308B;&#x3068;:\n\n</p>\n<pre><code>maybeSync(true, function() {\n  foo();\n});\nbar();</code></pre>\n<!--\nthen it's not clear whether `foo()` or `bar()` will be called first.\n-->\n\n<p><code>foo()</code> &#x3068; <code>bar()</code> &#x306E;&#x3069;&#x3061;&#x3089;&#x304C;&#x5148;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x304B;&#x4E0D;&#x660E;&#x77AD;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis approach is much better:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E;&#x30A2;&#x30D7;&#x30ED;&#x30FC;&#x30C1;&#x306F;&#x305A;&#x3063;&#x3068;&#x512A;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;:\n\n</p>\n<pre><code>function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&apos;file&apos;, cb);\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.umask([mask])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;umask&quot;,
          &quot;desc&quot;: &quot;<!--\nSets or reads the process's file mode creation mask. Child processes inherit\nthe mask from the parent process. Returns the old mask if `mask` argument is\ngiven, otherwise returns the current mask.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30E2;&#x30FC;&#x30C9;&#x4F5C;&#x6210;&#x30DE;&#x30B9;&#x30AF;&#x3092;&#x8A2D;&#x5B9A;&#x307E;&#x305F;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304B;&#x3089;&#x30DE;&#x30B9;&#x30AF;&#x3092;&#x7D99;&#x627F;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>mask</code> &#x5F15;&#x6570;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x308B;&#x3068;&#x5143;&#x306E;&#x30DE;&#x30B9;&#x30AF;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x3001;&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x73FE;&#x5728;&#x306E;&#x30DE;&#x30B9;&#x30AF;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var oldmask, newmask = 0644;\n\noldmask = process.umask(newmask);\nconsole.log(&apos;Changed umask from: &apos; + oldmask.toString(8) +\n            &apos; to &apos; + newmask.toString(8));</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;mask&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.uptime()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;uptime&quot;,
          &quot;desc&quot;: &quot;<!--\nNumber of seconds Node has been running.\n-->\n\n<p>Node &#x304C;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x304B;&#x3089;&#x306E;&#x79D2;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;process.hrtime()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;hrtime&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the current high-resolution real time in a `[seconds, nanoseconds]`\ntuple Array. It is relative to an arbitrary time in the past. It is not\nrelated to the time of day and therefore not subject to clock drift. The\nprimary use is for measuring performance between intervals.\n\nYou may pass in the result of a previous call to `process.hrtime()` to get\na diff reading, useful for benchmarks and measuring intervals:\n-->\n\n<p>&#x9AD8;&#x5206;&#x89E3;&#x80FD;&#x306A;&#x73FE;&#x5728;&#x6642;&#x523B;&#x3092; <code>[seconds, nanoseconds]</code> &#x306E;&#x914D;&#x5217;&#x3067;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x904E;&#x53BB;&#x306E;&#x4EFB;&#x610F;&#x306E;&#x6642;&#x9593;&#x3068;&#x306E;&#x6BD4;&#x8F03;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x4E00;&#x65E5;&#x306B;&#x304A;&#x3051;&#x308B;&#x6642;&#x523B;&#x306B;&#x306F;&#x95A2;&#x9023;&#x304C;&#x7121;&#x3044;&#x305F;&#x3081;&#x3001;&#x30AF;&#x30ED;&#x30C3;&#x30AF;&#x30C9;&#x30EA;&#x30D5;&#x30C8;&#x306B;&#x5F71;&#x97FF;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x4E3B;&#x306A;&#x7528;&#x9014;&#x306F;&#x30D9;&#x30F3;&#x30C1;&#x30DE;&#x30FC;&#x30AF;&#x3084;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D0;&#x30EB;&#x306E;&#x6E2C;&#x5B9A;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x4EE5;&#x524D;&#x306B; <code>process.hrtime()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x7D50;&#x679C;&#x3092;&#x6E21;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;\n&#x5DEE;&#x5206;&#x3092;&#x5F97;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;&#x3053;&#x308C;&#x306F;&#x30D9;&#x30F3;&#x30C1;&#x30DE;&#x30FC;&#x30AF;&#x3084;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D0;&#x30EB;&#x306E;&#x6E2C;&#x5B9A;&#x306B;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>var time = process.hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(function() {\n  var diff = process.hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(&apos;benchmark took %d nanoseconds&apos;, diff[0] * 1e9 + diff[1]);\n  // benchmark took 1000000527 nanoseconds\n}, 1000);</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        }
      ]
    }
  ],
  &quot;vars&quot;: [
    {
      &quot;textRaw&quot;: &quot;require()&quot;,
      &quot;type&quot;: &quot;var&quot;,
      &quot;name&quot;: &quot;require&quot;,
      &quot;desc&quot;: &quot;<!--\nTo require modules. See the [Modules][] section.  `require` isn't actually a\nglobal but rather local to each module.\n-->\n\n<p>require &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x6307;&#x3057;&#x307E;&#x3059;&#x3002;[&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;][] &#x306E;&#x7BC0;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n<code>require</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x6BCE;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;require.resolve()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolve&quot;,
          &quot;desc&quot;: &quot;<!--\nUse the internal `require()` machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.\n-->\n\n<p><code>require()</code> &#x306E;&#x5185;&#x90E8;&#x3067;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x4F4D;&#x7F6E;&#x3092;&#x691C;&#x7D22;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30ED;&#x30FC;&#x30C9;&#x306F;&#x884C;&#x308F;&#x305A;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3092;&#x89E3;&#x6C7A;&#x3057;&#x3066;&#x8FD4;&#x3059;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;`cache` {Object} &quot;,
          &quot;name&quot;: &quot;cache&quot;,
          &quot;desc&quot;: &quot;<!--\nModules are cached in this object when they are required. By deleting a key\nvalue from this object, the next `require` will reload the module.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x8981;&#x6C42;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x3053;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x4E2D;&#x306B;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304B;&#x3089;&#x30AD;&#x30FC;&#x3068;&#x5024;&#x3092;&#x524A;&#x9664;&#x3059;&#x308B;&#x3068;&#x3001;&#x6B21;&#x306B;&#x305D;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;\n<code>require</code> &#x3055;&#x308C;&#x305F;&#x3068;&#x304D;&#x306B;&#x30EA;&#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;`extensions` {Object} &quot;,
          &quot;name&quot;: &quot;extensions&quot;,
          &quot;stability&quot;: 0,
          &quot;stabilityText&quot;: &quot;Deprecated&quot;,
          &quot;desc&quot;: &quot;<!--\nInstruct `require` on how to handle certain file extensions.\n\nProcess files with the extension `.sjs` as `.js`:\n-->\n\n<p><code>require</code> &#x306B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x62E1;&#x5F35;&#x5B50;&#x3092;&#x6271;&#x3046;&#x65B9;&#x6CD5;&#x3092;&#x6559;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x62E1;&#x5F35;&#x5B50;&#x304C; <code>.sjs</code> &#x3067;&#x3042;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x51E6;&#x7406;&#x3092; <code>.js</code> &#x3068;&#x540C;&#x3058;&#x306B;&#x3059;&#x308B;&#x306B;&#x306F;:\n\n</p>\n<pre><code>require.extensions[&apos;.sjs&apos;] = require.extensions[&apos;.js&apos;];</code></pre>\n<!--\n**Deprecated**  In the past, this list has been used to load\nnon-JavaScript modules into Node by compiling them on-demand.\nHowever, in practice, there are much better ways to do this, such as\nloading modules via some other Node program, or compiling them to\nJavaScript ahead of time.\n-->\n\n<p><strong>&#x5EC3;&#x6B62;&#x4E88;&#x5B9A;</strong> &#x304B;&#x3064;&#x3066;&#x3001;&#x3053;&#x306E;&#x30EA;&#x30B9;&#x30C8;&#x306F;&#x975E; JavaScript &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x5FC5;&#x8981;&#x306B;&#x5FDC;&#x3058;&#x3066;\n&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x3001;Node &#x306B;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x5B9F;&#x969B;&#x306B;&#x306F;&#x3001;&#x4ED6;&#x306E; Node &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x901A;&#x3058;&#x3066;&#x30ED;&#x30FC;&#x30C9;&#x3057;&#x305F;&#x308A;&#x3001;\n&#x4E8B;&#x524D;&#x306B; JavaScript &#x306B;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3059;&#x308B;&#x306A;&#x3069;&#x3001;&#x3088;&#x308A;&#x3088;&#x3044;&#x65B9;&#x6CD5;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nSince the Module system is locked, this feature will probably never go\naway.  However, it may have subtle bugs and complexities that are best\nleft untouched.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306F;&#x30ED;&#x30C3;&#x30AF;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x306E;&#x3067;&#x3001;&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x306F;&#x304A;&#x305D;&#x3089;&#x304F;\n&#x7121;&#x304F;&#x306A;&#x3089;&#x306A;&#x3044;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F;&#x5FAE;&#x5999;&#x306A;&#x30D0;&#x30B0;&#x3084;&#x8907;&#x96D1;&#x3055;&#x304C;&#x3042;&#x3063;&#x3066;&#x3082;&#x305D;&#x306E;&#x307E;&#x307E;&#x653E;&#x7F6E;&#x3055;&#x308C;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n&quot;
        }
      ]
    },
    {
      &quot;textRaw&quot;: &quot;__filename&quot;,
      &quot;name&quot;: &quot;__filename&quot;,
      &quot;type&quot;: &quot;var&quot;,
      &quot;desc&quot;: &quot;<!--\nThe filename of the code being executed.  This is the resolved absolute path\nof this code file.  For a main program this is not necessarily the same\nfilename used in the command line.  The value inside a module is the path\nto that module file.\n-->\n\n<p>&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3067;&#x3059;&#x3002;&#x3053;&#x308C;&#x306F;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3067;&#x3059;&#x3002;\n&#x30E1;&#x30A4;&#x30F3;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067;&#x306F;&#x3001;&#x5FC5;&#x305A;&#x3057;&#x3082;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x5F15;&#x6570;&#x3067;&#x4F7F;&#x308F;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3068;\n&#x540C;&#x3058;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x4E2D;&#x3067;&#x306F;&#x3001;&#x3053;&#x306E;&#x5024;&#x306F;&#x305D;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x30D1;&#x30B9;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>&#x4F8B;: <code>node example.js</code> &#x3092; <code>/Users/mjr</code> &#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;\n\n</p>\n<pre><code>console.log(__filename);\n// /Users/mjr/example.js</code></pre>\n<!--\n`__filename` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__filename</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x6BCE;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
    },
    {
      &quot;textRaw&quot;: &quot;__dirname&quot;,
      &quot;name&quot;: &quot;__dirname&quot;,
      &quot;type&quot;: &quot;var&quot;,
      &quot;desc&quot;: &quot;<!--\nThe name of the directory that the currently executing script resides in.\n-->\n\n<p>&#x73FE;&#x5728;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306E;&#x540D;&#x524D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: running `node example.js` from `/Users/mjr`\n-->\n\n<p>&#x4F8B;: <code>node example.js</code> &#x3092; <code>/Users/mjr</code> &#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;\n\n</p>\n<pre><code>console.log(__dirname);\n// /Users/mjr</code></pre>\n<!--\n`__dirname` isn't actually a global but rather local to each module.\n-->\n\n<p><code>__dirname</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x6BCE;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;
    },
    {
      &quot;textRaw&quot;: &quot;module&quot;,
      &quot;name&quot;: &quot;module&quot;,
      &quot;type&quot;: &quot;var&quot;,
      &quot;desc&quot;: &quot;<!--\nA reference to the current module. In particular\n`module.exports` is used for defining what a module exports and makes\navailable through `require()`.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3078;&#x306E;&#x53C2;&#x7167;&#x3067;&#x3059;&#x3002;\n<code>module.exports</code> &#x306F;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x516C;&#x958B;&#x3057;&#x3066; <code>require()</code> &#x3092;&#x901A;&#x3058;&#x3066;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;\n&#x3082;&#x306E;&#x3092;&#x5B9A;&#x3081;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`module` isn't actually a global but rather local to each module.\n-->\n\n<p><code>module</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x6BCE;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSee the [module system documentation][] for more information.\n-->\n\n<p>&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x306F; [&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
    },
    {
      &quot;textRaw&quot;: &quot;exports&quot;,
      &quot;name&quot;: &quot;exports&quot;,
      &quot;type&quot;: &quot;var&quot;,
      &quot;desc&quot;: &quot;<!--\nA reference to the `module.exports` that is shorter to type.\nSee [module system documentation][] for details on when to use `exports` and\nwhen to use `module.exports`.\n-->\n\n<p><code>module.exports</code> &#x3078;&#x306E;&#x53C2;&#x7167;&#x3067;&#x3059;&#x3002;\n&#x3044;&#x3064; <code>exports</code> &#x3092;&#x4F7F;&#x3044;&#x3001;&#x3044;&#x3064; <code>module.exports</code> &#x3092;&#x4F7F;&#x3046;&#x304B;&#x306E;&#x8A73;&#x7D30;&#x306F;\n[&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\n`exports` isn't actually a global but rather local to each module.\n-->\n\n<p><code>exports</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x6BCE;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSee the [module system documentation][] for more information.\n\nSee the [module section][] for more information.\n-->\n\n<p>&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x306F; [&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
    }
  ],
  &quot;methods&quot;: [
    {
      &quot;textRaw&quot;: &quot;setTimeout(cb, ms)&quot;,
      &quot;type&quot;: &quot;method&quot;,
      &quot;name&quot;: &quot;setTimeout&quot;,
      &quot;desc&quot;: &quot;<!--\nRun callback `cb` after *at least* `ms` milliseconds. The actual delay depends\non external factors like OS timer granularity and system load.\n-->\n\n<p><em>&#x5C11;&#x306A;&#x304F;&#x3068;&#x3082;</em> <code>ms</code> &#x30DF;&#x30EA;&#x79D2;&#x304C;&#x7D4C;&#x904E;&#x3057;&#x305F;&#x5F8C;&#x3001;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF; <code>cb</code> &#x3092;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5B9F;&#x969B;&#x306E;&#x9045;&#x5EF6;&#x306F; OS &#x306E;&#x30BF;&#x30A4;&#x30DE;&#x5206;&#x89E3;&#x80FD;&#x3084;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x8CA0;&#x8377;&#x306A;&#x3069;&#x5916;&#x90E8;&#x8981;&#x56E0;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe timeout must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it's changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x5024;&#x306F; 1&#xFF5E;2,147,483,647 &#x306E;&#x7BC4;&#x56F2;&#x5185;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3082;&#x3057;&#x5024;&#x304C;&#x3053;&#x306E;&#x7BC4;&#x56F2;&#x5916;&#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; 1 &#x30DF;&#x30EA;&#x79D2;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x5927;&#x96D1;&#x628A;&#x306B;&#x8A00;&#x3063;&#x3066;&#x3001;&#x30BF;&#x30A4;&#x30DE;&#x306F; 24.8 &#x65E5;&#x3092;&#x8D8A;&#x3048;&#x308B;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nReturns an opaque value that represents the timer.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x4E0D;&#x900F;&#x660E;&#x306A;&#x5024;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;signatures&quot;: [
        {
          &quot;params&quot;: [
            {
              &quot;name&quot;: &quot;cb&quot;
            },
            {
              &quot;name&quot;: &quot;ms&quot;
            }
          ]
        }
      ]
    },
    {
      &quot;textRaw&quot;: &quot;clearTimeout(t)&quot;,
      &quot;type&quot;: &quot;method&quot;,
      &quot;name&quot;: &quot;clearTimeout&quot;,
      &quot;desc&quot;: &quot;<!--\nStop a timer that was previously created with `setTimeout()`. The callback will\nnot execute.\n-->\n\n<p><code>setTimeout()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x4EE5;&#x524D;&#x306B;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;signatures&quot;: [
        {
          &quot;params&quot;: [
            {
              &quot;name&quot;: &quot;t&quot;
            }
          ]
        }
      ]
    },
    {
      &quot;textRaw&quot;: &quot;setInterval(cb, ms)&quot;,
      &quot;type&quot;: &quot;method&quot;,
      &quot;name&quot;: &quot;setInterval&quot;,
      &quot;desc&quot;: &quot;<!--\nRun callback `cb` repeatedly every `ms` milliseconds. Note that the actual\ninterval may vary, depending on external factors like OS timer granularity and\nsystem load. It's never less than `ms` but it may be longer.\n-->\n\n<p><code>ms</code> &#x30DF;&#x30EA;&#x79D2;&#x3054;&#x3068;&#x306B;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF; <code>cb</code> &#x3092;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;\nOS &#x306E;&#x30BF;&#x30A4;&#x30DE;&#x5206;&#x89E3;&#x80FD;&#x3084;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x8CA0;&#x8377;&#x306A;&#x3069;&#x5916;&#x90E8;&#x8981;&#x56E0;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;\n&#x5B9F;&#x969B;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D0;&#x30EB;&#x304C;&#x7570;&#x306A;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x6C7A;&#x3057;&#x3066; <code>ms</code> &#x3088;&#x308A;&#x77ED;&#x3044;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;&#x3088;&#x308A;&#x9577;&#x3044;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe interval must be in the range of 1-2,147,483,647 inclusive. If the value is\noutside that range, it's changed to 1 millisecond. Broadly speaking, a timer\ncannot span more than 24.8 days.\n-->\n\n<p>&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D0;&#x30EB;&#x5024;&#x306F; 1&#xFF5E;2,147,483,647 &#x306E;&#x7BC4;&#x56F2;&#x5185;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3082;&#x3057;&#x5024;&#x304C;&#x3053;&#x306E;&#x7BC4;&#x56F2;&#x5916;&#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; 1 &#x30DF;&#x30EA;&#x79D2;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x5927;&#x96D1;&#x628A;&#x306B;&#x8A00;&#x3063;&#x3066;&#x3001;&#x30BF;&#x30A4;&#x30DE;&#x306F; 24.8 &#x65E5;&#x3092;&#x8D8A;&#x3048;&#x308B;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nReturns an opaque value that represents the timer.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x4E0D;&#x900F;&#x660E;&#x306A;&#x5024;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;signatures&quot;: [
        {
          &quot;params&quot;: [
            {
              &quot;name&quot;: &quot;cb&quot;
            },
            {
              &quot;name&quot;: &quot;ms&quot;
            }
          ]
        }
      ]
    }
  ],
  &quot;modules&quot;: [
    {
      &quot;textRaw&quot;: &quot;Timers&quot;,
      &quot;name&quot;: &quot;timers&quot;,
      &quot;stability&quot;: 5,
      &quot;stabilityText&quot;: &quot;Locked&quot;,
      &quot;desc&quot;: &quot;<!--\nAll of the timer functions are globals.  You do not need to `require()`\nthis module in order to use them.\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x30BF;&#x30A4;&#x30DE;&#x95A2;&#x6570;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x4F7F;&#x3046;&#x305F;&#x3081;&#x306B; <code>require()</code> &#x3092;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;setTimeout(callback, delay, [arg], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setTimeout&quot;,
          &quot;desc&quot;: &quot;<!--\nTo schedule execution of a one-time `callback` after `delay` milliseconds. Returns a\n`timeoutObject` for possible use with `clearTimeout()`. Optionally you can\nalso pass arguments to the callback.\n-->\n\n<p><code>delay</code> &#x30DF;&#x30EA;&#x79D2;&#x304C;&#x7D4C;&#x904E;&#x3057;&#x305F;&#x5F8C;&#x3067;&#x3001;\n<code>callback</code> &#x304C;&#x4E00;&#x5EA6;&#x3060;&#x3051;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;&#x30B9;&#x30B1;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>clearTimeout()</code> &#x3067;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B; <code>timeoutObject</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x3057;&#x3066;&#x3001;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3078;&#x306E;&#x5F15;&#x6570;&#x3092;&#x6E21;&#x3059;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIt is important to note that your callback will probably not be called in exactly\n`delay` milliseconds - Node.js makes no guarantees about the exact timing of when\nthe callback will fire, nor of the ordering things will fire in. The callback will\nbe called as close as possible to the time specified.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x6B63;&#x78BA;&#x306B; <code>delay</code> &#x30DF;&#x30EA;&#x79D2;&#x5F8C;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x306F;&#x9650;&#x3089;&#x306A;&#x3044;&#x70B9;&#x306B;\n&#x6CE8;&#x76EE;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x91CD;&#x8981;&#x3067;&#x3059; - \nNode.js &#x306F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x6B63;&#x78BA;&#x306A;&#x30BF;&#x30A4;&#x30DF;&#x30F3;&#x30B0;&#x3082;&#x3001;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x9806;&#x756A;&#x3082;&#x4FDD;&#x8A3C;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x3067;&#x304D;&#x308B;&#x3060;&#x3051;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x6642;&#x9593;&#x306B;&#x8FD1;&#x3044;&#x30BF;&#x30A4;&#x30DF;&#x30F3;&#x30B0;&#x3067;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;callback&quot;
                },
                {
                  &quot;name&quot;: &quot;delay&quot;
                },
                {
                  &quot;name&quot;: &quot;arg&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;clearTimeout(timeoutObject)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;clearTimeout&quot;,
          &quot;desc&quot;: &quot;<!--\nPrevents a timeout from triggering.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x304C;&#x30C8;&#x30EA;&#x30AC;&#x30FC;&#x3055;&#x308C;&#x308B;&#x306E;&#x3092;&#x6B62;&#x3081;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;timeoutObject&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;setInterval(callback, delay, [arg], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setInterval&quot;,
          &quot;desc&quot;: &quot;<!--\nTo schedule the repeated execution of `callback` every `delay` milliseconds.\nReturns a `intervalObject` for possible use with `clearInterval()`. Optionally\nyou can also pass arguments to the callback.\n-->\n\n<p><code>delay</code> &#x30DF;&#x30EA;&#x79D2;&#x304C;&#x7D4C;&#x904E;&#x3059;&#x308B;&#x3054;&#x3068;&#x306B;&#x7E70;&#x308A;&#x8FD4;&#x3057; <code>callback</code> &#x304C;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;&#x30B9;&#x30B1;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>clearInterval()</code> &#x3067;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B; <code>intervalObject</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x3057;&#x3066;&#x3001;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3078;&#x306E;&#x5F15;&#x6570;&#x3092;&#x6E21;&#x3059;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;callback&quot;
                },
                {
                  &quot;name&quot;: &quot;delay&quot;
                },
                {
                  &quot;name&quot;: &quot;arg&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;clearInterval(intervalObject)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;clearInterval&quot;,
          &quot;desc&quot;: &quot;<!--\nStops a interval from triggering.\n-->\n\n<p>&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D0;&#x30EB;&#x304C;&#x30C8;&#x30EA;&#x30AC;&#x30FC;&#x3055;&#x308C;&#x308B;&#x306E;&#x3092;&#x6B62;&#x3081;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;intervalObject&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;unref()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;unref&quot;,
          &quot;desc&quot;: &quot;<!--\nThe opaque value returned by `setTimeout` and `setInterval` also has the method\n`timer.unref()` which will allow you to create a timer that is active but if\nit is the only item left in the event loop won't keep the program running.\nIf the timer is already `unref`d calling `unref` again will have no effect.\n-->\n\n<p><code>setTimeout()</code> &#x3042;&#x308B;&#x3044;&#x306F; <code>setInterval()</code> &#x304C;&#x8FD4;&#x3059;&#x4E0D;&#x900F;&#x660E;&#x306A;&#x5024;&#x306F;&#x3001;\n&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x3067;&#x3042;&#x308B;&#x306B;&#x3082;&#x304B;&#x304B;&#x308F;&#x3089;&#x305A;&#x3001;&#x305D;&#x308C;&#x304C;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x306E;&#x6700;&#x5F8C;&#x306E;&#x4E00;&#x3064;&#x306B;&#x306A;&#x3063;&#x3066;&#x3082;\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x5B9F;&#x884C;&#x3092;&#x7D99;&#x7D9A;&#x3057;&#x306A;&#x3044;&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x4F5C;&#x308B;&#x3053;&#x3068;&#x3092;&#x53EF;&#x80FD;&#x306B;&#x3059;&#x308B;&#x3001;\n<code>timer.unref()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x65E2;&#x306B; <code>unref</code> &#x3055;&#x308C;&#x305F;&#x30BF;&#x30A4;&#x30DE;&#x3067;&#x518D;&#x3073; <code>unref</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x5F71;&#x97FF;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nIn the case of `setTimeout` when you `unref` you create a separate timer that\nwill wakeup the event loop, creating too many of these may adversely effect\nevent loop performance -- use wisely.\n-->\n\n<p><code>setTimeout()</code> &#x304C; <code>unref</code> &#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x3092;&#x8D77;&#x3053;&#x3059;&#x305F;&#x3081;&#x306B;&#x72EC;&#x7ACB;&#x3057;&#x305F;\n&#x30BF;&#x30A4;&#x30DE;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;&#x3001;&#x305D;&#x308C;&#x3089;&#x304C;&#x3042;&#x307E;&#x308A;&#x306B;&#x591A;&#x304F;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x3068;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x306E;\n&#x30D1;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30F3;&#x30B9;&#x306B;&#x60AA;&#x5F71;&#x97FF;&#x3092;&#x4E0E;&#x3048;&#x307E;&#x3059; -- &#x8CE2;&#x660E;&#x306B;&#x4F7F;&#x3063;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;ref()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;ref&quot;,
          &quot;desc&quot;: &quot;<!--\nIf you had previously `unref()`d a timer you can call `ref()` to explicitly\nrequest the timer hold the program open. If the timer is already `ref`d calling\n`ref` again will have no effect.\n-->\n\n<p>&#x4EE5;&#x524D;&#x306B; <code>unref</code> &#x3055;&#x308C;&#x305F;&#x30BF;&#x30A4;&#x30DE;&#x306F;&#x3001;&#x660E;&#x793A;&#x7684;&#x306B; <code>ref()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x3067;\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x5B9F;&#x884C;&#x3057;&#x305F;&#x307E;&#x307E;&#x306B;&#x3059;&#x308B;&#x3088;&#x3046;&#x8981;&#x6C42;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x65E2;&#x306B; <code>ref</code> &#x3055;&#x308C;&#x305F;&#x30BF;&#x30A4;&#x30DE;&#x3067;&#x518D;&#x3073; <code>ref</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x5F71;&#x97FF;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;setImmediate(callback, [arg], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setImmediate&quot;,
          &quot;desc&quot;: &quot;<!--\nTo schedule the \"immediate\" execution of `callback` after I/O events\ncallbacks and before `setTimeout` and `setInterval` . Returns an\n`immediateObject` for possible use with `clearImmediate()`. Optionally you\ncan also pass arguments to the callback.\n-->\n\n<p><code>callback</code> &#x3092;&#x300C;&#x5373;&#x6642;&#x300D; (I/O &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3088;&#x308A;&#x5F8C;&#x3001;<code>setTimeout</code> &#x304A;&#x3088;&#x3073;\n<code>setInterval</code> &#x3088;&#x308A;&#x3082;&#x524D;) &#x306B;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3088;&#x3046;&#x30B9;&#x30B1;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>clearImmediate()</code> &#x306B;&#x6E21;&#x3059;&#x3053;&#x3068;&#x306E;&#x3067;&#x304D;&#x308B; <code>immediateObject</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x3057;&#x3066;&#x3001;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3078;&#x306E;&#x5F15;&#x6570;&#x3092;&#x6E21;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nImmediates are queued in the order created, and are popped off the queue once\nper loop iteration. This is different from `process.nextTick` which will\nexecute `process.maxTickDepth` queued callbacks per iteration. `setImmediate`\nwill yield to the event loop after firing a queued callback to make sure I/O is\nnot being starved. While order is preserved for execution, other I/O events may\nfire between any two scheduled immediate callbacks.\n-->\n\n<p><code>setImmediate()</code> &#x306F;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;&#x9806;&#x3067;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x5165;&#x308C;&#x3089;&#x308C;&#x3001;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x306E;\n&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x6BCE;&#x306B;&#x4E00;&#x5EA6;&#x3001;&#x30AD;&#x30E5;&#x30FC;&#x304B;&#x3089;&#x53D6;&#x308A;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x6BCE;&#x306B; <code>process.maxTickDepth</code> &#x3067;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x56DE;&#x6570;&#x307E;&#x3067;&#x30AD;&#x30E5;&#x30FC;&#x306B;\n&#x5165;&#x308C;&#x3089;&#x308C;&#x305F;&#x95A2;&#x6570;&#x304C;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B; <code>process.nextTick()</code> &#x3068;&#x306F;&#x7570;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>setImmediate()</code> &#x306F; I/O &#x304C;&#x6C88;&#x307F;&#x8FBC;&#x307E;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3001;&#x30AD;&#x30E5;&#x30FC;&#x30A4;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x306B;&#x5236;&#x5FA1;&#x3092;&#x8B72;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x4E8C;&#x3064;&#x306E; <code>setImmediate()</code> &#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x9806;&#x5E8F;&#x306F;&#x7DAD;&#x6301;&#x3055;&#x308C;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x4ED6;&#x306E; I/O &#x304C;&#x9593;&#x306B;&#x631F;&#x307E;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;callback&quot;
                },
                {
                  &quot;name&quot;: &quot;arg&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;clearImmediate(immediateObject)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;clearImmediate&quot;,
          &quot;desc&quot;: &quot;<!--\nStops an immediate from triggering.\n-->\n\n<p><code>setImmediate()</code> &#x306B;&#x6E21;&#x3057;&#x305F;&#x95A2;&#x6570;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x4E2D;&#x6B62;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;immediateObject&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Timers&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Modules&quot;,
      &quot;name&quot;: &quot;module&quot;,
      &quot;stability&quot;: 5,
      &quot;stabilityText&quot;: &quot;Locked&quot;,
      &quot;desc&quot;: &quot;<!--\nNode has a simple module loading system.  In Node, files and modules are in\none-to-one correspondence.  As an example, `foo.js` loads the module\n`circle.js` in the same directory.\n-->\n\n<p>Node &#x306F;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306A;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30ED;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\nNode &#x3067;&#x306F;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#xFF11;&#x5BFE;&#xFF11;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3068;&#x3057;&#x3066;&#x3001; <code>foo.js</code> &#x306F;&#x3001;&#x540C;&#x3058;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x3042;&#x308B; <code>circle.js</code> &#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe contents of `foo.js`:\n-->\n\n<p><code>foo.js</code> &#x306E;&#x5185;&#x5BB9;:\n\n</p>\n<pre><code>var circle = require(&apos;./circle.js&apos;);\nconsole.log( &apos;The area of a circle of radius 4 is &apos;\n           + circle.area(4));</code></pre>\n<!--\nThe contents of `circle.js`:\n-->\n\n<p><code>circle.js</code> &#x306E;&#x5185;&#x5BB9;:\n\n</p>\n<pre><code>var PI = Math.PI;\n\nexports.area = function (r) {\n  return PI * r * r;\n};\n\nexports.circumference = function (r) {\n  return 2 * PI * r;\n};</code></pre>\n<!--\nThe module `circle.js` has exported the functions `area()` and\n`circumference()`.  To add functions and objects to the root of your module,\nyou can add them to the special `exports` object.\n-->\n\n<p><code>circle.js</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F; <code>area()</code> &#x3068; <code>circumference()</code> &#x3092;&#x516C;&#x958B;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x95A2;&#x6570;&#x3084;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30EB;&#x30FC;&#x30C8;&#x306B;&#x52A0;&#x3048;&#x308B;&#x306B;&#x306F;&#x3001;\n<code>exports</code> &#x3068;&#x3044;&#x3046;&#x7279;&#x5225;&#x306A;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x52A0;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nVariables local to the module will be private, as though the module was wrapped\nin a function. In this example the variable `PI` is private to `circle.js`.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x5909;&#x6570;&#x306F;&#x95A2;&#x6570;&#x306B;&#x5305;&#x307E;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x306E;&#x3088;&#x3046;&#x306B;&#x30D7;&#x30E9;&#x30A4;&#x30D9;&#x30FC;&#x30C8;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x4F8B;&#x306E;&#x5834;&#x5408;&#x3001;&#x5909;&#x6570; <code>PI</code> &#x306F; <code>circle.js</code> &#x306E;&#x30D7;&#x30E9;&#x30A4;&#x30D9;&#x30FC;&#x30C8;&#x5909;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you want the root of your module's export to be a function (such as a\nconstructor) or if you want to export a complete object in one assignment\ninstead of building it one property at a time, assign it to `module.exports`\ninstead of `exports`.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30EB;&#x30FC;&#x30C8;&#x3068;&#x3057;&#x3066;&#x95A2;&#x6570; (&#x305F;&#x3068;&#x3048;&#x3070;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;) &#x3092;&#x5F8C;&#x6094;&#x3057;&#x305F;&#x308A;&#x3001;\n&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x4E00;&#x3064;&#x305A;&#x3064;&#x4EE3;&#x5165;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5B8C;&#x5168;&#x306A;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4E00;&#x5EA6;&#x306B;\n&#x516C;&#x958B;&#x3057;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;<code>exports</code> &#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B; <code>module.exports</code>&#x306B;&#x4EE3;&#x5165;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBelow, `bar.js` makes use of the `square` module, which exports a constructor:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x3067;&#x306F;&#x3001;<code>bar.js</code> &#x306F; <code>square</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x516C;&#x958B;&#x3059;&#x308B;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;\n&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var square = require(&apos;./square.js&apos;);\nvar mySquare = square(2);\nconsole.log(&apos;The area of my square is &apos; + mySquare.area());</code></pre>\n<!--\nThe `square` module is defined in `square.js`:\n-->\n\n<p><code>square.js</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F; <code>square.js</code> &#x3067;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>// assigning to exports will not modify module, must use module.exports\nmodule.exports = function(width) {\n  return {\n    area: function() {\n      return width * width;\n    }\n  };\n}</code></pre>\n<!--\nThe module system is implemented in the `require(\"module\")` module.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306F; <code>require(&quot;module&quot;)</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x3088;&#x3063;&#x3066;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;Cycles&quot;,
          &quot;name&quot;: &quot;Cycles&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nWhen there are circular `require()` calls, a module might not be\ndone being executed when it is returned.\n\nConsider this situation:\n-->\n\n<p><code>require()</code> &#x304C;&#x5FAA;&#x74B0;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;&#x5B9F;&#x884C;&#x304C;&#x5B8C;&#x4E86;&#x3057;&#x3066;&#x3044;&#x306A;&#x3044;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x6B21;&#x306E;&#x72B6;&#x6CC1;&#x3092;&#x8003;&#x3048;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;:\n\n</p>\n<p><code>a.js</code>:\n\n</p>\n<pre><code>console.log(&apos;a starting&apos;);\nexports.done = false;\nvar b = require(&apos;./b.js&apos;);\nconsole.log(&apos;in a, b.done = %j&apos;, b.done);\nexports.done = true;\nconsole.log(&apos;a done&apos;);</code></pre>\n<p><code>b.js</code>:\n\n</p>\n<pre><code>console.log(&apos;b starting&apos;);\nexports.done = false;\nvar a = require(&apos;./a.js&apos;);\nconsole.log(&apos;in b, a.done = %j&apos;, a.done);\nexports.done = true;\nconsole.log(&apos;b done&apos;);</code></pre>\n<p><code>main.js</code>:\n\n</p>\n<pre><code>console.log(&apos;main starting&apos;);\nvar a = require(&apos;./a.js&apos;);\nvar b = require(&apos;./b.js&apos;);\nconsole.log(&apos;in main, a.done=%j, b.done=%j&apos;, a.done, b.done);</code></pre>\n<!--\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`.  At that\npoint, `b.js` tries to load `a.js`.  In order to prevent an infinite\nloop an **unfinished copy** of the `a.js` exports object is returned to the\n`b.js` module.  `b.js` then finishes loading, and its `exports` object is\nprovided to the `a.js` module.\n\nBy the time `main.js` has loaded both modules, they're both finished.\nThe output of this program would thus be:\n-->\n\n<p><code>main.js</code> &#x304C; <code>a.js</code> &#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x3068;&#x3001;<code>a.js</code> &#x306F; <code>b.js</code> &#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306F;&#x3001;<code>b.js</code> &#x306F; <code>a.js</code> &#x306E;&#x30ED;&#x30FC;&#x30C9;&#x3092;&#x8A66;&#x307F;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n&#x7121;&#x9650;&#x30EB;&#x30FC;&#x30D7;&#x3092;&#x907F;&#x3051;&#x308B;&#x305F;&#x3081;&#x3001;<code>a.js</code> &#x304C;&#x30A8;&#x30AF;&#x30B9;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;\n<strong>&#x672A;&#x5B8C;&#x4E86;&#x306E;&#x30B3;&#x30D4;&#x30FC;</strong> &#x304C; <code>b.js</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>b.js</code> &#x306E;&#x30ED;&#x30FC;&#x30C9;&#x304C;&#x5B8C;&#x4E86;&#x3059;&#x308B;&#x3068;&#x3001;<code>exports</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C; <code>a.js</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;\n&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>main.js</code> &#x304C;&#x4E21;&#x65B9;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x307E;&#x3067;&#x306B;&#x306F;&#x3001;&#x3069;&#x3061;&#x3089;&#x3082;&#x5B8C;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x51FA;&#x529B;&#x306F;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<pre><code>$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done=true, b.done=true</code></pre>\n<!--\nIf you have cyclic module dependencies in your program, make sure to\nplan accordingly.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x5FAA;&#x74B0;&#x53C2;&#x7167;&#x3059;&#x308B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x6301;&#x3064;&#x5834;&#x5408;&#x306F;&#x3001;&#x8A08;&#x753B;&#x304C;&#x9069;&#x5207;&#x304B;&#x78BA;&#x8A8D;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Core Modules&quot;,
          &quot;name&quot;: &quot;Core Modules&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nNode has several modules compiled into the binary.  These modules are\ndescribed in greater detail elsewhere in this documentation.\n\nThe core modules are defined in node's source in the `lib/` folder.\n\nCore modules are always preferentially loaded if their identifier is\npassed to `require()`.  For instance, `require('http')` will always\nreturn the built in HTTP module, even if there is a file by that name.\n-->\n\n<p>Node &#x306B;&#x306F;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x306B;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x6E08;&#x307F;&#x306E;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F;&#x3001;&#x3053;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x306E;&#x4ED6;&#x306E;&#x5834;&#x6240;&#x3067;&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x8A18;&#x8FF0;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30B3;&#x30A2;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x3001; Node &#x306E;&#x30BD;&#x30FC;&#x30B9;&#x306E; <code>lib/</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x306B;&#x3066;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>require()</code> &#x3067;&#x306F;&#x5E38;&#x306B;&#x30B3;&#x30A2;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x8B58;&#x5225;&#x540D;&#x3092;&#x512A;&#x5148;&#x7684;&#x306B;&#x89E3;&#x91C8;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070; <code>require(&apos;http&apos;)</code> &#x306F;&#x3001;&#x4F8B;&#x3048;&#x540C;&#x540D;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x5B58;&#x5728;&#x3057;&#x3066;&#x3044;&#x305F;&#x3068;&#x3057;&#x3066;&#x3082;&#x3001;&#x5E38;&#x306B;&#x30D3;&#x30EB;&#x30C8;&#x30A4;&#x30A4;&#x30F3;&#x306E; HTTP &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;File Modules&quot;,
          &quot;name&quot;: &quot;File Modules&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nIf the exact filename is not found, then node will attempt to load the\nrequired filename with the added extension of `.js`, `.json`, and then `.node`.\n\n`.js` files are interpreted as JavaScript text files, and `.json` files are\nparsed as JSON text files. `.node` files are interpreted as compiled addon\nmodules loaded with `dlopen`.\n\nA module prefixed with `'/'` is an absolute path to the file.  For\nexample, `require('/home/marco/foo.js')` will load the file at\n`/home/marco/foo.js`.\n\nA module prefixed with `'./'` is relative to the file calling `require()`.\nThat is, `circle.js` must be in the same directory as `foo.js` for\n`require('./circle')` to find it.\n\nWithout a leading '/' or './' to indicate a file, the module is either a\n\"core module\" or is loaded from a `node_modules` folder.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x540D;&#x524D;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001; Node &#x306F;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x306B;\n<code>.js</code>&#x3001;<code>.json</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>.node</code> &#x3092;&#x4ED8;&#x3051;&#x305F;&#x3082;&#x306E;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3082;&#x3046;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>.js</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F; JavaScript &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x3057;&#x3066;&#x89E3;&#x91C8;&#x3055;&#x308C;&#x3001;\n<code>.json</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F; JSON &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x3057;&#x3066;&#x89E3;&#x91C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x65B9; <code>.node</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x6E08;&#x307F;&#x306E;&#x30A2;&#x30C9;&#x30AA;&#x30F3;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3068;&#x3057;&#x3066;&#x89E3;&#x91C8;&#x3055;&#x308C;&#x3001;\n<code>dlopen</code> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>&apos;/&apos;</code> &#x304B;&#x3089;&#x59CB;&#x307E;&#x308B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3078;&#x306E;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3068;&#x898B;&#x306A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001; <code>require(&apos;/home/marco/foo.js&apos;)</code> &#x306F; <code>/home/macro/foo.js</code> &#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>&apos;./&apos;</code> &#x304B;&#x3089;&#x59CB;&#x307E;&#x308B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x3001; <code>require()</code> &#x3092;&#x547C;&#x3093;&#x3060;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304B;&#x3089;&#x306E;&#x76F8;&#x5BFE;&#x30D1;&#x30B9;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3059;&#x306A;&#x308F;&#x3061;&#x3001; <code>foo.js</code> &#x304B;&#x3089; <code>require(&apos;./circle&apos;)</code> &#x306B;&#x3088;&#x3063;&#x3066; <code>circle.js</code> &#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x306B;&#x306F;&#x3001; <code>circle.js</code> &#x306F; <code>foo.js</code> &#x3068;&#x540C;&#x3058;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x5B58;&#x5728;&#x3057;&#x3066;&#x3044;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<p>&apos;/&apos; &#x3084; &apos;./&apos; &#x304C;&#x5148;&#x982D;&#x306B;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F; &quot;&#x30B3;&#x30A2;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&quot; &#x3067;&#x3042;&#x308B;&#x304B;&#x3082;&#x3057;&#x304F;&#x306F; <code>node_modules</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the given path does not exist, `require()` will throw an Error with its\n`code` property set to `'MODULE_NOT_FOUND'`.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30D1;&#x30B9;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3001;<code>require()</code> &#x306F; <code>code</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306B;\n<code>&apos;MODULE_NOT_FOUND&apos;</code> &#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Loading from `node_modules` Folders&quot;,
          &quot;name&quot;: &quot;Loading from `node_modules` Folders&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nIf the module identifier passed to `require()` is not a native module,\nand does not begin with `'/'`, `'../'`, or `'./'`, then node starts at the\nparent directory of the current module, and adds `/node_modules`, and\nattempts to load the module from that location.\n\nIf it is not found there, then it moves to the parent directory, and so\non, until the root of the tree is reached.\n\nFor example, if the file at `'/home/ry/projects/foo.js'` called\n`require('bar.js')`, then node would look in the following locations, in\nthis order:\n-->\n\n<p>&#x3082;&#x3057; <code>require()</code> &#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x8B58;&#x5225;&#x5B50;&#x304C;&#x30CD;&#x30A4;&#x30C6;&#x30A3;&#x30D6;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x304B;&#x3064;  <code>&apos;/&apos;</code> &#x3084; <code>&apos;../&apos;</code> &#x3084; <code>&apos;./&apos;</code> &#x304B;&#x3089;&#x59CB;&#x307E;&#x3089;&#x306A;&#x3044;&#x306A;&#x3089;&#x3070;&#x3001; Node &#x306F;&#x73FE;&#x5728;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x89AA;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B; <code>&apos;/node_modules&apos;</code> &#x3092;&#x4ED8;&#x4E0E;&#x3057;&#x3066;&#x305D;&#x3053;&#x304B;&#x3089;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3082;&#x3046;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x305D;&#x3053;&#x306B;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x3055;&#x3089;&#x306B;&#x89AA;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x79FB;&#x52D5;&#x3057;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x898B;&#x3064;&#x304B;&#x308B;&#x304B; root &#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x5230;&#x9054;&#x3059;&#x308B;&#x307E;&#x3067;&#x540C;&#x69D8;&#x306E;&#x3053;&#x3068;&#x3092;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x3066;&#x3044;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x4F8B;&#x3048;&#x3070; <code>&apos;/home/ry/projects/foo.js&apos;</code> &#x306E;&#x4E2D;&#x3067; <code>require(&apos;bar.js&apos;)</code> &#x3092;&#x547C;&#x3093;&#x3067;&#x3044;&#x305F;&#x5834;&#x5408;&#x3001; Node &#x306F;&#x4E0B;&#x8A18;&#x306E;&#x4F4D;&#x7F6E;&#x3092;&#x4E0A;&#x304B;&#x3089;&#x9806;&#x756A;&#x306B;&#x898B;&#x3066;&#x3044;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<ul>\n<li><code>/home/ry/projects/node_modules/bar.js</code></li>\n<li><code>/home/ry/node_modules/bar.js</code></li>\n<li><code>/home/node_modules/bar.js</code></li>\n<li><code>/node_modules/bar.js</code></li>\n</ul>\n<!--\nThis allows programs to localize their dependencies, so that they do not\nclash.\n-->\n\n<p>&#x3053;&#x306E;&#x4ED5;&#x7D44;&#x307F;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x30AF;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x3092;&#x907F;&#x3051;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x3092;&#x4E0A;&#x66F8;&#x304D;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x306E;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Folders as Modules&quot;,
          &quot;name&quot;: &quot;Folders as Modules&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nIt is convenient to organize programs and libraries into self-contained\ndirectories, and then provide a single entry point to that library.\nThere are three ways in which a folder may be passed to `require()` as\nan argument.\n\nThe first is to create a `package.json` file in the root of the folder,\nwhich specifies a `main` module.  An example package.json file might\nlook like this:\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3068;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3092;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x5185;&#x306B;&#x307E;&#x3068;&#x3081;&#x3066;&#x3001;&#x305D;&#x306E;&#x30A8;&#x30F3;&#x30C8;&#x30EA;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092;&#x63D0;&#x793A;&#x3059;&#x308B;&#x3068;&#x3044;&#x3046;&#x4FBF;&#x5229;&#x306A;&#x65B9;&#x6CD5;&#x3082;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306B;&#x306F; <code>require()</code> &#x306B;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x4F55;&#x3092;&#x6E21;&#x3059;&#x304B;&#x306B;&#x3088;&#x3063;&#x3066;3&#x901A;&#x308A;&#x306E;&#x65B9;&#x6CD5;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>1&#x3064;&#x76EE;&#x306F;&#x3001; <code>package.json</code> &#x3068;&#x3044;&#x3046;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x76F4;&#x4E0B;&#x306B;&#x4F5C;&#x6210;&#x3057;&#x3001; <code>main</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3044;&#x3046;&#x65B9;&#x6CD5;&#x3067;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001; package.json &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x3088;&#x3046;&#x306A;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<pre><code>{ &quot;name&quot; : &quot;some-library&quot;,\n  &quot;main&quot; : &quot;./lib/some-library.js&quot; }</code></pre>\n<!--\nIf this was in a folder at `./some-library`, then\n`require('./some-library')` would attempt to load\n`./some-library/lib/some-library.js`.\n\nThis is the extent of Node's awareness of package.json files.\n\nIf there is no package.json file present in the directory, then node\nwill attempt to load an `index.js` or `index.node` file out of that\ndirectory.  For example, if there was no package.json file in the above\nexample, then `require('./some-library')` would attempt to load:\n-->\n\n<p>&#x3082;&#x3057; <code>./some-library</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x5185;&#x306B;&#x3053;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x3042;&#x308C;&#x3070;&#x3001; <code>require(&apos;./some-library&apos;)</code> &#x306F; <code>./some-library/lib/some-library.js</code> &#x3092;&#x8AAD;&#x307F;&#x306B;&#x3044;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x3001; Node &#x304C; package.json &#x306E;&#x5B58;&#x5728;&#x306B;&#x6C17;&#x3065;&#x304F;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x3082;&#x305F;&#x3089;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; package.json &#x304C;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x5B58;&#x5728;&#x3057;&#x3066;&#x3044;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001; Node &#x306F;&#x305D;&#x306E;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3067; <code>index.js</code> &#x3082;&#x3057;&#x304F;&#x306F; <code>index.node</code> &#x3092;&#x63A2;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;&#x3082;&#x3057;&#x4E0A;&#x306E;&#x4F8B;&#x3067; package.json &#x304C;&#x3044;&#x308B;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x3068;&#x3059;&#x308B;&#x3068;&#x3001; <code>require(&apos;./some-library&apos;)</code> &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3082;&#x3046;&#x3068;&#x3057;&#x307E;&#x3059;: \n\n</p>\n<ul>\n<li><code>./some-library/index.js</code></li>\n<li><code>./some-library/index.node</code></li>\n</ul>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Caching&quot;,
          &quot;name&quot;: &quot;Caching&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nModules are cached after the first time they are loaded.  This means\n(among other things) that every call to `require('foo')` will get\nexactly the same object returned, if it would resolve to the same file.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x521D;&#x3081;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x3068;&#x304D;&#x306B;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3059;&#x306A;&#x308F;&#x3061;&#xFF08;&#x4ED6;&#x306E;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x3068;&#x540C;&#x69D8;&#x306B;&#xFF09; <code>require(&apos;foo&apos;)</code> &#x3092;&#x547C;&#x3076;&#x305F;&#x3073;&#x306B;&#x3001;&#x3082;&#x3057;&#x5F15;&#x6570;&#x306E;&#x610F;&#x5473;&#x3059;&#x308B;&#x3082;&#x306E;&#x304C;&#x540C;&#x4E00;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3067;&#x3042;&#x3063;&#x305F;&#x306A;&#x3089;&#x5168;&#x304F;&#x540C;&#x4E00;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nMultiple calls to `require('foo')` may not cause the module code to be\nexecuted multiple times.  This is an important feature.  With it,\n\"partially done\" objects can be returned, thus allowing transitive\ndependencies to be loaded even when they would cause cycles.\n-->\n\n<p><code>require(&apos;foo&apos;)</code> &#x304C;&#x8907;&#x6570;&#x56DE;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x8907;&#x6570;&#x56DE;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x306F;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x91CD;&#x8981;&#x306A;&#x7279;&#x5FB4;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;&#x300C;&#x90E8;&#x5206;&#x7684;&#x306B;&#x5B8C;&#x4E86;&#x3057;&#x305F;&#x300D;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x3067;&#x3001;\n&#x63A8;&#x79FB;&#x7684;&#x306A;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x304C;&#x5FAA;&#x74B0;&#x3057;&#x3066;&#x3044;&#x3066;&#x3082;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you want to have a module execute code multiple times, then export a\nfunction, and call that function.\n-->\n\n<p>&#x3082;&#x3057;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x8907;&#x6570;&#x56DE;&#x5B9F;&#x884C;&#x3057;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;&#x95A2;&#x6570;&#x3092;&#x516C;&#x958B;&#x3057;&#x3066;&#x3001;\n&#x305D;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;miscs&quot;: [
            {
              &quot;textRaw&quot;: &quot;Module Caching Caveats&quot;,
              &quot;name&quot;: &quot;Module Caching Caveats&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;desc&quot;: &quot;<!--\nModules are cached based on their resolved filename.  Since modules may\nresolve to a different filename based on the location of the calling\nmodule (loading from `node_modules` folders), it is not a *guarantee*\nthat `require('foo')` will always return the exact same object, if it\nwould resolve to different files.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x306B;&#x57FA;&#x3065;&#x3044;&#x3066;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x7570;&#x306A;&#x308B;&#x5834;&#x6240;&#x306B;&#x3042;&#x308B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304B;&#x3089;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x3001;\n(<code>node_module</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x304B;&#x3089;&#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;) &#x7570;&#x306A;&#x3063;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3067;\n&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308B;&#x305F;&#x3081;&#x3001; <code>require(&apos;foo&apos;)</code> &#x304C;&#x5E38;&#x306B;&#x540C;&#x3058;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3059;\n<em>&#x4FDD;&#x8A3C;</em>&#x306F;&#x306A;&#x304F;&#x3001;&#x7570;&#x306A;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x3057;&#x3066;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;All Together...&quot;,
          &quot;name&quot;: &quot;All Together...&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nTo get the exact filename that will be loaded when `require()` is called, use\nthe `require.resolve()` function.\n-->\n\n<p><code>require()</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x6B63;&#x78BA;&#x306A;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3092;&#x5F97;&#x308B;&#x305F;&#x3081;&#x306B; <code>require.resolve()</code> &#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nPutting together all of the above, here is the high-level algorithm\nin pseudocode of what require.resolve does:\n-->\n\n<p>&#x4E0A;&#x3067;&#x8FF0;&#x3079;&#x305F;&#x3053;&#x3068;&#x3092;&#x307E;&#x3068;&#x3081;&#x308B;&#x3068;&#x3001; require.resolve &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x64EC;&#x4F3C;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x8A18;&#x8FF0;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306A;&#x30CF;&#x30A4;&#x30EC;&#x30D9;&#x30EB;&#x306A;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x306B;&#x5247;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;:\n\n</p>\n<pre><code>require(X) from module at path Y\n1. If X is a core module,\n   a. return the core module\n   b. STOP\n2. If X begins with &apos;./&apos; or &apos;/&apos; or &apos;../&apos;\n   a. LOAD_AS_FILE(Y + X)\n   b. LOAD_AS_DIRECTORY(Y + X)\n3. LOAD_NODE_MODULES(X, dirname(Y))\n4. THROW &quot;not found&quot;\n\nLOAD_AS_FILE(X)\n1. If X is a file, load X as JavaScript text.  STOP\n2. If X.js is a file, load X.js as JavaScript text.  STOP\n3. If X.node is a file, load X.node as binary addon.  STOP\n\nLOAD_AS_DIRECTORY(X)\n1. If X/package.json is a file,\n   a. Parse X/package.json, and look for &quot;main&quot; field.\n   b. let M = X + (json main field)\n   c. LOAD_AS_FILE(M)\n2. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n3. If X/index.node is a file, load X/index.node as binary addon.  STOP\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS=NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_AS_FILE(DIR/X)\n   b. LOAD_AS_DIRECTORY(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let ROOT = index of first instance of &quot;node_modules&quot; in PARTS, or 0\n3. let I = count of PARTS - 1\n4. let DIRS = []\n5. while I &gt; ROOT,\n   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE\n   c. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)\n   b. DIRS = DIRS + DIR\n   c. let I = I - 1\n6. return DIRS</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Loading from the global folders&quot;,
          &quot;name&quot;: &quot;Loading from the global folders&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nIf the `NODE_PATH` environment variable is set to a colon-delimited list\nof absolute paths, then node will search those paths for modules if they\nare not found elsewhere.  (Note: On Windows, `NODE_PATH` is delimited by\nsemicolons instead of colons.)\n\nAdditionally, node will search in the following locations:\n-->\n\n<p><code>NODE_PATH</code> &#x74B0;&#x5883;&#x5909;&#x6570;&#x306B;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x30B3;&#x30ED;&#x30F3;&#x3067;&#x533A;&#x5207;&#x3063;&#x305F;&#x30EA;&#x30B9;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;\nnode &#x306F;&#x4ED6;&#x3067;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x304B;&#x3063;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x305D;&#x308C;&#x3089;&#x306E;&#x30D1;&#x30B9;&#x304B;&#x3089;&#x63A2;&#x3057;&#x307E;&#x3059;&#x3002;\n(&#x6CE8;&#x610F;: Windows &#x3067;&#x306F;&#x3001;<code>NODE_PATH</code> &#x306F;&#x30B3;&#x30ED;&#x30F3;&#x3067;&#x306F;&#x306A;&#x304F;&#x30BB;&#x30DF;&#x30B3;&#x30ED;&#x30F3;&#x3067;&#x533A;&#x5207;&#x3089;&#x308C;&#x307E;&#x3059;)\n\n</p>\n<p>&#x52A0;&#x3048;&#x308B;&#x3068;&#x3001;node &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x5834;&#x6240;&#x304B;&#x3089;&#x691C;&#x7D22;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<ul>\n<li>1: <code>$HOME/.node_modules</code></li>\n<li>2: <code>$HOME/.node_libraries</code></li>\n<li>3: <code>$PREFIX/lib/node</code></li>\n</ul>\n<!--\nWhere `$HOME` is the user's home directory, and `$PREFIX` is node's\nconfigured `node_prefix`.\n\nThese are mostly for historic reasons.  You are highly encouraged to\nplace your dependencies locally in `node_modules` folders.  They will be\nloaded faster, and more reliably.\n-->\n\n<p><code>$HOME</code> &#x306F;&#x30E6;&#x30FC;&#x30B6;&#x306E;&#x30DB;&#x30FC;&#x30E0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3001;<code>$PREFIX</code> &#x306F; node &#x3092;\nconfigure &#x3057;&#x305F;&#x6642;&#x306E; <code>node_prefix</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x3089;&#x306F;&#x4E3B;&#x306B;&#x6B74;&#x53F2;&#x7684;&#x306A;&#x7406;&#x7531;&#x306B;&#x3088;&#x308B;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x3042;&#x306A;&#x305F;&#x304C;&#x4F9D;&#x5B58;&#x3059;&#x308B;&#x3082;&#x306E;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x306E; <code>node_modules</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x306B;&#x7F6E;&#x304F;&#x3053;&#x3068;&#x304C;\n&#x5F37;&#x304F;&#x63A8;&#x5968;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x305D;&#x308C;&#x306F;&#x7D20;&#x65E9;&#x304F;&#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x3001;&#x78BA;&#x5B9F;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Accessing the main module&quot;,
          &quot;name&quot;: &quot;Accessing the main module&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nWhen a file is run directly from Node, `require.main` is set to its\n`module`. That means that you can determine whether a file has been run\ndirectly by testing\n-->\n\n<p>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;Node&#x306B;&#x3088;&#x3063;&#x3066;&#x76F4;&#x63A5;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;&#x305D;&#x306E; <code>module</code> &#x304C;\n<code>require.main</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x76F4;&#x63A5;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x305F;&#x304B;&#x3092;&#x6C7A;&#x5B9A;&#x3067;&#x304D;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>require.main === module</code></pre>\n<!--\nFor a file `foo.js`, this will be `true` if run via `node foo.js`, but\n`false` if run by `require('./foo')`.\n\nBecause `module` provides a `filename` property (normally equivalent to\n`__filename`), the entry point of the current application can be obtained\nby checking `require.main.filename`.\n-->\n\n<p><code>foo.js</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x5834;&#x5408;&#x3001;<code>node foo.js</code> &#x3068;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x3053;&#x308C;&#x306F; <code>true</code> \n&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x304C;&#x3001;<code>require(&apos;./foo&apos;)</code> &#x3067;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F; <code>false</code> &#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>module</code> &#x306F; <code>filename</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3; (&#x901A;&#x5E38; <code>__filename</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;) \n&#x3092;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x305F;&#x3081;&#x3001;&#x73FE;&#x5728;&#x306E;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30A8;&#x30F3;&#x30C8;&#x30EA;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306F;\n<code>require.main.filename</code> &#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x5F97;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Addenda: Package Manager Tips&quot;,
          &quot;name&quot;: &quot;Addenda: Package Manager Tips&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nThe semantics of Node's `require()` function were designed to be general\nenough to support a number of sane directory structures. Package manager\nprograms such as `dpkg`, `rpm`, and `npm` will hopefully find it possible to\nbuild native packages from Node modules without modification.\n-->\n\n<p>Node &#x306E; <code>require()</code> &#x306F;&#x666E;&#x901A;&#x306E;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x69CB;&#x9020;&#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x6C4E;&#x7528;&#x7684;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n<code>dpkg</code> &#x3084; <code>rpm</code> &#x3084; <code>npm</code> &#x306E;&#x3088;&#x3046;&#x306A;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x7BA1;&#x7406;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x4FEE;&#x6B63;&#x306A;&#x3057;&#x306B; Node &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304B;&#x3089;&#x30CD;&#x30A4;&#x30C6;&#x30A3;&#x30D6;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3092;&#x7D44;&#x307F;&#x7ACB;&#x3066;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nBelow we give a suggested directory structure that could work:\n\nLet's say that we wanted to have the folder at\n`/usr/lib/node/<some-package>/<some-version>` hold the contents of a\nspecific version of a package.\n-->\n\n<p>&#x63A8;&#x5968;&#x3059;&#x308B;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x69CB;&#x9020;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<p>&#x4F8B;&#x3048;&#x3070; <code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x306B;&#x3001;&#x3042;&#x308B;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306E;&#x7279;&#x5B9A;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x4FDD;&#x6301;&#x3059;&#x308B;&#x5F62;&#x5F0F;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nPackages can depend on one another. In order to install package `foo`, you\nmay have to install a specific version of package `bar`.  The `bar` package\nmay itself have dependencies, and in some cases, these dependencies may even\ncollide or form cycles.\n-->\n\n<p>&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306F;&#x76F8;&#x4E92;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x3042;&#x3046;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>foo</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3092;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x306F;&#x3042;&#x308B;&#x7279;&#x5B9A;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E; <code>bar</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3092;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>bar</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x81EA;&#x8EAB;&#x3082;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x3092;&#x3082;&#x3063;&#x3066;&#x3044;&#x308B;&#x306E;&#x3067;&#x3001;&#x3068;&#x304D;&#x306B;&#x306F;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x304C;&#x885D;&#x7A81;&#x3057;&#x305F;&#x308A;&#x5FAA;&#x74B0;&#x3057;&#x305F;&#x308A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nSince Node looks up the `realpath` of any modules it loads (that is,\nresolves symlinks), and then looks for their dependencies in the\n`node_modules` folders as described above, this situation is very simple to\nresolve with the following architecture:\n-->\n\n<p>Node &#x306F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E; <code>realpath</code> &#xFF08;&#x30B7;&#x30F3;&#x30DC;&#x30EA;&#x30C3;&#x30AF;&#x30EA;&#x30F3;&#x30AF;&#x3092;&#x89E3;&#x91C8;&#x3057;&#x307E;&#x3059;&#xFF09;&#x3092;&#x8ABF;&#x3079;&#x3001;&#x305D;&#x306E;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x3092;&#x4E0A;&#x8FF0;&#x306E; <code>node_modules</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x306E;&#x4ED5;&#x7D44;&#x307F;&#x3067;&#x63A2;&#x3057;&#x306B;&#x3044;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306B;&#x3088;&#x3063;&#x3066;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306A;&#x69CB;&#x9020;&#x3092;&#x3068;&#x3066;&#x3082;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306B;&#x89E3;&#x91C8;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* `/usr/lib/node/foo/1.2.3/` - Contents of the `foo` package, version 1.2.3.\n* `/usr/lib/node/bar/4.3.2/` - Contents of the `bar` package that `foo`\n  depends on.\n* `/usr/lib/node/foo/1.2.3/node_modules/bar` - Symbolic link to\n  `/usr/lib/node/bar/4.3.2/`.\n* `/usr/lib/node/bar/4.3.2/node_modules/*` - Symbolic links to the packages\n  that `bar` depends on.\n-->\n\n<ul>\n<li><code>/usr/lib/node/foo/1.2.3/</code> - <code>foo</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306E;&#x4E2D;&#x8EAB;&#x3002;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;1.2.3&#x3002;</li>\n<li><code>/usr/lib/node/bar/4.3.2/</code> - <code>bar</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306E;&#x4E2D;&#x8EAB;&#x3002; <code>foo</code> &#x304C;&#x4F9D;&#x5B58;&#x3057;&#x3066;&#x3044;&#x308B;&#x3002;</li>\n<li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> - <code>/usr/lib/node/bar/4.3.2/</code> &#x3078;&#x306E;&#x30B7;&#x30F3;&#x30DC;&#x30EA;&#x30C3;&#x30AF;&#x30EA;&#x30F3;&#x30AF;&#x3002;</li>\n<li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code> - <code>bar</code> &#x304C;&#x4F9D;&#x5B58;&#x3057;&#x3066;&#x3044;&#x308B;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3078;&#x306E;&#x30B7;&#x30F3;&#x30DC;&#x30EA;&#x30C3;&#x30AF;&#x30EA;&#x30F3;&#x30AF;&#x3002;</li>\n</ul>\n<!--\nThus, even if a cycle is encountered, or if there are dependency\nconflicts, every module will be able to get a version of its dependency\nthat it can use.\n\nWhen the code in the `foo` package does `require('bar')`, it will get the\nversion that is symlinked into `/usr/lib/node/foo/1.2.3/node_modules/bar`.\nThen, when the code in the `bar` package calls `require('quux')`, it'll get\nthe version that is symlinked into\n`/usr/lib/node/bar/4.3.2/node_modules/quux`.\n\nFurthermore, to make the module lookup process even more optimal, rather\nthan putting packages directly in `/usr/lib/node`, we could put them in\n`/usr/lib/node_modules/<name>/<version>`.  Then node will not bother\nlooking for missing dependencies in `/usr/node_modules` or `/node_modules`.\n\nIn order to make modules available to the node REPL, it might be useful to\nalso add the `/usr/lib/node_modules` folder to the `$NODE_PATH` environment\nvariable.  Since the module lookups using `node_modules` folders are all\nrelative, and based on the real path of the files making the calls to\n`require()`, the packages themselves can be anywhere.\n-->\n\n<p>&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x3057;&#x3066;&#x3001;&#x3082;&#x3057;&#x4EEE;&#x306B;&#x4F9D;&#x5B58;&#x95A2;&#x4FC2;&#x306B;&#x5FAA;&#x74B0;&#x3084;&#x885D;&#x7A81;&#x304C;&#x898B;&#x3064;&#x304B;&#x3063;&#x305F;&#x3068;&#x3057;&#x3066;&#x3082;&#x3001;&#x5168;&#x3066;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x4F9D;&#x5B58;&#x3057;&#x3066;&#x3044;&#x308B;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306E;&#x7279;&#x5B9A;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>foo</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x306E;&#x4E2D;&#x3067; <code>require(&apos;bar&apos;)</code> &#x3057;&#x305F;&#x3089;&#x3001; <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> &#x304B;&#x3089;&#x30EA;&#x30F3;&#x30AF;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3057;&#x3066;&#x3001; <code>bar</code> &#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x5185;&#x3067; <code>require(&apos;quux&apos;)</code> &#x3092;&#x547C;&#x3093;&#x3060;&#x3089;&#x3001; <code>/usr/lib/node/bar/4.3.2/node_modules/quux</code> &#x304B;&#x3089;&#x30EA;&#x30F3;&#x30AF;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3055;&#x3089;&#x306B;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x63A2;&#x7D22;&#x3059;&#x308B;&#x904E;&#x7A0B;&#x3092;&#x3088;&#x308A;&#x6700;&#x9069;&#x5316;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001; <code>/usr/lib/node</code> &#x306B;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3092;&#x7F6E;&#x304F;&#x3088;&#x308A;&#x3082; <code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code> &#x306B;&#x7F6E;&#x304F;&#x306E;&#x3092;&#x304A;&#x52E7;&#x3081;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067; Node &#x306F;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x3044;&#x4F9D;&#x5B58;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x3092; <code>/usr/node_modules</code> &#x3084; <code>/node_modules</code> &#x306B;&#x63A2;&#x3057;&#x306B;&#x3044;&#x304B;&#x306A;&#x304F;&#x3066;&#x3082;&#x3088;&#x3046;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>Node &#x306E; REPL &#x3067;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x4F7F;&#x3048;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001; <code>/usr/lib/node_modules</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x3092; <code>$NODE_PATH</code> &#x74B0;&#x5883;&#x5909;&#x6570;&#x306B;&#x8FFD;&#x52A0;&#x3059;&#x308B;&#x3068;&#x3088;&#x3044;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n<code>node_modules</code> &#x30D5;&#x30A9;&#x30EB;&#x30C0;&#x3092;&#x4F7F;&#x3063;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x63A2;&#x7D22;&#x306F;&#x5168;&#x3066;&#x76F8;&#x5BFE;&#x7684;&#x306A;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001; <code>require()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x57FA;&#x6E96;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x306E;&#x3067;&#x3001;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x81EA;&#x4F53;&#x306F;&#x3069;&#x3053;&#x306B;&#x3067;&#x3082;&#x914D;&#x7F6E;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;vars&quot;: [
        {
          &quot;textRaw&quot;: &quot;The `module` Object&quot;,
          &quot;name&quot;: &quot;The `module` Object&quot;,
          &quot;type&quot;: &quot;var&quot;,
          &quot;desc&quot;: &quot;<p>!-- name=module --&gt;\n\n</p>\n<ul>\n<li>{Object}</li>\n</ul>\n<!--\nIn each module, the `module` free variable is a reference to the object\nrepresenting the current module.  For convenience, `module.exports` is\nalso accessible via the `exports` module-global. `module` isn't actually\na global but rather local to each module.\n-->\n\n<p>&#x3069;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3067;&#x3082;&#x3001;<code>module</code> &#x81EA;&#x7531;&#x5909;&#x6570;&#x306F;&#x73FE;&#x5728;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;\n&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5229;&#x4FBF;&#x6027;&#x306E;&#x305F;&#x3081;&#x3001;<code>module.exports</code> &#x306F; <code>exports</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x901A;&#x3058;&#x3066;\n&#x53C2;&#x7167;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>module</code> &#x306F;&#x5B9F;&#x969B;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5404;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x5909;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;`exports` {Object} &quot;,
              &quot;name&quot;: &quot;exports&quot;,
              &quot;desc&quot;: &quot;<!--\nThe `module.exports` object is created by the Module system. Sometimes this is not\nacceptable; many want their module to be an instance of some class. To do this\nassign the desired export object to `module.exports`. Note that assigning the\ndesired object to `exports` will simply rebind the local `exports` variable,\nwhich is probably not what you want to do.\n-->\n\n<p><code>module.exports</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6642;&#x3005;&#x3053;&#x308C;&#x306F;&#x53D7;&#x3051;&#x5165;&#x308C;&#x3089;&#x307E;&#x305B;&#x3093;;\n&#x591A;&#x304F;&#x306E;&#x4EBA;&#x3005;&#x306F;&#x3001;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x4F55;&#x3089;&#x304B;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x671B;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306B;&#x306F;&#x3001;&#x516C;&#x958B;&#x3057;&#x305F;&#x3044;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092; <code>module.exports</code> &#x306B;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n&#x671B;&#x307E;&#x3057;&#x3044;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092; <code>exports</code> &#x3078;&#x4EE3;&#x5165;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3001;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x5909;&#x6570; <code>exports</code> &#x3078;&#x306E;\n&#x518D;&#x4EE3;&#x5165;&#x306B;&#x904E;&#x304E;&#x305A;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3059;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x304A;&#x305D;&#x3089;&#x304F;&#x3001;&#x3084;&#x308A;&#x305F;&#x304B;&#x3063;&#x305F;&#x3053;&#x3068;&#x3067;&#x306F;&#x306A;&#x3044;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nFor example suppose we were making a module called `a.js`\n-->\n\n<p>&#x4F8B;&#x3048;&#x3070; <code>a.js</code> &#x3068;&#x547C;&#x3070;&#x308C;&#x308B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x4F5C;&#x308B;&#x3068;&#x3057;&#x305F;&#x3089;\n\n</p>\n<pre><code>var EventEmitter = require(&apos;events&apos;).EventEmitter;\n\nmodule.exports = new EventEmitter();\n\n// Do some work, and after some time emit\n// the &apos;ready&apos; event from the module itself.\nsetTimeout(function() {\n  module.exports.emit(&apos;ready&apos;);\n}, 1000);</code></pre>\n<!--\nThen in another file we could do\n-->\n\n<p>&#x305D;&#x3057;&#x3066;&#x5225;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3067;\n\n</p>\n<pre><code>var a = require(&apos;./a&apos;);\na.on(&apos;ready&apos;, function() {\n  console.log(&apos;module a is ready&apos;);\n});</code></pre>\n<!--\nNote that assignment to `module.exports` must be done immediately. It cannot be\ndone in any callbacks.  This does not work:\n-->\n\n<p><code>module.exports</code> &#x3078;&#x306E;&#x4EE3;&#x5165;&#x306F;&#x3059;&#x3050;&#x306B;&#x884C;&#x308F;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306E;&#x4E2D;&#x3067;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;&#x4EE5;&#x4E0B;&#x306F;&#x52D5;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<p>x.js:\n\n</p>\n<pre><code>setTimeout(function() {\n  module.exports = { a: &quot;hello&quot; };\n}, 0);</code></pre>\n<p>y.js:\n\n</p>\n<pre><code>var x = require(&apos;./x&apos;);\nconsole.log(x.a);</code></pre>\n&quot;,
              &quot;modules&quot;: [
                {
                  &quot;textRaw&quot;: &quot;exports alias&quot;,
                  &quot;name&quot;: &quot;exports_alias&quot;,
                  &quot;desc&quot;: &quot;<!--\nThe `exports` variable that is available within a module starts as a reference\nto `module.exports`. As with any variable, if you assign a new value to it, it\nis no longer bound to the previous value.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x5185;&#x3067;&#x5229;&#x7528;&#x51FA;&#x6765;&#x308B; <code>exports</code> &#x5909;&#x6570;&#x306F;&#x3001;&#x6700;&#x521D;&#x306F; <code>module.exports</code>\n&#x3078;&#x306E;&#x53C2;&#x7167;&#x3067;&#x3059;&#x3002;\n&#x4ED6;&#x306E;&#x5909;&#x6570;&#x3068;&#x540C;&#x69D8;&#x3001;&#x305D;&#x308C;&#x306B;&#x65B0;&#x3057;&#x3044;&#x5024;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x308B;&#x3068;&#x5143;&#x306E;&#x5024;&#x306F;&#x3082;&#x306F;&#x3084;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nTo illustrate the behaviour, imagine this hypothetical implementation of\n`require()`:\n-->\n\n<p>&#x305D;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x3092;&#x793A;&#x3059;&#x305F;&#x3081;&#x306B;&#x3001;&#x3053;&#x306E;&#x4EEE;&#x5B9A;&#x306E;&#x5B9F;&#x88C5;&#x3092;&#x60F3;&#x50CF;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>function require(...) {\n  // ...\n  function (module, exports) {\n    // Your module code here\n    exports = some_func;        // re-assigns exports, exports is no longer\n                                // a shortcut, and nothing is exported.\n    module.exports = some_func; // makes your module export 0\n  } (module, module.exports);\n  return module;\n}</code></pre>\n<!--\nAs a guideline, if the relationship between `exports` and `module.exports`\nseems like magic to you, ignore `exports` and only use `module.exports`.\n-->\n\n<p>&#x30AC;&#x30A4;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x3068;&#x3057;&#x3066;&#x3001;&#x3082;&#x3057; <code>exports</code> &#x3068; <code>module.exports</code> &#x306E;&#x9593;&#x306E;&#x95A2;&#x4FC2;&#x304C;&#x9B54;&#x6CD5;&#x306E;&#x3088;&#x3046;&#x306B;\n&#x898B;&#x3048;&#x308B;&#x306A;&#x3089;&#x3001;<code>exports</code> &#x3092;&#x7121;&#x8996;&#x3057;&#x3066; <code>module.exports</code> &#x3060;&#x3051;&#x3092;&#x4F7F;&#x3046;&#x3088;&#x3046;&#x306B;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
                  &quot;type&quot;: &quot;module&quot;,
                  &quot;displayName&quot;: &quot;exports alias&quot;
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;`id` {String} &quot;,
              &quot;name&quot;: &quot;id&quot;,
              &quot;desc&quot;: &quot;<!--\nThe identifier for the module.  Typically this is the fully resolved\nfilename.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x8B58;&#x5225;&#x5B50;&#x3002;&#x901A;&#x5E38;&#x306F;&#x5B8C;&#x5168;&#x306B;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`filename` {String} &quot;,
              &quot;name&quot;: &quot;filename&quot;,
              &quot;desc&quot;: &quot;<!--\nThe fully resolved filename to the module.\n-->\n\n<p>&#x5B8C;&#x5168;&#x306B;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`loaded` {Boolean} &quot;,
              &quot;name&quot;: &quot;loaded&quot;,
              &quot;desc&quot;: &quot;<!--\nWhether or not the module is done loading, or is in the process of\nloading.\n-->\n\n<p>&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30ED;&#x30FC;&#x30C9;&#x304C;&#x5B8C;&#x4E86;&#x3057;&#x305F;&#x304B;&#xFF0C;&#x3042;&#x308B;&#x3044;&#x306F;&#x30ED;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x4E2D;&#x304B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`parent` {Module Object} &quot;,
              &quot;name&quot;: &quot;parent&quot;,
              &quot;desc&quot;: &quot;<!--\nThe module that required this one.\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x8981;&#x6C42;&#x3057;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`children` {Array} &quot;,
              &quot;name&quot;: &quot;children&quot;,
              &quot;desc&quot;: &quot;<!--\nThe module objects required by this one.\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x8981;&#x6C42;&#x3057;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3067;&#x3059;&#x3002;\n\n\n\n</p>\n&quot;
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;module.require(id)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;require&quot;,
              &quot;desc&quot;: &quot;<!--\n* `id` {String}\n* Return: {Object} `module.exports` from the resolved module\n-->\n\n<ul>\n<li><code>id</code> {String}</li>\n<li>Return: {Object} &#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E; <code>module.exports</code></li>\n</ul>\n<!--\nThe `module.require` method provides a way to load a module as if\n`require()` was called from the original module.\n-->\n\n<p><code>module.require</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3001;&#x5143;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C; <code>require()</code>\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x304B;&#x306E;&#x3088;&#x3046;&#x306B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that in order to do this, you must get a reference to the `module`\nobject.  Since `require()` returns the `module.exports`, and the `module` is\ntypically *only* available within a specific module's code, it must be\nexplicitly exported in order to be used.\n-->\n\n<p>&#x305D;&#x308C;&#x306B;&#x306F; <code>module</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x53C2;&#x7167;&#x304C;&#x5FC5;&#x8981;&#x306A;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n<code>require()</code> &#x304C; <code>module.exports</code> &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5F8C;&#x3001;&#x4E00;&#x822C;&#x7684;&#x306B; <code>module</code> \n&#x306F;&#x305D;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3067; <em>&#x306E;&#x307F;</em> &#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;&#x660E;&#x793A;&#x7684;&#x306B;&#x30A8;&#x30AF;&#x30B9;&#x30DD;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;id&quot;
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;module&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Addons&quot;,
      &quot;name&quot;: &quot;addons&quot;,
      &quot;desc&quot;: &quot;<!--\nAddons are dynamically linked shared objects. They can provide glue to C and\nC++ libraries. The API (at the moment) is rather complex, involving\nknowledge of several libraries:\n-->\n\n<p>&#x30A2;&#x30C9;&#x30AA;&#x30F3;&#x306F;&#x52D5;&#x7684;&#x306B;&#x5171;&#x6709;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x30EA;&#x30F3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306F;&#x3001;C &#x3084; C++ &#x306E;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x306B;&#x63A5;&#x5408;&#x70B9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\nAPI &#x306F;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x306E;&#x77E5;&#x8B58;&#x304C;&#x5FC5;&#x8981;&#x3067;&#x3001;(&#x73FE;&#x6642;&#x70B9;&#x3067;&#x306F;) &#x304B;&#x306A;&#x308A;&#x8907;&#x96D1;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n - V8 JavaScript, a C++ library. Used for interfacing with JavaScript:\n   creating objects, calling functions, etc.  Documented mostly in the\n   `v8.h` header file (`deps/v8/include/v8.h` in the Node source\n   tree), which is also available\n   [online](http://izs.me/v8-docs/main.html).\n-->\n\n<ul>\n<li>V8 JavaScript &#x306F; C++ &#x306E;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3067;&#x3059;&#x3002;\nJavaScript &#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x4F5C;&#x6210;&#x3084;&#x95A2;&#x6570;&#x547C;&#x3073;&#x51FA;&#x3057;&#x7B49;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306B;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x306F;&#x4E3B;&#x306B;&#x3001;<code>v8.h</code> &#x306E;&#x30D8;&#x30C3;&#x30C0;&#x30D5;&#x30A1;&#x30A4;&#x30EB;\n(Node &#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30C4;&#x30EA;&#x30FC;&#x306E;&#x4E2D;&#x306E; <code>deps/v8/include/v8.h</code>) &#x306B;&#x8A18;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;\n<a href="\&quot;http://izs.me/v8-docs/main.html\&quot;">&#x30AA;&#x30F3;&#x30E9;&#x30A4;&#x30F3;</a> &#x3067;&#x53C2;&#x7167;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\n - [libuv](https://github.com/joyent/libuv), C event loop library.\n   Anytime one needs to wait for a file descriptor to become readable,\n   wait for a timer, or wait for a signal to be received one will need\n   to interface with libuv. That is, if you perform any I/O, libuv will\n   need to be used.\n-->\n\n<ul>\n<li><a href="\&quot;https://github.com/joyent/libuv\&quot;">libuv</a> &#x306F;\nC &#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3067;&#x3059;&#x3002;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;&#x8AAD;&#x307F;&#x53D6;&#x308A;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;&#x306E;&#x3092;&#x5F85;&#x3064;&#x3068;&#x304D;&#x3001;&#x30BF;&#x30A4;&#x30DE;&#x30FC;&#x3092;&#x5F85;&#x3064;&#x3068;&#x304D;&#x3001;\n&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x53D7;&#x4FE1;&#x3059;&#x308B;&#x306E;&#x3092;&#x5F85;&#x3064;&#x3068;&#x304D;&#x306F;&#x3044;&#x3064;&#x3067;&#x3082;&#x3001;\nlibv &#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x304C;&#x5FC5;&#x8981;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3064;&#x307E;&#x308A;&#x3001;&#x4F55;&#x3089;&#x304B;&#x306E; I/O &#x51E6;&#x7406;&#x3092;&#x3059;&#x308B;&#x3068;&#x5FC5;&#x305A; libuv &#x3092;&#x4F7F;&#x3046;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308B;&#x3068;&#x3044;&#x3046;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;</li>\n</ul>\n<!--\n - Internal Node libraries. Most importantly is the `node::ObjectWrap`\n   class which you will likely want to derive from.\n-->\n\n<ul>\n<li>Node &#x306E;&#x5185;&#x90E8;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3002;\n&#x3082;&#x3063;&#x3068;&#x3082;&#x91CD;&#x8981;&#x306A;&#x306E;&#x306F; <code>node::ObjectWrap</code> &#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;\n&#x3053;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x304B;&#x3089;&#x6D3E;&#x751F;&#x3055;&#x305B;&#x308B;&#x3053;&#x3068;&#x304C;&#x591A;&#x304F;&#x306A;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;</li>\n</ul>\n<!--\n - Others. Look in `deps/` for what else is available.\n-->\n\n<ul>\n<li>&#x305D;&#x306E;&#x4ED6;&#x3002;&#x3069;&#x306E;&#x3088;&#x3046;&#x306A;&#x7269;&#x304C;&#x5229;&#x7528;&#x3067;&#x304D;&#x308B;&#x304B;&#x306F; <code>deps/</code> &#x4EE5;&#x4E0B;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x3055;&#x3044;&#x3002;</li>\n</ul>\n<!--\nNode statically compiles all its dependencies into the executable.\nWhen compiling your module, you don't need to worry about linking to\nany of these libraries.\n-->\n\n<p>Node &#x306F;&#x5168;&#x3066;&#x306E;&#x4F9D;&#x5B58;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3092;&#x5B9F;&#x884C;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x9759;&#x7684;&#x306B;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x6642;&#x306B;&#x306F;&#x3001;&#x305D;&#x308C;&#x3089;&#x306E;&#x30EA;&#x30F3;&#x30AF;&#x306B;&#x3064;&#x3044;&#x3066;&#x4E00;&#x5207;&#x6C17;&#x306B;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x6709;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nAll of the following examples are available for\n[download](https://github.com/rvagg/node-addon-examples) and may be\nused as a starting-point for your own Addon.\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E;&#x30B5;&#x30F3;&#x30D7;&#x30EB;&#x306E;&#x5168;&#x3066;&#x306F;\n<a href="\&quot;https://github.com/rvagg/node-addon-examples\&quot;">&#x30C0;&#x30A6;&#x30F3;&#x30ED;&#x30FC;&#x30C9;</a>\n&#x304B;&#x3089;&#x5229;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x3001;&#x72EC;&#x81EA;&#x306E;&#x30A2;&#x30C9;&#x30AA;&#x30F3;&#x306E;&#x51FA;&#x767A;&#x70B9;&#x306B;&#x306A;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n&quot;,
      &quot;modules&quot;: [
        {
          &quot;textRaw&quot;: &quot;Hello world&quot;,
          &quot;name&quot;: &quot;hello_world&quot;,
          &quot;desc&quot;: &quot;<!--\nTo get started let's make a small Addon which is the C++ equivalent of\nthe following JavaScript code:\n-->\n\n<p>&#x3067;&#x306F;&#x3001; &#x4EE5;&#x4E0B;&#x306E; JavaScript &#x30B3;&#x30FC;&#x30C9;&#x3068;&#x540C;&#x3058;&#x69D8;&#x306B;&#x52D5;&#x4F5C;&#x3059;&#x308B;&#x5C0F;&#x3055;&#x306A;&#x30A2;&#x30C9;&#x30AA;&#x30F3;&#x3092;\nC++ &#x3067;&#x4F5C;&#x6210;&#x3057;&#x3066;&#x307F;&#x307E;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<pre><code>module.exports.hello = function() { return &apos;world&apos;; };</code></pre>\n<!--\nFirst we create a file `hello.cc`:\n-->\n\n<p>&#x6700;&#x521D;&#x306B; <code>hello.cc</code> &#x3068;&#x3044;&#x3046;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;:\n\n\n</p>\n<pre><code>#include &lt;node.h&gt;\n#include &lt;v8.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; Method(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(String::New(&quot;world&quot;));\n}\n\nvoid init(Handle&lt;Object&gt; exports) {\n  exports-&gt;Set(String::NewSymbol(&quot;hello&quot;),\n      FunctionTemplate::New(Method)-&gt;GetFunction());\n}\n\nNODE_MODULE(hello, init)</code></pre>\n<!--\nNote that all Node addons must export an initialization function:\n-->\n\n<p>&#x5168;&#x3066;&#x306E; Node &#x30A2;&#x30C9;&#x30AA;&#x30F3;&#x306F;&#x521D;&#x671F;&#x5316;&#x95A2;&#x6570;&#x3092;&#x30A8;&#x30AF;&#x30B9;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>void Initialize (Handle&lt;Object&gt; exports);\nNODE_MODULE(module_name, Initialize)</code></pre>\n<!--\nThere is no semi-colon after `NODE_MODULE` as it's not a function (see `node.h`).\n\nThe `module_name` needs to match the filename of the final binary (minus the\n.node suffix).\n\nThe source code needs to be built into `hello.node`, the binary Addon. To\ndo this we create a file called `binding.gyp` which describes the configuration\nto build your module in a JSON-like format. This file gets compiled by\n[node-gyp](https://github.com/TooTallNate/node-gyp).\n-->\n\n<p><code>NODE_MODULE</code> &#x306F;&#x95A2;&#x6570;&#x3067;&#x306F;&#x306A;&#x3044;&#x306E;&#x3067;&#x3001;&#x305D;&#x306E;&#x5F8C;&#x306B;&#x30BB;&#x30DF;&#x30B3;&#x30ED;&#x30F3;&#x3092;&#x4ED8;&#x3051;&#x3066;&#x306F;&#x3044;&#x3051;&#x307E;&#x305B;&#x3093;\n(<code>node.h</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<p><code>module_name</code> &#x306F;&#x6700;&#x7D42;&#x7684;&#x306A;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D; (&#x62E1;&#x5F35;&#x5B50; .node &#x3092;&#x9664;&#x304F;)\n&#x3068;&#x30DE;&#x30C3;&#x30C1;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x306F;&#x3001;<code>hello.node</code> &#x3068;&#x3044;&#x3046;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x30A2;&#x30C9;&#x30AA;&#x30F3;&#x3068;&#x3057;&#x3066;&#x30D3;&#x30EB;&#x30C9;&#x3055;&#x308C;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x6709;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x305F;&#x3081;&#x306B; <code>binding.gyp</code> &#x3068;&#x547C;&#x3070;&#x308C;&#x308B;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x30D3;&#x30EB;&#x30C9;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;\n&#x69CB;&#x6210;&#x3092; JSON &#x7684;&#x306A;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x3067;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F; <a href="\&quot;https://github.com/TooTallNate/node-gyp\&quot;">node-gyp</a>\n&#x306B;&#x3088;&#x3063;&#x3066;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;hello&quot;,\n      &quot;sources&quot;: [ &quot;hello.cc&quot; ]\n    }\n  ]\n}</code></pre>\n<!--\nThe next step is to generate the appropriate project build files for the\ncurrent platform. Use `node-gyp configure` for that.\n-->\n\n<p>&#x6B21;&#x306E;&#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x306F;&#x73FE;&#x5728;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x306B;&#x9069;&#x3057;&#x305F;&#x30D7;&#x30ED;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30D3;&#x30EB;&#x30C9;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;\n&#x751F;&#x6210;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n<code>node-gyp configure</code> &#x3092;&#x4F7F;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNow you will have either a `Makefile` (on Unix platforms) or a `vcxproj` file\n(on Windows) in the `build/` directory. Next invoke the `node-gyp build`\ncommand.\n-->\n\n<p>&#x3053;&#x308C;&#x3067;&#x3001;<code>Makefile</code> (Unix &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x306E;&#x5834;&#x5408;)&#x3001;&#x307E;&#x305F;&#x306F; <code>vcxproj</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;\n(Windows &#x306E;&#x5834;&#x5408;) &#x304C; <code>build/</code> &#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x4F5C;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6B21;&#x306B; <code>node-gyp build</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNow you have your compiled `.node` bindings file! The compiled bindings end up\nin `build/Release/`.\n-->\n\n<p>&#x3053;&#x308C;&#x3067;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3055;&#x308C;&#x305F; <code>.node</code> &#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#xFF01;\n&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3055;&#x308C;&#x305F;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F; <code>build/Release/</code> &#x306B;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nYou can now use the binary addon in a Node project `hello.js` by pointing `require` to\nthe recently built `hello.node` module:\n-->\n\n<p>&#x30D3;&#x30EB;&#x30C9;&#x3055;&#x308C;&#x305F; <code>hello.node</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092; <code>require</code> &#x3067;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;\n&#x3053;&#x306E;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x30A2;&#x30C9;&#x30AA;&#x30F3;&#x3092; Node &#x30D7;&#x30ED;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E; <code>hello.js</code> &#x304B;&#x3089;&#x5229;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/hello&apos;);\n\nconsole.log(addon.hello()); // &apos;world&apos;</code></pre>\n<!--\nPlease see patterns below for further information or\n<https://github.com/arturadib/node-qt> for an example in production.\n-->\n\n<p>&#x3055;&#x3089;&#x306B;&#x8A73;&#x3057;&#x3044;&#x60C5;&#x5831;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F;&#x4E0B;&#x8A18;&#x306E;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x304B;&#x3001;\n</p>\n<p><a href="\&quot;https://github.com/arturadib/node-qt\&quot;">https://github.com/arturadib/node-qt</a> &#x3092;&#x5B9F;&#x969B;&#x306E;&#x30D7;&#x30ED;&#x30C0;&#x30AF;&#x30C8;&#x306B;&#x304A;&#x3051;&#x308B;\n&#x4F8B;&#x3068;&#x3057;&#x3066;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;type&quot;: &quot;module&quot;,
          &quot;displayName&quot;: &quot;Hello world&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Addon patterns&quot;,
          &quot;name&quot;: &quot;addon_patterns&quot;,
          &quot;desc&quot;: &quot;<!--\nBelow are some addon patterns to help you get started. Consult the online\n[v8 reference](http://izs.me/v8-docs/main.html) for help with the various v8\ncalls, and v8's [Embedder's Guide](http://code.google.com/apis/v8/embed.html)\nfor an explanation of several concepts used such as handles, scopes,\nfunction templates, etc.\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306F;&#x521D;&#x5FC3;&#x8005;&#x306B;&#x5F79;&#x7ACB;&#x3064;&#x30A2;&#x30C9;&#x30AA;&#x30F3;&#x306E;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x3067;&#x3059;&#x3002;\nv8 &#x306E;&#x69D8;&#x3005;&#x306A; API &#x306B;&#x3064;&#x3044;&#x3066;&#x306F;&#x30AA;&#x30F3;&#x30E9;&#x30A4;&#x30F3;&#x306E;\n<a href="\&quot;http://izs.me/v8-docs/main.html\&quot;">v8 reference</a> &#x304C;&#x3001;\n&#x305D;&#x3057;&#x3066; &#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x3084;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x3001;&#x95A2;&#x6570;&#x30C6;&#x30F3;&#x30D7;&#x30EC;&#x30FC;&#x30C8;&#x306A;&#x3069;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x6982;&#x5FF5;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F;\nv8 &#x306E; <a href="\&quot;http://code.google.com/apis/v8/embed.html\&quot;">Embedder&apos;s Guide</a> &#x304C;\n&#x5F79;&#x306B;&#x7ACB;&#x3064;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nIn order to use these examples you need to compile them using `node-gyp`.\nCreate the following `binding.gyp` file:\n-->\n\n<p>&#x3053;&#x306E;&#x30B5;&#x30F3;&#x30D7;&#x30EB;&#x3092;&#x5229;&#x7528;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;<code>node-gyp</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;\n&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x4EE5;&#x4E0B;&#x306E; <code>binding.gyp</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;addon&quot;,\n      &quot;sources&quot;: [ &quot;addon.cc&quot; ]\n    }\n  ]\n}</code></pre>\n<!--\nIn cases where there is more than one `.cc` file, simply add the file name to the\n`sources` array, e.g.:\n-->\n\n<p>&#x4E00;&#x3064;&#x4EE5;&#x4E0A;&#x306E; <code>.cc</code> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x3042;&#x308B;&#x5834;&#x5408;&#x306F;&#x3001;&#x5358;&#x7D14;&#x306B; <code>sources</code> &#x914D;&#x5217;&#x306B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3092;\n&#x52A0;&#x3048;&#x308B;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>&quot;sources&quot;: [&quot;addon.cc&quot;, &quot;myexample.cc&quot;]</code></pre>\n<!--\nNow that you have your `binding.gyp` ready, you can configure and build the\naddon:\n-->\n\n<p>&#x3053;&#x308C;&#x3067; <code>binding.gyp</code> &#x306E;&#x6E96;&#x5099;&#x304C;&#x3067;&#x304D;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x30A2;&#x30C9;&#x30AA;&#x30F3;&#x3092;&#x30B3;&#x30F3;&#x30D5;&#x30A3;&#x30AE;&#x30E5;&#x30A2;&#x304A;&#x3088;&#x3073;&#x30D3;&#x30EB;&#x30C9;&#x3059;&#x308B;&#x306B;&#x306F;:\n\n</p>\n<pre><code>$ node-gyp configure build</code></pre>\n&quot;,
          &quot;modules&quot;: [
            {
              &quot;textRaw&quot;: &quot;Function arguments&quot;,
              &quot;name&quot;: &quot;function_arguments&quot;,
              &quot;desc&quot;: &quot;<!--\nThe following pattern illustrates how to read arguments from JavaScript\nfunction calls and return a result. This is the main and only needed source\n`addon.cc`:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x306F; JavaScript &#x304B;&#x3089;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x95A2;&#x6570;&#x3067;&#x5F15;&#x6570;&#x3092;&#x8AAD;&#x307F;&#x51FA;&#x3057;&#x305F;&#x308A;&#x3001;\n&#x7D50;&#x679C;&#x3092;&#x8FD4;&#x3059;&#x65B9;&#x6CD5;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;&#x3053;&#x308C;&#x306F; <code>addon.cc</code> &#x3067;&#x306E;&#x307F;&#x5FC5;&#x8981;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; Add(const Arguments&amp; args) {\n  HandleScope scope;\n\n  if (args.Length() &lt; 2) {\n    ThrowException(Exception::TypeError(String::New(&quot;Wrong number of arguments&quot;)));\n    return scope.Close(Undefined());\n  }\n\n  if (!args[0]-&gt;IsNumber() || !args[1]-&gt;IsNumber()) {\n    ThrowException(Exception::TypeError(String::New(&quot;Wrong arguments&quot;)));\n    return scope.Close(Undefined());\n  }\n\n  Local&lt;Number&gt; num = Number::New(args[0]-&gt;NumberValue() +\n      args[1]-&gt;NumberValue());\n  return scope.Close(num);\n}\n\nvoid Init(Handle&lt;Object&gt; exports) {\n  exports-&gt;Set(String::NewSymbol(&quot;add&quot;),\n      FunctionTemplate::New(Add)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)</code></pre>\n<!--\nYou can test it with the following JavaScript snippet:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E; JavaScript &#x30B3;&#x30FC;&#x30C9;&#x7247;&#x3067;&#x30C6;&#x30B9;&#x30C8;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\nconsole.log( &apos;This should be eight:&apos;, addon.add(3,5) );</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Function arguments&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Callbacks&quot;,
              &quot;name&quot;: &quot;callbacks&quot;,
              &quot;desc&quot;: &quot;<!--\nYou can pass JavaScript functions to a C++ function and execute them from\nthere. Here's `addon.cc`:\n-->\n\n<p>JavaScript &#x306E;&#x95A2;&#x6570;&#x3092; C++ &#x306E;&#x95A2;&#x6570;&#x306B;&#x6E21;&#x3057;&#x3066;&#x305D;&#x3053;&#x304B;&#x3089;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>addon.cc</code> &#x3067;&#x3059;:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; RunCallback(const Arguments&amp; args) {\n  HandleScope scope;\n\n  Local&lt;Function&gt; cb = Local&lt;Function&gt;::Cast(args[0]);\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { Local&lt;Value&gt;::New(String::New(&quot;hello world&quot;)) };\n  cb-&gt;Call(Context::GetCurrent()-&gt;Global(), argc, argv);\n\n  return scope.Close(Undefined());\n}\n\nvoid Init(Handle&lt;Object&gt; exports, Handle&lt;Object&gt; module) {\n  module-&gt;Set(String::NewSymbol(&quot;exports&quot;),\n      FunctionTemplate::New(RunCallback)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)</code></pre>\n<!--\nNote that this example uses a two-argument form of `Init()` that receives\nthe full `module` object as the second argument. This allows the addon\nto completely overwrite `exports` with a single function instead of\nadding the function as a property of `exports`.\n-->\n\n<p>&#x3053;&#x306E;&#x4F8B;&#x306F;&#x4E8C;&#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D6;&#x308B;&#x5F62;&#x5F0F;&#x306E; <code>Init()</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3001;&#x7B2C;2&#x5F15;&#x6570;&#x3067;&#x5B8C;&#x5168;&#x306A; <code>module</code>\n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x3063;&#x3066;&#x3044;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>exports</code> &#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3068;&#x3057;&#x3066;&#x95A2;&#x6570;&#x3092;&#x52A0;&#x3048;&#x308B;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;&#x30A2;&#x30C9;&#x30AA;&#x30F3;&#x304C;\n&#x4E00;&#x3064;&#x306E;&#x95A2;&#x6570;&#x3067; <code>exports</code> &#x3092;&#x5B8C;&#x5168;&#x306B;&#x4E0A;&#x66F8;&#x304D;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nTo test it run the following JavaScript snippet:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E; JavaScript &#x30B3;&#x30FC;&#x30C9;&#x7247;&#x3067;&#x30C6;&#x30B9;&#x30C8;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\naddon(function(msg){\n  console.log(msg); // &apos;hello world&apos;\n});</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Callbacks&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Object factory&quot;,
              &quot;name&quot;: &quot;object_factory&quot;,
              &quot;desc&quot;: &quot;<!--\nYou can create and return new objects from within a C++ function with this\n`addon.cc` pattern, which returns an object with property `msg` that echoes\nthe string passed to `createObject()`:\n-->\n\n<p>C++ &#x95A2;&#x6570;&#x306E;&#x4E2D;&#x304B;&#x3089;&#x65B0;&#x3057;&#x3044;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3066;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x4EE5;&#x4E0B;&#x306E; <code>addon.cc</code> &#x306E;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x3067;&#x306F;&#x3001;<code>createObject()</code> &#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3092;\n&#x53CD;&#x6620;&#x3059;&#x308B; <code>msg</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3063;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; CreateObject(const Arguments&amp; args) {\n  HandleScope scope;\n\n  Local&lt;Object&gt; obj = Object::New();\n  obj-&gt;Set(String::NewSymbol(&quot;msg&quot;), args[0]-&gt;ToString());\n\n  return scope.Close(obj);\n}\n\nvoid Init(Handle&lt;Object&gt; exports, Handle&lt;Object&gt; module) {\n  module-&gt;Set(String::NewSymbol(&quot;exports&quot;),\n      FunctionTemplate::New(CreateObject)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)</code></pre>\n<!--\nTo test it in JavaScript:\n-->\n\n<p>&#x30C6;&#x30B9;&#x30C8;&#x7528;&#x306E; JavaScript:\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\nvar obj1 = addon(&apos;hello&apos;);\nvar obj2 = addon(&apos;world&apos;);\nconsole.log(obj1.msg+&apos; &apos;+obj2.msg); // &apos;hello world&apos;</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Object factory&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Function factory&quot;,
              &quot;name&quot;: &quot;function_factory&quot;,
              &quot;desc&quot;: &quot;<!--\nThis pattern illustrates how to create and return a JavaScript function that\nwraps a C++ function:\n-->\n\n<p>&#x3053;&#x306E;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x306F; C++ &#x95A2;&#x6570;&#x3092;&#x30E9;&#x30C3;&#x30D7;&#x3057;&#x305F; JavaScript &#x95A2;&#x6570;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3066;&#x8FD4;&#x3059;&#x65B9;&#x6CD5;&#x3092;\n&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; MyFunction(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(String::New(&quot;hello world&quot;));\n}\n\nHandle&lt;Value&gt; CreateFunction(const Arguments&amp; args) {\n  HandleScope scope;\n\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(MyFunction);\n  Local&lt;Function&gt; fn = tpl-&gt;GetFunction();\n  fn-&gt;SetName(String::NewSymbol(&quot;theFunction&quot;)); // omit this to make it anonymous\n\n  return scope.Close(fn);\n}\n\nvoid Init(Handle&lt;Object&gt; exports, Handle&lt;Object&gt; module) {\n  module-&gt;Set(String::NewSymbol(&quot;exports&quot;),\n      FunctionTemplate::New(CreateFunction)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, Init)</code></pre>\n<!--\nTo test:\n-->\n\n<p>&#x30C6;&#x30B9;&#x30C8;:\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\nvar fn = addon();\nconsole.log(fn()); // &apos;hello world&apos;</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Function factory&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Wrapping C++ objects&quot;,
              &quot;name&quot;: &quot;wrapping_c++_objects&quot;,
              &quot;desc&quot;: &quot;<!--\nHere we will create a wrapper for a C++ object/class `MyObject` that can be\ninstantiated in JavaScript through the `new` operator. First prepare the main\nmodule `addon.cc`:\n-->\n\n<p>&#x3053;&#x3053;&#x3067;&#x306F;&#x3001;\nC++ &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#xFF0F;&#x30AF;&#x30E9;&#x30B9;&#x3092;&#x30E9;&#x30C3;&#x30D7;&#x3057;&#x3001;JavaScript &#x304B;&#x3089; new &#x6F14;&#x7B97;&#x5B50;&#x3092;&#x4F7F;&#x3063;&#x3066;\n&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x5316;&#x3067;&#x304D;&#x308B; <code>MyObject</code> &#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6700;&#x521D;&#x306B;&#x30E1;&#x30A4;&#x30F3;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB; <code>addon.cc</code> &#x3092;&#x6E96;&#x5099;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nvoid InitAll(Handle&lt;Object&gt; exports) {\n  MyObject::Init(exports);\n}\n\nNODE_MODULE(addon, InitAll)</code></pre>\n<!--\nThen in `myobject.h` make your wrapper inherit from `node::ObjectWrap`:\n-->\n\n<p>&#x6B21;&#x306B;&#x3001;<code>node::ObjectWrap</code> &#x3092;&#x7D99;&#x627F;&#x3057;&#x305F;&#x30E9;&#x30C3;&#x30D1;&#x30FC;&#x3092; <code>myobject.h</code> &#x306B;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Handle&lt;v8::Object&gt; exports);\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static v8::Handle&lt;v8::Value&gt; New(const v8::Arguments&amp; args);\n  static v8::Handle&lt;v8::Value&gt; PlusOne(const v8::Arguments&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n#endif</code></pre>\n<!--\nAnd in `myobject.cc` implement the various methods that you want to expose.\nHere we expose the method `plusOne` by adding it to the constructor's\nprototype:\n-->\n\n<p>&#x516C;&#x958B;&#x3057;&#x305F;&#x3044;&#x69D8;&#x3005;&#x306A;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092; <code>myobject.cc</code> &#x306B;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x3053;&#x3067;&#x306F;&#x3001;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x5024;&#x306B;&#x52A0;&#x7B97;&#x3059;&#x308B; <code>plusOne</code> &#x3092;&#x516C;&#x958B;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Handle&lt;Object&gt; exports) {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(New);\n  tpl-&gt;SetClassName(String::NewSymbol(&quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n  // Prototype\n  tpl-&gt;PrototypeTemplate()-&gt;Set(String::NewSymbol(&quot;plusOne&quot;),\n      FunctionTemplate::New(PlusOne)-&gt;GetFunction());\n  constructor = Persistent&lt;Function&gt;::New(tpl-&gt;GetFunction());\n  exports-&gt;Set(String::NewSymbol(&quot;MyObject&quot;), constructor);\n}\n\nHandle&lt;Value&gt; MyObject::New(const Arguments&amp; args) {\n  HandleScope scope;\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    return args.This();\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    return scope.Close(constructor-&gt;NewInstance(argc, argv));\n  }\n}\n\nHandle&lt;Value&gt; MyObject::PlusOne(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.This());\n  obj-&gt;value_ += 1;\n\n  return scope.Close(Number::New(obj-&gt;value_));\n}</code></pre>\n<!--\nTest it with:\n-->\n\n<p>&#x3053;&#x308C;&#x3067;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\nvar obj = new addon.MyObject(10);\nconsole.log( obj.plusOne() ); // 11\nconsole.log( obj.plusOne() ); // 12\nconsole.log( obj.plusOne() ); // 13</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Wrapping C++ objects&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Factory of wrapped objects&quot;,
              &quot;name&quot;: &quot;factory_of_wrapped_objects&quot;,
              &quot;desc&quot;: &quot;<!--\nThis is useful when you want to be able to create native objects without\nexplicitly instantiating them with the `new` operator in JavaScript, e.g.\n-->\n\n<p>JavaScript &#x306E; <code>new</code> &#x6F14;&#x7B97;&#x5B50;&#x3067;&#x660E;&#x793A;&#x7684;&#x306B;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x5316;&#x3059;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F;&#x3001;\n&#x30CD;&#x30A4;&#x30C6;&#x30A3;&#x30D6;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3057;&#x305F;&#x3044;&#x5834;&#x5408;&#x306B;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>var obj = addon.createObject();\n// instead of:\n// var obj = new addon.Object();</code></pre>\n<!--\nLet's register our `createObject` method in `addon.cc`:\n-->\n\n<p>createObject<code> &#x3092; </code>addon.cc` &#x306B;&#x767B;&#x9332;&#x3057;&#x307E;&#x3057;&#x3087;&#x3046;:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; CreateObject(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(MyObject::NewInstance(args));\n}\n\nvoid InitAll(Handle&lt;Object&gt; exports, Handle&lt;Object&gt; module) {\n  MyObject::Init();\n\n  module-&gt;Set(String::NewSymbol(&quot;exports&quot;),\n      FunctionTemplate::New(CreateObject)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)</code></pre>\n<!--\nIn `myobject.h` we now introduce the static method `NewInstance` that takes\ncare of instantiating the object (i.e. it does the job of `new` in JavaScript):\n-->\n\n<p><code>myobject.h</code> &#x306B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B; static &#x30E1;&#x30BD;&#x30C3;&#x30C9; <code>NewInstance</code> &#x3092;\n&#x5C0E;&#x5165;&#x3057;&#x307E;&#x3057;&#x3087;&#x3046; (&#x3059;&#x306A;&#x308F;&#x3061;&#xFF0C;&#x305D;&#x308C;&#x304C; JavaScript &#x5185;&#x306E; <code>new</code> &#x306E;&#x50CD;&#x304D;&#x3092;&#x3057;&#x307E;&#x3059;)&#x3002;\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init();\n  static v8::Handle&lt;v8::Value&gt; NewInstance(const v8::Arguments&amp; args);\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static v8::Handle&lt;v8::Value&gt; New(const v8::Arguments&amp; args);\n  static v8::Handle&lt;v8::Value&gt; PlusOne(const v8::Arguments&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n#endif</code></pre>\n<!--\nThe implementation is similar to the above in `myobject.cc`:\n-->\n\n<p>&#x5B9F;&#x88C5;&#x306F;&#x524D;&#x8FF0;&#x306E; <code>myobject.cc</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init() {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(New);\n  tpl-&gt;SetClassName(String::NewSymbol(&quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n  // Prototype\n  tpl-&gt;PrototypeTemplate()-&gt;Set(String::NewSymbol(&quot;plusOne&quot;),\n      FunctionTemplate::New(PlusOne)-&gt;GetFunction());\n  constructor = Persistent&lt;Function&gt;::New(tpl-&gt;GetFunction());\n}\n\nHandle&lt;Value&gt; MyObject::New(const Arguments&amp; args) {\n  HandleScope scope;\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    return args.This();\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    return scope.Close(constructor-&gt;NewInstance(argc, argv));\n  }\n}\n\nHandle&lt;Value&gt; MyObject::NewInstance(const Arguments&amp; args) {\n  HandleScope scope;\n\n  const unsigned argc = 1;\n  Handle&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Object&gt; instance = constructor-&gt;NewInstance(argc, argv);\n\n  return scope.Close(instance);\n}\n\nHandle&lt;Value&gt; MyObject::PlusOne(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.This());\n  obj-&gt;value_ += 1;\n\n  return scope.Close(Number::New(obj-&gt;value_));\n}</code></pre>\n<!--\nTest it with:\n-->\n\n<p>&#x3053;&#x308C;&#x3067;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>var createObject = require(&apos;./build/Release/addon&apos;);\n\nvar obj = createObject(10);\nconsole.log( obj.plusOne() ); // 11\nconsole.log( obj.plusOne() ); // 12\nconsole.log( obj.plusOne() ); // 13\n\nvar obj2 = createObject(20);\nconsole.log( obj2.plusOne() ); // 21\nconsole.log( obj2.plusOne() ); // 22\nconsole.log( obj2.plusOne() ); // 23</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Factory of wrapped objects&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Passing wrapped objects around&quot;,
              &quot;name&quot;: &quot;passing_wrapped_objects_around&quot;,
              &quot;desc&quot;: &quot;<!--\nIn addition to wrapping and returning C++ objects, you can pass them around\nby unwrapping them with Node's `node::ObjectWrap::Unwrap` helper function.\nIn the following `addon.cc` we introduce a function `add()` that can take on two\n`MyObject` objects:\n-->\n\n<p>C++ &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x30E9;&#x30C3;&#x30D7;&#x3057;&#x3066;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x306B;&#x52A0;&#x3048;&#x3066;&#x3001;Node &#x304C;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x30D8;&#x30EB;&#x30D1;&#x95A2;&#x6570;\n<code>node::ObjectWrap::Unwrap</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x30A2;&#x30F3;&#x30E9;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x4EE5;&#x4E0B;&#x306E; <code>addon.cc</code> &#x3067;&#x306F;&#x3001;&#x4E8C;&#x3064;&#x306E; <code>MyObject</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B; <code>add()</code>\n&#x95A2;&#x6570;&#x3092;&#x5C0E;&#x5165;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nHandle&lt;Value&gt; CreateObject(const Arguments&amp; args) {\n  HandleScope scope;\n  return scope.Close(MyObject::NewInstance(args));\n}\n\nHandle&lt;Value&gt; Add(const Arguments&amp; args) {\n  HandleScope scope;\n\n  MyObject* obj1 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[0]-&gt;ToObject());\n  MyObject* obj2 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[1]-&gt;ToObject());\n\n  double sum = obj1-&gt;Value() + obj2-&gt;Value();\n  return scope.Close(Number::New(sum));\n}\n\nvoid InitAll(Handle&lt;Object&gt; exports) {\n  MyObject::Init();\n\n  exports-&gt;Set(String::NewSymbol(&quot;createObject&quot;),\n      FunctionTemplate::New(CreateObject)-&gt;GetFunction());\n\n  exports-&gt;Set(String::NewSymbol(&quot;add&quot;),\n      FunctionTemplate::New(Add)-&gt;GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)</code></pre>\n<!--\nTo make things interesting we introduce a public method in `myobject.h` so we\ncan probe private values after unwrapping the object:\n-->\n\n<p>&#x3088;&#x308A;&#x304A;&#x3082;&#x3057;&#x308D;&#x304F;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;<code>myobject.h</code> &#x306B;&#x30D1;&#x30D6;&#x30EA;&#x30C3;&#x30AF;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5C0E;&#x5165;&#x3057;&#x307E;&#x3057;&#x3087;&#x3046;&#x3002;\n&#x3057;&#x305F;&#x304C;&#x3063;&#x3066;&#x3001;&#x30A2;&#x30F3;&#x30E9;&#x30C3;&#x30D7;&#x3055;&#x308C;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x30D7;&#x30E9;&#x30A4;&#x30D9;&#x30FC;&#x30C8;&#x5909;&#x6570;&#x3092;&#x8ABF;&#x3079;&#x308B;&#x3053;&#x3068;&#x304C;\n&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init();\n  static v8::Handle&lt;v8::Value&gt; NewInstance(const v8::Arguments&amp; args);\n  double Value() const { return value_; }\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static v8::Handle&lt;v8::Value&gt; New(const v8::Arguments&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n#endif</code></pre>\n<!--\nThe implementation of `myobject.cc` is similar as before:\n-->\n\n<p><code>myobject.cc</code> &#x306E;&#x5B9F;&#x88C5;&#x306F;&#x3053;&#x308C;&#x307E;&#x3067;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;:\n\n</p>\n<pre><code>#define BUILDING_NODE_EXTENSION\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nusing namespace v8;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init() {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(New);\n  tpl-&gt;SetClassName(String::NewSymbol(&quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n  constructor = Persistent&lt;Function&gt;::New(tpl-&gt;GetFunction());\n}\n\nHandle&lt;Value&gt; MyObject::New(const Arguments&amp; args) {\n  HandleScope scope;\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    return args.This();\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    return scope.Close(constructor-&gt;NewInstance(argc, argv));\n  }\n}\n\nHandle&lt;Value&gt; MyObject::NewInstance(const Arguments&amp; args) {\n  HandleScope scope;\n\n  const unsigned argc = 1;\n  Handle&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Object&gt; instance = constructor-&gt;NewInstance(argc, argv);\n\n  return scope.Close(instance);\n}</code></pre>\n<!--\nTest it with:\n-->\n\n<p>&#x3053;&#x308C;&#x3067;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>var addon = require(&apos;./build/Release/addon&apos;);\n\nvar obj1 = addon.createObject(10);\nvar obj2 = addon.createObject(20);\nvar result = addon.add(obj1, obj2);\n\nconsole.log(result); // 30</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Passing wrapped objects around&quot;
            }
          ],
          &quot;type&quot;: &quot;module&quot;,
          &quot;displayName&quot;: &quot;Addon patterns&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Addons&quot;
    },
    {
      &quot;textRaw&quot;: &quot;util&quot;,
      &quot;name&quot;: &quot;util&quot;,
      &quot;stability&quot;: 4,
      &quot;stabilityText&quot;: &quot;API Frozen&quot;,
      &quot;desc&quot;: &quot;<!--\nThese functions are in the module `'util'`. Use `require('util')` to access\nthem.\n-->\n\n<p>&#x3053;&#x308C;&#x3089;&#x306E;&#x95A2;&#x6570;&#x306F;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB; <code>&apos;util&apos;</code> &#x5185;&#x306B;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>require(&apos;util&apos;)</code> &#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3067;&#x3053;&#x308C;&#x3089;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;util.format(format, [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;format&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a formatted string using the first argument as a `printf`-like format.\n-->\n\n<p>&#x6700;&#x521D;&#x306E;&#x5F15;&#x6570;&#x3092; <code>printf</code> &#x306E;&#x3088;&#x3046;&#x306A;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3001;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x5316;&#x3055;&#x308C;&#x305F;\n&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe first argument is a string that contains zero or more *placeholders*.\nEach placeholder is replaced with the converted value from its corresponding\nargument. Supported placeholders are:\n-->\n\n<p>&#x7B2C;&#x4E00;&#x5F15;&#x6570;&#x306F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3001;0 &#x500B;&#x4EE5;&#x4E0A;&#x306E; <em>&#x30D7;&#x30EC;&#x30FC;&#x30B9;&#x30DB;&#x30EB;&#x30C0;</em> &#x3092;&#x542B;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x30D7;&#x30EC;&#x30FC;&#x30B9;&#x30DB;&#x30EB;&#x30C0;&#x306F;&#x5BFE;&#x5FDC;&#x3059;&#x308B;&#x5F15;&#x6570;&#x3092;&#x5909;&#x63DB;&#x3057;&#x305F;&#x5024;&#x3067;&#x7F6E;&#x63DB;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x30D7;&#x30EC;&#x30FC;&#x30B9;&#x30DB;&#x30EB;&#x30C0;&#x306F;:\n\n</p>\n<!--\n* `%s` - String.\n* `%d` - Number (both integer and float).\n* `%j` - JSON.\n* `%` - single percent sign (`'%'`). This does not consume an argument.\n-->\n\n<ul>\n<li><code>%s</code> - &#x6587;&#x5B57;&#x5217;&#x3002;</li>\n<li><code>%d</code> - &#x6570;&#x5024; (&#x6574;&#x6570;&#x3068;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x306E;&#x4E21;&#x65B9;)&#x3002;</li>\n<li><code>%j</code> - JSON&#x3002;</li>\n<li><code>%</code> - &#x4E00;&#x3064;&#x306E;&#x30D1;&#x30FC;&#x30BB;&#x30F3;&#x30C8;&#x8A18;&#x53F7; (<code>&apos;%&apos;</code>)&#x3002;&#x3053;&#x308C;&#x306F;&#x5F15;&#x6570;&#x3092;&#x6D88;&#x8CBB;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;</li>\n</ul>\n<!--\nIf the placeholder does not have a corresponding argument, the placeholder is\nnot replaced.\n-->\n\n<p>&#x30D7;&#x30EC;&#x30FC;&#x30B9;&#x30DB;&#x30EB;&#x30C0;&#x306B;&#x5BFE;&#x5FDC;&#x3059;&#x308B;&#x5F15;&#x6570;&#x304C;&#x7121;&#x3044;&#x5834;&#x5408;&#x3001;&#x305D;&#x306E;&#x30D7;&#x30EC;&#x30FC;&#x30B9;&#x30DB;&#x30EB;&#x30C0;&#x306F;&#x7F6E;&#x63DB;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code>util.format(&apos;%s:%s&apos;, &apos;foo&apos;); // &apos;foo:%s&apos;</code></pre>\n<!--\nIf there are more arguments than placeholders, the extra arguments are\nconverted to strings with `util.inspect()` and these strings are concatenated,\ndelimited by a space.\n-->\n\n<p>&#x30D7;&#x30EC;&#x30FC;&#x30B9;&#x30DB;&#x30EB;&#x30C0;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x5F15;&#x6570;&#x304C;&#x3042;&#x308B;&#x5834;&#x5408;&#x3001;&#x4F59;&#x3063;&#x305F;&#x5F15;&#x6570;&#x306F; <code>util.inspect()</code> &#x306B;&#x3088;&#x3063;&#x3066;\n&#x6587;&#x5B57;&#x5217;&#x5316;&#x3055;&#x308C;&#x3001;&#x305D;&#x308C;&#x3089;&#x306F;&#x30B9;&#x30DA;&#x30FC;&#x30B9;&#x533A;&#x5207;&#x308A;&#x3067;&#x9023;&#x7D50;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>util.format(&apos;%s:%s&apos;, &apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;); // &apos;foo:bar baz&apos;</code></pre>\n<!--\nIf the first argument is not a format string then `util.format()` returns\na string that is the concatenation of all its arguments separated by spaces.\nEach argument is converted to a string with `util.inspect()`.\n-->\n\n<p>&#x7B2C;&#x4E00;&#x5F15;&#x6570;&#x304C;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x6587;&#x5B57;&#x5217;&#x3067;&#x306F;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;<code>util.format()</code> &#x306F;&#x5168;&#x3066;&#x306E;&#x5F15;&#x6570;&#x3092;\n&#x30B9;&#x30DA;&#x30FC;&#x30B9;&#x533A;&#x5207;&#x308A;&#x3067;&#x9023;&#x7D50;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x3053;&#x306E;&#x5F15;&#x6570;&#x306F; <code>util.inspect()</code> &#x3067;&#x6587;&#x5B57;&#x5217;&#x306B;&#x5909;&#x63DB;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>util.format(1, 2, 3); // &apos;1 2 3&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;format&quot;
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.debug(string)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;debug&quot;,
          &quot;desc&quot;: &quot;<!--\nA synchronous output function. Will block the process and\noutput `string` immediately to `stderr`.\n-->\n\n<p>&#x540C;&#x671F;&#x7684;&#x306A;&#x51FA;&#x529B;&#x95A2;&#x6570;&#x3067;&#x3059;&#x3002;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x3066;&#x5373;&#x5EA7;&#x306B; <code>string</code> &#x3092; <code>stderr</code> &#x306B;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>require(&apos;util&apos;).debug(&apos;message on stderr&apos;);</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;string&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.error([...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;error&quot;,
          &quot;desc&quot;: &quot;<!--\nSame as `util.debug()` except this will output all arguments immediately to\n`stderr`.\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x5F15;&#x6570;&#x3092;&#x3059;&#x3050;&#x306B; <code>stderr</code> &#x306B;&#x51FA;&#x529B;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x9664;&#x3044;&#x3066; <code>util.debug()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.puts([...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;puts&quot;,
          &quot;desc&quot;: &quot;<!--\nA synchronous output function. Will block the process and output all arguments\nto `stdout` with newlines after each argument.\n-->\n\n<p>&#x540C;&#x671F;&#x7684;&#x306A;&#x51FA;&#x529B;&#x95A2;&#x6570;&#x3067;&#x3059;&#x3002;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x3066;&#x5373;&#x5EA7;&#x306B; <code>stdout</code> &#x306B;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5404;&#x5F15;&#x6570;&#x306F;&#x6539;&#x884C;&#x304C;&#x4ED8;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.print([...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;print&quot;,
          &quot;desc&quot;: &quot;<!--\nA synchronous output function. Will block the process, cast each argument to a\nstring then output to `stdout`. Does not place newlines after each argument.\n-->\n\n<p>&#x540C;&#x671F;&#x7684;&#x306A;&#x51FA;&#x529B;&#x95A2;&#x6570;&#x3067;&#x3059;&#x3002;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x3066;&#x3001;&#x5F15;&#x6570;&#x3092;&#x6587;&#x5B57;&#x5217;&#x306B;&#x5909;&#x63DB;&#x3057;&#x3066; <code>stdout</code> &#x306B;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5404;&#x5F15;&#x6570;&#x306B;&#x6539;&#x884C;&#x306F;&#x4ED8;&#x52A0;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.log(string)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;log&quot;,
          &quot;desc&quot;: &quot;<!--\nOutput with timestamp on `stdout`.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30E0;&#x30B9;&#x30BF;&#x30F3;&#x30D7;&#x3068;&#x3068;&#x3082;&#x306B; <code>stdout</code> &#x3078;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>require(&apos;util&apos;).log(&apos;Timestamped message.&apos;);</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;string&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.inspect(object, [options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;inspect&quot;,
          &quot;desc&quot;: &quot;<!--\nReturn a string representation of `object`, which is useful for debugging.\n-->\n\n<p>&#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x3067;&#x6709;&#x7528;&#x306A;&#x3001;<code>object</code> &#x306E;&#x6587;&#x5B57;&#x5217;&#x8868;&#x73FE;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAn optional *options* object may be passed that alters certain aspects of the\nformatted string:\n-->\n\n<p>&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E; <em>options</em> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x3001;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x5316;&#x3055;&#x308C;&#x305F;&#x6587;&#x5B57;&#x5217;&#x306E;\n&#x7279;&#x5B9A;&#x306E;&#x5074;&#x9762;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x6E21;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n - `showHidden` - if `true` then the object's non-enumerable properties will be\n   shown too. Defaults to `false`.\n-->\n\n<ul>\n<li><code>showHidden</code> - <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;\n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E; Enumerable &#x3067;&#x306A;&#x3044;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3082;&#x8868;&#x793A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;</li>\n</ul>\n<!--\n - `depth` - tells `inspect` how many times to recurse while formatting the\n   object. This is useful for inspecting large complicated objects. Defaults to\n   `2`. To make it recurse indefinitely pass `null`.\n-->\n\n<ul>\n<li><code>depth</code> - &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F55;&#x56DE;&#x518D;&#x5E30;&#x3059;&#x308B;&#x304B;&#x3092;\n<code>inspect</code> &#x306B;&#x4F1D;&#x3048;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x5DE8;&#x5927;&#x3067;&#x8907;&#x96D1;&#x306A;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8ABF;&#x67FB;&#x3059;&#x308B;&#x5834;&#x5408;&#x306B;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>2</code> &#x3067;&#x3059;&#x3002;\n&#x7121;&#x9650;&#x306B;&#x518D;&#x5E30;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;<code>null</code> &#x3092;&#x6E21;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\n - `colors` - if `true`, then the output will be styled with ANSI color codes.\n   Defaults to `false`. Colors are customizable, see below.\n-->\n\n<ul>\n<li><code>colors</code> - <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x51FA;&#x529B;&#x306F; ANSI &#x30AB;&#x30E9;&#x30FC;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x8272;&#x3065;&#x3051;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n&#x5F8C;&#x8FF0;&#x3059;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;&#x8272;&#x306F;&#x30AB;&#x30B9;&#x30BF;&#x30DE;&#x30A4;&#x30BA;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;</li>\n</ul>\n<!--\n - `customInspect` - if `false`, then custom `inspect()` functions defined on the\n   objects being inspected won't be called. Defaults to `true`.\n-->\n\n<ul>\n<li><code>customInspect</code> - <code>false</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x72EC;&#x81EA;&#x306E; <code>inspect()</code> &#x95A2;&#x6570;&#x306F;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;</li>\n</ul>\n<!--\nExample of inspecting all properties of the `util` object:\n-->\n\n<p><code>util</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x5168;&#x3066;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x8ABF;&#x67FB;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nconsole.log(util.inspect(util, { showHidden: true, depth: null }));</code></pre>\n&quot;,
          &quot;modules&quot;: [
            {
              &quot;textRaw&quot;: &quot;Customizing `util.inspect` colors&quot;,
              &quot;name&quot;: &quot;customizing_`util.inspect`_colors&quot;,
              &quot;desc&quot;: &quot;<!--\nColor output (if enabled) of `util.inspect` is customizable globally\nvia `util.inspect.styles` and `util.inspect.colors` objects.\n-->\n\n<p><code>util.inspect</code> &#x304C;&#x51FA;&#x529B;&#x3059;&#x308B;&#x8272;&#x306F;&#x3001;(&#x6709;&#x52B9;&#x3067;&#x3042;&#x308C;&#x3070;) <code>util.inspect.styles</code> &#x304A;&#x3088;&#x3073;\n<code>util.inspect.colors</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x901A;&#x3058;&#x3066;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x306B;&#x30AB;&#x30B9;&#x30BF;&#x30DE;&#x30A4;&#x30BA;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n`util.inspect.styles` is a map assigning each style a color\nfrom `util.inspect.colors`.\nHighlighted styles and their default values are:\n-->\n\n<p><code>util.inspect.styles</code> &#x306F;&#x5404;&#x30B9;&#x30BF;&#x30A4;&#x30EB;&#x3068; <code>util.inspect.colors</code> &#x306B;\n&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x305F;&#x8272;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x305F;&#x30DE;&#x30C3;&#x30D4;&#x30F3;&#x30B0;&#x3067;&#x3059;&#x3002;\n&#x5F37;&#x8ABF;&#x3055;&#x308C;&#x308B;&#x30B9;&#x30BF;&#x30A4;&#x30EB;&#x3068;&#x305D;&#x308C;&#x3089;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x306F;:\n\n</p>\n<!--\n * `number` (yellow)\n * `boolean` (yellow)\n * `string` (green)\n * `date` (magenta)\n * `regexp` (red)\n * `null` (bold)\n * `undefined` (grey)\n * `special` - only function at this time (cyan)\n * `name` (intentionally no styling)\n-->\n\n<ul>\n<li><code>number</code> (&#x9EC4;)</li>\n<li><code>boolean</code> (&#x9EC4;)</li>\n<li><code>string</code> (&#x7DD1;)</li>\n<li><code>date</code> (&#x7D2B;)</li>\n<li><code>regexp</code> (&#x8D64;)</li>\n<li><code>null</code> (&#x592A;&#x5B57;)</li>\n<li><code>undefined</code> (&#x7070;)</li>\n<li><code>special</code> - only function at this time (&#x6C34;&#x8272;)</li>\n<li><code>name</code> (&#x610F;&#x56F3;&#x7684;&#x306B;&#x30B9;&#x30BF;&#x30A4;&#x30EB;&#x7121;&#x3057;)</li>\n</ul>\n<!--\nPredefined color codes are: `white`, `grey`, `black`, `blue`, `cyan`, \n`green`, `magenta`, `red` and `yellow`.\nThere are also `bold`, `italic`, `underline` and `inverse` codes.\n-->\n\n<p>&#x4E8B;&#x524D;&#x306B;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x305F;&#x8272;&#x306F;: <code>white</code>&#x3001;<code>grey</code>&#x3001;<code>black</code>&#x3001;<code>blue</code>&#x3001;<code>cyan</code>&#x3001;\n<code>green</code>&#x3001;<code>magenta</code>&#x3001;<code>red</code>&#x3001;&#x304A;&#x3088;&#x3073; <code>yellow</code> &#x3067;&#x3059;&#x3002;\n<code>bold</code>&#x3001;<code>italic</code>&#x3001;<code>underline</code>&#x3001;&#x304A;&#x3088;&#x3073; <code>inverse</code> &#x30B3;&#x30FC;&#x30C9;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nObjects also may define their own `inspect(depth)` function which `util.inspect()`\nwill invoke and use the result of when inspecting the object:\n-->\n\n<p>&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; <code>util.inspect()</code> &#x304B;&#x3089;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x81EA;&#x524D;&#x306E; <code>inspect(depth)</code>\n&#x95A2;&#x6570;&#x3092;&#x6301;&#x3064;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x3001;&#x305D;&#x306E;&#x7D50;&#x679C;&#x306F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8ABF;&#x67FB;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nvar obj = { name: &apos;nate&apos; };\nobj.inspect = function(depth) {\n  return &apos;{&apos; + this.name + &apos;}&apos;;\n};\n\nutil.inspect(obj);\n  // &quot;{nate}&quot;</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Customizing `util.inspect` colors&quot;
            }
          ],
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;object&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.isArray(object)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;isArray&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns `true` if the given \"object\" is an `Array`. `false` otherwise.\n-->\n\n<p><code>object</code> &#x304C;&#x914D;&#x5217;&#x306A;&#x3089; <code>true</code> &#x3092;&#x3001;&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306F; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isArray([])\n  // true\nutil.isArray(new Array)\n  // true\nutil.isArray({})\n  // false</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;object&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.isRegExp(object)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;isRegExp&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns `true` if the given \"object\" is a `RegExp`. `false` otherwise.\n-->\n\n<p><code>object</code> &#x304C; <code>RegExp</code> &#x306A;&#x3089; <code>true</code> &#x3092;&#x3001;&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306A;&#x3089; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isRegExp(/some regexp/)\n  // true\nutil.isRegExp(new RegExp(&apos;another regexp&apos;))\n  // true\nutil.isRegExp({})\n  // false</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;object&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.isDate(object)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;isDate&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns `true` if the given \"object\" is a `Date`. `false` otherwise.\n-->\n\n<p><code>object</code> &#x304C; <code>Date</code> &#x306A;&#x3089; <code>true</code> &#x3092;&#x3001;&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306A;&#x3089; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isDate(new Date())\n  // true\nutil.isDate(Date())\n  // false (without &apos;new&apos; returns a String)\nutil.isDate({})\n  // false</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;object&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.isError(object)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;isError&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns `true` if the given \"object\" is an `Error`. `false` otherwise.\n-->\n\n<p><code>object</code> &#x304C; <code>Error</code> &#x306A;&#x3089; <code>true</code> &#x3092;&#x3001;&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306A;&#x3089; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&apos;util&apos;);\n\nutil.isError(new Error())\n  // true\nutil.isError(new TypeError())\n  // true\nutil.isError({ name: &apos;Error&apos;, message: &apos;an error occurred&apos; })\n  // false</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;object&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.pump(readableStream, writableStream, [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;pump&quot;,
          &quot;desc&quot;: &quot;<!--\n    Stability: 0 - Deprecated: Use readableStream.pipe(writableStream)\n-->\n\n<pre><code>Stability: 0 - Deprecated: `readableStream.pipe(writableStream)` &#x3092;&#x4F7F;&#x3063;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</code></pre>\n<!--\nRead the data from `readableStream` and send it to the `writableStream`.\nWhen `writableStream.write(data)` returns `false` `readableStream` will be\npaused until the `drain` event occurs on the `writableStream`. `callback` gets\nan error as its only argument and is called when `writableStream` is closed or\nwhen an error occurs.\n-->\n\n<p><code>readableStream</code> &#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8AAD;&#x307F;&#x3001;&#x305D;&#x308C; &#x3092;<code>writableStream</code> &#x306B;&#x9001;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>writableStream.write(data)</code> &#x304C; <code>false</code> &#x3092;&#x8FD4;&#x3059;&#x5834;&#x5408;&#x3001;\n<code>writableStream</code> &#x304C; <code>drain</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x307E;&#x3067;&#x3001;\n<code>readableStream</code> &#x306F;&#x4E2D;&#x65AD;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>writableStream</code> &#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x308B;&#x304B;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3068;&#x3001;<code>callback</code> &#x306F; error &#x3092;&#x552F;&#x4E00;&#x306E;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;readableStream&quot;
                },
                {
                  &quot;name&quot;: &quot;writableStream&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;util.inherits(constructor, superConstructor)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;inherits&quot;,
          &quot;desc&quot;: &quot;<!--\nInherit the prototype methods from one\n[constructor](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor)\ninto another.  The prototype of `constructor` will be set to a new\nobject created from `superConstructor`.\n-->\n\n<p>&#x3042;&#x308B;\n<a href="\&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor\&quot;">&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;</a>\n&#x304B;&#x3089;&#x30D7;&#x30ED;&#x30C8;&#x30BF;&#x30A4;&#x30D7;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x7D99;&#x627F;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>constructor</code> &#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30BF;&#x30A4;&#x30D7;&#x306F; <code>superConstructor</code> &#x304B;&#x3089;&#x4F5C;&#x3089;&#x308C;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAs an additional convenience, `superConstructor` will be accessible\nthrough the `constructor.super_` property.\n-->\n\n<p>&#x3055;&#x3089;&#x306A;&#x308B;&#x5229;&#x4FBF;&#x6027;&#x306E;&#x305F;&#x3081;&#x306B;&#x3001;<code>superConstructor</code> &#x306F; <code>constructor.super_</code>\n&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x901A;&#x3058;&#x3066;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&quot;util&quot;);\nvar events = require(&quot;events&quot;);\n\nfunction MyStream() {\n    events.EventEmitter.call(this);\n}\n\nutil.inherits(MyStream, events.EventEmitter);\n\nMyStream.prototype.write = function(data) {\n    this.emit(&quot;data&quot;, data);\n}\n\nvar stream = new MyStream();\n\nconsole.log(stream instanceof events.EventEmitter); // true\nconsole.log(MyStream.super_ === events.EventEmitter); // true\n\nstream.on(&quot;data&quot;, function(data) {\n    console.log(&apos;Received data: &quot;&apos; + data + &apos;&quot;&apos;);\n})\nstream.write(&quot;It works!&quot;); // Received data: &quot;It works!&quot;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;constructor&quot;
                },
                {
                  &quot;name&quot;: &quot;superConstructor&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;util&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Events&quot;,
      &quot;name&quot;: &quot;Events&quot;,
      &quot;stability&quot;: 4,
      &quot;stabilityText&quot;: &quot;API Frozen&quot;,
      &quot;type&quot;: &quot;module&quot;,
      &quot;desc&quot;: &quot;<!--\nMany objects in Node emit events: a `net.Server` emits an event each time\na peer connects to it, a `fs.readStream` emits an event when the file is\nopened. All objects which emit events are instances of `events.EventEmitter`.\nYou can access this module by doing: `require(\"events\");`\n-->\n\n<p>Node &#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x591A;&#x304F;&#x306F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;:\n<code>net.Server</code>&#x306F;&#x76F8;&#x624B;&#x304B;&#x3089;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x305F;&#x3073;&#x306B;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x3001;\n<code>fs.readStream</code>&#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3055;&#x308C;&#x308B;&#x305F;&#x3073;&#x306B;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x5168;&#x3066;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; <code>events.EventEmitter</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3067;&#x304D;&#x307E;&#x3059;: <code>require(&quot;events&quot;);</code>\n\n</p>\n<!--\nTypically, event names are represented by a camel-cased string, however,\nthere aren't any strict restrictions on that, as any string will be accepted.\n-->\n\n<p>&#x901A;&#x5E38;&#x3001;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x540D;&#x306F;&#x30AD;&#x30E3;&#x30E1;&#x30EB;&#x8A18;&#x6CD5;&#x306B;&#x3088;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3067;&#x8868;&#x73FE;&#x3055;&#x308C;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x53B3;&#x683C;&#x306A;&#x5236;&#x9650;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x3069;&#x3093;&#x306A;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFunctions can then be attached to objects, to be executed when an event\nis emitted. These functions are called _listeners_. Inside a listener\nfunction, `this` refers to the `EventEmitter` that the listener was\nattached to.\n-->\n\n<p>&#x95A2;&#x6570;&#x3092;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x30A2;&#x30BF;&#x30C3;&#x30C1;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x3001;&#x305D;&#x308C;&#x306F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x95A2;&#x6570;&#x306F;<em>&#x30EA;&#x30B9;&#x30CA;&#x30FC;</em>&#x3068;&#x547C;&#x3070;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30EA;&#x30B9;&#x30CA;&#x95A2;&#x6570;&#x306E;&#x4E2D;&#x3067;&#x306F;&#x3001;<code>this</code> &#x306F;&#x305D;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x30A2;&#x30BF;&#x30C3;&#x30C1;&#x3055;&#x308C;&#x305F; <code>EventEmitter</code>\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: events.EventEmitter&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;events.EventEmitter&quot;,
          &quot;desc&quot;: &quot;<!--\nTo access the EventEmitter class, `require('events').EventEmitter`.\n-->\n\n<p>EventEmitter&#x30AF;&#x30E9;&#x30B9;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;<code>require(&apos;events&apos;).EventEmitter</code> &#x3092;&#x4F7F;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nWhen an `EventEmitter` instance experiences an error, the typical action is\nto emit an `'error'` event.  Error events are treated as a special case in node.\nIf there is no listener for it, then the default action is to print a stack\ntrace and exit the program.\n-->\n\n<p><code>EventEmitter</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x304C;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x906D;&#x9047;&#x3057;&#x305F;&#x6642;&#x3001;\n&#x5178;&#x578B;&#x7684;&#x306A;&#x52D5;&#x4F5C;&#x306F; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\nnode &#x3067;&#x306F;&#x30A8;&#x30E9;&#x30FC;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x7279;&#x5225;&#x306B;&#x6271;&#x308F;&#x308C;&#x307E;&#x3059;&#xFF0E;\n&#x3082;&#x3057;&#x305D;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x304C;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x52D5;&#x4F5C;&#x306F;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3092;&#x51FA;&#x529B;&#x3057;&#x3066;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nAll EventEmitters emit the event `'newListener'` when new listeners are\nadded and `'removeListener'` when a listener is removed.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; EventEmitter &#x306F;&#x3001;&#x65B0;&#x3057;&#x3044;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x304C;&#x52A0;&#x3048;&#x3089;&#x308C;&#x308B;&#x3068;&#x30A4;&#x30D9;&#x30F3;&#x30C8; <code>&apos;newListener&apos;</code> &#x3092;&#x751F;&#x6210;&#x3057;&#x3001;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x304C;&#x524A;&#x9664;&#x3055;&#x308C;&#x308B;&#x3068; <code>&apos;removeListener&apos;</code> &#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;emitter.addListener(event, listener)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;addListener&quot;,
              &quot;desc&quot;: &quot;<!--\nAdds a listener to the end of the listeners array for the specified event.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x914D;&#x5217;&#x306E;&#x6700;&#x5F8C;&#x306B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>server.on(&apos;connection&apos;, function (stream) {\n  console.log(&apos;someone connected!&apos;);\n});</code></pre>\n<!--\nReturns emitter, so calls can be chained.\n-->\n\n<p>EventEmitter &#x81EA;&#x8EAB;&#x3092;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3092;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;listener&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;listener&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.on(event, listener)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;on&quot;,
              &quot;desc&quot;: &quot;<!--\nAdds a listener to the end of the listeners array for the specified event.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x914D;&#x5217;&#x306E;&#x6700;&#x5F8C;&#x306B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>server.on(&apos;connection&apos;, function (stream) {\n  console.log(&apos;someone connected!&apos;);\n});</code></pre>\n<!--\nReturns emitter, so calls can be chained.\n-->\n\n<p>EventEmitter &#x81EA;&#x8EAB;&#x3092;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3092;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;listener&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.once(event, listener)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;once&quot;,
              &quot;desc&quot;: &quot;<!--\nAdds a **one time** listener for the event. This listener is\ninvoked only the next time the event is fired, after which\nit is removed.\n-->\n\n<p><strong>&#x4E00;&#x56DE;&#x9650;&#x308A;</strong>&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x306F;&#x6B21;&#x306B;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x6642;&#x306B;&#x9650;&#x308A;&#x8D77;&#x52D5;&#x3055;&#x308C;&#x3001;&#x305D;&#x306E;&#x5F8C;&#x3067;&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>server.once(&apos;connection&apos;, function (stream) {\n  console.log(&apos;Ah, we have our first user!&apos;);\n});</code></pre>\n<!--\nReturns emitter, so calls can be chained.\n-->\n\n<p>EventEmitter &#x81EA;&#x8EAB;&#x3092;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3092;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;listener&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.removeListener(event, listener)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;removeListener&quot;,
              &quot;desc&quot;: &quot;<!--\nRemove a listener from the listener array for the specified event.\n**Caution**: changes array indices in the listener array behind the listener.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x914D;&#x5217;&#x304B;&#x3089;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x524A;&#x9664;&#x3057;&#x307E;&#x3059;&#x3002;\n<strong>&#x6CE8;&#x610F;</strong>: &#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x306E;&#x80CC;&#x5F8C;&#x306B;&#x3042;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x914D;&#x5217;&#x306E;&#x30A4;&#x30F3;&#x30C7;&#x30C3;&#x30AF;&#x30B9;&#x304C;&#x5909;&#x5316;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var callback = function(stream) {\n  console.log(&apos;someone connected!&apos;);\n};\nserver.on(&apos;connection&apos;, callback);\n// ...\nserver.removeListener(&apos;connection&apos;, callback);</code></pre>\n<!--\nReturns emitter, so calls can be chained.\n-->\n\n<p>EventEmitter &#x81EA;&#x8EAB;&#x3092;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3092;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;listener&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.removeAllListeners([event])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;removeAllListeners&quot;,
              &quot;desc&quot;: &quot;<!--\nRemoves all listeners, or those of the specified event.\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x307E;&#x305F;&#x306F;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x524A;&#x9664;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns emitter, so calls can be chained.\n-->\n\n<p>EventEmitter &#x81EA;&#x8EAB;&#x3092;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3092;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.setMaxListeners(n)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setMaxListeners&quot;,
              &quot;desc&quot;: &quot;<!--\nBy default EventEmitters will print a warning if more than 10 listeners are\nadded for a particular event. This is a useful default which helps finding memory leaks.\nObviously not all Emitters should be limited to 10. This function allows\nthat to be increased. Set to zero for unlimited.\n-->\n\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x3001;EventEmitter &#x306F; 10 &#x3092;&#x8D8A;&#x3048;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x7279;&#x5B9A;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x308B;&#x3068;&#x8B66;&#x544A;&#x3092;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30E1;&#x30E2;&#x30EA;&#x30EA;&#x30FC;&#x30AF;&#x3092;&#x898B;&#x3064;&#x3051;&#x308B;&#x305F;&#x3081;&#x306B;&#x5F79;&#x306B;&#x7ACB;&#x3064;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x3067;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E; EventEmitter &#x304C; 10 &#x306B;&#x5236;&#x9650;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x308F;&#x3051;&#x3067;&#x306F;&#x306A;&#x3044;&#x3053;&#x3068;&#x306F;&#x660E;&#x3089;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x5236;&#x9650;&#x3092;&#x5897;&#x3084;&#x3059;&#x3053;&#x3068;&#x3092;&#x8A31;&#x53EF;&#x3057;&#x307E;&#x3059;&#x3002;\n0 &#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x7121;&#x5236;&#x9650;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;n&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.listeners(event)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listeners&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns an array of listeners for the specified event.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>server.on(&apos;connection&apos;, function (stream) {\n  console.log(&apos;someone connected!&apos;);\n});\nconsole.log(util.inspect(server.listeners(&apos;connection&apos;))); // [ [Function] ]</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;emitter.emit(event, [arg1], [arg2], [...])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;emit&quot;,
              &quot;desc&quot;: &quot;<!--\nExecute each of the listeners in order with the supplied arguments.\n-->\n\n<p>&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x5F15;&#x6570;&#x306E;&#x4E26;&#x3073;&#x3067;&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns `true` if event had listeners, `false` otherwise.\n-->\n\n<p>&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x5FDC;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x3042;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; <code>true</code>&#x3001;&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306F; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;event&quot;
                    },
                    {
                      &quot;name&quot;: &quot;arg1&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;arg2&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;...&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ],
          &quot;classMethods&quot;: [
            {
              &quot;textRaw&quot;: &quot;Class Method: EventEmitter.listenerCount(emitter, event)&quot;,
              &quot;type&quot;: &quot;classMethod&quot;,
              &quot;name&quot;: &quot;listenerCount&quot;,
              &quot;desc&quot;: &quot;<!--\nReturn the number of listeners for a given event.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x6570;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;emitter&quot;
                    },
                    {
                      &quot;name&quot;: &quot;event&quot;
                    }
                  ]
                }
              ]
            }
          ],
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;newListener&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;newListener&quot;,
              &quot;params&quot;: [],
              &quot;desc&quot;: &quot;<!--\nThis event is emitted any time someone adds a new listener.  It is unspecified\nif `listener` is in the list returned by `emitter.listeners(event)`.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x65B0;&#x3057;&#x3044;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x304C;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x308B;&#x305F;&#x3073;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>emitter.listeners(event)</code> &#x304C;&#x8FD4;&#x3059;&#x30EA;&#x30B9;&#x30C8;&#x306B; <code>listener</code> &#x304C;&#x542B;&#x307E;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x306F;\n&#x672A;&#x5B9A;&#x7FA9;&#x3067;&#x3059;&#x3002;\n\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;removeListener&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;removeListener&quot;,
              &quot;desc&quot;: &quot;<!--\n* `event` {String} The event name\n* `listener` {Function} The event handler function\n-->\n\n<ul>\n<li><code>event</code> {String} &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x540D;</li>\n<li><code>listener</code> {Function} &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x95A2;&#x6570;</li>\n</ul>\n<!--\nThis event is emitted any time someone removes a listener.  It is unspecified\nif `listener` is in the list returned by `emitter.listeners(event)`.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x308B;&#x305F;&#x3073;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>emitter.listeners(event)</code> &#x304C;&#x8FD4;&#x3059;&#x30EA;&#x30B9;&#x30C8;&#x304B;&#x3089; <code>listener</code> &#x304C;&#x9664;&#x304B;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x306F;\n&#x672A;&#x5B9A;&#x7FA9;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ]
        }
      ]
    },
    {
      &quot;textRaw&quot;: &quot;Domain&quot;,
      &quot;name&quot;: &quot;domain&quot;,
      &quot;stability&quot;: 2,
      &quot;stabilityText&quot;: &quot;Unstable&quot;,
      &quot;desc&quot;: &quot;<!--\nDomains provide a way to handle multiple different IO operations as a\nsingle group.  If any of the event emitters or callbacks registered to a\ndomain emit an `error` event, or throw an error, then the domain object\nwill be notified, rather than losing the context of the error in the\n`process.on('uncaughtException')` handler, or causing the program to\nexit immediately with an error code.\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F;&#x8907;&#x6570;&#x306E;&#x7570;&#x306A;&#x308B; I/O &#x64CD;&#x4F5C;&#x3092;&#x4E00;&#x3064;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x65B9;&#x6CD5;&#x3092;\n&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; EventEmitter &#x307E;&#x305F;&#x306F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x767B;&#x9332;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;\n<code>&apos;error&apos;</code> &#x304C;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x308A;&#x4F8B;&#x5916;&#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;\n<code>process.on(&apos;uncaughtException&apos;)</code> &#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3067;&#x30A8;&#x30E9;&#x30FC;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x304C;&#x5931;&#x308F;&#x308C;&#x305F;&#x308A;&#x3001;\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x30A8;&#x30E9;&#x30FC;&#x30B3;&#x30FC;&#x30C9;&#x3068;&#x5171;&#x306B;&#x5373;&#x5EA7;&#x306B;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x901A;&#x77E5;&#x3055;&#x308C;&#x307E;&#x3059;\n\n</p>\n<!--\nThis feature is new in Node version 0.8.  It is a first pass, and is\nexpected to change significantly in future versions.  Please use it and\nprovide feedback.\n-->\n\n<p>&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x306F; Node &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 0.8 &#x304B;&#x3089;&#x306E;&#x65B0;&#x3057;&#x3044;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30D5;&#x30A1;&#x30FC;&#x30B9;&#x30C8;&#x30D1;&#x30B9;&#x3067;&#x3042;&#x308A;&#x3001;&#x5C06;&#x6765;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x5927;&#x304D;&#x304F;&#x5909;&#x66F4;&#x3055;&#x308C;&#x308B;&#x3068;&#x4E88;&#x60F3;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x662F;&#x975E;&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x30D5;&#x30A3;&#x30FC;&#x30C9;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nDue to their experimental nature, the Domains features are disabled unless\nthe `domain` module is loaded at least once.  No domains are created or\nregistered by default.  This is by design, to prevent adverse effects on\ncurrent programs.  It is expected to be enabled by default in future\nNode.js versions.\n-->\n\n<p>&#x3053;&#x308C;&#x3089;&#x306F;&#x5B9F;&#x9A13;&#x7684;&#x3067;&#x3042;&#x308B;&#x305F;&#x3081;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x6A5F;&#x80FD;&#x306F; <code>domain</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x304C;&#x5C11;&#x306A;&#x304F;&#x3068;&#x3082;\n&#x4E00;&#x56DE;&#x306F;&#x30ED;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;&#x7121;&#x52B9;&#x306B;&#x306A;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305A;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x767B;&#x9332;&#x3082;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x65E2;&#x5B58;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;&#x60AA;&#x5F71;&#x97FF;&#x3092;&#x4E0E;&#x3048;&#x308B;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x5C06;&#x6765;&#x306E; Node.js &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x6709;&#x52B9;&#x306B;&#x306A;&#x308B;&#x3053;&#x3068;&#x304C;&#x671F;&#x5F85;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;Warning: Don&apos;t Ignore Errors!&quot;,
          &quot;name&quot;: &quot;Warning: Don&apos;t Ignore Errors!&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nDomain error handlers are not a substitute for closing down your\nprocess when an error occurs.\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x306F;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x6642;&#x306B;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x306F;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nBy the very nature of how `throw` works in JavaScript, there is almost\nnever any way to safely \"pick up where you left off\", without leaking\nreferences, or creating some other sort of undefined brittle state.\n-->\n\n<p>JavaScript &#x306B;&#x304A;&#x3044;&#x3066;&#x300C;throw&#x300D;&#x304C;&#x3069;&#x306E;&#x3088;&#x3046;&#x306B;&#x50CD;&#x304F;&#x304B;&#x3068;&#x3044;&#x3046;&#x6027;&#x8CEA;&#x306B;&#x3088;&#x308A;&#x3001;\n&#x53C2;&#x7167;&#x306E;&#x30EA;&#x30FC;&#x30AF;&#x3084;&#x672A;&#x5B9A;&#x7FA9;&#x306E;&#x8106;&#x5F31;&#x306A;&#x72B6;&#x614B;&#x3092;&#x4F5C;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F;&#x300C;&#x4E2D;&#x65AD;&#x3057;&#x305F;&#x3068;&#x3053;&#x308D;&#x3092;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x300D;\n&#x65B9;&#x6CD5;&#x306F;&#x307B;&#x3068;&#x3093;&#x3069;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThe safest way to respond to a thrown error is to shut down the\nprocess.  Of course, in a normal web server, you might have many\nconnections open, and it is not reasonable to abruptly shut those down\nbecause an error was triggered by someone else.\n-->\n\n<p>&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x5BFE;&#x51E6;&#x3059;&#x308B;&#x3082;&#x3063;&#x3068;&#x3082;&#x5B89;&#x5168;&#x306A;&#x65B9;&#x6CD5;&#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n&#x3082;&#x3061;&#x308D;&#x3093;&#x3001;&#x901A;&#x5E38;&#x306E; Web &#x30B5;&#x30FC;&#x30D0;&#x306F;&#x591A;&#x304F;&#x306E;&#x63A5;&#x7D9A;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x3066;&#x3044;&#x3066;&#x304A;&#x308A;&#x3001;\n&#x4ED6;&#x306E;&#x8AB0;&#x304B;&#x306B;&#x3088;&#x3063;&#x3066;&#x5F15;&#x304D;&#x8D77;&#x3053;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x306E;&#x305F;&#x3081;&#x306B;&#x305D;&#x308C;&#x3089;&#x3092;&#x30B7;&#x30E3;&#x30C3;&#x30C8;&#x30C0;&#x30A6;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;\n&#x5408;&#x7406;&#x7684;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThe better approach is send an error response to the request that\ntriggered the error, while letting the others finish in their normal\ntime, and stop listening for new requests in that worker.\n-->\n\n<p>&#x3088;&#x308A;&#x3088;&#x3044;&#x30A2;&#x30D7;&#x30ED;&#x30FC;&#x30C1;&#x306F;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x5F15;&#x304D;&#x8D77;&#x3053;&#x3057;&#x305F;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306B;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x5FDC;&#x7B54;&#x3057;&#x3001;\n&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306E;&#x63A5;&#x7D9A;&#x304C;&#x6B63;&#x5E38;&#x306B;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x307E;&#x3067;&#x306E;&#x9593;&#x3001;&#x30EF;&#x30FC;&#x30AB;&#x306F;&#x65B0;&#x3057;&#x3044;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CB;&#x30F3;&#x30B0;&#x3092;\n&#x6B62;&#x3081;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIn this way, `domain` usage goes hand-in-hand with the cluster module,\nsince the master process can fork a new worker when a worker\nencounters an error.  For node programs that scale to multiple\nmachines, the terminating proxy or service registry can take note of\nthe failure, and react accordingly.\n-->\n\n<p>&#x3053;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x306F;&#x3001;<code>domain</code> &#x306F;&#x30AF;&#x30E9;&#x30B9;&#x30BF;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3068;&#x624B;&#x3092;&#x53D6;&#x308A;&#x5408;&#x3046;&#x5229;&#x7528;&#x65B9;&#x6CD5;&#x306B;&#x3088;&#x308A;&#x3001;\n&#x30EF;&#x30FC;&#x30AB;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x906D;&#x9047;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x65B0;&#x3057;&#x3044;&#x30EF;&#x30FC;&#x30AB;&#x3092;&#x30D5;&#x30A9;&#x30FC;&#x30AF;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x8907;&#x6570;&#x306E;&#x30DE;&#x30B7;&#x30F3;&#x306B;&#x30B9;&#x30B1;&#x30FC;&#x30EB;&#x3059;&#x308B; node &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067;&#x306F;&#x3001;\n&#x7D42;&#x7AEF;&#x306E;&#x30D7;&#x30ED;&#x30AD;&#x30B7;&#x3084;&#x30B5;&#x30FC;&#x30D3;&#x30B9;&#x30EC;&#x30B8;&#x30B9;&#x30C8;&#x30EA;&#x306F;&#x969C;&#x5BB3;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3001;\n&#x305D;&#x308C;&#x306B;&#x5FDC;&#x3058;&#x3066;&#x5BFE;&#x51E6;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example, this is not a good idea:\n-->\n\n<p>&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;&#x3053;&#x308C;&#x306F;&#x3044;&#x3044;&#x30A2;&#x30A4;&#x30C7;&#x30A3;&#x30A2;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// XXX WARNING!  BAD IDEA!\n\nvar d = require(&apos;domain&apos;).create();\nd.on(&apos;error&apos;, function(er) {\n  // The error won&apos;t crash the process, but what it does is worse!\n  // Though we&apos;ve prevented abrupt process restarting, we are leaking\n  // resources like crazy if this ever happens.\n  // This is no better than process.on(&apos;uncaughtException&apos;)!\n  console.log(&apos;error, but oh well&apos;, er.message);\n});\nd.run(function() {\n  require(&apos;http&apos;).createServer(function(req, res) {\n    handleRequest(req, res);\n  }).listen(PORT);\n});</code></pre>\n<!--\nBy using the context of a domain, and the resilience of separating our\nprogram into multiple worker processes, we can react more\nappropriately, and handle errors with much greater safety.\n-->\n\n<p>domain &#x306E;&#x5229;&#x7528;&#x3068;&#x3001;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x8907;&#x6570;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x5206;&#x5272;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x308B;\n&#x5FA9;&#x5143;&#x529B;&#x306B;&#x3088;&#x308A;&#x3001;&#x3068;&#x3066;&#x3082;&#x5B89;&#x5168;&#x306B;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x6271;&#x3046;&#x3001;&#x3088;&#x308A;&#x9069;&#x5207;&#x306A;&#x5BFE;&#x51E6;&#x3092;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Much better!\n\nvar cluster = require(&apos;cluster&apos;);\nvar PORT = +process.env.PORT || 1337;\n\nif (cluster.isMaster) {\n  // In real life, you&apos;d probably use more than just 2 workers,\n  // and perhaps not put the master and worker in the same file.\n  //\n  // You can also of course get a bit fancier about logging, and\n  // implement whatever custom logic you need to prevent DoS\n  // attacks and other bad behavior.\n  //\n  // See the options in the cluster documentation.\n  //\n  // The important thing is that the master does very little,\n  // increasing our resilience to unexpected errors.\n\n  cluster.fork();\n  cluster.fork();\n\n  cluster.on(&apos;disconnect&apos;, function(worker) {\n    console.error(&apos;disconnect!&apos;);\n    cluster.fork();\n  });\n\n} else {\n  // the worker\n  //\n  // This is where we put our bugs!\n\n  var domain = require(&apos;domain&apos;);\n\n  // See the cluster documentation for more details about using\n  // worker processes to serve requests.  How it works, caveats, etc.\n\n  var server = require(&apos;http&apos;).createServer(function(req, res) {\n    var d = domain.create();\n    d.on(&apos;error&apos;, function(er) {\n      console.error(&apos;error&apos;, er.stack);\n\n      // Note: we&apos;re in dangerous territory!\n      // By definition, something unexpected occurred,\n      // which we probably didn&apos;t want.\n      // Anything can happen now!  Be very careful!\n\n      try {\n        // make sure we close down within 30 seconds\n        var killtimer = setTimeout(function() {\n          process.exit(1);\n        }, 30000);\n        // But don&apos;t keep the process open just for that!\n        killtimer.unref();\n\n        // stop taking new requests.\n        server.close();\n\n        // Let the master know we&apos;re dead.  This will trigger a\n        // &apos;disconnect&apos; in the cluster master, and then it will fork\n        // a new worker.\n        cluster.worker.disconnect();\n\n        // try to send an error to the request that triggered the problem\n        res.statusCode = 500;\n        res.setHeader(&apos;content-type&apos;, &apos;text/plain&apos;);\n        res.end(&apos;Oops, there was a problem!\\n&apos;);\n      } catch (er2) {\n        // oh well, not much we can do at this point.\n        console.error(&apos;Error sending 500!&apos;, er2.stack);\n      }\n    });\n\n    // Because req and res were created before this domain existed,\n    // we need to explicitly add them.\n    // See the explanation of implicit vs explicit binding below.\n    d.add(req);\n    d.add(res);\n\n    // Now run the handler function in the domain.\n    d.run(function() {\n      handleRequest(req, res);\n    });\n  });\n  server.listen(PORT);\n}\n\n// This part isn&apos;t important.  Just an example routing thing.\n// You&apos;d put your fancy application logic here.\nfunction handleRequest(req, res) {\n  switch(req.url) {\n    case &apos;/error&apos;:\n      // We do some async stuff, and then...\n      setTimeout(function() {\n        // Whoops!\n        flerb.bark();\n      });\n      break;\n    default:\n      res.end(&apos;ok&apos;);\n  }\n}</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Additions to Error objects&quot;,
          &quot;name&quot;: &quot;Additions to Error objects&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nAny time an Error object is routed through a domain, a few extra fields\nare added to it.\n-->\n\n<p>&#x3069;&#x3093;&#x306A;&#x5834;&#x5408;&#x3067;&#x3082;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x9001;&#x3089;&#x308C;&#x305F; Error &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x304C;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* `error.domain` The domain that first handled the error.\n* `error.domainEmitter` The event emitter that emitted an 'error' event\n  with the error object.\n* `error.domainBound` The callback function which was bound to the\n  domain, and passed an error as its first argument.\n* `error.domainThrown` A boolean indicating whether the error was\n  thrown, emitted, or passed to a bound callback function.\n-->\n\n<ul>\n<li><code>error.domain</code> &#x3053;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x6700;&#x521D;&#x306B;&#x6355;&#x307E;&#x3048;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3002;</li>\n<li><code>error.domainEmitter</code> &#x3053;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x5171;&#x306B; <code>error</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x751F;&#x6210;&#x3057;&#x305F; EventEmitter&#x3002;</li>\n<li><code>error.domainBound</code> &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;&#x3067;&#x3001;\n&#x305D;&#x306E;&#x7B2C; 1 &#x5F15;&#x6570;&#x306B;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x6E21;&#x3055;&#x308C;&#x305F;&#x3082;&#x306E;&#x3002;</li>\n<li><code>error.domainThrown</code> &#x30A8;&#x30E9;&#x30FC;&#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x304B;&#x3001;EventEmitter &#x304B;&#x3089;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x304B;&#x3001;\n&#x305D;&#x308C;&#x3068;&#x3082;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;&#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x304B;&#x3092;&#x793A;&#x3059; boolean &#x5024;&#x3002;</li>\n</ul>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Implicit Binding&quot;,
          &quot;name&quot;: &quot;Implicit Binding&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nIf domains are in use, then all **new** EventEmitter objects (including\nStream objects, requests, responses, etc.) will be implicitly bound to\nthe active domain at the time of their creation.\n-->\n\n<p>&#x4E00;&#x5EA6;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x5168;&#x3066;&#x306E; <strong>&#x65B0;&#x3057;&#x3044;</strong> EventEmitter &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;\n(&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3084;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3001;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x3001;&#x305D;&#x306E;&#x4ED6;&#x3092;&#x542B;&#x3080;) &#x306F;&#x3001;\n&#x305D;&#x308C;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;&#x6642;&#x70B9;&#x3067;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x6697;&#x9ED9;&#x7684;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAdditionally, callbacks passed to lowlevel event loop requests (such as\nto fs.open, or other callback-taking methods) will automatically be\nbound to the active domain.  If they throw, then the domain will catch\nthe error.\n-->\n\n<p>&#x52A0;&#x3048;&#x3066;&#x3001;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x8981;&#x6C42; (&#x4F8B;&#x3048;&#x3070; <code>fs.open()</code>&#x3001;\n&#x3042;&#x308B;&#x3044;&#x306F;&#x4ED6;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B;&#x30E1;&#x30BD;&#x30C3;&#x30C9;) &#x3082;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;\n&#x675F;&#x7E1B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x305D;&#x308C;&#x3089;&#x304C;&#x4F8B;&#x5916;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3059;&#x308B;&#x3068;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F;&#x305D;&#x308C;&#x3092;&#x6355;&#x307E;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn order to prevent excessive memory usage, Domain objects themselves\nare not implicitly added as children of the active domain.  If they\nwere, then it would be too easy to prevent request and response objects\nfrom being properly garbage collected.\n-->\n\n<p>&#x5FC5;&#x8981;&#x4EE5;&#x4E0A;&#x306B;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x306E;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x305D;&#x308C;&#x81EA;&#x8EAB;&#x306F;\n&#x6697;&#x9ED9;&#x7684;&#x306B;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x5B50;&#x3068;&#x3057;&#x3066;&#x6697;&#x9ED9;&#x7684;&#x306B;&#x306F;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x3092;&#x3059;&#x308C;&#x3070;&#x3001;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3084;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C;&#x304D;&#x3061;&#x3093;&#x3068; GC &#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;\n&#x3042;&#x307E;&#x308A;&#x306B;&#x3082;&#x7C21;&#x5358;&#x306B;&#x59A8;&#x5BB3;&#x3057;&#x3066;&#x3057;&#x307E;&#x3046;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nIf you *want* to nest Domain objects as children of a parent Domain,\nthen you must explicitly add them.\n-->\n\n<p>&#x3082;&#x3057;&#x30CD;&#x30B9;&#x30C8;&#x3057;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x5B50;&#x3068;&#x3057;&#x3066;&#x4ED6;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B; <em>&#x52A0;&#x3048;&#x305F;&#x3051;&#x308C;&#x3070;</em>\n&#x660E;&#x793A;&#x7684;&#x306B;&#x305D;&#x308C;&#x3092;&#x52A0;&#x3048;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nImplicit binding routes thrown errors and `'error'` events to the\nDomain's `error` event, but does not register the EventEmitter on the\nDomain, so `domain.dispose()` will not shut down the EventEmitter.\nImplicit binding only takes care of thrown errors and `'error'` events.\n-->\n\n<p>&#x6697;&#x9ED9;&#x7684;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x3084; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x3001;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x305D;&#x306E; EventEmitter &#x3092;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x767B;&#x9332;&#x3057;&#x306A;&#x3044;&#x306E;&#x3067;&#x3001;<code>domain.dispose()</code> &#x306F;\nEventEmitter &#x3092;&#x30B7;&#x30E3;&#x30C3;&#x30C8;&#x30C0;&#x30A6;&#x30F3;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x6697;&#x9ED9;&#x7684;&#x306A;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x4F8B;&#x5916;&#x3068; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3060;&#x3051;\n&#x6CE8;&#x610F;&#x3092;&#x6255;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Explicit Binding&quot;,
          &quot;name&quot;: &quot;Explicit Binding&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nSometimes, the domain in use is not the one that ought to be used for a\nspecific event emitter.  Or, the event emitter could have been created\nin the context of one domain, but ought to instead be bound to some\nother domain.\n-->\n\n<p>&#x6642;&#x306B;&#x306F;&#x3001;&#x4F7F;&#x7528;&#x4E2D;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F;&#x7279;&#x5B9A;&#x306E; EventEmitter &#x306B;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3042;&#x308B;&#x3044;&#x306F;&#x3001;EventEmitter &#x306F;&#x3042;&#x308B;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x4E2D;&#x3067;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x305D;&#x306E;&#x4ED6;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x7D50;&#x3073;&#x3064;&#x3051;&#x3089;&#x308C;&#x308B;&#x3079;&#x304D;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nFor example, there could be one domain in use for an HTTP server, but\nperhaps we would like to have a separate domain to use for each request.\n-->\n\n<p>&#x4F8B;&#x3048;&#x3070;&#x3001;HTTP &#x30B5;&#x30FC;&#x30D0;&#x3067;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x4E00;&#x3064;&#x3042;&#x308B;&#x3068;&#x3057;&#x3066;&#x3082;&#x3001;\n&#x304A;&#x305D;&#x3089;&#x304F;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x6BCE;&#x306B;&#x72EC;&#x7ACB;&#x3057;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x6301;&#x3061;&#x305F;&#x3044;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n<!--\nThat is possible via explicit binding.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x660E;&#x793A;&#x7684;&#x306A;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306B;&#x3088;&#x3063;&#x3066;&#x53EF;&#x80FD;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>// create a top-level domain for the server\nvar serverDomain = domain.create();\n\nserverDomain.run(function() {\n  // server is created in the scope of serverDomain\n  http.createServer(function(req, res) {\n    // req and res are also created in the scope of serverDomain\n    // however, we&apos;d prefer to have a separate domain for each request.\n    // create it first thing, and add req and res to it.\n    var reqd = domain.create();\n    reqd.add(req);\n    reqd.add(res);\n    reqd.on(&apos;error&apos;, function(er) {\n      console.error(&apos;Error&apos;, er, req.url);\n      try {\n        res.writeHead(500);\n        res.end(&apos;Error occurred, sorry.&apos;);\n      } catch (er) {\n        console.error(&apos;Error sending 500&apos;, er, req.url);\n      }\n    });\n  }).listen(1337);\n});</code></pre>\n&quot;
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;domain.create()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;create&quot;,
          &quot;signatures&quot;: [
            {
              &quot;return&quot;: {
                &quot;textRaw&quot;: &quot;return: {Domain} &quot;,
                &quot;name&quot;: &quot;return&quot;,
                &quot;type&quot;: &quot;Domain&quot;
              },
              &quot;params&quot;: []
            },
            {
              &quot;params&quot;: []
            }
          ],
          &quot;desc&quot;: &quot;<!--\nReturns a new Domain object.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: Domain&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Domain&quot;,
          &quot;desc&quot;: &quot;<!--\nThe Domain class encapsulates the functionality of routing errors and\nuncaught exceptions to the active Domain object.\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30AF;&#x30E9;&#x30B9;&#x306F;&#x30A8;&#x30E9;&#x30FC;&#x306E;&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x3084;&#x6355;&#x307E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x4F8B;&#x5916;&#x3092;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x3059;&#x308B;&#x6A5F;&#x80FD;&#x3092;&#x30AB;&#x30D7;&#x30BB;&#x30EB;&#x5316;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nDomain is a child class of [EventEmitter][].  To handle the errors that it\ncatches, listen to its `error` event.\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306F; [EventEmitter][] &#x306E;&#x5B50;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x304C;&#x6355;&#x307E;&#x3048;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x6271;&#x3044;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;<code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;domain.run(fn)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;run&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`fn` {Function} &quot;,
                      &quot;name&quot;: &quot;fn&quot;,
                      &quot;type&quot;: &quot;Function&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;fn&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nRun the supplied function in the context of the domain, implicitly\nbinding all event emitters, timers, and lowlevel requests that are\ncreated in that context.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x95A2;&#x6570;&#x3092;&#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x5168;&#x3066;&#x306E; EventEmitter&#x3001;&#x30BF;&#x30A4;&#x30DE;&#x3001;&#x305D;&#x3057;&#x3066;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x8981;&#x6C42;&#x306F;\n&#x6697;&#x9ED9;&#x7684;&#x306B;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis is the most basic way to use a domain.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3082;&#x3063;&#x3068;&#x3082;&#x4E00;&#x822C;&#x7684;&#x306A;&#x65B9;&#x6CD5;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var d = domain.create();\nd.on(&apos;error&apos;, function(er) {\n  console.error(&apos;Caught error!&apos;, er);\n});\nd.run(function() {\n  process.nextTick(function() {\n    setTimeout(function() { // simulating some various async stuff\n      fs.open(&apos;non-existent file&apos;, &apos;r&apos;, function(er, fd) {\n        if (er) throw er;\n        // proceed...\n      });\n    }, 100);\n  });\n});</code></pre>\n<!--\nIn this example, the `d.on('error')` handler will be triggered, rather\nthan crashing the program.\n-->\n\n<p>&#x3053;&#x306E;&#x4F8B;&#x3067;&#x306F;&#x3001;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x30AF;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x305B;&#x305A;&#x306B; <code>d.on(&apos;error&apos;)</code> &#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x304C;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;domain.add(emitter)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;add&quot;,
              &quot;desc&quot;: &quot;<!--\n* `emitter` {EventEmitter | Timer} emitter or timer to be added to the domain\n-->\n\n<ul>\n<li><code>emitter</code> {EventEmitter | Timer} &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x52A0;&#x3048;&#x3089;&#x308C;&#x308B; EventEmitter\n&#x307E;&#x305F;&#x306F;&#x30BF;&#x30A4;&#x30DE;</li>\n</ul>\n<!--\nExplicitly adds an emitter to the domain.  If any event handlers called by\nthe emitter throw an error, or if the emitter emits an `error` event, it\nwill be routed to the domain's `error` event, just like with implicit\nbinding.\n-->\n\n<p>&#x660E;&#x793A;&#x7684;&#x306B; EventEmitter &#x3092;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E; EventEmitter &#x304B;&#x3089;&#x547C;&#x3070;&#x308C;&#x305F;&#x3069;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x304C;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x3066;&#x3082;&#x3001;\n&#x3042;&#x308B;&#x3044;&#x306F;&#x3053;&#x306E; EventEmitter &#x304C; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x767A;&#x751F;&#x3057;&#x3066;&#x3082;&#x3001;\n&#x6697;&#x9ED9;&#x7684;&#x306B;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x305F;&#x306E;&#x3068;&#x540C;&#x69D8;&#x3001;&#x305D;&#x308C;&#x306F;&#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E; <code>&apos;error</code>&apos;\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis also works with timers that are returned from `setInterval` and\n`setTimeout`.  If their callback function throws, it will be caught by\nthe domain 'error' handler.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x540C;&#x69D8;&#x306B; <code>setIntervalu</code> &#x304A;&#x3088;&#x3073; <code>setTimeout</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30BF;&#x30A4;&#x30DE;&#x3067;&#x3082;\n&#x50CD;&#x304D;&#x307E;&#x3059;&#x3002;&#x305D;&#x308C;&#x3089;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;&#x304C;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3059;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E; <code>&apos;error&apos;</code> &#x30CF;&#x30F3;&#x30C9;&#x306B;&#x6355;&#x307E;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the Timer or EventEmitter was already bound to a domain, it is removed\nfrom that one, and bound to this one instead.\n-->\n\n<p>&#x3082;&#x3057;&#x30BF;&#x30A4;&#x30DE;&#x307E;&#x305F;&#x306F; EventEmitter &#x304C;&#x65E2;&#x306B;&#x4ED6;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x3066;&#x3044;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x5143;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x524A;&#x9664;&#x3055;&#x308C;&#x3001;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;emitter&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.remove(emitter)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;remove&quot;,
              &quot;desc&quot;: &quot;<!--\n* `emitter` {EventEmitter | Timer} emitter or timer to be removed from the domain\n-->\n\n<ul>\n<li><code>emitter</code> {EventEmitter | Timer} &#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x524A;&#x9664;&#x3055;&#x308C;&#x308B; EventEmitter\n&#x307E;&#x305F;&#x306F;&#x30BF;&#x30A4;&#x30DE;</li>\n</ul>\n<!--\nThe opposite of `domain.add(emitter)`.  Removes domain handling from the\nspecified emitter.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; <code>domain.add(emitter)</code> &#x3068;&#x5BFE;&#x7167;&#x7684;&#x3067;&#x3059;&#x3002;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F; EventEmitter &#x3092;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x524A;&#x9664;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;emitter&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.bind(callback)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;bind&quot;,
              &quot;desc&quot;: &quot;<!--\n* `callback` {Function} The callback function\n* return: {Function} The bound function\n-->\n\n<ul>\n<li><code>callback</code> {Function} &#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;</li>\n<li>return: {Function} &#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x95A2;&#x6570;</li>\n</ul>\n<!--\nThe returned function will be a wrapper around the supplied callback\nfunction.  When the returned function is called, any errors that are\nthrown will be routed to the domain's `error` event.\n-->\n\n<p>&#x8FD4;&#x3055;&#x308C;&#x308B;&#x95A2;&#x6570;&#x306F;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;&#x306E;&#x30E9;&#x30C3;&#x30D1;&#x30FC;&#x3067;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x305F;&#x95A2;&#x6570;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x306F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E; <code>&apos;error&apos;</code>\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<h4>Example</h4>\n<pre><code>var d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &apos;utf8&apos;, d.bind(function(er, data) {\n    // if this throws, it will also be passed to the domain\n    return cb(er, data ? JSON.parse(data) : null);\n  }));\n}\n\nd.on(&apos;error&apos;, function(er) {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;callback&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.intercept(callback)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;intercept&quot;,
              &quot;desc&quot;: &quot;<!--\n* `callback` {Function} The callback function\n* return: {Function} The intercepted function\n-->\n\n<ul>\n<li><code>callback</code> {Function} &#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;</li>\n<li>return: {Function} &#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30BB;&#x30D7;&#x30C8;&#x3055;&#x308C;&#x305F;&#x95A2;&#x6570;</li>\n</ul>\n<!--\nThis method is almost identical to `domain.bind(callback)`.  However, in\naddition to catching thrown errors, it will also intercept `Error`\nobjects sent as the first argument to the function.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x307B;&#x3068;&#x3093;&#x3069; <code>domain.bind(callback)</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n&#x305F;&#x3060;&#x3057;&#x3001;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x6355;&#x307E;&#x3048;&#x308B;&#x3053;&#x3068;&#x306B;&#x52A0;&#x3048;&#x3066;&#x3001;&#x95A2;&#x6570;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x6700;&#x521D;&#x306E;&#x5F15;&#x6570;&#x304C;\n<code>Error</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x5834;&#x5408;&#x3082;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30BB;&#x30D7;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn this way, the common `if (er) return callback(er);` pattern can be replaced\nwith a single error handler in a single place.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;&#x4E00;&#x822C;&#x7684;&#x306A; <code>if (er) return callback(er);</code> &#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x3092;&#x4E00;&#x30AB;&#x6240;&#x3067;&#x5358;&#x4E00;&#x306E;\n&#x30A8;&#x30E9;&#x30FC;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x306B;&#x7F6E;&#x304D;&#x63DB;&#x3048;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<h4>Example</h4>\n<pre><code>var d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &apos;utf8&apos;, d.intercept(function(data) {\n    // note, the first argument is never passed to the\n    // callback since it is assumed to be the &apos;Error&apos; argument\n    // and thus intercepted by the domain.\n\n    // if this throws, it will also be passed to the domain\n    // so the error-handling logic can be moved to the &apos;error&apos;\n    // event on the domain instead of being repeated throughout\n    // the program.\n    return cb(null, JSON.parse(data));\n  }));\n}\n\nd.on(&apos;error&apos;, function(er) {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;callback&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.enter()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;enter&quot;,
              &quot;desc&quot;: &quot;<!--\nThe `enter` method is plumbing used by the `run`, `bind`, and `intercept`\nmethods to set the active domain. It sets `domain.active` and `process.domain`\nto the domain, and implicitly pushes the domain onto the domain stack managed\nby the domain module (see `domain.exit()` for details on the domain stack). The\ncall to `enter` delimits the beginning of a chain of asynchronous calls and I/O\noperations bound to a domain.\n-->\n\n<p><code>enter()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3001;<code>run()</code>&#x3001;<code>bind()</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>intercept()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;\n&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x7D50;&#x3073;&#x3064;&#x3051;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; (&#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3001;&#x3059;&#x306A;&#x308F;&#x3061; <code>this</code> &#x3092;) <code>domain.active</code> &#x304A;&#x3088;&#x3073;\n<code>process.domain</code> &#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x3088;&#x3063;&#x3066;&#x7BA1;&#x7406;&#x3055;&#x308C;&#x308B;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x306B;&#x6697;&#x9ED9;&#x7684;&#x306B;&#x7A4D;&#x307F;&#x4E0A;&#x3052;&#x307E;&#x3059; (&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x306B;&#x95A2;&#x3059;&#x308B;&#x8A73;&#x7D30;&#x306F;\n<code>domain.exit()</code> &#x3092;&#x53C2;&#x7167;)&#x3002;\n\n</p>\n<!--\nCalling `enter` changes only the active domain, and does not alter the domain\nitself. `Enter` and `exit` can be called an arbitrary number of times on a\nsingle domain.\n-->\n\n<p><code>enter()</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306F;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x3053;&#x3068;&#x3060;&#x3051;&#x3067;&#x3001;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x81EA;&#x8EAB;&#x306F;&#x5909;&#x5316;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>enter()</code> &#x3068; <code>exit()</code> &#x306F;&#x4E00;&#x3064;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x4F55;&#x5EA6;&#x3067;&#x3082;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the domain on which `enter` is called has been disposed, `enter` will return\nwithout setting the domain.\n-->\n\n<p>&#x3082;&#x3057; <code>enter()</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x7834;&#x68C4;&#x6E08;&#x307F;&#x3060;&#x3068;&#x3001;\n<code>enter()</code> &#x306F;&#x4F55;&#x3082;&#x8A2D;&#x5B9A;&#x305B;&#x305A;&#x306B;&#x30EA;&#x30BF;&#x30FC;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.exit()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;exit&quot;,
              &quot;desc&quot;: &quot;<!--\nThe `exit` method exits the current domain, popping it off the domain stack.\nAny time execution is going to switch to the context of a different chain of\nasynchronous calls, it's important to ensure that the current domain is exited.\nThe call to `exit` delimits either the end of or an interruption to the chain\nof asynchronous calls and I/O operations bound to a domain.\n-->\n\n<p><code>exit()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x73FE;&#x5728;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x629C;&#x3051;&#x51FA;&#x3057;&#x3001;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x304B;&#x3089;&#x53D6;&#x308A;&#x9664;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x975E;&#x540C;&#x671F;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306E;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x304C;&#x7570;&#x306A;&#x308B;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308B;&#x5834;&#x5408;&#x306F;&#x3069;&#x3093;&#x306A;&#x6642;&#x3067;&#x3082;&#x3001;\n&#x73FE;&#x5728;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x78BA;&#x5B9F;&#x306B;&#x629C;&#x3051;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306F;&#x91CD;&#x8981;&#x3067;&#x3059;&#x3002;\n<code>exit()</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306F;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x975E;&#x540C;&#x671F;&#x547C;&#x3073;&#x51FA;&#x3057;&#x304A;&#x3088;&#x3073;\nI/O &#x64CD;&#x4F5C;&#x306E;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3092;&#x3001;&#x7D42;&#x7AEF;&#x307E;&#x305F;&#x306F;&#x9014;&#x4E2D;&#x3067;&#x533A;&#x5207;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf there are multiple, nested domains bound to the current execution context,\n`exit` will exit any domains nested within this domain.\n-->\n\n<p>&#x3082;&#x3057;&#x8907;&#x6570;&#x306E;&#x30CD;&#x30B9;&#x30C8;&#x3057;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x73FE;&#x5728;&#x306E;&#x5B9F;&#x884C;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x3068;&#x3001;\n<code>exit()</code> &#x306F;&#x30CD;&#x30B9;&#x30C8;&#x3057;&#x305F;&#x3069;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x3082;&#x629C;&#x3051;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCalling `exit` changes only the active domain, and does not alter the domain\nitself. `Enter` and `exit` can be called an arbitrary number of times on a\nsingle domain.\n-->\n\n<p><code>exit()</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306F;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x3053;&#x3068;&#x3060;&#x3051;&#x3067;&#x3001;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x81EA;&#x8EAB;&#x306F;&#x5909;&#x5316;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>enter()</code> &#x3068; <code>exit()</code> &#x306F;&#x4E00;&#x3064;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x4F55;&#x5EA6;&#x3067;&#x3082;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the domain on which `exit` is called has been disposed, `exit` will return\nwithout exiting the domain.\n-->\n\n<p>&#x3082;&#x3057; <code>exit()</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x7834;&#x68C4;&#x6E08;&#x307F;&#x3060;&#x3068;&#x3001;\n<code>exit()</code> &#x306F;&#x4F55;&#x3082;&#x8A2D;&#x5B9A;&#x305B;&#x305A;&#x306B;&#x30EA;&#x30BF;&#x30FC;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;domain.dispose()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;dispose&quot;,
              &quot;desc&quot;: &quot;<!--\nThe dispose method destroys a domain, and makes a best effort attempt to\nclean up any and all IO that is associated with the domain.  Streams are\naborted, ended, closed, and/or destroyed.  Timers are cleared.\nExplicitly bound callbacks are no longer called.  Any error events that\nare raised as a result of this are ignored.\n-->\n\n<p><code>dispose()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3092;&#x7834;&#x68C4;&#x3057;&#x3001;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x95A2;&#x9023;&#x3065;&#x3051;&#x3089;&#x308C;&#x305F;&#x5168;&#x3066;&#x306E;\nI/O &#x3092;&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x30AF;&#x30EA;&#x30FC;&#x30F3;&#x30CA;&#x30C3;&#x30D7;&#x3057;&#x3088;&#x3046;&#x3068;&#x8A66;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x30A2;&#x30DC;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3001;&#x7D42;&#x4E86;&#x3055;&#x308C;&#x3001;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x3001;&#x305D;&#x3057;&#x3066;&#xFF0F;&#x307E;&#x305F;&#x306F;&#x7834;&#x68C4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30BF;&#x30A4;&#x30DE;&#x306F;&#x30AF;&#x30EA;&#x30A2;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x660E;&#x793A;&#x7684;&#x306B;&#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x3082;&#x3046;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x7D50;&#x679C;&#x3068;&#x3057;&#x3066;&#x767A;&#x751F;&#x3059;&#x308B;&#x3069;&#x3093;&#x306A;&#x30A8;&#x30E9;&#x30FC;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3082;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe intention of calling `dispose` is generally to prevent cascading\nerrors when a critical part of the Domain context is found to be in an\nerror state.\n-->\n\n<p><code>dispose()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x610F;&#x56F3;&#x306F;&#x901A;&#x5E38;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x72B6;&#x614B;&#x306E;&#x4E2D;&#x3067;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306E;\n&#x30AF;&#x30EA;&#x30C6;&#x30A3;&#x30AB;&#x30EB;&#x306A;&#x90E8;&#x5206;&#x304C;&#x898B;&#x3064;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x3001;&#x30AB;&#x30B9;&#x30B1;&#x30FC;&#x30C9;&#x3057;&#x305F;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x9632;&#x3050;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nOnce the domain is disposed the `dispose` event will emit.\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x7834;&#x68C4;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;<code>&apos;dispose&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that IO might still be performed.  However, to the highest degree\npossible, once a domain is disposed, further errors from the emitters in\nthat set will be ignored.  So, even if some remaining actions are still\nin flight, Node.js will not communicate further about them.\n-->\n\n<p>I/O &#x304C;&#x307E;&#x3060;&#x884C;&#x308F;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x9AD8;&#x3044;&#x8996;&#x70B9;&#x304B;&#x3089;&#x898B;&#x308B;&#x3068;&#x3001;&#x4E00;&#x5EA6;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x7834;&#x68C4;&#x3055;&#x308C;&#x308C;&#x3070;&#x3001;\n&#x305D;&#x306E;&#x96C6;&#x5408;&#x306E;&#x4E2D;&#x306E; EventEmitter &#x304B;&#x3089;&#x306E;&#x3055;&#x3089;&#x306A;&#x308B;&#x30A8;&#x30E9;&#x30FC;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;&#x305F;&#x3068;&#x3048;&#x6B8B;&#x308A;&#x306E;&#x30A2;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x307E;&#x3060;&#x5B9F;&#x884C;&#x4E2D;&#x3060;&#x3068;&#x3057;&#x3066;&#x3082;&#x3001;\nNode.js &#x306F;&#x305D;&#x308C;&#x3089;&#x3068;&#x30B3;&#x30DF;&#x30E5;&#x30CB;&#x30B1;&#x30FC;&#x30C8;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;`members` {Array} &quot;,
              &quot;name&quot;: &quot;members&quot;,
              &quot;desc&quot;: &quot;<!--\nAn array of timers and event emitters that have been explicitly added\nto the domain.\n-->\n\n<p>&#x3053;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306B;&#x660E;&#x793A;&#x7684;&#x306B;&#x52A0;&#x3048;&#x3089;&#x308C;&#x305F;&#x30BF;&#x30A4;&#x30DE;&#x307E;&#x305F;&#x306F; EventEmitter &#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Domain&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Buffer&quot;,
      &quot;name&quot;: &quot;buffer&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nPure JavaScript is Unicode friendly but not nice to binary data.  When\ndealing with TCP streams or the file system, it's necessary to handle octet\nstreams. Node has several strategies for manipulating, creating, and\nconsuming octet streams.\n-->\n\n<p>&#x7D14;&#x7C8B;&#x306A; JavaScript &#x306F; Unicode &#x3068;&#x76F8;&#x6027;&#x304C;&#x3044;&#x3044;&#x3082;&#x306E;&#x306E;&#x3001;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x6271;&#x3044;&#x306F;&#x3046;&#x307E;&#x304F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\nTCP &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3084;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3092;&#x6271;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x51E6;&#x7406;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\nNode &#x306B;&#x306F;&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x64CD;&#x4F5C;&#x3001;&#x4F5C;&#x6210;&#x3001;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x6226;&#x7565;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nRaw data is stored in instances of the `Buffer` class. A `Buffer` is similar\nto an array of integers but corresponds to a raw memory allocation outside\nthe V8 heap. A `Buffer` cannot be resized.\n-->\n\n<p>&#x751F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x306F; <code>Buffer</code> &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306B;&#x4FDD;&#x5B58;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>Buffer</code> &#x306F;&#x6574;&#x6570;&#x306E;&#x914D;&#x5217;&#x3068;&#x4F3C;&#x3066;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;\nV8 &#x30D2;&#x30FC;&#x30D7;&#x306E;&#x5916;&#x90E8;&#x306B;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x305F;&#x751F;&#x306E;&#x30E1;&#x30E2;&#x30EA;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>Buffer</code> &#x306E;&#x30B5;&#x30A4;&#x30BA;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThe `Buffer` class is a global, making it very rare that one would need\nto ever `require('buffer')`.\n-->\n\n<p><code>Buffer</code> &#x30AF;&#x30E9;&#x30B9;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x306A;&#x306E;&#x3067;&#x3001;<code>require(&apos;buffer&apos;)</code> &#x304C;&#x5FC5;&#x8981;&#x306B;&#x306A;&#x308B;&#x3053;&#x3068;&#x306F;\n&#x307B;&#x3068;&#x3093;&#x3069;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nConverting between Buffers and JavaScript string objects requires an explicit\nencoding method.  Here are the different string encodings.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092; JavaScript &#x6587;&#x5B57;&#x5217;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x306E;&#x9593;&#x3067;&#x5909;&#x63DB;&#x3059;&#x308B;&#x306B;&#x306F;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x3092;&#x660E;&#x793A;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* `'ascii'` - for 7 bit ASCII data only.  This encoding method is very fast, and\n  will strip the high bit if set.\n\n  Note that when converting from string to buffer, this encoding converts a null\n  character (`'\\0'` or `'\\u0000'`) into `0x20` (character code of a space). If\n  you want to convert a null character into `0x00`, you should use `'utf8'`.\n\n* `'utf8'` - Multibyte encoded Unicode characters. Many web pages and other\n  document formats use UTF-8.\n\n* `'utf16le'` - 2 or 4 bytes, little endian encoded Unicode characters.\n  Surrogate pairs (U+10000 to U+10FFFF) are supported.\n\n* `'ucs2'` - Alias of `'utf16le'`.\n\n* `'base64'` - Base64 string encoding.\n\n* `'binary'` - A way of encoding raw binary data into strings by using only\n  the first 8 bits of each character. This encoding method is deprecated and\n  should be avoided in favor of `Buffer` objects where possible. This encoding\n  will be removed in future versions of Node.\n\n* `'hex'` - Encode each byte as two hexadecimal characters.\n-->\n\n<ul>\n<li><p><code>&apos;ascii&apos;</code> - 7bit &#x306E; ASCII &#x30C7;&#x30FC;&#x30BF;&#x5C02;&#x7528;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x306F;&#x3068;&#x3066;&#x3082;&#x9AD8;&#x901F;&#x3067;&#x3001;\n&#x3082;&#x3057;&#x4E0A;&#x4F4D;&#x30D3;&#x30C3;&#x30C8;&#x304C;&#x30BB;&#x30C3;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6587;&#x5B57;&#x5217;&#x304B;&#x3089;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3078;&#x306E;&#x5909;&#x63DB;&#x6642;&#x3001;&#x3053;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; null &#x6587;&#x5B57;\n(<code>&apos;\\0&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;\\u0000&apos;</code>) &#x3092; <code>0x20</code> (&#x30B9;&#x30DA;&#x30FC;&#x30B9;&#x306E;&#x6587;&#x5B57;&#x30B3;&#x30FC;&#x30C9;)\n&#x306B;&#x5909;&#x63DB;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\nnull &#x6587;&#x5B57;&#x3092; 0x00 &#x306B;&#x5909;&#x63DB;&#x3057;&#x305F;&#x3044;&#x5834;&#x5408;&#x306F; <code>&apos;utf8&apos;</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</p>\n</li>\n<li><p><code>&apos;utf8&apos;</code> - &#x53EF;&#x5909;&#x9577;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x5358;&#x4F4D;&#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;Unicode&#x6587;&#x5B57;&#x3002;\n&#x591A;&#x304F;&#x306E;Web&#x30DA;&#x30FC;&#x30B8;&#x3084;&#x305D;&#x306E;&#x4ED6;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x306F; UTF-8 &#x3092;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>&apos;utf16le&apos;</code> - 2 &#x307E;&#x305F;&#x306F; 4 &#x30D0;&#x30A4;&#x30C8;&#x306E;&#x30EA;&#x30C8;&#x30EB;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;\nUnicode &#x6587;&#x5B57;&#x3002;\n&#x30B5;&#x30ED;&#x30B2;&#x30FC;&#x30C8;&#x30DA;&#x30A2; (U+10000&#xFF5E;U+10FFFF) &#x3082;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>&apos;ucs2&apos;</code> - <code>&apos;utf16le&apos;</code> &#x306E;&#x5225;&#x540D;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>&apos;base64&apos;</code> - Base64 &#x6587;&#x5B57;&#x5217;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;.</p>\n</li>\n<li><p><code>&apos;binary&apos;</code> - &#x751F;&#x306E;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5404;&#x6587;&#x5B57;&#x306E;&#x6700;&#x521D;&#x306E; 8bit &#x3068;&#x3057;&#x3066;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x3002;\n&#x3053;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x306F;&#x3082;&#x306F;&#x3084;&#x4FA1;&#x5024;&#x304C;&#x306A;&#x304F;&#x3001;<code>Buffer</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x306F;&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F;&#x3001;Node &#x306E;&#x5C06;&#x6765;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x524A;&#x9664;&#x3055;&#x308C;&#x308B;&#x4E88;&#x5B9A;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>&apos;hex&apos;</code> - &#x5404;&#x30D0;&#x30A4;&#x30C8;&#x3092; 2 &#x6841;&#x306E;16&#x9032;&#x6570;&#x6587;&#x5B57;&#x5217;&#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nA `Buffer` object can also be used with typed arrays.  The buffer object is\ncloned to an `ArrayBuffer` that is used as the backing store for the typed\narray.  The memory of the buffer and the `ArrayBuffer` is not shared.\n-->\n\n<p><code>Buffer</code> &#x306F; Typed Array &#x3068;&#x3057;&#x3066;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x3001;Typed Array &#x306E;&#x30D0;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x30B9;&#x30C8;&#x30A2;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x308F;&#x308C;&#x308B;\n<code>ArrayBuffer</code> &#x304B;&#x3089;&#x8907;&#x88FD;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3068; <code>Typed Array</code> &#x306F;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x5171;&#x6709;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nNOTE: Node.js v0.8 simply retained a reference to the buffer in `array.buffer`\ninstead of cloning it.\n-->\n\n<p>Node.js &#x306E; v0.8 &#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x8907;&#x88FD;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5358;&#x7D14;&#x306B; <code>array.buffer</code>\n&#x306B;&#x53C2;&#x7167;&#x3092;&#x7DAD;&#x6301;&#x3057;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n\n</p>\n<!--\nWhile more efficient, it introduces subtle incompatibilities with the typed\narrays specification.  `ArrayBuffer#slice()` makes a copy of the slice while\n`Buffer#slice()` creates a view.\n-->\n\n<p>&#x305D;&#x308C;&#x306F;&#x52B9;&#x7387;&#x7684;&#x3067;&#x306F;&#x3042;&#x3063;&#x305F;&#x3082;&#x306E;&#x306E;&#x3001;Typed Array &#x3068;&#x306E;&#x5FAE;&#x5999;&#x306A;&#x975E;&#x4E92;&#x63DB;&#x6027;&#x3092;&#x3082;&#x305F;&#x3089;&#x3057;&#x307E;&#x3057;&#x305F;&#x3002;\n<code>ArrayBuffer#slice()</code> &#x306F;&#x30B9;&#x30E9;&#x30A4;&#x30B9;&#x306E;&#x30B3;&#x30D4;&#x30FC;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x4E00;&#x65B9;&#x3001;\n<code>Buffer#slice()</code> &#x306F;&#x30D3;&#x30E5;&#x30FC;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: Buffer&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Buffer&quot;,
          &quot;desc&quot;: &quot;<!--\nThe Buffer class is a global type for dealing with binary data directly.\nIt can be constructed in a variety of ways.\n-->\n\n<p>Buffer &#x30AF;&#x30E9;&#x30B9;&#x306F;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x76F4;&#x63A5;&#x6271;&#x3046;&#x305F;&#x3081;&#x306E;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x306A;&#x578B;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x69D8;&#x3005;&#x306A;&#x65B9;&#x6CD5;&#x3067;&#x69CB;&#x7BC9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;classMethods&quot;: [
            {
              &quot;textRaw&quot;: &quot;Class Method: Buffer.isEncoding(encoding)&quot;,
              &quot;type&quot;: &quot;classMethod&quot;,
              &quot;name&quot;: &quot;isEncoding&quot;,
              &quot;desc&quot;: &quot;<!--\n* `encoding` {String} The encoding string to test\n-->\n\n<ul>\n<li><code>encoding</code> {String} &#x691C;&#x8A3C;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x540D;</li>\n</ul>\n<!--\nReturns true if the `encoding` is a valid encoding argument, or false\notherwise.\n-->\n\n<p><code>encoding</code> &#x304C;&#x6B63;&#x3057;&#x3051;&#x308C;&#x3070; <code>true</code>&#x3001;&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306F; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class Method: Buffer.isBuffer(obj)&quot;,
              &quot;type&quot;: &quot;classMethod&quot;,
              &quot;name&quot;: &quot;isBuffer&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Boolean &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Boolean&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`obj` Object &quot;,
                      &quot;name&quot;: &quot;obj&quot;,
                      &quot;desc&quot;: &quot;Object&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;obj&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nTests if `obj` is a `Buffer`.\n-->\n\n<p><code>obj</code> &#x304C; <code>Buffer</code> &#x304B;&#x3069;&#x3046;&#x304B;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Class Method: Buffer.byteLength(string, [encoding])&quot;,
              &quot;type&quot;: &quot;classMethod&quot;,
              &quot;name&quot;: &quot;byteLength&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`string` String &quot;,
                      &quot;name&quot;: &quot;string&quot;,
                      &quot;desc&quot;: &quot;String&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`encoding` String, Optional, Default: &apos;utf8&apos; &quot;,
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;desc&quot;: &quot;String, Optional, Default: &apos;utf8&apos;&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;string&quot;
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nGives the actual byte length of a string. `encoding` defaults to `'utf8'`.\nThis is not the same as `String.prototype.length` since that returns the\nnumber of *characters* in a string.\n-->\n\n<p>&#x6587;&#x5B57;&#x5217;&#x306E;&#x5B9F;&#x969B;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;<code>encoding</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;utf8&apos;</code> &#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6587;&#x5B57;&#x5217;&#x306E;<em>&#x6587;&#x5B57;</em>&#x6570;&#x3092;&#x8FD4;&#x3059; <code>String.prototype.length</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>str = &apos;\\u00bd + \\u00bc = \\u00be&apos;;\n\nconsole.log(str + &quot;: &quot; + str.length + &quot; characters, &quot; +\n  Buffer.byteLength(str, &apos;utf8&apos;) + &quot; bytes&quot;);\n\n// &#xBD; + &#xBC; = &#xBE;: 9 characters, 12 bytes</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Class Method: Buffer.concat(list, [totalLength])&quot;,
              &quot;type&quot;: &quot;classMethod&quot;,
              &quot;name&quot;: &quot;concat&quot;,
              &quot;desc&quot;: &quot;<!--\n* `list` {Array} List of Buffer objects to concat\n* `totalLength` {Number} Total length of the buffers when concatenated\n-->\n\n<ul>\n<li><code>list</code> {Array} &#x7D50;&#x5408;&#x3059;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x30EA;&#x30B9;&#x30C8;</li>\n<li><code>totalLength</code> {Number} &#x7D50;&#x5408;&#x3055;&#x308C;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x5168;&#x4F53;&#x306E;&#x9577;&#x3055;</li>\n</ul>\n<!--\nReturns a buffer which is the result of concatenating all the buffers in\nthe list together.\n-->\n\n<p>&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x542B;&#x307E;&#x308C;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x5168;&#x4F53;&#x3092;&#x7D50;&#x5408;&#x3057;&#x305F;&#x7D50;&#x679C;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the list has no items, or if the totalLength is 0, then it returns a\nzero-length buffer.\n-->\n\n<p>&#x30EA;&#x30B9;&#x30C8;&#x304C;&#x7A7A;&#x306E;&#x5834;&#x5408;&#x3001;&#x307E;&#x305F;&#x306F; <code>totalLength</code> &#x304C; 0 &#x306E;&#x5834;&#x5408;&#x306F;&#x9577;&#x3055;&#x304C;\n0 &#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the list has exactly one item, then the first item of the list is\nreturned.\n-->\n\n<p>&#x30EA;&#x30B9;&#x30C8;&#x304C;&#x4E00;&#x3064;&#x3060;&#x3051;&#x306E;&#x8981;&#x7D20;&#x3092;&#x6301;&#x3064;&#x5834;&#x5408;&#x3001;&#x30EA;&#x30B9;&#x30C8;&#x306E;&#x5148;&#x982D;&#x8981;&#x7D20;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the list has more than one item, then a new Buffer is created.\n-->\n\n<p>&#x30EA;&#x30B9;&#x30C8;&#x304C;&#x8907;&#x6570;&#x306E;&#x8981;&#x7D20;&#x3092;&#x6301;&#x3064;&#x5834;&#x5408;&#x3001;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf totalLength is not provided, it is read from the buffers in the list.\nHowever, this adds an additional loop to the function, so it is faster\nto provide the length explicitly.\n-->\n\n<p><code>totalLength</code> &#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x30EA;&#x30B9;&#x30C8;&#x4E2D;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304B;&#x3089;&#x6C42;&#x3081;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x3001;&#x3053;&#x308C;&#x306F;&#x4F59;&#x8A08;&#x306A;&#x30EB;&#x30FC;&#x30D7;&#x304C;&#x5FC5;&#x8981;&#x306B;&#x306A;&#x308B;&#x305F;&#x3081;&#x3001;&#x660E;&#x793A;&#x7684;&#x306B;&#x9577;&#x3055;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x65B9;&#x304C;\n&#x9AD8;&#x901F;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;list&quot;
                    },
                    {
                      &quot;name&quot;: &quot;totalLength&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;buf.write(string, [offset], [length], [encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;write&quot;,
              &quot;desc&quot;: &quot;<!--\n* `string` String - data to be written to buffer\n* `offset` Number, Optional, Default: 0\n* `length` Number, Optional, Default: `buffer.length - offset`\n* `encoding` String, Optional, Default: 'utf8'\n-->\n\n<ul>\n<li><code>string</code> String - &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;</li>\n<li><code>offset</code> Number, Optional, Default: 0</li>\n<li><code>length</code> Number, Optional</li>\n<li><code>encoding</code> String, Optional, Default: &apos;utf8&apos;</li>\n</ul>\n<!--\nWrites `string` to the buffer at `offset` using the given encoding.\n`offset` defaults to `0`, `encoding` defaults to `'utf8'`. `length` is\nthe number of bytes to write. Returns number of octets written. If `buffer` did\nnot contain enough space to fit the entire string, it will write a partial\namount of the string. `length` defaults to `buffer.length - offset`.\nThe method will not write partial characters.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3001;<code>string</code> &#x3092;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E; <code>offset</code> &#x304B;&#x3089;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>offset</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0</code>&#x3001;<code>encoding</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;utf8&apos;</code> &#x3067;&#x3059;&#x3002;\n<code>length</code> &#x306F;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3067;&#x3059;&#x3002;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x6570;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>buffer</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x5168;&#x4F53;&#x3092;&#x633F;&#x5165;&#x3059;&#x308B;&#x306E;&#x306B;&#x5341;&#x5206;&#x306A;&#x30B9;&#x30DA;&#x30FC;&#x30B9;&#x3092;&#x542B;&#x3093;&#x3067;&#x3044;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x6587;&#x5B57;&#x5217;&#x306E;&#x4E00;&#x90E8;&#x3060;&#x3051;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>length</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>buffer.length - offset</code> &#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x6587;&#x5B57;&#x306E;&#x4E00;&#x90E8;&#x3060;&#x3051;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nExample: write a utf8 string into a buffer, then print it\n-->\n\n<p>&#x4F8B;: utf8 &#x306E;&#x6587;&#x5B57;&#x5217;&#x3092;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3001;&#x305D;&#x308C;&#x3092;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;\n\n</p>\n<pre><code>buf = new Buffer(256);\nlen = buf.write(&apos;\\u00bd + \\u00bc = \\u00be&apos;, 0);\nconsole.log(len + &quot; bytes: &quot; + buf.toString(&apos;utf8&apos;, 0, len));</code></pre>\n<!--\nThe number of characters written (which may be different than the number of\nbytes written) is set in `Buffer._charsWritten` and will be overwritten the\nnext time `buf.write()` is called.\n-->\n\n<p>&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x6587;&#x5B57;&#x6570; (&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3068;&#x306F;&#x7570;&#x306A;&#x308B;&#x5834;&#x5408;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;) &#x306F;&#x3001;\n&#x6B21;&#x306B; <code>buf.write()</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x4E0A;&#x66F8;&#x304D;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;\n<code>Buffer._charsWritten</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;string&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;length&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;buf.toString([encoding], [start], [end])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;toString&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`encoding` String, Optional, Default: &apos;utf8&apos; &quot;,
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;desc&quot;: &quot;String, Optional, Default: &apos;utf8&apos;&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;textRaw&quot;: &quot;`start` Number, Optional, Default: 0 &quot;,
                      &quot;name&quot;: &quot;start&quot;,
                      &quot;desc&quot;: &quot;Number, Optional, Default: 0&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;textRaw&quot;: &quot;`end` Number, Optional, Default: `buffer.length` &quot;,
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;desc&quot;: &quot;Number, Optional, Default: `buffer.length`&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;start&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nDecodes and returns a string from buffer data encoded with `encoding`\n(defaults to `'utf8'`) beginning at `start` (defaults to `0`) and ending at\n`end` (defaults to `buffer.length`).\n-->\n\n<p><code>encoding</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;utf8&apos;</code>) &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30C7;&#x30FC;&#x30BF;&#x306E;\n<code>start</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0</code>) &#x304B;&#x3089; <code>end</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>buffer.length</code>)\n&#x307E;&#x3067;&#x3092;&#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3057;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nSee `buffer.write()` example, above.\n-->\n\n<p>&#x4E0A;&#x306E; <code>buffer.write()</code> &#x306E;&#x4F8B;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.toJSON()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;toJSON&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns a JSON-representation of the Buffer instance, which is identical to the\noutput for JSON Arrays. `JSON.stringify` implicitly calls this function when\nstringifying a Buffer instance.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306E; JSON &#x8868;&#x73FE;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x914D;&#x5217;&#x306E; JSON &#x51FA;&#x529B;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n<code>JSON.stringify()</code> &#x306F; Buffer &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x6587;&#x5B57;&#x5217;&#x5316;&#x3059;&#x308B;&#x969B;&#x306B;&#x3001;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x6697;&#x9ED9;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(&apos;test&apos;);\nvar json = JSON.stringify(buf);\n\nconsole.log(json);\n// &apos;[116,101,115,116]&apos;\n\nvar copy = new Buffer(JSON.parse(json));\n\nconsole.log(copy);\n// &lt;Buffer 74 65 73 74&gt;</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;copy&quot;,
              &quot;desc&quot;: &quot;<!--\n* `targetBuffer` Buffer object - Buffer to copy into\n* `targetStart` Number, Optional, Default: 0\n* `sourceStart` Number, Optional, Default: 0\n* `sourceEnd` Number, Optional, Default: `buffer.length`\n-->\n\n<ul>\n<li><code>targetBuffer</code> Buffer object - &#x30B3;&#x30D4;&#x30FC;&#x5148;&#x306E; Buffer</li>\n<li><code>targetStart</code> Number, Optional, Default: 0</li>\n<li><code>sourceStart</code> Number, Optional, Default: 0</li>\n<li><code>sourceEnd</code> Number, Optional, Default: <code>buffer.length</code></li>\n</ul>\n<!--\nDoes copy between buffers. The source and target regions can be overlapped.\n`targetStart` and `sourceStart` default to `0`.\n`sourceEnd` defaults to `buffer.length`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x9593;&#x3067;&#x30B3;&#x30D4;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30BD;&#x30FC;&#x30B9;&#x3068;&#x30BF;&#x30FC;&#x30B2;&#x30C3;&#x30C8;&#x306E;&#x9818;&#x57DF;&#x306F;&#x91CD;&#x306A;&#x3063;&#x3066;&#x3044;&#x3066;&#x3082;&#x69CB;&#x3044;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>targetStart</code> &#x3068; <code>sourceStart</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0</code> &#x3067;&#x3059;&#x3002;\n<code>sourceEnd</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>buffer.length</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nAll values passed that are `undefined`/`NaN` or are out of bounds are set equal\nto their respective defaults.\n-->\n\n<p><code>undefined</code>/<code>NaN</code> &#x307E;&#x305F;&#x306F;&#x305D;&#x306E;&#x4ED6;&#x306E;&#x4E0D;&#x6B63;&#x306A;&#x5024;&#x304C;&#x6E21;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: build two Buffers, then copy `buf1` from byte 16 through byte 19\ninto `buf2`, starting at the 8th byte in `buf2`.\n-->\n\n<p>&#x4F8B;: &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;2&#x500B;&#x4F5C;&#x6210;&#x3057;&#x3001;<code>buf1</code> &#x306E; 16 &#x30D0;&#x30A4;&#x30C8;&#x76EE;&#x304B;&#x3089; 19 &#x30D0;&#x30A4;&#x30C8;&#x76EE;&#x3092;&#x3001;\n<code>buf2</code> &#x306E; 8 &#x30D0;&#x30A4;&#x30C8;&#x76EE;&#x304B;&#x3089;&#x59CB;&#x307E;&#x308B;&#x4F4D;&#x7F6E;&#x3078;&#x30B3;&#x30D4;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>buf1 = new Buffer(26);\nbuf2 = new Buffer(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  buf1[i] = i + 97; // 97 is ASCII a\n  buf2[i] = 33; // ASCII !\n}\n\nbuf1.copy(buf2, 8, 16, 20);\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, 25));\n\n// !!!!!!!!qrst!!!!!!!!!!!!!</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;targetBuffer&quot;
                    },
                    {
                      &quot;name&quot;: &quot;targetStart&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;sourceStart&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;sourceEnd&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;buf.slice([start], [end])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;slice&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`start` Number, Optional, Default: 0 &quot;,
                      &quot;name&quot;: &quot;start&quot;,
                      &quot;desc&quot;: &quot;Number, Optional, Default: 0&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;textRaw&quot;: &quot;`end` Number, Optional, Default: `buffer.length` &quot;,
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;desc&quot;: &quot;Number, Optional, Default: `buffer.length`&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;start&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReturns a new buffer which references the same memory as the old, but offset\nand cropped by the `start` (defaults to `0`) and `end` (defaults to\n`buffer.length`) indexes.  Negative indexes start from the end of the buffer.\n-->\n\n<p>&#x5143;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3068;&#x540C;&#x3058;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;<code>start</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0</code>) &#x3068;\n<code>end</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>buffer.length</code>) &#x3067;&#x793A;&#x3055;&#x308C;&#x308B;&#x30AA;&#x30D5;&#x30BB;&#x30C3;&#x30C8;&#x3068;&#x9577;&#x3055;&#x3092;&#x6301;&#x3064;\n&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8CA0;&#x306E;&#x30A4;&#x30F3;&#x30C7;&#x30C3;&#x30AF;&#x30B9;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x672B;&#x5C3E;&#x304B;&#x3089;&#x958B;&#x59CB;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n**Modifying the new buffer slice will modify memory in the original buffer!**\n-->\n\n<p><strong>&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30B9;&#x30E9;&#x30A4;&#x30B9;&#x306E;&#x5909;&#x66F4;&#x306F;&#x3001;&#x30AA;&#x30EA;&#x30B8;&#x30CA;&#x30EB;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#xFF01;</strong>\n\n</p>\n<!--\nExample: build a Buffer with the ASCII alphabet, take a slice, then modify one\nbyte from the original Buffer.\n-->\n\n<p>&#x4F8B;: ASCII &#x306E;&#x30A2;&#x30EB;&#x30D5;&#x30A1;&#x30D9;&#x30C3;&#x30C8;&#x3067;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x69CB;&#x7BC9;&#x3057;&#x3066;&#x30B9;&#x30E9;&#x30A4;&#x30B9;&#x3057;&#x3001;&#x5143;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067; 1 &#x30D0;&#x30A4;&#x30C8;&#x3092;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var buf1 = new Buffer(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  buf1[i] = i + 97; // 97 is ASCII a\n}\n\nvar buf2 = buf1.slice(0, 3);\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, buf2.length));\nbuf1[0] = 33;\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, buf2.length));\n\n// abc\n// !bc</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readUInt8(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readUInt8&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads an unsigned 8 bit integer from the buffer at the specified offset.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 8bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nfor (ii = 0; ii &lt; buf.length; ii++) {\n  console.log(buf.readUInt8(ii));\n}\n\n// 0x3\n// 0x4\n// 0x23\n// 0x42</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readUInt16LE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readUInt16LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads an unsigned 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt16BE(0));\nconsole.log(buf.readUInt16LE(0));\nconsole.log(buf.readUInt16BE(1));\nconsole.log(buf.readUInt16LE(1));\nconsole.log(buf.readUInt16BE(2));\nconsole.log(buf.readUInt16LE(2));\n\n// 0x0304\n// 0x0403\n// 0x0423\n// 0x2304\n// 0x2342\n// 0x4223</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readUInt16BE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readUInt16BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads an unsigned 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt16BE(0));\nconsole.log(buf.readUInt16LE(0));\nconsole.log(buf.readUInt16BE(1));\nconsole.log(buf.readUInt16LE(1));\nconsole.log(buf.readUInt16BE(2));\nconsole.log(buf.readUInt16LE(2));\n\n// 0x0304\n// 0x0403\n// 0x0423\n// 0x2304\n// 0x2342\n// 0x4223</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readUInt32LE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readUInt32LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads an unsigned 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt32BE(0));\nconsole.log(buf.readUInt32LE(0));\n\n// 0x03042342\n// 0x42230403</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readUInt32BE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readUInt32BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads an unsigned 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt32BE(0));\nconsole.log(buf.readUInt32LE(0));\n\n// 0x03042342\n// 0x42230403</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readInt8(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readInt8&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a signed 8 bit integer from the buffer at the specified offset.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt8`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 8bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5185;&#x5BB9;&#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F;\n<code>buffer.readUInt8</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readInt16LE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readInt16LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a signed 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt16*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5185;&#x5BB9;&#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F;\n<code>buffer.readUInt16</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readInt16BE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readInt16BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a signed 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt16*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5185;&#x5BB9;&#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F;\n<code>buffer.readUInt16</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readInt32LE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readInt32LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a signed 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt32*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5185;&#x5BB9;&#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F;\n<code>buffer.readUInt32</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readInt32BE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readInt32BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a signed 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt32*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5185;&#x5BB9;&#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F;\n<code>buffer.readUInt32</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readFloatLE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readFloatLE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a 32 bit float from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x00;\nbuf[1] = 0x00;\nbuf[2] = 0x80;\nbuf[3] = 0x3f;\n\nconsole.log(buf.readFloatLE(0));\n\n// 0x01</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readFloatBE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readFloatBE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a 32 bit float from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x00;\nbuf[1] = 0x00;\nbuf[2] = 0x80;\nbuf[3] = 0x3f;\n\nconsole.log(buf.readFloatLE(0));\n\n// 0x01</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readDoubleLE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readDoubleLE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a 64 bit double from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(8);\n\nbuf[0] = 0x55;\nbuf[1] = 0x55;\nbuf[2] = 0x55;\nbuf[3] = 0x55;\nbuf[4] = 0x55;\nbuf[5] = 0x55;\nbuf[6] = 0xd5;\nbuf[7] = 0x3f;\n\nconsole.log(buf.readDoubleLE(0));\n\n// 0.3333333333333333</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readDoubleBE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readDoubleBE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a 64 bit double from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(8);\n\nbuf[0] = 0x55;\nbuf[1] = 0x55;\nbuf[2] = 0x55;\nbuf[3] = 0x55;\nbuf[4] = 0x55;\nbuf[5] = 0x55;\nbuf[6] = 0xd5;\nbuf[7] = 0x3f;\n\nconsole.log(buf.readDoubleLE(0));\n\n// 0.3333333333333333</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeUInt8(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeUInt8&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset. Note, `value` must be a\nvalid unsigned 8 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 8bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 8bit &#x7B26;&#x53F7;&#x7121;&#x3057;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\nconsole.log(buf);\n\n// &lt;Buffer 03 04 23 42&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeUInt16LE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeUInt16LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 16bit &#x7B26;&#x53F7;&#x7121;&#x3057;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\nconsole.log(buf);\n\n// &lt;Buffer de ad be ef&gt;\n// &lt;Buffer ad de ef be&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeUInt16BE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeUInt16BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 16bit &#x7B26;&#x53F7;&#x7121;&#x3057;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\nconsole.log(buf);\n\n// &lt;Buffer de ad be ef&gt;\n// &lt;Buffer ad de ef be&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeUInt32LE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeUInt32LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 32bit &#x7B26;&#x53F7;&#x7121;&#x3057;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt32BE(0xfeedface, 0);\n\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer fe ed fa ce&gt;\n// &lt;Buffer ce fa ed fe&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeUInt32BE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeUInt32BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 32bit &#x7B26;&#x53F7;&#x7121;&#x3057;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt32BE(0xfeedface, 0);\n\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer fe ed fa ce&gt;\n// &lt;Buffer ce fa ed fe&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeInt8(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeInt8&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset. Note, `value` must be a\nvalid signed 8 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt8`, except value is written out as a two's complement\nsigned integer into `buffer`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 8bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 8bit &#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>value</code> &#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F; \n<code>buffer.writeUInt8</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeInt16LE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeInt16LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt16*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 16bit &#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>value</code> &#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F; \n<code>buffer.writeUInt16</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeInt16BE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeInt16BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt16*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 16bit &#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>value</code> &#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F; \n<code>buffer.writeUInt16</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeInt32LE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeInt32LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt32*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 32bit &#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>value</code> &#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F; \n<code>buffer.writeUInt32</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeInt32BE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeInt32BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt32*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 32bit &#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>value</code> &#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F; \n<code>buffer.writeUInt32</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeFloatLE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeFloatLE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, behavior is unspecified if `value` is not a 32 bit float.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x304C; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3067;&#x306A;&#x3044;&#x5834;&#x5408;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;&#x672A;&#x5B9A;&#x7FA9;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeFloatBE(0xcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 4f 4a fe bb&gt;\n// &lt;Buffer bb fe 4a 4f&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeFloatBE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeFloatBE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, behavior is unspecified if `value` is not a 32 bit float.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x304C; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3067;&#x306A;&#x3044;&#x5834;&#x5408;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;&#x672A;&#x5B9A;&#x7FA9;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeFloatBE(0xcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 4f 4a fe bb&gt;\n// &lt;Buffer bb fe 4a 4f&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeDoubleLE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeDoubleLE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid 64 bit double.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(8);\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\n// &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeDoubleBE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeDoubleBE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid 64 bit double.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(8);\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\n// &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.fill(value, [offset], [end])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;fill&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` &quot;,
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number, Optional &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;optional&quot;: true,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`end` Number, Optional &quot;,
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;optional&quot;: true,
                      &quot;desc&quot;: &quot;Number&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nFills the buffer with the specified value. If the `offset` (defaults to `0`)\nand `end` (defaults to `buffer.length`) are not given it will fill the entire\nbuffer.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5024;&#x3067;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x57CB;&#x3081;&#x307E;&#x3059;&#x3002;\n<code>offset</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0</code>) &#x3068; <code>end</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>buffer.length</code>)\nF&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x5168;&#x4F53;&#x3092;&#x57CB;&#x3081;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var b = new Buffer(50);\nb.fill(&quot;h&quot;);</code></pre>\n&quot;
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;buf[index]&quot;,
              &quot;name&quot;: &quot;[index]&quot;,
              &quot;desc&quot;: &quot;<!--\nGet and set the octet at `index`. The values refer to individual bytes,\nso the legal range is between `0x00` and `0xFF` hex or `0` and `255`.\n-->\n\n<p><code>index</code> &#x306E;&#x4F4D;&#x7F6E;&#x306E;&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x3092;&#x53D6;&#x5F97;&#x304A;&#x3088;&#x3073;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x5024;&#x306F;&#x500B;&#x3005;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x3092;&#x53C2;&#x7167;&#x3059;&#x308B;&#x306E;&#x3067;&#x3001;&#x59A5;&#x5F53;&#x306A;&#x7BC4;&#x56F2;&#x306F; 16 &#x9032;&#x306E; <code>0x00</code> &#x304B;&#x3089; <code>0xFF</code>\n&#x307E;&#x305F;&#x306F; <code>0</code> &#x304B;&#x3089;<code>255</code>&#x307E;&#x3067;&#x306E;&#x9593;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: copy an ASCII string into a buffer, one byte at a time:\n-->\n\n<p>&#x4F8B;: ASCII &#x6587;&#x5B57;&#x5217;&#x3092; 1 &#x30D0;&#x30A4;&#x30C8;&#x305A;&#x3064;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x30B3;&#x30D4;&#x30FC;&#x3057;&#x307E;&#x3059;\n\n</p>\n<pre><code>str = &quot;node.js&quot;;\nbuf = new Buffer(str.length);\n\nfor (var i = 0; i &lt; str.length ; i++) {\n  buf[i] = str.charCodeAt(i);\n}\n\nconsole.log(buf);\n\n// node.js</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`length` Number &quot;,
              &quot;name&quot;: &quot;length&quot;,
              &quot;desc&quot;: &quot;<!--\nThe size of the buffer in bytes.  Note that this is not necessarily the size\nof the contents. `length` refers to the amount of memory allocated for the\nbuffer object.  It does not change when the contents of the buffer are changed.\n-->\n\n<p>&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x306B;&#x3088;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x5B9F;&#x969B;&#x306E;&#x5185;&#x5BB9;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x3067;&#x306F;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n<code>length</code> &#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x305F;&#x30E1;&#x30E2;&#x30EA;&#x5168;&#x4F53;&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>buf = new Buffer(1234);\n\nconsole.log(buf.length);\nbuf.write(&quot;some string&quot;, 0, &quot;ascii&quot;);\nconsole.log(buf.length);\n\n// 1234\n// 1234</code></pre>\n&quot;,
              &quot;shortDesc&quot;: &quot;Number&quot;
            }
          ],
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;textRaw&quot;: &quot;`size` Number &quot;,
                  &quot;name&quot;: &quot;size&quot;,
                  &quot;desc&quot;: &quot;Number&quot;
                }
              ],
              &quot;desc&quot;: &quot;<!--\nAllocates a new buffer of `size` octets.\n-->\n\n<p><code>size</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x306E;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;size&quot;
                }
              ],
              &quot;desc&quot;: &quot;<!--\nAllocates a new buffer of `size` octets.\n-->\n\n<p><code>size</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x306E;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;params&quot;: [
                {
                  &quot;textRaw&quot;: &quot;`array` Array &quot;,
                  &quot;name&quot;: &quot;array&quot;,
                  &quot;desc&quot;: &quot;Array&quot;
                }
              ],
              &quot;desc&quot;: &quot;<!--\nAllocates a new buffer using an `array` of octets.\n-->\n\n<p>&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x306E; <code>array</code> &#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;array&quot;
                }
              ],
              &quot;desc&quot;: &quot;<!--\nAllocates a new buffer using an `array` of octets.\n-->\n\n<p>&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x306E; <code>array</code> &#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;str&quot;
                },
                {
                  &quot;name&quot;: &quot;encoding&quot;,
                  &quot;optional&quot;: true
                }
              ],
              &quot;desc&quot;: &quot;<!--\n* `str` String - string to encode.\n* `encoding` String - encoding to use, Optional.\n-->\n\n<ul>\n<li><code>str</code> String - &#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x308B;&#x6587;&#x5B57;&#x5217;</li>\n<li><code>encoding</code> String - &#x4F7F;&#x7528;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3001;Optional&#x3001;Default: &apos;utf8&apos;</li>\n</ul>\n<!--\nAllocates a new buffer containing the given `str`.\n`encoding` defaults to `'utf8'`.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>str</code> &#x3092;&#x5185;&#x5BB9;&#x3068;&#x3059;&#x308B;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n<code>encoding</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;utf8&apos;</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: SlowBuffer&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;SlowBuffer&quot;,
          &quot;desc&quot;: &quot;<!--\nThis class is primarily for internal use.  JavaScript programs should\nuse Buffer instead of using SlowBuffer.\n\nIn order to avoid the overhead of allocating many C++ Buffer objects for\nsmall blocks of memory in the lifetime of a server, Node allocates memory\nin 8Kb (8192 byte) chunks.  If a buffer is smaller than this size, then it\nwill be backed by a parent SlowBuffer object.  If it is larger than this,\nthen Node will allocate a SlowBuffer slab for it directly.\n-->\n\n<p>&#x3053;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306F;&#x4E3B;&#x306B;&#x5185;&#x90E8;&#x5229;&#x7528;&#x306E;&#x305F;&#x3081;&#x306E;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;JavaScsript &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F; SlowBuffer\n&#x3088;&#x308A;&#x3082; Buffer &#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x52D5;&#x4F5C;&#x4E2D;&#x306B;&#x3001;&#x5C0F;&#x3055;&#x306A;&#x30E1;&#x30E2;&#x30EA;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x306E;&#x305F;&#x3081;&#x306B;&#x591A;&#x304F;&#x306E; C++ &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C;\n&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x308B;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30D8;&#x30C3;&#x30C9;&#x3092;&#x907F;&#x3051;&#x308B;&#x305F;&#x3081;&#x3001;Node &#x306F;&#x30E1;&#x30E2;&#x30EA;&#x3092; 8Kb (8192 &#x30D0;&#x30A4;&#x30C8;) &#x306E;\n&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x5185;&#x306B;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;&#x3082;&#x3057;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x3053;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x3088;&#x308A;&#x5C0F;&#x3055;&#x3051;&#x308C;&#x3070;&#x3001;&#x305D;&#x308C;&#x306F;\n&#x89AA;&#x306E; SlowBuffer &#x306B;&#x652F;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;&#x305D;&#x308C;&#x3088;&#x308A;&#x5927;&#x304D;&#x3051;&#x308C;&#x3070;&#x3001;Node &#x306F; SlowBuffer &#x3092;\n&#x76F4;&#x63A5;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;`INSPECT_MAX_BYTES` Number, Default: 50 &quot;,
          &quot;name&quot;: &quot;INSPECT_MAX_BYTES&quot;,
          &quot;desc&quot;: &quot;<!--\nHow many bytes will be returned when `buffer.inspect()` is called. This can\nbe overridden by user modules.\n\nNote that this is a property on the buffer module returned by\n`require('buffer')`, not on the Buffer global, or a buffer instance.\n-->\n\n<p><code>buffer.inspect()</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x8FD4;&#x3059;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30E6;&#x30FC;&#x30B6;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x3088;&#x3063;&#x3066;&#x4E0A;&#x66F8;&#x304D;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x306E; Buffer &#x3084;&#x305D;&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001; <code>requrie(&apos;buffer&apos;)</code>\n&#x306B;&#x3088;&#x3063;&#x3066;&#x8FD4;&#x3055;&#x308C;&#x308B; buffer &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;shortDesc&quot;: &quot;Number, Default: 50&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Buffer&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Stream&quot;,
      &quot;name&quot;: &quot;stream&quot;,
      &quot;stability&quot;: 2,
      &quot;stabilityText&quot;: &quot;Unstable&quot;,
      &quot;desc&quot;: &quot;<!--\nA stream is an abstract interface implemented by various objects in\nNode.  For example a [request to an HTTP\nserver](http.html#http_http_incomingmessage) is a stream, as is\n[stdout][]. Streams are readable, writable, or both. All streams are\ninstances of [EventEmitter][]\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; Node &#x306E;&#x69D8;&#x3005;&#x306A;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x62BD;&#x8C61;&#x7684;&#x306A;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3067;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070; <a href="\&quot;http.html#http_http_incomingmessage\&quot;">HTTP &#x30B5;&#x30FC;&#x30D0;&#x3078;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;</a>&#x306F;\n[&#x6A19;&#x6E96;&#x51FA;&#x529B;][]&#x3068;&#x540C;&#x69D8;&#x306B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x3001;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x3001;&#x307E;&#x305F;&#x306F;&#x305D;&#x306E;&#x4E21;&#x65B9;&#x3067;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; [EventEmitter][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nYou can load the Stream base classes by doing `require('stream')`.\nThere are base classes provided for [Readable][] streams, [Writable][]\nstreams, [Duplex][] streams, and [Transform][] streams.\n-->\n\n<p>Stream &#x306E;&#x30D9;&#x30FC;&#x30B9;&#x30AF;&#x30E9;&#x30B9;&#x306F; <code>require(&apos;stream&apos;)</code> &#x3067;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n[Readable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3001;[Writable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3001;[Duplex][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3001;\n[Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30D9;&#x30FC;&#x30B9;&#x30AF;&#x30E9;&#x30B9;&#x304C;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis document is split up into 3 sections.  The first explains the\nparts of the API that you need to be aware of to use streams in your\nprograms.  If you never implement a streaming API yourself, you can\nstop there.\n-->\n\n<p>&#x3053;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x306F; 3 &#x3064;&#x306E;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x5206;&#x304B;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x6700;&#x521D;&#x306B;&#x3001;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x77E5;&#x3063;&#x3066;&#x304A;&#x304F;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308B;\nAPI &#x306B;&#x3064;&#x3044;&#x3066;&#x8AAC;&#x660E;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x72EC;&#x81EA;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30DF;&#x30F3;&#x30B0; API &#x3092;&#x5B9F;&#x88C5;&#x3057;&#x306A;&#x3044;&#x306E;&#x3067;&#x3042;&#x308C;&#x3070;&#x3001;\n&#x305D;&#x3053;&#x3067;&#x7D42;&#x308F;&#x308A;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe second section explains the parts of the API that you need to use\nif you implement your own custom streams yourself.  The API is\ndesigned to make this easy for you to do.\n-->\n\n<p>2&#x756A;&#x76EE;&#x306E;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x306F;&#x3001;&#x72EC;&#x81EA;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x5834;&#x5408;&#x306B;&#x5FC5;&#x8981;&#x3068;&#x306A;&#x308B;\nAPI &#x306B;&#x3064;&#x3044;&#x3066;&#x8AAC;&#x660E;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E; API &#x306F;&#x305D;&#x308C;&#x304C;&#x7C21;&#x5358;&#x306B;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe third section goes into more depth about how streams work,\nincluding some of the internal mechanisms and functions that you\nshould probably not modify unless you definitely know what you are\ndoing.\n-->\n\n<p>3&#x756A;&#x76EE;&#x306E;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x3001;&#x7406;&#x89E3;&#x3059;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F;&#x5909;&#x66F4;&#x3057;&#x3066;&#x306F;&#x306A;&#x3089;&#x306A;&#x3044;\n&#x5185;&#x90E8;&#x7684;&#x306A;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x3084;&#x95A2;&#x6570;&#x7FA4;&#x3092;&#x542B;&#x3081;&#x3066;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x3069;&#x306E;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3059;&#x308B;&#x304B;&#x306B;&#x3064;&#x3044;&#x3066;\n&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x8AAC;&#x660E;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: stream.Readable&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;stream.Readable&quot;,
          &quot;desc&quot;: &quot;<!--\nThe Readable stream interface is the abstraction for a *source* of\ndata that you are reading from.  In other words, data comes *out* of a\nReadable stream.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x62BD;&#x8C61;&#x7684;&#x306A;\n<em>&#x767A;&#x751F;&#x6E90;</em> &#x3067;&#x3059;&#x3002;&#x8A00;&#x3044;&#x63DB;&#x3048;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089; <em>&#x51FA;&#x3066;</em> &#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nA Readable stream will not start emitting data until you indicate that\nyou are ready to receive it.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B;&#x6E96;&#x5099;&#x304C;&#x3067;&#x304D;&#x305F;&#x3068;&#x6307;&#x793A;&#x3059;&#x308B;&#x307E;&#x3067;&#x306F;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x751F;&#x6210;&#x3092;&#x958B;&#x59CB;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nReadable streams have two \"modes\": a **flowing mode** and a **non-flowing\nmode**.  When in flowing mode, data is read from the underlying system\nand provided to your program as fast as possible.  In non-flowing\nmode, you must explicitly call `stream.read()` to get chunks of data\nout.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x4E8C;&#x3064;&#x306E; &quot;&#x30E2;&#x30FC;&#x30C9;&quot;: <strong>flowing &#x30E2;&#x30FC;&#x30C9;</strong> &#x3068;\n<strong>non-flowing &#x30E2;&#x30FC;&#x30C9;</strong> &#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\nflowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5165;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x3068;&#x3001;\n&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x7D20;&#x65E9;&#x304F;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;&#x5C4A;&#x3051;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\nnon-flowing &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x306F;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3092;&#x53D6;&#x308A;&#x51FA;&#x3059;&#x305F;&#x3081;&#x306B;&#x3001;&#x660E;&#x793A;&#x7684;&#x306B;\n<code>stream.read()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples of readable streams include:\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [http responses, on the client](http.html#http_http_incomingmessage)\n* [http requests, on the server](http.html#http_http_incomingmessage)\n* [fs read streams](fs.html#fs_class_fs_readstream)\n* [zlib streams][]\n* [crypto streams][]\n* [tcp sockets][]\n* [child process stdout and stderr][]\n* [process.stdin][]\n-->\n\n<ul>\n<li><a href="\&quot;http.html#http_http_incomingmessage\&quot;">&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E; http &#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;</a></li>\n<li><a href="\&quot;http.html#http_http_incomingmessage\&quot;">&#x30B5;&#x30FC;&#x30D0;&#x306E; http &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;</a></li>\n<li><a href="\&quot;fs.html#fs_class_fs_readstream\&quot;">fs &#x306E; ReadStream</a></li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li>[child_process &#x306E;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3068;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;][]</li>\n<li>[process.stdin][]</li>\n</ul>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;readable&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;readable&quot;,
              &quot;desc&quot;: &quot;<!--\nWhen a chunk of data can be read from the stream, it will emit a\n`'readable'` event.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x53EF;&#x80FD;&#x3068;&#x306A;&#x3063;&#x305F;&#x6642;&#x3001;\n<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn some cases, listening for a `'readable'` event will cause some data\nto be read into the internal buffer from the underlying system, if it\nhadn't already.\n-->\n\n<p>&#x3042;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3078;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059; (&#x305D;&#x308C;&#x304C;&#x307E;&#x3060;&#x884C;&#x308F;&#x308C;&#x3066;&#x3044;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;)&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;readable&apos;, function() {\n  // there is some data to read now\n})</code></pre>\n<!--\nOnce the internal buffer is drained, a `readable` event will fire\nagain when more data is available.\n-->\n\n<p>&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x7A7A;&#x306B;&#x306A;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x6642;&#x306B;\n<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x518D;&#x3073;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;data&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;data&quot;,
              &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} The chunk of data.\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | String} &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3002;</li>\n</ul>\n<!--\nIf you attach a `data` event listener, then it will switch the stream\ninto flowing mode, and data will be passed to your handler as soon as\nit is available.\n-->\n\n<p><code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x8FFD;&#x52A0;&#x3059;&#x308B;&#x3068;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308A;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;&#x3068;&#x3059;&#x3050;&#x306B;&#x3042;&#x306A;&#x305F;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you just want to get all the data out of the stream as fast as\npossible, this is the best way to do so.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x51FA;&#x3066;&#x304F;&#x308B;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3067;&#x304D;&#x308B;&#x3060;&#x3051;&#x7D20;&#x65E9;&#x304F;&#x6B32;&#x3057;&#x3044;&#x306E;&#x306A;&#x3089;&#x3001;\n&#x3053;&#x308C;&#x304C;&#x6700;&#x5584;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n})</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;end&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;end&quot;,
              &quot;desc&quot;: &quot;<!--\nThis event fires when no more data will be provided.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x3001;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x3082;&#x3046;&#x7121;&#x304F;&#x306A;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that the `end` event **will not fire** unless the data is\ncompletely consumed.  This can be done by switching into flowing mode,\nor by calling `read()` repeatedly until you get to the end.\n-->\n\n<p><code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;&#x306F; <strong>&#x751F;&#x6210;&#x3055;&#x308C;&#x306A;&#x3044;</strong>\n&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;&#x307E;&#x305F;&#x306F;&#x7D42;&#x308F;&#x308A;&#x306B;&#x9054;&#x3059;&#x308B;&#x307E;&#x3067;\n<code>read()</code> &#x3092;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x9054;&#x6210;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n})\nreadable.on(&apos;end&apos;, function() {\n  console.log(&apos;there will be no more data.&apos;);\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when the underlying resource (for example, the backing file\ndescriptor) has been closed. Not all streams will emit this.\n-->\n\n<p>&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9; (&#x4F8B;&#x3048;&#x3070;&#x80CC;&#x5F8C;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;) &#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x767A;&#x751F;&#x3059;&#x308B;&#x308F;&#x3051;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted if there was an error receiving data.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x53D7;&#x4FE1;&#x3067;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x3042;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;readable.read([size])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;read&quot;,
              &quot;desc&quot;: &quot;<!--\n* `size` {Number} Optional argument to specify how much data to read.\n* Return {String | Buffer | null}\n-->\n\n<ul>\n<li><code>size</code> {Number} &#x3069;&#x308C;&#x3060;&#x3051;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x304B;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x5F15;&#x6570;&#x3002;</li>\n<li>Return {String | Buffer | null}</li>\n</ul>\n<!--\nThe `read()` method pulls some data out of the internal buffer and\nreturns it.  If there is no data available, then it will return\n`null`.\n-->\n\n<p><code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D6;&#x308A;&#x51FA;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7121;&#x3051;&#x308C;&#x3070;&#x3001;<code>null</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you pass in a `size` argument, then it will return that many\nbytes.  If `size` bytes are not available, then it will return `null`.\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;&#x305D;&#x306E;&#x9577;&#x3055; (&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x6570;) &#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>size</code> &#x3067;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x9577;&#x3055;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x63C3;&#x3063;&#x3066;&#x3044;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F; <code>null</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you do not specify a `size` argument, then it will return all the\ndata in the internal buffer.\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x3042;&#x308B;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method should only be called in non-flowing mode.  In\nflowing-mode, this method is called automatically until the internal\nbuffer is drained.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; non-flowing &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x5834;&#x5408;&#x306B;&#x9650;&#x3063;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\nflowing &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x306F;&#x3001;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x7A7A;&#x306B;&#x306A;&#x308B;&#x307E;&#x3067;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;readable&apos;, function() {\n  var chunk;\n  while (null !== (chunk = readable.read())) {\n    console.log(&apos;got %d bytes of data&apos;, chunk.length);\n  }\n});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;size&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.setEncoding(encoding)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setEncoding&quot;,
              &quot;desc&quot;: &quot;<!--\n* `encoding` {String} The encoding to use.\n-->\n\n<ul>\n<li><code>encoding</code> {String} &#x4F7F;&#x7528;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3002;</li>\n</ul>\n<!--\nCall this function to cause the stream to return strings of the\nspecified encoding instead of Buffer objects.  For example, if you do\n`readable.setEncoding('utf8')`, then the output data will be\ninterpreted as UTF-8 data, and returned as strings.  If you do\n`readable.setEncoding('hex')`, then the data will be encoded in\nhexadecimal string format.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; Buffer &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306B;&#x3088;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3059;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;<code>readable.setEncoding(&apos;utf8&apos;)</code> &#x3068;&#x3059;&#x308B;&#x3068;&#x3001;&#x5F97;&#x3089;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x306F;\nUTF-8 &#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3068;&#x3057;&#x3066;&#x89E3;&#x91C8;&#x3055;&#x308C;&#x3001;&#x6587;&#x5B57;&#x5217;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>readable.setEncoding(&apos;hex&apos;)</code> &#x3068;&#x3059;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F; 16 &#x9032;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306E;\n&#x6587;&#x5B57;&#x5217;&#x306B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis properly handles multi-byte characters that would otherwise be\npotentially mangled if you simply pulled the Buffers directly and\ncalled `buf.toString(encoding)` on them.  If you want to read the data\nas strings, always use this method.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Buffer &#x3092;&#x76F4;&#x63A5;&#x53D6;&#x5F97;&#x3057;&#x3066;&#x5358;&#x7D14;&#x306B; <code>buf.toString(encoding)</code>\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x6F5C;&#x5728;&#x7684;&#x306B;&#x3081;&#x3061;&#x3083;&#x304F;&#x3061;&#x3083;&#x306B;&#x306A;&#x308B;&#x306E;&#x3068;&#x306F;&#x7570;&#x306A;&#x308A;&#x3001;\n&#x30DE;&#x30EB;&#x30C1;&#x30D0;&#x30A4;&#x30C8;&#x6587;&#x5B57;&#x3092;&#x6B63;&#x3057;&#x304F;&#x6271;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6587;&#x5B57;&#x5217;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;&#x5E38;&#x306B;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.setEncoding(&apos;utf8&apos;);\nreadable.on(&apos;data&apos;, function(chunk) {\n  assert.equal(typeof chunk, &apos;string&apos;);\n  console.log(&apos;got %d characters of string data&apos;, chunk.length);\n})</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.resume()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;resume&quot;,
              &quot;desc&quot;: &quot;<!--\nThis method will cause the readable stream to resume emitting `data`\nevents.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x3092;\n&#x518D;&#x958B;&#x3059;&#x308B;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method will switch the stream into flowing-mode.  If you do *not*\nwant to consume the data from a stream, but you *do* want to get to\nits `end` event, you can call `readable.resume()` to open the flow of\ndata.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C; <em>&#x306A;&#x304F;</em>&#x3001;&#x3057;&#x304B;&#x3057; <code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x53D7;&#x3051;&#x53D6;&#x308B;&#x5FC5;&#x8981;&#x304C; <em>&#x3042;&#x308B;</em> &#x306A;&#x3089;&#x3001;<code>readable.resume()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30D5;&#x30ED;&#x30FC;&#x3092;\n&#x958B;&#x304F;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.resume();\nreadable.on(&apos;end&apos;, function(chunk) {\n  console.log(&apos;got to the end, but did not read anything&apos;);\n})</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.pause()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;pause&quot;,
              &quot;desc&quot;: &quot;<!--\nThis method will cause a stream in flowing-mode to stop emitting\n`data` events.  Any data that becomes available will remain in the\ninternal buffer.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x3066;&#x3001;\n<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x3092;&#x4E2D;&#x65AD;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x4E2D;&#x306B;&#x6B8B;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method is only relevant in flowing mode.  When called on a\nnon-flowing stream, it will switch into flowing mode, but remain\npaused.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x3060;&#x3051;&#x95A2;&#x9023;&#x3057;&#x307E;&#x3059;&#x3002;\nnon-flowing &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x547C;&#x3070;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308A;&#x3001;\n&#x6B8B;&#x308A;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x4F11;&#x6B62;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n  readable.pause();\n  console.log(&apos;there will be no more data for 1 second&apos;);\n  setTimeout(function() {\n    console.log(&apos;now data will start flowing again&apos;);\n    readable.resume();\n  }, 1000);\n})</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.pipe(destination, [options])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;pipe&quot;,
              &quot;* `destination` {[Writable][] Stream} The destination for writing data\n* `options` {Object} Pipe options\n  * `end` {Boolean} End the writer when the reader ends. Default&quot;: &quot;`true`&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`destination` {[Writable][] Stream} &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3002; &quot;,
                      &quot;name&quot;: &quot;destination&quot;,
                      &quot;type&quot;: &quot;[Writable][] Stream&quot;,
                      &quot;desc&quot;: &quot;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3002;&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`options` {Object} &#x30D1;&#x30A4;&#x30D7;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3; &quot;,
                      &quot;options&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`end` {Boolean} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5143;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true` &quot;,
                          &quot;name&quot;: &quot;end&quot;,
                          &quot;type&quot;: &quot;Boolean&quot;,
                          &quot;desc&quot;: &quot;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5143;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&quot;
                        }
                      ],
                      &quot;name&quot;: &quot;options&quot;,
                      &quot;type&quot;: &quot;Object&quot;,
                      &quot;desc&quot;: &quot;&#x30D1;&#x30A4;&#x30D7;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;destination&quot;
                    },
                    {
                      &quot;name&quot;: &quot;options&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nThis method pulls all the data out of a readable stream, and writes it\nto the supplied destination, automatically managing the flow so that\nthe destination is not overwhelmed by a fast readable stream.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5F15;&#x304D;&#x51FA;&#x3057;&#x3001;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x884C;&#x304D;&#x5148;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x9AD8;&#x901F;&#x306A; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x3088;&#x3063;&#x3066;&#x51FA;&#x529B;&#x5148;&#x304C;&#x5727;&#x8FEB;&#x3055;&#x308C;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3001;\n&#x81EA;&#x52D5;&#x7684;&#x306B;&#x30D5;&#x30ED;&#x30FC;&#x5236;&#x5FA1;&#x3092;&#x884C;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nMultiple destinations can be piped to safely.\n-->\n\n<p>&#x8907;&#x6570;&#x306E;&#x51FA;&#x529B;&#x5148;&#x3092;&#x5B89;&#x5168;&#x306B;&#x9023;&#x7D50;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nvar writable = fs.createWriteStream(&apos;file.txt&apos;);\n// All the data from readable goes into &apos;file.txt&apos;\nreadable.pipe(writable);</code></pre>\n<!--\nThis function returns the destination stream, so you can set up pipe\nchains like so:\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x51FA;&#x529B;&#x5148;&#x3068;&#x306A;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x30D1;&#x30A4;&#x30D7;&#x306E;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3092;\n&#x7D44;&#x307F;&#x7ACB;&#x3066;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var r = fs.createReadStream(&apos;file.txt&apos;);\nvar z = zlib.createGzip();\nvar w = fs.createWriteStream(&apos;file.txt.gz&apos;);\nr.pipe(z).pipe(w);</code></pre>\n<!--\nFor example, emulating the Unix `cat` command:\n-->\n\n<p>Unix &#x306E; <code>cat</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x30A8;&#x30DF;&#x30E5;&#x30EC;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">process.stdin.pipe(process.stdout);</code></pre>\n<!--\nBy default [`end()`][] is called on the destination when the source stream\nemits `end`, so that `destination` is no longer writable. Pass `{ end:\nfalse }` as `options` to keep the destination stream open.\n-->\n\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x3001;&#x51FA;&#x529B;&#x5148;&#x306E; [<code>end()</code>][] &#x306F;&#x5165;&#x529B;&#x5143;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;\n<code>&apos;end&apos;</code> &#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;<code>destination</code>\n&#x306F;&#x3082;&#x3046;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x3067;&#x306F;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>{end: false }</code> &#x3092; <code>options</code> &#x3068;&#x3057;&#x3066;&#x6E21;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x51FA;&#x529B;&#x5148;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x305F;&#x307E;&#x307E;&#x306B;&#x3057;&#x3066;&#x304A;&#x304F;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis keeps `writer` open so that \"Goodbye\" can be written at the\nend.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; <code>writer</code> &#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x305F;&#x307E;&#x307E;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x6700;&#x5F8C;&#x306B;\n<code>&quot;Goodbye&quot;</code> &#x3068;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">reader.pipe(writer, { end: false });\nreader.on(&apos;end&apos;, function() {\n  writer.end(&apos;Goodbye\\n&apos;);\n});</code></pre>\n<!--\nNote that `process.stderr` and `process.stdout` are never closed until\nthe process exits, regardless of the specified options.\n-->\n\n<p><code>process.stderr</code> &#x304A;&#x3088;&#x3073; <code>process.stdout</code> &#x306F;&#x3001;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x6307;&#x5B9A;&#x306B;&#x95A2;&#x4FC2;&#x306A;&#x304F;&#x3001;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x307E;&#x3067;&#x6C7A;&#x3057;&#x3066;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;readable.unpipe([destination])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;unpipe&quot;,
              &quot;desc&quot;: &quot;<!--\n* `destination` {[Writable][] Stream} Optional specific stream to unpipe\n-->\n\n<ul>\n<li><code>destination</code> {[Writable][] Stream} &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x89E3;&#x9664;&#x3059;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis method will remove the hooks set up for a previous `pipe()` call.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x4EE5;&#x524D;&#x306E; <code>pipe()</code> &#x547C;&#x3073;&#x51FA;&#x3057;&#x3067;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30C3;&#x30AF;&#x3092;&#x53D6;&#x308A;&#x9664;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the destination is not specified, then all pipes are removed.\n-->\n\n<p><code>destination</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5168;&#x3066;&#x306E;&#x30D1;&#x30A4;&#x30D7;&#x304C;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the destination is specified, but no pipe is set up for it, then\nthis is a no-op.\n-->\n\n<p><code>destination</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x3082;&#x306E;&#x306E;&#x3001;&#x305D;&#x308C;&#x304C;&#x30D1;&#x30A4;&#x30D7;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x3053;&#x308C;&#x306F;&#x4F55;&#x3082;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nvar writable = fs.createWriteStream(&apos;file.txt&apos;);\n// All the data from readable goes into &apos;file.txt&apos;,\n// but only for the first second\nreadable.pipe(writable);\nsetTimeout(function() {\n  console.log(&apos;stop writing to file.txt&apos;);\n  readable.unpipe(writable);\n  console.log(&apos;manually close the file stream&apos;);\n  writable.end();\n}, 1000);</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;destination&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.unshift(chunk)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;unshift&quot;,
              &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} Chunk of data to unshift onto the read queue\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | String} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306E;&#x5148;&#x982D;&#x306B;&#x623B;&#x3055;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;</li>\n</ul>\n<!--\nThis is useful in certain cases where a stream is being consumed by a\nparser, which needs to \"un-consume\" some data that it has\noptimistically pulled out of the source, so that the stream can be\npassed on to some other party.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30D1;&#x30FC;&#x30B5;&#x306B;&#x3088;&#x3063;&#x3066;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x306B;&#x304A;&#x3044;&#x3066;&#x6709;&#x7528;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x697D;&#x89B3;&#x7684;&#x306B;&#x53D6;&#x308A;&#x51FA;&#x3057;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x300C;&#x6D88;&#x8CBB;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x300D;&#x3053;&#x3068;&#x306B;&#x3057;&#x3066;&#x3001;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4ED6;&#x306E;&#x3068;&#x3053;&#x308D;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6E21;&#x305B;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x5834;&#x5408;&#x306B;&#x5FC5;&#x8981;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you find that you must often call `stream.unshift(chunk)` in your\nprograms, consider implementing a [Transform][] stream instead.  (See API\nfor Stream Implementors, below.)\n-->\n\n<p><code>stream.unshift(chunk)</code> &#x3092;&#x983B;&#x7E41;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x304F;&#x3066;&#x306F;&#x306A;&#x3089;&#x306A;&#x3044;&#x3068;&#x3057;&#x305F;&#x3089;&#x3001;\n&#x4EE3;&#x308F;&#x308A;&#x306B; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x691C;&#x8A0E;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;\n(&#x5F8C;&#x8FF0;&#x3059;&#x308B; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5B9F;&#x88C5;&#x8005;&#x5411;&#x3051;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Pull off a header delimited by \\n\\n\n// use unshift() if we get too much\n// Call the callback with (error, header, stream)\nvar StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;\nfunction parseHeader(stream, callback) {\n  stream.on(&apos;error&apos;, callback);\n  stream.on(&apos;readable&apos;, onReadable);\n  var decoder = new StringDecoder(&apos;utf8&apos;);\n  var header = &apos;&apos;;\n  function onReadable() {\n    var chunk;\n    while (null !== (chunk = stream.read())) {\n      var str = decoder.write(chunk);\n      if (str.match(/\\n\\n/)) {\n        // found the header boundary\n        var split = str.split(/\\n\\n/);\n        header += split.shift();\n        var remaining = split.join(&apos;\\n\\n&apos;);\n        var buf = new Buffer(remaining, &apos;utf8&apos;);\n        if (buf.length)\n          stream.unshift(buf);\n        stream.removeListener(&apos;error&apos;, callback);\n        stream.removeListener(&apos;readable&apos;, onReadable);\n        // now the body of the message can be read from the stream.\n        callback(null, header, stream);\n      } else {\n        // still reading the header.\n        header += str;\n      }\n    }\n  }\n}</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;chunk&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.wrap(stream)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;wrap&quot;,
              &quot;desc&quot;: &quot;<!--\n* `stream` {Stream} An \"old style\" readable stream\n-->\n\n<ul>\n<li><code>stream</code> {Stream} &#x300C;&#x53E4;&#x3044;&#x30B9;&#x30BF;&#x30A4;&#x30EB;&#x300D;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nVersions of Node prior to v0.10 had streams that did not implement the\nentire Streams API as it is today.  (See \"Compatibility\" below for\nmore information.)\n-->\n\n<p>v0.10 &#x3088;&#x308A;&#x524D;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E; Node &#x306B;&#x306F;&#x3001;&#x4ECA;&#x65E5;&#x306E;&#x5168;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0; API &#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x3044;&#x306A;&#x3044;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x3042;&#x308A;&#x307E;&#x3057;&#x305F; (&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F;&#x5F8C;&#x8FF0;&#x3059;&#x308B;&#x300C;[&#x4E92;&#x63DB;&#x6027;][]&#x300D;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<!--\nIf you are using an older Node library that emits `'data'` events and\nhas a `pause()` method that is advisory only, then you can use the\n`wrap()` method to create a [Readable][] stream that uses the old stream\nas its data source.\n-->\n\n<p>&#x3082;&#x3057;&#x3001;<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x3001;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x3060;&#x3051;&#x3092;&#x884C;&#x3046; <code>pause()</code>\n&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x6301;&#x3064;&#x3001;&#x53E4;&#x3044; Node &#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x308B;&#x306A;&#x3089;&#x3001;\n<code>wrap()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x53E4;&#x3044;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x30C7;&#x30FC;&#x30BF;&#x30BD;&#x30FC;&#x30B9;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x7528;&#x3059;&#x308B;\n[Readable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nYou will very rarely ever need to call this function, but it exists\nas a convenience for interacting with old Node programs and libraries.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x306F;&#x6EC5;&#x591A;&#x306B;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;&#x3053;&#x308C;&#x306F;&#x53E4;&#x3044; Node\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x53CA;&#x3073;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3068;&#x76F8;&#x4E92;&#x4F5C;&#x7528;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x5229;&#x4FBF;&#x6027;&#x306E;&#x305F;&#x3081;&#x306B;&#x5B58;&#x5728;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var OldReader = require(&apos;./old-api-module.js&apos;).OldReader;\nvar oreader = new OldReader;\nvar Readable = require(&apos;stream&apos;).Readable;\nvar myReader = new Readable().wrap(oreader);\n\nmyReader.on(&apos;readable&apos;, function() {\n  myReader.read(); // etc.\n});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;stream&quot;
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: stream.Writable&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;stream.Writable&quot;,
          &quot;desc&quot;: &quot;<!--\nThe Writable stream interface is an abstraction for a *destination*\nthat you are writing data *to*.\n-->\n\n<p>Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x62BD;&#x8C61;&#x7684;&#x306A;\n<em>&#x884C;&#x304D;&#x5148;</em> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples of writable streams include:\n-->\n\n<p>Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [http requests, on the client](http.html#http_class_http_clientrequest)\n* [http responses, on the server](http.html#http_class_http_serverresponse)\n* [fs write streams](fs.html#fs_class_fs_writestream)\n* [zlib streams][]\n* [crypto streams][]\n* [tcp sockets][]\n* [child process stdin](child_process.html#child_process_child_stdin)\n* [process.stdout][], [process.stderr][]\n-->\n\n<ul>\n<li><a href="\&quot;http.html#http_class_http_clientrequest\&quot;">&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E; http &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;</a></li>\n<li><a href="\&quot;http.html#http_class_http_serverresponse\&quot;">&#x30B5;&#x30FC;&#x30D0;&#x306E; http &#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;</a></li>\n<li><a href="\&quot;fs.html#fs_class_fs_writestream\&quot;">fs &#x306E; WriteStream</a></li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li><a href="\&quot;child_process.html#child_process_child_stdin\&quot;">child_process &#x306E;&#x6A19;&#x6E96;&#x5165;&#x529B;</a></li>\n<li>[process.stdout][], [process.stderr][]</li>\n</ul>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;writable.write(chunk, [encoding], [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;write&quot;,
              &quot;desc&quot;: &quot;<!--\n* `chunk` {String | Buffer} The data to write\n* `encoding` {String} The encoding, if `chunk` is a String\n* `callback` {Function} Callback for when this chunk of data is flushed\n* Returns: {Boolean} True if the data was handled completely.\n-->\n\n<ul>\n<li><code>chunk</code> {String | Buffer} &#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;</li>\n<li><code>encoding</code> {String} &#x3082;&#x3057; <code>chunk</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;</li>\n<li><code>callback</code> {Function} &#x30C7;&#x30FC;&#x30BF;&#x304C;&#x6383;&#x304D;&#x51FA;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;</li>\n<li>Returns: {Boolean} &#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x51E6;&#x7406;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F; <code>true</code>&#x3002;</li>\n</ul>\n<!--\nThis method writes some data to the underlying system, and calls the\nsupplied callback once the data has been fully handled.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x51E6;&#x7406;&#x3055;&#x308C;&#x308B;&#x3068;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x4E00;&#x5EA6;&#x3060;&#x3051;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe return value indicates if you should continue writing right now.\nIf the data had to be buffered internally, then it will return\n`false`.  Otherwise, it will return `true`.\n-->\n\n<p>&#x623B;&#x308A;&#x5024;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3092;&#x3059;&#x3050;&#x306B;&#x7D9A;&#x3051;&#x3066;&#x3044;&#x3044;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5185;&#x90E8;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x306A;&#x3089; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070; <code>true</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis return value is strictly advisory.  You MAY continue to write,\neven if it returns `false`.  However, writes will be buffered in\nmemory, so it is best not to do this excessively.  Instead, wait for\nthe `drain` event before writing more data.\n-->\n\n<p>&#x3053;&#x306E;&#x623B;&#x308A;&#x5024;&#x306F;&#x5B8C;&#x5168;&#x306B;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x7684;&#x3067;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x3053;&#x308C;&#x304C; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x3066;&#x3082;&#x3001;&#x3042;&#x306A;&#x305F;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3092;&#x7D9A;&#x3051;&#x308B;&#x3053;&#x3068;&#x304C;&#x300C;&#x3067;&#x304D;&#x307E;&#x3059;&#x300D;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x30E1;&#x30E2;&#x30EA;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;&#x3001;\n&#x3053;&#x308C;&#x3092;&#x904E;&#x5270;&#x306B;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x304C;&#x6700;&#x5584;&#x3067;&#x3059;&#x3002;\n&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304F;&#x524D;&#x306B; <code>&apos;drain&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x5F85;&#x6A5F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;chunk&quot;
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;writable.end([chunk], [encoding], [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;end&quot;,
              &quot;desc&quot;: &quot;<!--\n* `chunk` {String | Buffer} Optional data to write\n* `encoding` {String} The encoding, if `chunk` is a String\n* `callback` {Function} Optional callback for when the stream is finished\n-->\n\n<ul>\n<li><code>chunk</code> {String | Buffer} &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;</li>\n<li><code>encoding</code> {String} &#x3082;&#x3057; <code>chunk</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;</li>\n<li><code>callback</code> {Function} &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x7D42;&#x4E86;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3001;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;</li>\n</ul>\n<!--\nCall this method when no more data will be written to the stream.  If\nsupplied, the callback is attached as a listener on the `finish` event.\n-->\n\n<p>&#x3053;&#x308C;&#x4EE5;&#x4E0A;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x306A;&#x3044;&#x5834;&#x5408;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x305D;&#x308C;&#x306F; <code>&apos;finish&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;\n&#x30A2;&#x30BF;&#x30C3;&#x30C1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCalling [`write()`][] after calling [`end()`][] will raise an error.\n-->\n\n<p>[<code>end()</code>][] &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x5F8C;&#x3067; [<code>write()</code>][] &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// write &apos;hello, &apos; and then end with &apos;world!&apos;\nhttp.createServer(function (req, res) {\n  res.write(&apos;hello, &apos;);\n  res.end(&apos;world!&apos;);\n  // writing more now is not allowed!\n});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;chunk&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ],
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;drain&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;drain&quot;,
              &quot;desc&quot;: &quot;<!--\nIf a [`writable.write(chunk)`][] call returns false, then the `drain`\nevent will indicate when it is appropriate to begin writing more data\nto the stream.\n-->\n\n<p>[<code>write(chunk, encoding, callback)</code>][] &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x304C; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3044;&#x3064;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x59CB;&#x3081;&#x308B;&#x306E;&#x304C;&#x9069;&#x5207;&#x304B;&#x3092;\n<code>&apos;drain&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Write the data to the supplied writable stream 1MM times.\n// Be attentive to back-pressure.\nfunction writeOneMillionTimes(writer, data, encoding, callback) {\n  var i = 1000000;\n  write();\n  function write() {\n    var ok = true;\n    do {\n      i -= 1;\n      if (i === 0) {\n        // last time!\n        writer.write(data, encoding, callback);\n      } else {\n        // see if we should continue, or wait\n        // don&apos;t pass the callback, because we&apos;re not done yet.\n        ok = writer.write(data, encoding);\n      }\n    } while (i &gt; 0 &amp;&amp; ok);\n    if (i &gt; 0) {\n      // had to stop early!\n      // write some more once it drains\n      writer.once(&apos;drain&apos;, write);\n    }\n  }\n}</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;finish&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;finish&quot;,
              &quot;desc&quot;: &quot;<!--\nWhen the [`end()`][] method has been called, and all data has been flushed\nto the underlying system, this event is emitted.\n-->\n\n<p>[<code>end()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3001;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;\n&#x6383;&#x304D;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nfor (var i = 0; i &lt; 100; i ++) {\n  writer.write(&apos;hello, #&apos; + i + &apos;!\\n&apos;);\n}\nwriter.end(&apos;this is the end\\n&apos;);\nwriter.on(&apos;finish&apos;, function() {\n  console.error(&apos;all writes are now complete.&apos;);\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;pipe&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;pipe&quot;,
              &quot;desc&quot;: &quot;<!--\n* `src` {[Readable][] Stream} source stream that is piping to this writable\n-->\n\n<ul>\n<li><code>src</code> {[Readable][] Stream} &#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x3064;&#x306A;&#x304C;&#x308C;&#x305F;\n&#x5165;&#x529B;&#x5143;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis is emitted whenever the `pipe()` method is called on a readable\nstream, adding this writable to its set of destinations.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E; <code>pipe()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3001;\n&#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x51FA;&#x529B;&#x5148;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nvar reader = getReadableStreamSomehow();\nwriter.on(&apos;pipe&apos;, function(src) {\n  console.error(&apos;something is piping into the writer&apos;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;unpipe&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;unpipe&quot;,
              &quot;desc&quot;: &quot;<!--\n* `src` {[Readable][] Stream} The source stream that [unpiped][] this writable\n-->\n\n<ul>\n<li><code>src</code> {[Readable][] Stream} &#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;[&#x5207;&#x308A;&#x96E2;&#x3055;&#x308C;&#x305F;][]\n&#x5165;&#x529B;&#x5143;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis is emitted whenever the [`unpipe()`][] method is called on a\nreadable stream, removing this writable from its set of destinations.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067; [<code>unpipe()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3001;\n&#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x51FA;&#x529B;&#x5148;&#x304B;&#x3089;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nvar reader = getReadableStreamSomehow();\nwriter.on(&apos;unpipe&apos;, function(src) {\n  console.error(&apos;something has stopped piping into the writer&apos;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\nreader.unpipe(writer);</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted if there was an error when writing or piping data.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x4E2D;&#x307E;&#x305F;&#x306F;&#x30D1;&#x30A4;&#x30D7;&#x4E2D;&#x306B;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: stream.Duplex&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;stream.Duplex&quot;,
          &quot;desc&quot;: &quot;<!--\nDuplex streams are streams that implement both the [Readable][] and\n[Writable][] interfaces.  See above for usage.\n-->\n\n<p>Duplex &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; [Readable][] &#x3068; [Writable][] &#x4E21;&#x65B9;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;\n&#x5B9F;&#x88C5;&#x3057;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;&#x4F7F;&#x3044;&#x65B9;&#x306F;&#x4E0A;&#x8A18;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExamples of Duplex streams include:\n-->\n\n<p>Duplex &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [tcp sockets][]\n* [zlib streams][]\n* [crypto streams][]\n-->\n\n<ul>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n</ul>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: stream.Transform&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;stream.Transform&quot;,
          &quot;desc&quot;: &quot;<!--\nTransform streams are [Duplex][] streams where the output is in some way\ncomputed from the input.  They implement both the [Readable][] and\n[Writable][] interfaces.  See above for usage.\n-->\n\n<p>Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x5165;&#x529B;&#x304B;&#x3089;&#x4F55;&#x3089;&#x304B;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x51FA;&#x529B;&#x304C;&#x8A08;&#x7B97;&#x3055;&#x308C;&#x308B; [Duplex][]\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306F; [Readable][] &#x3068; [Writable][] &#x4E21;&#x65B9;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F7F;&#x3044;&#x65B9;&#x306F;&#x4E0A;&#x8A18;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExamples of Transform streams include:\n-->\n\n<p>Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [zlib streams][]\n* [crypto streams][]\n-->\n\n<ul>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n</ul>\n&quot;
        }
      ],
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;API for Stream Consumers&quot;,
          &quot;name&quot;: &quot;API for Stream Consumers&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nStreams can be either [Readable][], [Writable][], or both ([Duplex][]).\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;[Readable][]&#x3001;[Writable][]&#x3001;&#x307E;&#x305F;&#x306F;&#x305D;&#x306E;&#x4E21;&#x65B9; ([Duplex][])\n&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x306B;&#x306A;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAll streams are EventEmitters, but they also have other custom methods\nand properties depending on whether they are Readable, Writable, or\nDuplex.\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; EventEmitter &#x3067;&#x3059;&#x304C;&#x3001;Readable&#x3001;Writable&#x3001;&#x307E;&#x305F;&#x306F; Duplex\n&#x306E;&#x3044;&#x305A;&#x308C;&#x3067;&#x3042;&#x308B;&#x304B;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;&#x72EC;&#x81EA;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3084;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf a stream is both Readable and Writable, then it implements all of\nthe methods and events below.  So, a [Duplex][] or [Transform][] stream is\nfully described by this API, though their implementation may be\nsomewhat different.\n-->\n\n<p>&#x3082;&#x3057;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; [Readable][] &#x3068;[Writable][] &#x306E;&#x4E21;&#x65B9;&#x3067;&#x3042;&#x308B;&#x306A;&#x3089;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x5168;&#x3066;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3068;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n[Duplex][] &#x307E;&#x305F;&#x306F; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5B9F;&#x88C5;&#x306F;&#x591A;&#x5C11;&#x7570;&#x306A;&#x308B;&#x5834;&#x5408;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x3053;&#x306E; API &#x306B;&#x3088;&#x3063;&#x3066;&#x8A73;&#x7D30;&#x306B;&#x8AAC;&#x660E;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIt is not necessary to implement Stream interfaces in order to consume\nstreams in your programs.  If you **are** implementing streaming\ninterfaces in your own program, please also refer to\n[API for Stream Implementors][] below.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3082;&#x3057;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30DF;&#x30F3;&#x30B0;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5; <strong>&#x3059;&#x308B;</strong> &#x306A;&#x3089;&#x3001;\n&#x4EE5;&#x4E0B;&#x306E; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5B9F;&#x88C5;&#x8005;&#x5411;&#x3051;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nAlmost all Node programs, no matter how simple, use Streams in some\nway.  Here is an example of using Streams in a Node program:\n-->\n\n<p>&#x307B;&#x3068;&#x3093;&#x3069;&#x5168;&#x3066;&#x306E; Node &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x3001;&#x3069;&#x3093;&#x306A;&#x306B;&#x5358;&#x7D14;&#x3067;&#x3042;&#x3063;&#x3066;&#x3082;&#x3001;\n&#x4F55;&#x3089;&#x304B;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B; Node &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var http = require(&apos;http&apos;);\n\nvar server = http.createServer(function (req, res) {\n  // req is an http.IncomingMessage, which is a Readable Stream\n  // res is an http.ServerResponse, which is a Writable Stream\n\n  var body = &apos;&apos;;\n  // we want to get the data as utf8 strings\n  // If you don&apos;t set an encoding, then you&apos;ll get Buffer objects\n  req.setEncoding(&apos;utf8&apos;);\n\n  // Readable streams emit &apos;data&apos; events once a listener is added\n  req.on(&apos;data&apos;, function (chunk) {\n    body += chunk;\n  })\n\n  // the end event tells you that you have entire body\n  req.on(&apos;end&apos;, function () {\n    try {\n      var data = JSON.parse(body);\n    } catch (er) {\n      // uh oh!  bad json!\n      res.statusCode = 400;\n      return res.end(&apos;error: &apos; + er.message);\n    }\n\n    // write back something interesting to the user:\n    res.write(typeof data);\n    res.end();\n  })\n})\n\nserver.listen(1337);\n\n// $ curl localhost:1337 -d &apos;{}&apos;\n// object\n// $ curl localhost:1337 -d &apos;&quot;foo&quot;&apos;\n// string\n// $ curl localhost:1337 -d &apos;not json&apos;\n// error: Unexpected token o</code></pre>\n&quot;,
          &quot;classes&quot;: [
            {
              &quot;textRaw&quot;: &quot;Class: stream.Readable&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Readable&quot;,
              &quot;desc&quot;: &quot;<!--\nThe Readable stream interface is the abstraction for a *source* of\ndata that you are reading from.  In other words, data comes *out* of a\nReadable stream.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x62BD;&#x8C61;&#x7684;&#x306A;\n<em>&#x767A;&#x751F;&#x6E90;</em> &#x3067;&#x3059;&#x3002;&#x8A00;&#x3044;&#x63DB;&#x3048;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089; <em>&#x51FA;&#x3066;</em> &#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nA Readable stream will not start emitting data until you indicate that\nyou are ready to receive it.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B;&#x6E96;&#x5099;&#x304C;&#x3067;&#x304D;&#x305F;&#x3068;&#x6307;&#x793A;&#x3059;&#x308B;&#x307E;&#x3067;&#x306F;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x751F;&#x6210;&#x3092;&#x958B;&#x59CB;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nReadable streams have two \"modes\": a **flowing mode** and a **non-flowing\nmode**.  When in flowing mode, data is read from the underlying system\nand provided to your program as fast as possible.  In non-flowing\nmode, you must explicitly call `stream.read()` to get chunks of data\nout.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x4E8C;&#x3064;&#x306E; &quot;&#x30E2;&#x30FC;&#x30C9;&quot;: <strong>flowing &#x30E2;&#x30FC;&#x30C9;</strong> &#x3068;\n<strong>non-flowing &#x30E2;&#x30FC;&#x30C9;</strong> &#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\nflowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5165;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x3068;&#x3001;\n&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x7D20;&#x65E9;&#x304F;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;&#x5C4A;&#x3051;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\nnon-flowing &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x306F;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3092;&#x53D6;&#x308A;&#x51FA;&#x3059;&#x305F;&#x3081;&#x306B;&#x3001;&#x660E;&#x793A;&#x7684;&#x306B;\n<code>stream.read()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples of readable streams include:\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [http responses, on the client](http.html#http_http_incomingmessage)\n* [http requests, on the server](http.html#http_http_incomingmessage)\n* [fs read streams](fs.html#fs_class_fs_readstream)\n* [zlib streams][]\n* [crypto streams][]\n* [tcp sockets][]\n* [child process stdout and stderr][]\n* [process.stdin][]\n-->\n\n<ul>\n<li><a href="\&quot;http.html#http_http_incomingmessage\&quot;">&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E; http &#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;</a></li>\n<li><a href="\&quot;http.html#http_http_incomingmessage\&quot;">&#x30B5;&#x30FC;&#x30D0;&#x306E; http &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;</a></li>\n<li><a href="\&quot;fs.html#fs_class_fs_readstream\&quot;">fs &#x306E; ReadStream</a></li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li>[child_process &#x306E;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3068;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;][]</li>\n<li>[process.stdin][]</li>\n</ul>\n&quot;,
              &quot;events&quot;: [
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;readable&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;readable&quot;,
                  &quot;desc&quot;: &quot;<!--\nWhen a chunk of data can be read from the stream, it will emit a\n`'readable'` event.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x53EF;&#x80FD;&#x3068;&#x306A;&#x3063;&#x305F;&#x6642;&#x3001;\n<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn some cases, listening for a `'readable'` event will cause some data\nto be read into the internal buffer from the underlying system, if it\nhadn't already.\n-->\n\n<p>&#x3042;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3078;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059; (&#x305D;&#x308C;&#x304C;&#x307E;&#x3060;&#x884C;&#x308F;&#x308C;&#x3066;&#x3044;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;)&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;readable&apos;, function() {\n  // there is some data to read now\n})</code></pre>\n<!--\nOnce the internal buffer is drained, a `readable` event will fire\nagain when more data is available.\n-->\n\n<p>&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x7A7A;&#x306B;&#x306A;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x6642;&#x306B;\n<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x518D;&#x3073;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;data&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} The chunk of data.\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | String} &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3002;</li>\n</ul>\n<!--\nIf you attach a `data` event listener, then it will switch the stream\ninto flowing mode, and data will be passed to your handler as soon as\nit is available.\n-->\n\n<p><code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x8FFD;&#x52A0;&#x3059;&#x308B;&#x3068;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308A;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;&#x3068;&#x3059;&#x3050;&#x306B;&#x3042;&#x306A;&#x305F;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you just want to get all the data out of the stream as fast as\npossible, this is the best way to do so.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x51FA;&#x3066;&#x304F;&#x308B;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3067;&#x304D;&#x308B;&#x3060;&#x3051;&#x7D20;&#x65E9;&#x304F;&#x6B32;&#x3057;&#x3044;&#x306E;&#x306A;&#x3089;&#x3001;\n&#x3053;&#x308C;&#x304C;&#x6700;&#x5584;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n})</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;end&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;end&quot;,
                  &quot;desc&quot;: &quot;<!--\nThis event fires when no more data will be provided.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x3001;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x3082;&#x3046;&#x7121;&#x304F;&#x306A;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that the `end` event **will not fire** unless the data is\ncompletely consumed.  This can be done by switching into flowing mode,\nor by calling `read()` repeatedly until you get to the end.\n-->\n\n<p><code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;&#x306F; <strong>&#x751F;&#x6210;&#x3055;&#x308C;&#x306A;&#x3044;</strong>\n&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;&#x307E;&#x305F;&#x306F;&#x7D42;&#x308F;&#x308A;&#x306B;&#x9054;&#x3059;&#x308B;&#x307E;&#x3067;\n<code>read()</code> &#x3092;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x9054;&#x6210;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n})\nreadable.on(&apos;end&apos;, function() {\n  console.log(&apos;there will be no more data.&apos;);\n});</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;close&quot;,
                  &quot;desc&quot;: &quot;<!--\nEmitted when the underlying resource (for example, the backing file\ndescriptor) has been closed. Not all streams will emit this.\n-->\n\n<p>&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9; (&#x4F8B;&#x3048;&#x3070;&#x80CC;&#x5F8C;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;) &#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x767A;&#x751F;&#x3059;&#x308B;&#x308F;&#x3051;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;error&quot;,
                  &quot;desc&quot;: &quot;<!--\nEmitted if there was an error receiving data.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x53D7;&#x4FE1;&#x3067;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x3042;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
                  &quot;params&quot;: []
                }
              ],
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;readable.read([size])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;read&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `size` {Number} Optional argument to specify how much data to read.\n* Return {String | Buffer | null}\n-->\n\n<ul>\n<li><code>size</code> {Number} &#x3069;&#x308C;&#x3060;&#x3051;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x304B;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x5F15;&#x6570;&#x3002;</li>\n<li>Return {String | Buffer | null}</li>\n</ul>\n<!--\nThe `read()` method pulls some data out of the internal buffer and\nreturns it.  If there is no data available, then it will return\n`null`.\n-->\n\n<p><code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D6;&#x308A;&#x51FA;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7121;&#x3051;&#x308C;&#x3070;&#x3001;<code>null</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you pass in a `size` argument, then it will return that many\nbytes.  If `size` bytes are not available, then it will return `null`.\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;&#x305D;&#x306E;&#x9577;&#x3055; (&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x6570;) &#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>size</code> &#x3067;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x9577;&#x3055;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x63C3;&#x3063;&#x3066;&#x3044;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F; <code>null</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you do not specify a `size` argument, then it will return all the\ndata in the internal buffer.\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x3042;&#x308B;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method should only be called in non-flowing mode.  In\nflowing-mode, this method is called automatically until the internal\nbuffer is drained.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; non-flowing &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x5834;&#x5408;&#x306B;&#x9650;&#x3063;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\nflowing &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x306F;&#x3001;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x7A7A;&#x306B;&#x306A;&#x308B;&#x307E;&#x3067;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;readable&apos;, function() {\n  var chunk;\n  while (null !== (chunk = readable.read())) {\n    console.log(&apos;got %d bytes of data&apos;, chunk.length);\n  }\n});</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;size&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.setEncoding(encoding)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;setEncoding&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `encoding` {String} The encoding to use.\n-->\n\n<ul>\n<li><code>encoding</code> {String} &#x4F7F;&#x7528;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3002;</li>\n</ul>\n<!--\nCall this function to cause the stream to return strings of the\nspecified encoding instead of Buffer objects.  For example, if you do\n`readable.setEncoding('utf8')`, then the output data will be\ninterpreted as UTF-8 data, and returned as strings.  If you do\n`readable.setEncoding('hex')`, then the data will be encoded in\nhexadecimal string format.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; Buffer &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306B;&#x3088;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3059;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;<code>readable.setEncoding(&apos;utf8&apos;)</code> &#x3068;&#x3059;&#x308B;&#x3068;&#x3001;&#x5F97;&#x3089;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x306F;\nUTF-8 &#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3068;&#x3057;&#x3066;&#x89E3;&#x91C8;&#x3055;&#x308C;&#x3001;&#x6587;&#x5B57;&#x5217;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>readable.setEncoding(&apos;hex&apos;)</code> &#x3068;&#x3059;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F; 16 &#x9032;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306E;\n&#x6587;&#x5B57;&#x5217;&#x306B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis properly handles multi-byte characters that would otherwise be\npotentially mangled if you simply pulled the Buffers directly and\ncalled `buf.toString(encoding)` on them.  If you want to read the data\nas strings, always use this method.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Buffer &#x3092;&#x76F4;&#x63A5;&#x53D6;&#x5F97;&#x3057;&#x3066;&#x5358;&#x7D14;&#x306B; <code>buf.toString(encoding)</code>\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x6F5C;&#x5728;&#x7684;&#x306B;&#x3081;&#x3061;&#x3083;&#x304F;&#x3061;&#x3083;&#x306B;&#x306A;&#x308B;&#x306E;&#x3068;&#x306F;&#x7570;&#x306A;&#x308A;&#x3001;\n&#x30DE;&#x30EB;&#x30C1;&#x30D0;&#x30A4;&#x30C8;&#x6587;&#x5B57;&#x3092;&#x6B63;&#x3057;&#x304F;&#x6271;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6587;&#x5B57;&#x5217;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;&#x5E38;&#x306B;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.setEncoding(&apos;utf8&apos;);\nreadable.on(&apos;data&apos;, function(chunk) {\n  assert.equal(typeof chunk, &apos;string&apos;);\n  console.log(&apos;got %d characters of string data&apos;, chunk.length);\n})</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;encoding&quot;
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.resume()&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;resume&quot;,
                  &quot;desc&quot;: &quot;<!--\nThis method will cause the readable stream to resume emitting `data`\nevents.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x3092;\n&#x518D;&#x958B;&#x3059;&#x308B;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method will switch the stream into flowing-mode.  If you do *not*\nwant to consume the data from a stream, but you *do* want to get to\nits `end` event, you can call `readable.resume()` to open the flow of\ndata.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C; <em>&#x306A;&#x304F;</em>&#x3001;&#x3057;&#x304B;&#x3057; <code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x53D7;&#x3051;&#x53D6;&#x308B;&#x5FC5;&#x8981;&#x304C; <em>&#x3042;&#x308B;</em> &#x306A;&#x3089;&#x3001;<code>readable.resume()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30D5;&#x30ED;&#x30FC;&#x3092;\n&#x958B;&#x304F;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.resume();\nreadable.on(&apos;end&apos;, function(chunk) {\n  console.log(&apos;got to the end, but did not read anything&apos;);\n})</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: []
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.pause()&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;pause&quot;,
                  &quot;desc&quot;: &quot;<!--\nThis method will cause a stream in flowing-mode to stop emitting\n`data` events.  Any data that becomes available will remain in the\ninternal buffer.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x3066;&#x3001;\n<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x3092;&#x4E2D;&#x65AD;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x4E2D;&#x306B;&#x6B8B;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method is only relevant in flowing mode.  When called on a\nnon-flowing stream, it will switch into flowing mode, but remain\npaused.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x3060;&#x3051;&#x95A2;&#x9023;&#x3057;&#x307E;&#x3059;&#x3002;\nnon-flowing &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x547C;&#x3070;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308A;&#x3001;\n&#x6B8B;&#x308A;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x4F11;&#x6B62;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n  readable.pause();\n  console.log(&apos;there will be no more data for 1 second&apos;);\n  setTimeout(function() {\n    console.log(&apos;now data will start flowing again&apos;);\n    readable.resume();\n  }, 1000);\n})</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: []
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.pipe(destination, [options])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;pipe&quot;,
                  &quot;* `destination` {[Writable][] Stream} The destination for writing data\n* `options` {Object} Pipe options\n  * `end` {Boolean} End the writer when the reader ends. Default&quot;: &quot;`true`&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`destination` {[Writable][] Stream} &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3002; &quot;,
                          &quot;name&quot;: &quot;destination&quot;,
                          &quot;type&quot;: &quot;[Writable][] Stream&quot;,
                          &quot;desc&quot;: &quot;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3002;&quot;
                        },
                        {
                          &quot;textRaw&quot;: &quot;`options` {Object} &#x30D1;&#x30A4;&#x30D7;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3; &quot;,
                          &quot;options&quot;: [
                            {
                              &quot;textRaw&quot;: &quot;`end` {Boolean} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5143;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true` &quot;,
                              &quot;name&quot;: &quot;end&quot;,
                              &quot;type&quot;: &quot;Boolean&quot;,
                              &quot;desc&quot;: &quot;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5143;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&quot;
                            }
                          ],
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;type&quot;: &quot;Object&quot;,
                          &quot;desc&quot;: &quot;&#x30D1;&#x30A4;&#x30D7;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    },
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;destination&quot;
                        },
                        {
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ],
                  &quot;desc&quot;: &quot;<!--\nThis method pulls all the data out of a readable stream, and writes it\nto the supplied destination, automatically managing the flow so that\nthe destination is not overwhelmed by a fast readable stream.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5F15;&#x304D;&#x51FA;&#x3057;&#x3001;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x884C;&#x304D;&#x5148;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x9AD8;&#x901F;&#x306A; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x3088;&#x3063;&#x3066;&#x51FA;&#x529B;&#x5148;&#x304C;&#x5727;&#x8FEB;&#x3055;&#x308C;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3001;\n&#x81EA;&#x52D5;&#x7684;&#x306B;&#x30D5;&#x30ED;&#x30FC;&#x5236;&#x5FA1;&#x3092;&#x884C;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nMultiple destinations can be piped to safely.\n-->\n\n<p>&#x8907;&#x6570;&#x306E;&#x51FA;&#x529B;&#x5148;&#x3092;&#x5B89;&#x5168;&#x306B;&#x9023;&#x7D50;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nvar writable = fs.createWriteStream(&apos;file.txt&apos;);\n// All the data from readable goes into &apos;file.txt&apos;\nreadable.pipe(writable);</code></pre>\n<!--\nThis function returns the destination stream, so you can set up pipe\nchains like so:\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x51FA;&#x529B;&#x5148;&#x3068;&#x306A;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x30D1;&#x30A4;&#x30D7;&#x306E;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3092;\n&#x7D44;&#x307F;&#x7ACB;&#x3066;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var r = fs.createReadStream(&apos;file.txt&apos;);\nvar z = zlib.createGzip();\nvar w = fs.createWriteStream(&apos;file.txt.gz&apos;);\nr.pipe(z).pipe(w);</code></pre>\n<!--\nFor example, emulating the Unix `cat` command:\n-->\n\n<p>Unix &#x306E; <code>cat</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x30A8;&#x30DF;&#x30E5;&#x30EC;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">process.stdin.pipe(process.stdout);</code></pre>\n<!--\nBy default [`end()`][] is called on the destination when the source stream\nemits `end`, so that `destination` is no longer writable. Pass `{ end:\nfalse }` as `options` to keep the destination stream open.\n-->\n\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x3001;&#x51FA;&#x529B;&#x5148;&#x306E; [<code>end()</code>][] &#x306F;&#x5165;&#x529B;&#x5143;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;\n<code>&apos;end&apos;</code> &#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;<code>destination</code>\n&#x306F;&#x3082;&#x3046;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x3067;&#x306F;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>{end: false }</code> &#x3092; <code>options</code> &#x3068;&#x3057;&#x3066;&#x6E21;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x51FA;&#x529B;&#x5148;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x305F;&#x307E;&#x307E;&#x306B;&#x3057;&#x3066;&#x304A;&#x304F;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis keeps `writer` open so that \"Goodbye\" can be written at the\nend.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; <code>writer</code> &#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x305F;&#x307E;&#x307E;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x6700;&#x5F8C;&#x306B;\n<code>&quot;Goodbye&quot;</code> &#x3068;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">reader.pipe(writer, { end: false });\nreader.on(&apos;end&apos;, function() {\n  writer.end(&apos;Goodbye\\n&apos;);\n});</code></pre>\n<!--\nNote that `process.stderr` and `process.stdout` are never closed until\nthe process exits, regardless of the specified options.\n-->\n\n<p><code>process.stderr</code> &#x304A;&#x3088;&#x3073; <code>process.stdout</code> &#x306F;&#x3001;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x6307;&#x5B9A;&#x306B;&#x95A2;&#x4FC2;&#x306A;&#x304F;&#x3001;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x307E;&#x3067;&#x6C7A;&#x3057;&#x3066;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;readable.unpipe([destination])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;unpipe&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `destination` {[Writable][] Stream} Optional specific stream to unpipe\n-->\n\n<ul>\n<li><code>destination</code> {[Writable][] Stream} &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x89E3;&#x9664;&#x3059;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis method will remove the hooks set up for a previous `pipe()` call.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x4EE5;&#x524D;&#x306E; <code>pipe()</code> &#x547C;&#x3073;&#x51FA;&#x3057;&#x3067;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30C3;&#x30AF;&#x3092;&#x53D6;&#x308A;&#x9664;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the destination is not specified, then all pipes are removed.\n-->\n\n<p><code>destination</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5168;&#x3066;&#x306E;&#x30D1;&#x30A4;&#x30D7;&#x304C;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the destination is specified, but no pipe is set up for it, then\nthis is a no-op.\n-->\n\n<p><code>destination</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x3082;&#x306E;&#x306E;&#x3001;&#x305D;&#x308C;&#x304C;&#x30D1;&#x30A4;&#x30D7;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x3053;&#x308C;&#x306F;&#x4F55;&#x3082;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nvar writable = fs.createWriteStream(&apos;file.txt&apos;);\n// All the data from readable goes into &apos;file.txt&apos;,\n// but only for the first second\nreadable.pipe(writable);\nsetTimeout(function() {\n  console.log(&apos;stop writing to file.txt&apos;);\n  readable.unpipe(writable);\n  console.log(&apos;manually close the file stream&apos;);\n  writable.end();\n}, 1000);</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;destination&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.unshift(chunk)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;unshift&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} Chunk of data to unshift onto the read queue\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | String} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306E;&#x5148;&#x982D;&#x306B;&#x623B;&#x3055;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;</li>\n</ul>\n<!--\nThis is useful in certain cases where a stream is being consumed by a\nparser, which needs to \"un-consume\" some data that it has\noptimistically pulled out of the source, so that the stream can be\npassed on to some other party.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30D1;&#x30FC;&#x30B5;&#x306B;&#x3088;&#x3063;&#x3066;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x306B;&#x304A;&#x3044;&#x3066;&#x6709;&#x7528;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x697D;&#x89B3;&#x7684;&#x306B;&#x53D6;&#x308A;&#x51FA;&#x3057;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x300C;&#x6D88;&#x8CBB;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x300D;&#x3053;&#x3068;&#x306B;&#x3057;&#x3066;&#x3001;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4ED6;&#x306E;&#x3068;&#x3053;&#x308D;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6E21;&#x305B;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x5834;&#x5408;&#x306B;&#x5FC5;&#x8981;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you find that you must often call `stream.unshift(chunk)` in your\nprograms, consider implementing a [Transform][] stream instead.  (See API\nfor Stream Implementors, below.)\n-->\n\n<p><code>stream.unshift(chunk)</code> &#x3092;&#x983B;&#x7E41;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x304F;&#x3066;&#x306F;&#x306A;&#x3089;&#x306A;&#x3044;&#x3068;&#x3057;&#x305F;&#x3089;&#x3001;\n&#x4EE3;&#x308F;&#x308A;&#x306B; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x691C;&#x8A0E;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;\n(&#x5F8C;&#x8FF0;&#x3059;&#x308B; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5B9F;&#x88C5;&#x8005;&#x5411;&#x3051;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Pull off a header delimited by \\n\\n\n// use unshift() if we get too much\n// Call the callback with (error, header, stream)\nvar StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;\nfunction parseHeader(stream, callback) {\n  stream.on(&apos;error&apos;, callback);\n  stream.on(&apos;readable&apos;, onReadable);\n  var decoder = new StringDecoder(&apos;utf8&apos;);\n  var header = &apos;&apos;;\n  function onReadable() {\n    var chunk;\n    while (null !== (chunk = stream.read())) {\n      var str = decoder.write(chunk);\n      if (str.match(/\\n\\n/)) {\n        // found the header boundary\n        var split = str.split(/\\n\\n/);\n        header += split.shift();\n        var remaining = split.join(&apos;\\n\\n&apos;);\n        var buf = new Buffer(remaining, &apos;utf8&apos;);\n        if (buf.length)\n          stream.unshift(buf);\n        stream.removeListener(&apos;error&apos;, callback);\n        stream.removeListener(&apos;readable&apos;, onReadable);\n        // now the body of the message can be read from the stream.\n        callback(null, header, stream);\n      } else {\n        // still reading the header.\n        header += str;\n      }\n    }\n  }\n}</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.wrap(stream)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;wrap&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `stream` {Stream} An \"old style\" readable stream\n-->\n\n<ul>\n<li><code>stream</code> {Stream} &#x300C;&#x53E4;&#x3044;&#x30B9;&#x30BF;&#x30A4;&#x30EB;&#x300D;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nVersions of Node prior to v0.10 had streams that did not implement the\nentire Streams API as it is today.  (See \"Compatibility\" below for\nmore information.)\n-->\n\n<p>v0.10 &#x3088;&#x308A;&#x524D;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E; Node &#x306B;&#x306F;&#x3001;&#x4ECA;&#x65E5;&#x306E;&#x5168;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0; API &#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x3044;&#x306A;&#x3044;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x3042;&#x308A;&#x307E;&#x3057;&#x305F; (&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F;&#x5F8C;&#x8FF0;&#x3059;&#x308B;&#x300C;[&#x4E92;&#x63DB;&#x6027;][]&#x300D;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<!--\nIf you are using an older Node library that emits `'data'` events and\nhas a `pause()` method that is advisory only, then you can use the\n`wrap()` method to create a [Readable][] stream that uses the old stream\nas its data source.\n-->\n\n<p>&#x3082;&#x3057;&#x3001;<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x3001;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x3060;&#x3051;&#x3092;&#x884C;&#x3046; <code>pause()</code>\n&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x6301;&#x3064;&#x3001;&#x53E4;&#x3044; Node &#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x308B;&#x306A;&#x3089;&#x3001;\n<code>wrap()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x53E4;&#x3044;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x30C7;&#x30FC;&#x30BF;&#x30BD;&#x30FC;&#x30B9;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x7528;&#x3059;&#x308B;\n[Readable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nYou will very rarely ever need to call this function, but it exists\nas a convenience for interacting with old Node programs and libraries.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x306F;&#x6EC5;&#x591A;&#x306B;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;&#x3053;&#x308C;&#x306F;&#x53E4;&#x3044; Node\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x53CA;&#x3073;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3068;&#x76F8;&#x4E92;&#x4F5C;&#x7528;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x5229;&#x4FBF;&#x6027;&#x306E;&#x305F;&#x3081;&#x306B;&#x5B58;&#x5728;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var OldReader = require(&apos;./old-api-module.js&apos;).OldReader;\nvar oreader = new OldReader;\nvar Readable = require(&apos;stream&apos;).Readable;\nvar myReader = new Readable().wrap(oreader);\n\nmyReader.on(&apos;readable&apos;, function() {\n  myReader.read(); // etc.\n});</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;stream&quot;
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.Writable&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Writable&quot;,
              &quot;desc&quot;: &quot;<!--\nThe Writable stream interface is an abstraction for a *destination*\nthat you are writing data *to*.\n-->\n\n<p>Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x62BD;&#x8C61;&#x7684;&#x306A;\n<em>&#x884C;&#x304D;&#x5148;</em> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples of writable streams include:\n-->\n\n<p>Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [http requests, on the client](http.html#http_class_http_clientrequest)\n* [http responses, on the server](http.html#http_class_http_serverresponse)\n* [fs write streams](fs.html#fs_class_fs_writestream)\n* [zlib streams][]\n* [crypto streams][]\n* [tcp sockets][]\n* [child process stdin](child_process.html#child_process_child_stdin)\n* [process.stdout][], [process.stderr][]\n-->\n\n<ul>\n<li><a href="\&quot;http.html#http_class_http_clientrequest\&quot;">&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E; http &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;</a></li>\n<li><a href="\&quot;http.html#http_class_http_serverresponse\&quot;">&#x30B5;&#x30FC;&#x30D0;&#x306E; http &#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;</a></li>\n<li><a href="\&quot;fs.html#fs_class_fs_writestream\&quot;">fs &#x306E; WriteStream</a></li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li><a href="\&quot;child_process.html#child_process_child_stdin\&quot;">child_process &#x306E;&#x6A19;&#x6E96;&#x5165;&#x529B;</a></li>\n<li>[process.stdout][], [process.stderr][]</li>\n</ul>\n&quot;,
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;writable.write(chunk, [encoding], [callback])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;write&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {String | Buffer} The data to write\n* `encoding` {String} The encoding, if `chunk` is a String\n* `callback` {Function} Callback for when this chunk of data is flushed\n* Returns: {Boolean} True if the data was handled completely.\n-->\n\n<ul>\n<li><code>chunk</code> {String | Buffer} &#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;</li>\n<li><code>encoding</code> {String} &#x3082;&#x3057; <code>chunk</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;</li>\n<li><code>callback</code> {Function} &#x30C7;&#x30FC;&#x30BF;&#x304C;&#x6383;&#x304D;&#x51FA;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;</li>\n<li>Returns: {Boolean} &#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x51E6;&#x7406;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F; <code>true</code>&#x3002;</li>\n</ul>\n<!--\nThis method writes some data to the underlying system, and calls the\nsupplied callback once the data has been fully handled.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x51E6;&#x7406;&#x3055;&#x308C;&#x308B;&#x3068;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x4E00;&#x5EA6;&#x3060;&#x3051;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe return value indicates if you should continue writing right now.\nIf the data had to be buffered internally, then it will return\n`false`.  Otherwise, it will return `true`.\n-->\n\n<p>&#x623B;&#x308A;&#x5024;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3092;&#x3059;&#x3050;&#x306B;&#x7D9A;&#x3051;&#x3066;&#x3044;&#x3044;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5185;&#x90E8;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x306A;&#x3089; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070; <code>true</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis return value is strictly advisory.  You MAY continue to write,\neven if it returns `false`.  However, writes will be buffered in\nmemory, so it is best not to do this excessively.  Instead, wait for\nthe `drain` event before writing more data.\n-->\n\n<p>&#x3053;&#x306E;&#x623B;&#x308A;&#x5024;&#x306F;&#x5B8C;&#x5168;&#x306B;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x7684;&#x3067;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x3053;&#x308C;&#x304C; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x3066;&#x3082;&#x3001;&#x3042;&#x306A;&#x305F;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3092;&#x7D9A;&#x3051;&#x308B;&#x3053;&#x3068;&#x304C;&#x300C;&#x3067;&#x304D;&#x307E;&#x3059;&#x300D;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x30E1;&#x30E2;&#x30EA;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;&#x3001;\n&#x3053;&#x308C;&#x3092;&#x904E;&#x5270;&#x306B;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x304C;&#x6700;&#x5584;&#x3067;&#x3059;&#x3002;\n&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304F;&#x524D;&#x306B; <code>&apos;drain&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x5F85;&#x6A5F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;
                        },
                        {
                          &quot;name&quot;: &quot;encoding&quot;,
                          &quot;optional&quot;: true
                        },
                        {
                          &quot;name&quot;: &quot;callback&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;writable.end([chunk], [encoding], [callback])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;end&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {String | Buffer} Optional data to write\n* `encoding` {String} The encoding, if `chunk` is a String\n* `callback` {Function} Optional callback for when the stream is finished\n-->\n\n<ul>\n<li><code>chunk</code> {String | Buffer} &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;</li>\n<li><code>encoding</code> {String} &#x3082;&#x3057; <code>chunk</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;</li>\n<li><code>callback</code> {Function} &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x7D42;&#x4E86;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3001;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;</li>\n</ul>\n<!--\nCall this method when no more data will be written to the stream.  If\nsupplied, the callback is attached as a listener on the `finish` event.\n-->\n\n<p>&#x3053;&#x308C;&#x4EE5;&#x4E0A;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x306A;&#x3044;&#x5834;&#x5408;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x305D;&#x308C;&#x306F; <code>&apos;finish&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;\n&#x30A2;&#x30BF;&#x30C3;&#x30C1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCalling [`write()`][] after calling [`end()`][] will raise an error.\n-->\n\n<p>[<code>end()</code>][] &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x5F8C;&#x3067; [<code>write()</code>][] &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// write &apos;hello, &apos; and then end with &apos;world!&apos;\nhttp.createServer(function (req, res) {\n  res.write(&apos;hello, &apos;);\n  res.end(&apos;world!&apos;);\n  // writing more now is not allowed!\n});</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;,
                          &quot;optional&quot;: true
                        },
                        {
                          &quot;name&quot;: &quot;encoding&quot;,
                          &quot;optional&quot;: true
                        },
                        {
                          &quot;name&quot;: &quot;callback&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                }
              ],
              &quot;events&quot;: [
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;drain&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;drain&quot;,
                  &quot;desc&quot;: &quot;<!--\nIf a [`writable.write(chunk)`][] call returns false, then the `drain`\nevent will indicate when it is appropriate to begin writing more data\nto the stream.\n-->\n\n<p>[<code>write(chunk, encoding, callback)</code>][] &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x304C; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3044;&#x3064;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x59CB;&#x3081;&#x308B;&#x306E;&#x304C;&#x9069;&#x5207;&#x304B;&#x3092;\n<code>&apos;drain&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Write the data to the supplied writable stream 1MM times.\n// Be attentive to back-pressure.\nfunction writeOneMillionTimes(writer, data, encoding, callback) {\n  var i = 1000000;\n  write();\n  function write() {\n    var ok = true;\n    do {\n      i -= 1;\n      if (i === 0) {\n        // last time!\n        writer.write(data, encoding, callback);\n      } else {\n        // see if we should continue, or wait\n        // don&apos;t pass the callback, because we&apos;re not done yet.\n        ok = writer.write(data, encoding);\n      }\n    } while (i &gt; 0 &amp;&amp; ok);\n    if (i &gt; 0) {\n      // had to stop early!\n      // write some more once it drains\n      writer.once(&apos;drain&apos;, write);\n    }\n  }\n}</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;finish&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;finish&quot;,
                  &quot;desc&quot;: &quot;<!--\nWhen the [`end()`][] method has been called, and all data has been flushed\nto the underlying system, this event is emitted.\n-->\n\n<p>[<code>end()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3001;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;\n&#x6383;&#x304D;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nfor (var i = 0; i &lt; 100; i ++) {\n  writer.write(&apos;hello, #&apos; + i + &apos;!\\n&apos;);\n}\nwriter.end(&apos;this is the end\\n&apos;);\nwriter.on(&apos;finish&apos;, function() {\n  console.error(&apos;all writes are now complete.&apos;);\n});</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;pipe&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;pipe&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `src` {[Readable][] Stream} source stream that is piping to this writable\n-->\n\n<ul>\n<li><code>src</code> {[Readable][] Stream} &#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x3064;&#x306A;&#x304C;&#x308C;&#x305F;\n&#x5165;&#x529B;&#x5143;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis is emitted whenever the `pipe()` method is called on a readable\nstream, adding this writable to its set of destinations.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E; <code>pipe()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3001;\n&#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x51FA;&#x529B;&#x5148;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nvar reader = getReadableStreamSomehow();\nwriter.on(&apos;pipe&apos;, function(src) {\n  console.error(&apos;something is piping into the writer&apos;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;unpipe&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;unpipe&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `src` {[Readable][] Stream} The source stream that [unpiped][] this writable\n-->\n\n<ul>\n<li><code>src</code> {[Readable][] Stream} &#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;[&#x5207;&#x308A;&#x96E2;&#x3055;&#x308C;&#x305F;][]\n&#x5165;&#x529B;&#x5143;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis is emitted whenever the [`unpipe()`][] method is called on a\nreadable stream, removing this writable from its set of destinations.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067; [<code>unpipe()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3001;\n&#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x51FA;&#x529B;&#x5148;&#x304B;&#x3089;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nvar reader = getReadableStreamSomehow();\nwriter.on(&apos;unpipe&apos;, function(src) {\n  console.error(&apos;something has stopped piping into the writer&apos;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\nreader.unpipe(writer);</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;error&quot;,
                  &quot;desc&quot;: &quot;<!--\nEmitted if there was an error when writing or piping data.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x4E2D;&#x307E;&#x305F;&#x306F;&#x30D1;&#x30A4;&#x30D7;&#x4E2D;&#x306B;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.Duplex&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Duplex&quot;,
              &quot;desc&quot;: &quot;<!--\nDuplex streams are streams that implement both the [Readable][] and\n[Writable][] interfaces.  See above for usage.\n-->\n\n<p>Duplex &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; [Readable][] &#x3068; [Writable][] &#x4E21;&#x65B9;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;\n&#x5B9F;&#x88C5;&#x3057;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;&#x4F7F;&#x3044;&#x65B9;&#x306F;&#x4E0A;&#x8A18;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExamples of Duplex streams include:\n-->\n\n<p>Duplex &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [tcp sockets][]\n* [zlib streams][]\n* [crypto streams][]\n-->\n\n<ul>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n</ul>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.Transform&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Transform&quot;,
              &quot;desc&quot;: &quot;<!--\nTransform streams are [Duplex][] streams where the output is in some way\ncomputed from the input.  They implement both the [Readable][] and\n[Writable][] interfaces.  See above for usage.\n-->\n\n<p>Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x5165;&#x529B;&#x304B;&#x3089;&#x4F55;&#x3089;&#x304B;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x51FA;&#x529B;&#x304C;&#x8A08;&#x7B97;&#x3055;&#x308C;&#x308B; [Duplex][]\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306F; [Readable][] &#x3068; [Writable][] &#x4E21;&#x65B9;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F7F;&#x3044;&#x65B9;&#x306F;&#x4E0A;&#x8A18;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExamples of Transform streams include:\n-->\n\n<p>Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [zlib streams][]\n* [crypto streams][]\n-->\n\n<ul>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n</ul>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;API for Stream Implementors&quot;,
          &quot;name&quot;: &quot;API for Stream Implementors&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nTo implement any sort of stream, the pattern is the same:\n-->\n\n<p>&#x3069;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x5834;&#x5408;&#x3067;&#x3082;&#x3001;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x306F;&#x540C;&#x3058;&#x3067;&#x3059;:\n\n</p>\n<!--\n1. Extend the appropriate parent class in your own subclass.  (The\n   [`util.inherits`][] method is particularly helpful for this.)\n2. Call the appropriate parent class constructor in your constructor,\n   to be sure that the internal mechanisms are set up properly.\n2. Implement one or more specific methods, as detailed below.\n-->\n\n<ol>\n<li>&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x89AA;&#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3057;&#x3066;&#x3001;&#x72EC;&#x81EA;&#x306E;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;\n(&#x7279;&#x306B; [<code>util.inherits</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x305D;&#x306E;&#x305F;&#x3081;&#x306B;&#x5F79;&#x7ACB;&#x3061;&#x307E;&#x3059;)&#x3002;</li>\n<li>&#x5185;&#x90E8;&#x306E;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x304C;&#x304D;&#x3061;&#x3093;&#x3068;&#x30BB;&#x30C3;&#x30C8;&#x30A2;&#x30C3;&#x30D7;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x78BA;&#x5B9F;&#x306B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;\n&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x306E;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306E;&#x4E2D;&#x304B;&#x3089;&#x89AA;&#x30AF;&#x30E9;&#x30B9;&#x306E;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3002;</li>\n<li>&#x4EE5;&#x4E0B;&#x3067;&#x8A73;&#x8FF0;&#x3055;&#x308C;&#x308B;&#x3001;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x7279;&#x5225;&#x306A;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3002;</li>\n</ol>\n<!--\nThe class to extend and the method(s) to implement depend on the sort\nof stream class you are writing:\n-->\n\n<p>&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3068;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x66F8;&#x3053;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x7A2E;&#x985E;&#x306B;\n&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n<table>\n  <thead>\n    <tr>\n      <th>\n        <p>Use-case</p>\n      </th>\n      <th>\n        <p>Class</p>\n      </th>\n      <th>\n        <p>Method(s) to implement</p>\n      </th>\n    </tr>\n  </thead>\n  <tr>\n    <td>\n      <p>Reading only</p>\n    </td>\n    <td>\n      <p>[Readable](#stream_class_stream_readable_1)</p>\n    </td>\n    <td>\n      <p><code>[_read][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Writing only</p>\n    </td>\n    <td>\n      <p>[Writable](#stream_class_stream_writable_1)</p>\n    </td>\n    <td>\n      <p><code>[_write][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Reading and writing</p>\n    </td>\n    <td>\n      <p>[Duplex](#stream_class_stream_duplex_1)</p>\n    </td>\n    <td>\n      <p><code>[_read][]</code>, <code>[_write][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Operate on written data, then read the result</p>\n    </td>\n    <td>\n      <p>[Transform](#stream_class_stream_transform_1)</p>\n    </td>\n    <td>\n      <p><code>_transform</code>, <code>_flush</code></p>\n    </td>\n  </tr>\n</table>\n-->\n\n<table>\n  <thead>\n    <tr>\n      <th>\n        <p>&#x30E6;&#x30FC;&#x30B9;&#x30B1;&#x30FC;&#x30B9;</p>\n      </th>\n      <th>\n        <p>&#x30AF;&#x30E9;&#x30B9;</p>\n      </th>\n      <th>\n        <p>&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x30E1;&#x30BD;&#x30C3;&#x30C9;</p>\n      </th>\n    </tr>\n  </thead>\n  <tr>\n    <td>\n      <p>&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x306E;&#x307F;</p>\n    </td>\n    <td>\n      <p><a href="\&quot;#stream_class_stream_readable_1\&quot;">Readable</a></p>\n    </td>\n    <td>\n      <p><code>[_read][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306E;&#x307F;</p>\n    </td>\n    <td>\n      <p><a href="\&quot;#stream_class_stream_writable_1\&quot;">Writable</a></p>\n    </td>\n    <td>\n      <p><code>[_write][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;</p>\n    </td>\n    <td>\n      <p><a href="\&quot;#stream_class_stream_duplex_1\&quot;">Duplex</a></p>\n    </td>\n    <td>\n      <p><code>[_read][]</code>, <code>[_write][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5909;&#x63DB;&#x3057;&#x3001;&#x305D;&#x306E;&#x7D50;&#x679C;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;</p>\n    </td>\n    <td>\n      <p><a href="\&quot;#stream_class_stream_transform_1\&quot;">Transform</a></p>\n    </td>\n    <td>\n      <p><code>[_transform][]</code>, <code>[_flush][]</code></p>\n    </td>\n  </tr>\n</table>\n\n<!--\nIn your implementation code, it is very important to never call the\nmethods described in [API for Stream Consumers][] above.  Otherwise, you\ncan potentially cause adverse side effects in programs that consume\nyour streaming interfaces.\n-->\n\n<p>&#x3042;&#x306A;&#x305F;&#x306E;&#x5B9F;&#x88C5;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x4E2D;&#x3067;&#x306F;&#x3001;&#x6C7A;&#x3057;&#x3066; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5229;&#x7528;&#x8005;&#x306E;&#x305F;&#x3081;&#x306E; API][]\n&#x3067;&#x8AAC;&#x660E;&#x3055;&#x308C;&#x305F;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3044;&#x3053;&#x3068;&#x304C;&#x3068;&#x3066;&#x3082;&#x91CD;&#x8981;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30DF;&#x30F3;&#x30B0;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;\n&#x6709;&#x5BB3;&#x306A;&#x526F;&#x4F5C;&#x7528;&#x3092;&#x5F15;&#x304D;&#x8D77;&#x3053;&#x3059;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x5F97;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;examples&quot;: [
            {
              &quot;textRaw&quot;: &quot;Class: stream.Readable&quot;,
              &quot;type&quot;: &quot;example&quot;,
              &quot;name&quot;: &quot;stream.Readable&quot;,
              &quot;desc&quot;: &quot;<!--\n`stream.Readable` is an abstract class designed to be extended with an\nunderlying implementation of the [`_read(size)`][] method.\n-->\n\n<p><code>stream.Readable</code> &#x306F;&#x62BD;&#x8C61;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x3057;&#x3066; [<code>_read(size)</code>][]\n&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x62E1;&#x5F35;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nPlease see above under [API for Stream Consumers][] for how to consume\nstreams in your programs.  What follows is an explanation of how to\nimplement Readable streams in your programs.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F;&#x3001;\n&#x524D;&#x8FF0;&#x306E; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5229;&#x7528;&#x8005;&#x306E;&#x305F;&#x3081;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x306E;&#x5F8C;&#x306B;&#x7D9A;&#x304F;&#x306E;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306E;&#x8AAC;&#x660E;&#x3067;&#x3059;&#x3002;\n\n</p>\n<h4>Example: A Counting Stream</h4>\n<!--\nThis is a basic example of a Readable stream.  It emits the numerals\nfrom 1 to 1,000,000 in ascending order, and then ends.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x57FA;&#x672C;&#x7684;&#x306A;&#x4F8B;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; 1 &#x304B;&#x3089; 1,000,000 &#x307E;&#x3067;&#x306E;&#x6570;&#x3092;&#x6607;&#x9806;&#x3067;&#x751F;&#x6210;&#x3057;&#x3001;&#x305D;&#x3057;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var Readable = require(&apos;stream&apos;).Readable;\nvar util = require(&apos;util&apos;);\nutil.inherits(Counter, Readable);\n\nfunction Counter(opt) {\n  Readable.call(this, opt);\n  this._max = 1000000;\n  this._index = 1;\n}\n\nCounter.prototype._read = function() {\n  var i = this._index++;\n  if (i &gt; this._max)\n    this.push(null);\n  else {\n    var str = &apos;&apos; + i;\n    var buf = new Buffer(str, &apos;ascii&apos;);\n    this.push(buf);\n  }\n};</code></pre>\n<h4>Example: SimpleProtocol v1 (Sub-optimal)</h4>\n<!--\nThis is similar to the `parseHeader` function described above, but\nimplemented as a custom stream.  Also, note that this implementation\ndoes not convert the incoming data to a string.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x524D;&#x306B;&#x8AAC;&#x660E;&#x3057;&#x305F; <code>parseHeader</code> &#x95A2;&#x6570;&#x3068;&#x3088;&#x304F;&#x4F3C;&#x3066;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x72EC;&#x81EA;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x307E;&#x305F;&#x3001;&#x3053;&#x306E;&#x5B9F;&#x88C5;&#x306F;&#x5165;&#x3063;&#x3066;&#x304F;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6587;&#x5B57;&#x5217;&#x306B;&#x5909;&#x63DB;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nHowever, this would be better implemented as a [Transform][] stream.  See\nbelow for a better implementation.\n-->\n\n<p>&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3053;&#x308C;&#x306F; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3067;&#x3088;&#x308A;&#x3046;&#x307E;&#x304F;&#x5B9F;&#x88C5;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x5F8C;&#x8FF0;&#x306E;&#x3088;&#x308A;&#x3088;&#x3044;&#x5B9F;&#x88C5;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// A parser for a simple data protocol.\n// The &quot;header&quot; is a JSON object, followed by 2 \\n characters, and\n// then a message body.\n//\n// NOTE: This can be done more simply as a Transform stream!\n// Using Readable directly for this is sub-optimal.  See the\n// alternative example below under the Transform section.\n\nvar Readable = require(&apos;stream&apos;).Readable;\nvar util = require(&apos;util&apos;);\n\nutil.inherits(SimpleProtocol, Readable);\n\nfunction SimpleProtocol(source, options) {\n  if (!(this instanceof SimpleProtocol))\n    return new SimpleProtocol(source, options);\n\n  Readable.call(this, options);\n  this._inBody = false;\n  this._sawFirstCr = false;\n\n  // source is a readable stream, such as a socket or file\n  this._source = source;\n\n  var self = this;\n  source.on(&apos;end&apos;, function() {\n    self.push(null);\n  });\n\n  // give it a kick whenever the source is readable\n  // read(0) will not consume any bytes\n  source.on(&apos;readable&apos;, function() {\n    self.read(0);\n  });\n\n  this._rawHeader = [];\n  this.header = null;\n}\n\nSimpleProtocol.prototype._read = function(n) {\n  if (!this._inBody) {\n    var chunk = this._source.read();\n\n    // if the source doesn&apos;t have data, we don&apos;t have data yet.\n    if (chunk === null)\n      return this.push(&apos;&apos;);\n\n    // check if the chunk has a \\n\\n\n    var split = -1;\n    for (var i = 0; i &lt; chunk.length; i++) {\n      if (chunk[i] === 10) { // &apos;\\n&apos;\n        if (this._sawFirstCr) {\n          split = i;\n          break;\n        } else {\n          this._sawFirstCr = true;\n        }\n      } else {\n        this._sawFirstCr = false;\n      }\n    }\n\n    if (split === -1) {\n      // still waiting for the \\n\\n\n      // stash the chunk, and try again.\n      this._rawHeader.push(chunk);\n      this.push(&apos;&apos;);\n    } else {\n      this._inBody = true;\n      var h = chunk.slice(0, split);\n      this._rawHeader.push(h);\n      var header = Buffer.concat(this._rawHeader).toString();\n      try {\n        this.header = JSON.parse(header);\n      } catch (er) {\n        this.emit(&apos;error&apos;, new Error(&apos;invalid simple protocol data&apos;));\n        return;\n      }\n      // now, because we got some extra data, unshift the rest\n      // back into the read queue so that our consumer will see it.\n      var b = chunk.slice(split);\n      this.unshift(b);\n\n      // and let them know that we are done parsing the header.\n      this.emit(&apos;header&apos;, this.header);\n    }\n  } else {\n    // from there on, just provide the data to our consumer.\n    // careful not to push(null), since that would indicate EOF.\n    var chunk = this._source.read();\n    if (chunk) this.push(chunk);\n  }\n};\n\n// Usage:\n// var parser = new SimpleProtocol(source);\n// Now parser is a readable stream that will emit &apos;header&apos;\n// with the parsed header data.</code></pre>\n&quot;,
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;new stream.Readable([options])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;Readable&quot;,
                  &quot;* `options` {Object}\n  * `highWaterMark` {Number} The maximum number of bytes to store in\n    the internal buffer before ceasing to read from the underlying\n    resource.  Default&quot;: &quot;16kb\n  * `encoding` {String} If specified, then buffers will be decoded to\n    strings using the specified encoding.  Default=null\n  * `objectMode` {Boolean} Whether this stream should behave\n    as a stream of objects. Meaning that stream.read(n) returns\n    a single value instead of a Buffer of size n.  Default=false&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`options` {Object} (&#x4EFB;&#x610F;) &quot;,
                          &quot;options&quot;: [
                            {
                              &quot;textRaw&quot;: &quot;`highWaterMark` {Number} &#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x306E;&#x3092;&#x4E2D;&#x65AD;&#x3059;&#x308B;&#x307E;&#x3067; &#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x8CAF;&#x3081;&#x3066;&#x304A;&#x304F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x306E;&#x6700;&#x5927;&#x5024;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002; &quot;,
                              &quot;name&quot;: &quot;highWaterMark&quot;,
                              &quot;type&quot;: &quot;Number&quot;,
                              &quot;desc&quot;: &quot;&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x306E;&#x3092;&#x4E2D;&#x65AD;&#x3059;&#x308B;&#x307E;&#x3067; &#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x8CAF;&#x3081;&#x3066;&#x304A;&#x304F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x306E;&#x6700;&#x5927;&#x5024;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002;&quot;
                            },
                            {
                              &quot;textRaw&quot;: &quot;`encoding` {String} &#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306F;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067; &#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `null`&#x3002; &quot;,
                              &quot;name&quot;: &quot;encoding&quot;,
                              &quot;type&quot;: &quot;String&quot;,
                              &quot;desc&quot;: &quot;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306F;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067; &#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `null`&#x3002;&quot;
                            },
                            {
                              &quot;textRaw&quot;: &quot;`objectMode` {Boolean} &#x3053;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066; &#x632F;&#x308B;&#x821E;&#x3046;&#x3079;&#x304D;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x3053;&#x308C;&#x306F; `stream.read(n)` &#x304C;&#x30B5;&#x30A4;&#x30BA; n &#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x306F;&#x306A;&#x304F; &#x4E00;&#x3064;&#x306E;&#x5024;&#x3092;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false` &#x3067;&#x3059;&#x3002; &quot;,
                              &quot;name&quot;: &quot;objectMode&quot;,
                              &quot;type&quot;: &quot;Boolean&quot;,
                              &quot;desc&quot;: &quot;&#x3053;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066; &#x632F;&#x308B;&#x821E;&#x3046;&#x3079;&#x304D;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x3053;&#x308C;&#x306F; `stream.read(n)` &#x304C;&#x30B5;&#x30A4;&#x30BA; n &#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x306F;&#x306A;&#x304F; &#x4E00;&#x3064;&#x306E;&#x5024;&#x3092;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false` &#x3067;&#x3059;&#x3002;&quot;
                            }
                          ],
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;type&quot;: &quot;Object&quot;,
                          &quot;desc&quot;: &quot;(&#x4EFB;&#x610F;)&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    },
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ],
                  &quot;desc&quot;: &quot;<!--\nIn classes that extend the Readable class, make sure to call the\nReadable constructor so that the buffering settings can be properly\ninitialized.\n-->\n\n<p><code>Readable</code> &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x78BA;&#x5B9F;&#x306B;\n&#x521D;&#x671F;&#x5316;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;&#x5FC5;&#x305A;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;readable.\\_read(size)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;\\_read&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `size` {Number} Number of bytes to read asynchronously\n-->\n\n<ul>\n<li><code>size</code> {Number} &#x975E;&#x540C;&#x671F;&#x306B;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x30D0;&#x30A4;&#x30C8;&#x6570;</li>\n</ul>\n<!--\nNote: **Implement this function, but do NOT call it directly.**\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3001;&#x3057;&#x304B;&#x3057;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</strong>\n\n</p>\n<!--\nThis function should NOT be called directly.  It should be implemented\nby child classes, and only called by the internal Readable class\nmethods.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3042;&#x308A;&#x3001;Readable &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x304B;&#x3089;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nAll Readable stream implementations must provide a `_read` method to\nfetch data from the underlying resource.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x53D6;&#x5F97;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B; <code>_read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThis method is prefixed with an underscore because it is internal to\nthe class that defines it, and should not be called directly by user\nprograms.  However, you **are** expected to override this method in\nyour own extension classes.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3053;&#x308C;&#x3092;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x5185;&#x90E8;&#x306E;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304B;&#x3089;\n&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;&#x306E;&#x63A5;&#x982D;&#x8F9E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x62E1;&#x5F35;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n<strong>&#x6C42;&#x3081;&#x3089;&#x308C;&#x3066;</strong>&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nWhen data is available, put it into the read queue by calling\n`readable.push(chunk)`.  If `push` returns false, then you should stop\nreading.  When `_read` is called again, you should start pushing more\ndata.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308C;&#x3070;&#x3001;<code>readable.push(chunk)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x3067;\n&#x305D;&#x308C;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>push()</code> &#x304C; false &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3092;&#x6B62;&#x3081;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n<code>_read()</code> &#x304C;&#x518D;&#x3073;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x6642;&#x304C;&#x3001;&#x3055;&#x3089;&#x306B;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FFD;&#x52A0;&#x3092;&#x958B;&#x59CB;&#x3059;&#x3079;&#x304D;&#x6642;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `size` argument is advisory.  Implementations where a \"read\" is a\nsingle call that returns data can use this to know how much data to\nfetch.  Implementations where that is not relevant, such as TCP or\nTLS, may ignore this argument, and simply provide data whenever it\nbecomes available.  There is no need, for example to \"wait\" until\n`size` bytes are available before calling [`stream.push(chunk)`][].\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x306F;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x7684;&#x3067;&#x3059;&#x3002;\n&quot;read()&quot; &#x304C;&#x4E00;&#x56DE;&#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3067;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FD4;&#x3059;&#x5B9F;&#x88C5;&#x3067;&#x306F;&#x3001;\n&#x3069;&#x308C;&#x3060;&#x3051;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D6;&#x5F97;&#x3059;&#x3079;&#x304D;&#x304B;&#x77E5;&#x308B;&#x305F;&#x3081;&#x306B;&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\nTCP&#x3084;TLS&#x306A;&#x3069;&#x3001;&#x305D;&#x308C;&#x306B;&#x95A2;&#x9023;&#x3057;&#x306A;&#x3044;&#x5B9F;&#x88C5;&#x3067;&#x306F;&#x3053;&#x306E;&#x5F15;&#x6570;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x3001;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306B;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070; [<code>stream.push(chunk)</code>][] &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3088;&#x308A;&#x524D;&#x306B;&#x3001;\n<code>size</code> &#x30D0;&#x30A4;&#x30C8;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;&#x307E;&#x3067;&#x300C;&#x5F85;&#x3064;&#x300D;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;size&quot;
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.push(chunk, [encoding])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;push&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | null | String} Chunk of data to push into the read queue\n* `encoding` {String} Encoding of String chunks.  Must be a valid\n  Buffer encoding, such as `'utf8'` or `'ascii'`\n* return {Boolean} Whether or not more pushes should be performed\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | null | String} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x30D7;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x308B;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;</li>\n<li><code>encoding</code> {String} &#x6587;&#x5B57;&#x5217;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3002;\n<code>&apos;utf8&apos;</code> &#x3084; <code>&apos;ascii&apos;</code> &#x306A;&#x3069;&#x3001;Buffer &#x306E;&#x6B63;&#x3057;&#x3044;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306E;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n<li>return {Boolean} &#x3055;&#x3089;&#x306B;&#x30D7;&#x30C3;&#x30B7;&#x30E5;&#x3057;&#x3066;&#x3082;&#x3044;&#x3044;&#x304B;&#x3069;&#x3046;&#x304B;</li>\n</ul>\n<!--\nNote: **This function should be called by Readable implementors, NOT\nby consumers of Readable streams.**\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; Readable &#x306E;&#x5B9F;&#x88C5;&#x304B;&#x3089;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;\nReadable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5229;&#x7528;&#x8005;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n\n</p>\n<!--\nThe `_read()` function will not be called again until at least one\n`push(chunk)` call is made.\n-->\n\n<p>&#x5C11;&#x306A;&#x304F;&#x3068;&#x3082;&#x4E00;&#x56DE;&#x306F; <code>push(chunk)</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x306A;&#x3044;&#x3068;&#x3001;<code>_read()</code> &#x95A2;&#x6570;&#x304C;\n&#x518D;&#x3073;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThe `Readable` class works by putting data into a read queue to be\npulled out later by calling the `read()` method when the `'readable'`\nevent fires.\n-->\n\n<p><code>Readable</code> &#x30AF;&#x30E9;&#x30B9;&#x306F;&#x3001;<code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3067;\n&#x5F8C;&#x304B;&#x3089;&#x53D6;&#x308A;&#x51FA;&#x3055;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3001;<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x6642;&#x306B;\n&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x5165;&#x308C;&#x3066;&#x304A;&#x304F;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x6A5F;&#x80FD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `push()` method will explicitly insert some data into the read\nqueue.  If it is called with `null` then it will signal the end of the\ndata (EOF).\n-->\n\n<p><code>push()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x660E;&#x793A;&#x7684;&#x306B;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x633F;&#x5165;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>null</code> &#x3068;&#x5171;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F; (EOF) &#x3053;&#x3068;&#x3092;&#x4F1D;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis API is designed to be as flexible as possible.  For example,\nyou may be wrapping a lower-level source which has some sort of\npause/resume mechanism, and a data callback.  In those cases, you\ncould wrap the low-level source object by doing something like this:\n-->\n\n<p>&#x3053;&#x306E; API &#x306F;&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x67D4;&#x8EDF;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;&#x3042;&#x308B;&#x7A2E;&#x306E;&#x4E2D;&#x65AD;&#xFF0F;&#x518D;&#x958B;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x3068;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x6301;&#x3064;&#x3001;\n&#x3088;&#x308A;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x30BD;&#x30FC;&#x30B9;&#x3092;&#x30E9;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306E;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;\n&#x30E9;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// source is an object with readStop() and readStart() methods,\n// and an `ondata` member that gets called when it has data, and\n// an `onend` member that gets called when the data is over.\n\nutil.inherits(SourceWrapper, Readable);\n\nfunction SourceWrapper(options) {\n  Readable.call(this, options);\n\n  this._source = getLowlevelSourceObject();\n  var self = this;\n\n  // Every time there&apos;s data, we push it into the internal buffer.\n  this._source.ondata = function(chunk) {\n    // if push() returns false, then we need to stop reading from source\n    if (!self.push(chunk))\n      self._source.readStop();\n  };\n\n  // When the source ends, we push the EOF-signalling `null` chunk\n  this._source.onend = function() {\n    self.push(null);\n  };\n}\n\n// _read will be called when the stream wants to pull more data in\n// the advisory size argument is ignored in this case.\nSourceWrapper.prototype._read = function(size) {\n  this._source.readStart();\n};</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;
                        },
                        {
                          &quot;name&quot;: &quot;encoding&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          &quot;classes&quot;: [
            {
              &quot;textRaw&quot;: &quot;Class: stream.Writable&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Writable&quot;,
              &quot;desc&quot;: &quot;<!--\n`stream.Writable` is an abstract class designed to be extended with an\nunderlying implementation of the [`_write(chunk, encoding, callback)`][] method.\n-->\n\n<p><code>stream.Writable</code> &#x306F;&#x62BD;&#x8C61;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x3057;&#x3066;\n[<code>_write(chunk, encoding, callback)</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;\n&#x62E1;&#x5F35;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nPlease see above under [API for Stream Consumers][] for how to consume\nwritable streams in your programs.  What follows is an explanation of\nhow to implement Writable streams in your programs.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F;&#x3001;\n&#x524D;&#x8FF0;&#x306E; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5229;&#x7528;&#x8005;&#x306E;&#x305F;&#x3081;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x306E;&#x5F8C;&#x306B;&#x7D9A;&#x304F;&#x306E;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306E;&#x8AAC;&#x660E;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;new stream.Writable([options])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;Writable&quot;,
                  &quot;* `options` {Object}\n  * `highWaterMark` {Number} Buffer level when [`write()`][] starts\n    returning false. Default&quot;: &quot;16kb\n  * `decodeStrings` {Boolean} Whether or not to decode strings into\n    Buffers before passing them to [`_write()`][].  Default=true\n  * `objectMode` {Boolean} Whether or not the `write(anyObj)` is\n    a valid operation. If set you can write arbitrary data instead\n    of only `Buffer` / `String` data.  Default=false&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`options` {Object} (&#x4EFB;&#x610F;) &quot;,
                          &quot;options&quot;: [
                            {
                              &quot;textRaw&quot;: &quot;`highWaterMark` {Number} [`write()`][] &#x304C; `false` &#x3092;&#x8FD4;&#x3057;&#x59CB;&#x3081;&#x308B; &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EC;&#x30D9;&#x30EB;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002; &quot;,
                              &quot;name&quot;: &quot;highWaterMark&quot;,
                              &quot;type&quot;: &quot;Number&quot;,
                              &quot;desc&quot;: &quot;[`write()`][] &#x304C; `false` &#x3092;&#x8FD4;&#x3057;&#x59CB;&#x3081;&#x308B; &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EC;&#x30D9;&#x30EB;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002;&quot;
                            },
                            {
                              &quot;textRaw&quot;: &quot;`decodeStrings` {Boolean} &#x6587;&#x5B57;&#x5217;&#x304C; [`_write()`][] &#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x524D;&#x306B; &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&#x3002; &quot;,
                              &quot;name&quot;: &quot;decodeStrings&quot;,
                              &quot;type&quot;: &quot;Boolean&quot;,
                              &quot;desc&quot;: &quot;&#x6587;&#x5B57;&#x5217;&#x304C; [`_write()`][] &#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x524D;&#x306B; &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&#x3002;&quot;
                            },
                            {
                              &quot;textRaw&quot;: &quot;`objectMode` {Boolean} `write(anyObj)` &#x304C;&#x59A5;&#x5F53;&#x306A;&#x64CD;&#x4F5C;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002; &#x3082;&#x3057; `true` &#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;`Buffer` / `String` &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x307F;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001; &#x4EFB;&#x610F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false`&#x3002; &quot;,
                              &quot;name&quot;: &quot;objectMode&quot;,
                              &quot;type&quot;: &quot;Boolean&quot;,
                              &quot;desc&quot;: &quot;`write(anyObj)` &#x304C;&#x59A5;&#x5F53;&#x306A;&#x64CD;&#x4F5C;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002; &#x3082;&#x3057; `true` &#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;`Buffer` / `String` &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x307F;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001; &#x4EFB;&#x610F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false`&#x3002;&quot;
                            }
                          ],
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;type&quot;: &quot;Object&quot;,
                          &quot;desc&quot;: &quot;(&#x4EFB;&#x610F;)&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    },
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ],
                  &quot;desc&quot;: &quot;<!--\nIn classes that extend the Writable class, make sure to call the\nconstructor so that the buffering settings can be properly\ninitialized.\n-->\n\n<p><code>Writable</code> &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x78BA;&#x5B9F;&#x306B;\n&#x521D;&#x671F;&#x5316;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;&#x5FC5;&#x305A;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;writable.\\_write(chunk, encoding, callback)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;\\_write&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} The chunk to be written.  Will always\n  be a buffer unless the `decodeStrings` option was set to `false`.\n* `encoding` {String} If the chunk is a string, then this is the\n  encoding type.  Ignore chunk is a buffer.  Note that chunk will\n  **always** be a buffer unless the `decodeStrings` option is\n  explicitly set to `false`.\n* `callback` {Function} Call this function (optionally with an error\n  argument) when you are done processing the supplied chunk.\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | Array} &#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3002;\n<code>decodeStrings</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C; <code>false</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x3044;&#x9650;&#x308A;&#x5E38;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x3059;&#x3002;</li>\n<li><code>encoding</code> {String} &#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304C;&#x6587;&#x5B57;&#x5217;&#x306E;&#x5834;&#x5408;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x3002;\n&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5834;&#x5408;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>decodeStrings</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x660E;&#x793A;&#x7684;&#x306B; <code>false</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;\n&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306F; <em>&#x5E38;&#x306B;</em> &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x3042;&#x308B;&#x3079;&#x304D;&#x4E8B;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n<li><code>callback</code> {Function} &#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3092;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x51E6;&#x7406;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x6642;&#x306B;&#x3001;\n(&#x4EFB;&#x610F;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x5F15;&#x6570;&#x3068;&#x5171;&#x306B;) &#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n</ul>\n<!--\nAll Writable stream implementations must provide a [`_write()`][]\nmethod to send data to the underlying resource.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x9001;&#x308B;&#x305F;&#x3081;&#x306B; [<code>_write()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nNote: **This function MUST NOT be called directly.**  It should be\nimplemented by child classes, and called by the internal Writable\nclass methods only.\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x306F;&#x3044;&#x3051;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n&#x3053;&#x308C;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3042;&#x308A;&#x3001;Writable &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x304B;&#x3089;&#x306E;&#x307F;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nCall the callback using the standard `callback(error)` pattern to\nsignal that the write completed successfully or with an error.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x51FA;&#x529B;&#x304C;&#x6210;&#x529F;&#x3057;&#x3066;&#x5B8C;&#x4E86;&#x3057;&#x305F;&#x304B;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x304B;&#x3092;&#x4F1D;&#x3048;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;\n&#x6A19;&#x6E96;&#x7684;&#x306A; <code>callback(error)</code> &#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the `decodeStrings` flag is set in the constructor options, then\n`chunk` may be a string rather than a Buffer, and `encoding` will\nindicate the sort of string that it is.  This is to support\nimplementations that have an optimized handling for certain string\ndata encodings.  If you do not explicitly set the `decodeStrings`\noption to `false`, then you can safely ignore the `encoding` argument,\nand assume that `chunk` will always be a Buffer.\n-->\n\n<p>&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>decodeStrings</code> &#x30D5;&#x30E9;&#x30B0;&#x304C;&#x30BB;&#x30C3;&#x30C8;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;\n<code>chunk</code> &#x3092; Buffer &#x3067;&#x306F;&#x306A;&#x304F;&#x6587;&#x5B57;&#x5217;&#x306B;&#x3057;&#x3001;<code>encoding</code> &#x3067;&#x305D;&#x306E;&#x6587;&#x5B57;&#x5217;&#x306E;\n&#x7A2E;&#x985E;&#x3092;&#x793A;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;&#x5B9F;&#x88C5;&#x304C;&#x6587;&#x5B57;&#x5217;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3092;&#x6700;&#x9069;&#x5316;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x305F;&#x3081;&#x3067;&#x3059;&#x3002;\n<code>decodeStrings</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x660E;&#x793A;&#x7684;&#x306B; <code>false</code> &#x306B;&#x8A2D;&#x5B9A;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;\n<code>endocing</code> &#x5F15;&#x6570;&#x306F;&#x5B89;&#x5168;&#x306B;&#x7121;&#x8996;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3057;&#x3066; <code>chunk</code> &#x306F;&#x5E38;&#x306B; Buffer &#x3067;&#x3042;&#x308B;&#x3068;&#x898B;&#x306A;&#x305B;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method is prefixed with an underscore because it is internal to\nthe class that defines it, and should not be called directly by user\nprograms.  However, you **are** expected to override this method in\nyour own extension classes.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3053;&#x308C;&#x3092;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x5185;&#x90E8;&#x306E;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304B;&#x3089;\n&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;&#x306E;&#x63A5;&#x982D;&#x8F9E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x62E1;&#x5F35;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n<strong>&#x6C42;&#x3081;&#x3089;&#x308C;&#x3066;</strong>&#x3044;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;
                        },
                        {
                          &quot;name&quot;: &quot;encoding&quot;
                        },
                        {
                          &quot;name&quot;: &quot;callback&quot;
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.Duplex&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Duplex&quot;,
              &quot;desc&quot;: &quot;<!--\nA \"duplex\" stream is one that is both Readable and Writable, such as a\nTCP socket connection.\n-->\n\n<p>&quot;duplex&quot; &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x3088;&#x3046;&#x306B;\nReadable &#x3067;&#x3042;&#x308A; Writable &#x3067;&#x3082;&#x3042;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x4E00;&#x7A2E;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that `stream.Duplex` is an abstract class designed to be extended\nwith an underlying implementation of the `_read(size)` and\n[`_write(chunk, encoding, callback)`][] methods as you would with a\nReadable or Writable stream class.\n-->\n\n<p><code>stream.Duplex</code> &#x306F;&#x3001;Readable &#x304A;&#x3088;&#x3073; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30AF;&#x30E9;&#x30B9;&#x3068;&#x540C;&#x69D8;&#x3001;\n&#x4E0B;&#x5C64;&#x306E;&#x5B9F;&#x88C5;&#x3067;&#x3042;&#x308B; [<code>_read(size)</code>][] &#x304A;&#x3088;&#x3073;\n[<code>_write(chunk, encoding, callback)</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306B;&#x3088;&#x3063;&#x3066;&#x62E1;&#x5F35;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;\n&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x305F;&#x62BD;&#x8C61;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nSince JavaScript doesn't have multiple prototypal inheritance, this\nclass prototypally inherits from Readable, and then parasitically from\nWritable.  It is thus up to the user to implement both the lowlevel\n`_read(n)` method as well as the lowlevel\n[`_write(chunk, encoding, callback)`][] method on extension duplex classes.\n-->\n\n<p>JavaScript &#x306F;&#x8907;&#x6570;&#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30BF;&#x30A4;&#x30D7;&#x7D99;&#x627F;&#x3092;&#x6301;&#x3064;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;\n&#x3053;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306F; Readable &#x304B;&#x3089;&#x30D7;&#x30ED;&#x30C8;&#x30BF;&#x30A4;&#x30D7;&#x3092;&#x7D99;&#x627F;&#x3057;&#x305F;&#x3046;&#x3048;&#x3067;&#x3001;\nWritable &#x304B;&#x3089;&#x5BC4;&#x751F;&#x7684;&#x306A;&#x65B9;&#x6CD5; (&#x30D7;&#x30ED;&#x30C8;&#x30BF;&#x30A4;&#x30D7;&#x30E1;&#x30F3;&#x30D0;&#x30FC;&#x306E;&#x30B3;&#x30D4;&#x30FC;) &#x3092;&#x884C;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x4F4E;&#x6C34;&#x6E96;&#x306E; [<code>_read(size)</code>][] &#x304A;&#x3088;&#x3073; [<code>_write(chunk, encoding, callback)</code>][]\n&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3001;Duplex &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30E6;&#x30FC;&#x30B6;&#x306E;&#x8CAC;&#x52D9;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;new stream.Duplex(options)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;Duplex&quot;,
                  &quot;* `options` {Object} Passed to both Writable and Readable\n  constructors. Also has the following fields:\n  * `allowHalfOpen` {Boolean} Default&quot;: &quot;true.  If set to `false`, then\n    the stream will automatically end the readable side when the\n    writable side ends and vice versa.&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`options` {Object} Writable &#x304A;&#x3088;&#x3073; Readable &#x306E;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002; &#x4EE5;&#x4E0B;&#x306E;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x3092;&#x6301;&#x3064;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;: &quot;,
                          &quot;options&quot;: [
                            {
                              &quot;textRaw&quot;: &quot;`allowHalfOpen` {Boolean} &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&#x3002; &#x3082;&#x3057; `false` &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5074;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x3068; &#x81EA;&#x52D5;&#x7684;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5074;&#x3082;&#x9589;&#x3058;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002; &quot;,
                              &quot;name&quot;: &quot;allowHalfOpen&quot;,
                              &quot;type&quot;: &quot;Boolean&quot;,
                              &quot;desc&quot;: &quot;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&#x3002; &#x3082;&#x3057; `false` &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5074;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x3068; &#x81EA;&#x52D5;&#x7684;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5074;&#x3082;&#x9589;&#x3058;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;&quot;
                            }
                          ],
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;type&quot;: &quot;Object&quot;,
                          &quot;desc&quot;: &quot;Writable &#x304A;&#x3088;&#x3073; Readable &#x306E;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002; &#x4EE5;&#x4E0B;&#x306E;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x3092;&#x6301;&#x3064;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;:&quot;
                        }
                      ]
                    },
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;options&quot;
                        }
                      ]
                    }
                  ],
                  &quot;desc&quot;: &quot;<!--\nIn classes that extend the Duplex class, make sure to call the\nconstructor so that the buffering settings can be properly\ninitialized.\n-->\n\n<p><code>Duplex</code> &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x78BA;&#x5B9F;&#x306B;\n&#x521D;&#x671F;&#x5316;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;&#x5FC5;&#x305A;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.Transform&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Transform&quot;,
              &quot;desc&quot;: &quot;<!--\nA \"transform\" stream is a duplex stream where the output is causally\nconnected in some way to the input, such as a [zlib][] stream or a\n[crypto][] stream.\n-->\n\n<p>&quot;Transform&quot; &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;[zlib][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3084; [crypto][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x3088;&#x3046;&#x306B;&#x3001;\n&#x5165;&#x529B;&#x304C;&#x4F55;&#x3089;&#x304B;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x51FA;&#x529B;&#x306E;&#x5143;&#x3068;&#x306A;&#x3063;&#x3066;&#x3044;&#x308B;&#x3088;&#x3046;&#x306A; Duplex &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThere is no requirement that the output be the same size as the input,\nthe same number of chunks, or arrive at the same time.  For example, a\nHash stream will only ever have a single chunk of output which is\nprovided when the input is ended.  A zlib stream will produce output\nthat is either much smaller or much larger than its input.\n-->\n\n<p>&#x51FA;&#x529B;&#x306F;&#x3001;&#x5165;&#x529B;&#x3068;&#x540C;&#x3058;&#x30B5;&#x30A4;&#x30BA;&#x3001;&#x540C;&#x3058;&#x6570;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3001;&#x540C;&#x6642;&#x306B;&#x5230;&#x7740;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;\n&#x8981;&#x6C42;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;Hash &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x5165;&#x529B;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x4E00;&#x3064;&#x3060;&#x3051;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3092;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\nzlib &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x5165;&#x529B;&#x3088;&#x308A;&#x5C0F;&#x3055;&#x3044;&#x304B;&#x3001;&#x307E;&#x305F;&#x306F;&#x3088;&#x308A;&#x5927;&#x304D;&#x3044;&#x51FA;&#x529B;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nRather than implement the [`_read()`][] and [`_write()`][] methods, Transform\nclasses must implement the `_transform()` method, and may optionally\nalso implement the `_flush()` method.  (See below.)\n-->\n\n<p>[<code>_read()</code>][] &#x304A;&#x3088;&#x3073; [<code>_write()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;Transform &#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;\n<code>_transform()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x307E;&#x305F;&#x3001;&#x4EFB;&#x610F;&#x3067; <code>_flush()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059; (&#x5F8C;&#x8FF0;)&#x3002;\n\n</p>\n&quot;,
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;new stream.Transform([options])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;Transform&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `options` {Object} Passed to both Writable and Readable\n  constructors.\n-->\n\n<ul>\n<li><code>options</code> {Object} Writable &#x304A;&#x3088;&#x3073; Readable &#x306E;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nIn classes that extend the Transform class, make sure to call the\nconstructor so that the buffering settings can be properly\ninitialized.\n-->\n\n<p><code>Transform</code> &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x78BA;&#x5B9F;&#x306B;\n&#x521D;&#x671F;&#x5316;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;&#x5FC5;&#x305A;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;transform.\\_transform(chunk, encoding, callback)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;\\_transform&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} The chunk to be transformed.  Will always\n  be a buffer unless the `decodeStrings` option was set to `false`.\n* `encoding` {String} If the chunk is a string, then this is the\n  encoding type.  (Ignore if `decodeStrings` chunk is a buffer.)\n* `callback` {Function} Call this function (optionally with an error\n  argument) when you are done processing the supplied chunk.\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | Array} &#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3002;\n<code>decodeStrings</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C; <code>false</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x3044;&#x9650;&#x308A;&#x5E38;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x3059;&#x3002;</li>\n<li><code>encoding</code> {String} &#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304C;&#x6587;&#x5B57;&#x5217;&#x306E;&#x5834;&#x5408;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;\n(&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5834;&#x5408;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;)&#x3002;</li>\n<li><code>callback</code> {Function} &#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3092;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x51E6;&#x7406;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x6642;&#x306B;&#x3001;\n(&#x4EFB;&#x610F;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x5F15;&#x6570;&#x3068;&#x5171;&#x306B;) &#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n</ul>\n<!--\nNote: **This function MUST NOT be called directly.**  It should be\nimplemented by child classes, and called by the internal Transform\nclass methods only.\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x306F;&#x3044;&#x3051;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n&#x3053;&#x308C;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3042;&#x308A;&#x3001;Transform &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x304B;&#x3089;&#x306E;&#x307F;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nAll Transform stream implementations must provide a `_transform`\nmethod to accept input and produce output.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5B9F;&#x88C5;&#x306F;&#x3001;&#x5165;&#x529B;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x3063;&#x3066;&#x51FA;&#x529B;&#x3092;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n<code>_transform()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\n`_transform` should do whatever has to be done in this specific\nTransform class, to handle the bytes being written, and pass them off\nto the readable portion of the interface.  Do asynchronous I/O,\nprocess things, and so on.\n-->\n\n<p>&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30D0;&#x30A4;&#x30C8;&#x3092;&#x51E6;&#x7406;&#x3057;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x306A;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306B;&#x6E21;&#x3059;&#x306A;&#x3069;&#x3001;\nTransform &#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306F;&#x5168;&#x3066; <code>_transform()</code>\n&#x3067;&#x884C;&#x308F;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;&#x975E;&#x540C;&#x671F; I/O&#x3001;&#x4F55;&#x304B;&#x306E;&#x51E6;&#x7406;&#x3001;&#x305D;&#x306E;&#x4ED6;&#x3002;\n\n</p>\n<!--\nCall `transform.push(outputChunk)` 0 or more times to generate output\nfrom this input chunk, depending on how much data you want to output\nas a result of this chunk.\n-->\n\n<p>&#x3053;&#x306E;&#x5165;&#x529B;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304B;&#x3089;&#x306E;&#x51FA;&#x529B;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;<code>transform.push(outputChunk)</code>\n&#x3092; 0 &#x56DE;&#x4EE5;&#x4E0A;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x3053;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306E;&#x7D50;&#x679C;&#x3068;&#x3057;&#x3066;&#x3069;&#x308C;&#x3060;&#x3051;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x51FA;&#x529B;&#x3057;&#x305F;&#x3044;&#x306E;&#x304B;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCall the callback function only when the current chunk is completely\nconsumed.  Note that there may or may not be output as a result of any\nparticular input chunk.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306E;&#x51E6;&#x7406;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306E;&#x307F;&#x3001;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x7279;&#x5B9A;&#x306E;&#x5165;&#x529B;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304B;&#x3089;&#x306E;&#x7D50;&#x679C;&#x3068;&#x3057;&#x3066;&#x3001;&#x51FA;&#x529B;&#x304C;&#x3042;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3057;&#x3001;\n&#x7121;&#x3044;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nThis method is prefixed with an underscore because it is internal to\nthe class that defines it, and should not be called directly by user\nprograms.  However, you **are** expected to override this method in\nyour own extension classes.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3053;&#x308C;&#x3092;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x5185;&#x90E8;&#x306E;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304B;&#x3089;\n&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;&#x306E;&#x63A5;&#x982D;&#x8F9E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x62E1;&#x5F35;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n<strong>&#x6C42;&#x3081;&#x3089;&#x308C;&#x3066;</strong>&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;
                        },
                        {
                          &quot;name&quot;: &quot;encoding&quot;
                        },
                        {
                          &quot;name&quot;: &quot;callback&quot;
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;transform.\\_flush(callback)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;\\_flush&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `callback` {Function} Call this function (optionally with an error\n  argument) when you are done flushing any remaining data.\n-->\n\n<ul>\n<li><code>callback</code> {Function} &#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306E;&#x51E6;&#x7406;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x3001;\n(&#x4EFB;&#x610F;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x5F15;&#x6570;&#x3068;&#x5171;&#x306B;) &#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n</ul>\n<!--\nNote: **This function MUST NOT be called directly.**  It MAY be implemented\nby child classes, and if so, will be called by the internal Transform\nclass methods only.\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x306F;&#x3044;&#x3051;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n&#x3053;&#x308C;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x305A;&#x3001;Transform &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x304B;&#x3089;&#x306E;&#x307F;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIn some cases, your transform operation may need to emit a bit more\ndata at the end of the stream.  For example, a `Zlib` compression\nstream will store up some internal state so that it can optimally\ncompress the output.  At the end, however, it needs to do the best it\ncan with what is left, so that the data will be complete.\n-->\n\n<p>&#x5834;&#x5408;&#x306B;&#x3088;&#x3063;&#x3066;&#x306F;&#x3001;&#x5909;&#x63DB;&#x64CD;&#x4F5C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x7D42;&#x7AEF;&#x3067;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x751F;&#x6210;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;<code>Zlib</code> &#x5727;&#x7E2E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x51FA;&#x529B;&#x3092;&#x6700;&#x9069;&#x306B;&#x5727;&#x7E2E;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x5185;&#x90E8;&#x72B6;&#x614B;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x65B9;&#x3001;&#x7D42;&#x7AEF;&#x3067;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306A;&#x3082;&#x306E;&#x306B;&#x306A;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;\n&#x6B8B;&#x3055;&#x308C;&#x305F;&#x3082;&#x306E;&#x306B;&#x6700;&#x5584;&#x3092;&#x5C3D;&#x304F;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn those cases, you can implement a `_flush` method, which will be\ncalled at the very end, after all the written data is consumed, but\nbefore emitting `end` to signal the end of the readable side.  Just\nlike with `_transform`, call `transform.push(chunk)` zero or more\ntimes, as appropriate, and call `callback` when the flush operation is\ncomplete.\n-->\n\n<p>&#x3053;&#x306E;&#x5834;&#x5408;&#x3001;&#x6700;&#x5F8C;&#x306E;&#x6700;&#x5F8C; (&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3001;\n&#x305F;&#x3060;&#x3057;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5074;&#x306E;&#x7D42;&#x4E86;&#x3092;&#x77E5;&#x3089;&#x305B;&#x308B; <code>&apos;end&apos;</code> &#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x308B;&#x524D;) &#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;\n<code>_flush()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>_transform()</code> &#x3068;&#x540C;&#x69D8;&#x3001;<code>transform.push(chunk)</code> &#x3092;&#x4F55;&#x5EA6; (0 &#x56DE;&#x4EE5;&#x4E0A;) &#x3067;&#x3082;\n&#x9069;&#x5207;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3001;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x64CD;&#x4F5C;&#x304C;&#x5B8C;&#x4E86;&#x3057;&#x305F;&#x6642;&#x306B; <code>callback</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method is prefixed with an underscore because it is internal to\nthe class that defines it, and should not be called directly by user\nprograms.  However, you **are** expected to override this method in\nyour own extension classes.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3053;&#x308C;&#x3092;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x5185;&#x90E8;&#x306E;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304B;&#x3089;\n&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;&#x306E;&#x63A5;&#x982D;&#x8F9E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x62E1;&#x5F35;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n<strong>&#x6C42;&#x3081;&#x3089;&#x308C;&#x3066;</strong>&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<h4>Example: <code>SimpleProtocol</code> parser v2</h4>\n<!--\nThe example above of a simple protocol parser can be implemented\nsimply by using the higher level [Transform][] stream class, similar to\nthe `parseHeader` and `SimpleProtocol v1` examples above.\n-->\n\n<p>&#x524D;&#x8FF0;&#x3057;&#x305F;&#x5358;&#x7D14;&#x306A;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x30D1;&#x30FC;&#x30B5;&#x306E;&#x4F8B;&#x306F;&#x3001;&#x3088;&#x308A;&#x9AD8;&#x6C34;&#x6E96;&#x306A; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30AF;&#x30E9;&#x30B9;&#x3092;\n&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3067;&#x3001;&#x3055;&#x3089;&#x306B;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306B;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x524D;&#x8FF0;&#x306E; <code>parseHeader</code> &#x304A;&#x3088;&#x3073; <code>SimpleProtocol v1</code> &#x3068;&#x3088;&#x304F;&#x4F3C;&#x305F;&#x4F8B;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIn this example, rather than providing the input as an argument, it\nwould be piped into the parser, which is a more idiomatic Node stream\napproach.\n-->\n\n<p>&#x3053;&#x306E;&#x4F8B;&#x3067;&#x306F;&#x3001;&#x5165;&#x529B;&#x3092;&#x5F15;&#x6570;&#x3067;&#x4E0E;&#x3048;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;Node &#x306E;&#x30B9;&#x30C8;&#x30FC;&#x30E0;&#x306B;&#x304A;&#x3051;&#x308B;\n&#x3088;&#x308A;&#x6163;&#x7528;&#x7684;&#x306A;&#x30A2;&#x30D7;&#x30ED;&#x30FC;&#x30C1;&#x3068;&#x3057;&#x3066;&#x30D1;&#x30FC;&#x30B5;&#x306B;&#x30D1;&#x30A4;&#x30D7;&#x3067;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var util = require(&apos;util&apos;);\nvar Transform = require(&apos;stream&apos;).Transform;\nutil.inherits(SimpleProtocol, Transform);\n\nfunction SimpleProtocol(options) {\n  if (!(this instanceof SimpleProtocol))\n    return new SimpleProtocol(options);\n\n  Transform.call(this, options);\n  this._inBody = false;\n  this._sawFirstCr = false;\n  this._rawHeader = [];\n  this.header = null;\n}\n\nSimpleProtocol.prototype._transform = function(chunk, encoding, done) {\n  if (!this._inBody) {\n    // check if the chunk has a \\n\\n\n    var split = -1;\n    for (var i = 0; i &lt; chunk.length; i++) {\n      if (chunk[i] === 10) { // &apos;\\n&apos;\n        if (this._sawFirstCr) {\n          split = i;\n          break;\n        } else {\n          this._sawFirstCr = true;\n        }\n      } else {\n        this._sawFirstCr = false;\n      }\n    }\n\n    if (split === -1) {\n      // still waiting for the \\n\\n\n      // stash the chunk, and try again.\n      this._rawHeader.push(chunk);\n    } else {\n      this._inBody = true;\n      var h = chunk.slice(0, split);\n      this._rawHeader.push(h);\n      var header = Buffer.concat(this._rawHeader).toString();\n      try {\n        this.header = JSON.parse(header);\n      } catch (er) {\n        this.emit(&apos;error&apos;, new Error(&apos;invalid simple protocol data&apos;));\n        return;\n      }\n      // and let them know that we are done parsing the header.\n      this.emit(&apos;header&apos;, this.header);\n\n      // now, because we got some extra data, emit this first.\n      this.push(chunk.slice(split));\n    }\n  } else {\n    // from there on, just provide the data to our consumer as-is.\n    this.push(chunk);\n  }\n  done();\n};\n\n// Usage:\n// var parser = new SimpleProtocol();\n// source.pipe(parser)\n// Now parser is a readable stream that will emit &apos;header&apos;\n// with the parsed header data.</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;callback&quot;
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.PassThrough&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.PassThrough&quot;,
              &quot;desc&quot;: &quot;<!--\nThis is a trivial implementation of a [Transform][] stream that simply\npasses the input bytes across to the output.  Its purpose is mainly\nfor examples and testing, but there are occasionally use cases where\nit can come in handy as a building block for novel sorts of streams.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x53D6;&#x308B;&#x306B;&#x8DB3;&#x3089;&#x306A;&#x3044;&#x5B9F;&#x88C5;&#x3067;&#x3001;\n&#x5165;&#x529B;&#x3057;&#x305F;&#x30D0;&#x30A4;&#x30C8;&#x5217;&#x3092;&#x51FA;&#x529B;&#x306B;&#x5358;&#x7D14;&#x306B;&#x6E21;&#x3059;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306E;&#x4E3B;&#x306A;&#x76EE;&#x7684;&#x306F;&#x30B5;&#x30F3;&#x30D7;&#x30EB;&#x53CA;&#x3073;&#x30C6;&#x30B9;&#x30C8;&#x3067;&#x3059;&#x304C;&#x3001;&#x65B0;&#x3057;&#x3044;&#x7A2E;&#x985E;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x305F;&#x3081;&#x306E;\n&#x30D3;&#x30EB;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3068;&#x3057;&#x3066;&#x3001;&#x4F55;&#x304B;&#x3068;&#x4FBF;&#x5229;&#x3068;&#x306A;&#x308B;&#x30E6;&#x30FC;&#x30B9;&#x30B1;&#x30FC;&#x30B9;&#x304C;&#x6642;&#x6298;&#x5B58;&#x5728;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Streams: Under the Hood&quot;,
          &quot;name&quot;: &quot;Streams: Under the Hood&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;miscs&quot;: [
            {
              &quot;textRaw&quot;: &quot;Buffering&quot;,
              &quot;name&quot;: &quot;Buffering&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;desc&quot;: &quot;<!--\nBoth Writable and Readable streams will buffer data on an internal\nobject called `_writableState.buffer` or `_readableState.buffer`,\nrespectively.\n-->\n\n<p>Readable &#x53CA;&#x3073; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x305D;&#x308C;&#x305E;&#x308C;&#x3001;<code>_writableState.buffer</code> &#x307E;&#x305F;&#x306F;\n<code>_readableState.buffer</code> &#x3068;&#x547C;&#x3070;&#x308C;&#x308B;&#x5185;&#x90E8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe amount of data that will potentially be buffered depends on the\n`highWaterMark` option which is passed into the constructor.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x91CF;&#x306F;&#x3001;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B; <code>highWaterMark</code>\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBuffering in Readable streams happens when the implementation calls\n[`stream.push(chunk)`][].  If the consumer of the Stream does not call\n`stream.read()`, then the data will sit in the internal queue until it\nis consumed.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x304A;&#x3051;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306F;&#x3001;&#x5B9F;&#x88C5;&#x304C; [<code>stream.push(chunk)</code>][]\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x6642;&#x306B;&#x8D77;&#x3053;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5229;&#x7528;&#x8005;&#x304C; <code>stream.read()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3044;&#x3068;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x305D;&#x308C;&#x304C;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;&#x5185;&#x90E8;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x7559;&#x307E;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBuffering in Writable streams happens when the user calls\n[`stream.write(chunk)`][] repeatedly, even when `write()` returns `false`.\n-->\n\n<p>Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x304A;&#x3051;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306F;&#x3001;&#x5229;&#x7528;&#x8005;&#x304C; [<code>stream.write(chunk)</code>][]\n&#x3092;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x3001;<code>write()</code> &#x304C; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5834;&#x5408;&#x3067;&#x3082;&#x8D77;&#x3053;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe purpose of streams, especially with the `pipe()` method, is to\nlimit the buffering of data to acceptable levels, so that sources and\ndestinations of varying speed will not overwhelm the available memory.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3001;&#x7279;&#x306B; <code>pipe()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306E;&#x76EE;&#x7684;&#x306F;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3092;\n&#x8A31;&#x5BB9;&#x3067;&#x304D;&#x308B;&#x30EC;&#x30D9;&#x30EB;&#x306B;&#x5236;&#x9650;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;&#x69D8;&#x3005;&#x306A;&#x901F;&#x5EA6;&#x306E;&#x5165;&#x529B;&#x5143;&#x3068;&#x51FA;&#x529B;&#x5148;&#x3067;&#x3001;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x5727;&#x8FEB;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`stream.read(0)`&quot;,
              &quot;name&quot;: &quot;`stream.read(0)`&quot;,
              &quot;desc&quot;: &quot;<!--\nThere are some cases where you want to trigger a refresh of the\nunderlying readable stream mechanisms, without actually consuming any\ndata.  In that case, you can call `stream.read(0)`, which will always\nreturn null.\n-->\n\n<p>&#x5B9F;&#x969B;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F;&#x3001;&#x4E0B;&#x5C64;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x3092;\n&#x30EA;&#x30D5;&#x30EC;&#x30C3;&#x30B7;&#x30E5;&#x3059;&#x308B;&#x304D;&#x3063;&#x304B;&#x3051;&#x304C;&#x6B32;&#x3057;&#x304F;&#x306A;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;&#x5E38;&#x306B; <code>null</code> &#x3092;&#x8FD4;&#x3059; <code>stream.read(0)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the internal read buffer is below the `highWaterMark`, and the\nstream is not currently reading, then calling `read(0)` will trigger\na low-level `_read` call.\n-->\n\n<p>&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C; <code>highWaterMark</code> &#x3092;&#x4E0B;&#x56DE;&#x3063;&#x3066;&#x3044;&#x3066;&#x3001;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x73FE;&#x5728;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x4E2D;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;<code>read(0)</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306F;&#x4F4E;&#x6C34;&#x6E96;&#x306E;\n<code>_read()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x304D;&#x3063;&#x304B;&#x3051;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThere is almost never a need to do this.  However, you will see some\ncases in Node's internals where this is done, particularly in the\nReadable stream class internals.\n-->\n\n<p>&#x3053;&#x308C;&#x3092;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x307B;&#x3068;&#x3093;&#x3069;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089; Node &#x306E;&#x5185;&#x90E8;&#x3001;&#x7279;&#x306B; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x3067;&#x3001;\n&#x3053;&#x308C;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3092;&#x898B;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;displayName&quot;: &quot;`stream.read(0)`&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`stream.push(&apos;&apos;)`&quot;,
              &quot;name&quot;: &quot;`stream.push(&apos;&apos;)`&quot;,
              &quot;desc&quot;: &quot;<!--\nPushing a zero-byte string or Buffer (when not in [Object mode][]) has an\ninteresting side effect.  Because it *is* a call to\n[`stream.push()`][], it will end the `reading` process.  However, it\ndoes *not* add any data to the readable buffer, so there's nothing for\na user to consume.\n-->\n\n<p>&#x30BC;&#x30ED;&#x30D0;&#x30A4;&#x30C8;&#x306E;&#x9577;&#x3055;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x30D7;&#x30C3;&#x30B7;&#x30E5;&#x3059;&#x308B;&#x3068;&#x3001;\n([&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;][]&#x306E;&#x5834;&#x5408;&#x3092;&#x9664;&#x304D;) &#x9762;&#x767D;&#x3044;&#x526F;&#x4F5C;&#x7528;&#x304C;&#x8D77;&#x3053;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; [<code>stream.push()</code>][] &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x306E;&#x3067;&#x3001;<code>reading</code> &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x3069;&#x3093;&#x306A;&#x30C7;&#x30FC;&#x30BF;&#x3082;&#x52A0;&#x3048; <em>&#x306A;&#x3044;</em> &#x306E;&#x3067;&#x3001;\n&#x30E6;&#x30FC;&#x30B6;&#x304C;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x3082;&#x306E;&#x306F;&#x4F55;&#x3082;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nVery rarely, there are cases where you have no data to provide now,\nbut the consumer of your stream (or, perhaps, another bit of your own\ncode) will know when to check again, by calling `stream.read(0)`.  In\nthose cases, you *may* call `stream.push('')`.\n-->\n\n<p>&#x3054;&#x304F;&#x307E;&#x308C;&#x306B;&#x3001;&#x4ECA;&#x306F;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7121;&#x3044;&#x5834;&#x5408;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;&#x3057;&#x304B;&#x3057;&#x3001;<code>stream.read(0)</code>\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5229;&#x7528;&#x8005; (&#x3042;&#x308B;&#x3044;&#x306F;&#x3001;&#x3082;&#x3057;&#x304B;&#x3059;&#x308B;&#x3068;&#x3042;&#x306A;&#x305F;&#x306E;\n&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x4E00;&#x90E8;) &#x306F;&#x518D;&#x3073;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x3079;&#x304D;&#x306A;&#x306E;&#x304C;&#x3044;&#x3064;&#x304B;&#x3092;&#x77E5;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;<code>stream.push(&apos;&apos;)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C; <em>&#x3067;&#x304D;&#x307E;&#x3059;</em> &#x3002;\n\n</p>\n<!--\nSo far, the only use case for this functionality is in the\n[tls.CryptoStream][] class, which is deprecated in Node v0.12.  If you\nfind that you have to use `stream.push('')`, please consider another\napproach, because it almost certainly indicates that something is\nhorribly wrong.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x6240;&#x3001;&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x306E;&#x552F;&#x4E00;&#x306E;&#x30E6;&#x30FC;&#x30B9;&#x30B1;&#x30FC;&#x30B9;&#x306F; v0.12 &#x3067;&#x5EC3;&#x6B62;&#x4E88;&#x5B9A;&#x306E;\n[tls.CryptoStream][] &#x306E;&#x4E2D;&#x306B;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>stream.push(&apos;&apos;)</code> &#x3092;&#x4F7F;&#x308F;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x306A;&#x3063;&#x305F;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F;&#x304A;&#x305D;&#x3089;&#x304F;\n&#x4F55;&#x304B;&#x304C;&#x6050;&#x308D;&#x3057;&#x304F;&#x9593;&#x9055;&#x3063;&#x3066;&#x3044;&#x308B;&#x3053;&#x3068;&#x3092;&#x793A;&#x3059;&#x306E;&#x3067;&#x3001;&#x4ED6;&#x306E;&#x65B9;&#x6CD5;&#x3092;&#x691C;&#x8A0E;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;displayName&quot;: &quot;`stream.push(&apos;&apos;)`&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Compatibility with Older Node Versions&quot;,
              &quot;name&quot;: &quot;Compatibility with Older Node Versions&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;desc&quot;: &quot;<!--\nIn versions of Node prior to v0.10, the Readable stream interface was\nsimpler, but also less powerful and less useful.\n-->\n\n<p>v0.10 &#x3088;&#x308A;&#x524D;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E; Node &#x3067;&#x306F;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;\n&#x3088;&#x308A;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x3067;&#x3057;&#x305F;&#x304C;&#x3001;&#x5F37;&#x529B;&#x3067;&#x306F;&#x306A;&#x304F;&#x4F7F;&#x3044;&#x3084;&#x3059;&#x304F;&#x3082;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3067;&#x3057;&#x305F;&#x3002;\n\n</p>\n<!--\n* Rather than waiting for you to call the `read()` method, `'data'`\n  events would start emitting immediately.  If you needed to do some\n  I/O to decide how to handle data, then you had to store the chunks\n  in some kind of buffer so that they would not be lost.\n* The `pause()` method was advisory, rather than guaranteed.  This\n  meant that you still had to be prepared to receive `'data'` events\n  even when the stream was in a paused state.\n-->\n\n<ul>\n<li><code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x306E;&#x3092;&#x5F85;&#x3064;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;\n<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x3059;&#x3050;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x59CB;&#x3081;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x51E6;&#x7406;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x3092;&#x6C7A;&#x5B9A;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3044;&#x304F;&#x3089;&#x304B;&#x306E; I/O &#x3092;&#x3059;&#x308B;\n&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308B;&#x5834;&#x5408;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5931;&#x308F;&#x308C;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x306F;\n&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3092;&#x4F55;&#x3089;&#x304B;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x4FDD;&#x5B58;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3067;&#x3057;&#x305F;&#x3002;</li>\n<li><code>pause()</code> &#x306F;&#x4FDD;&#x8A3C;&#x3068;&#x3044;&#x3046;&#x3088;&#x308A;&#x306F;&#x3080;&#x3057;&#x308D;&#x52A9;&#x8A00;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4E2D;&#x65AD;&#x3055;&#x308C;&#x305F;&#x72B6;&#x614B;&#x3067;&#x3042;&#x3063;&#x305F;&#x3068;&#x3057;&#x3066;&#x3082;&#x3001;\n<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B;&#x6E96;&#x5099;&#x304C;&#x5FC5;&#x8981;&#x3060;&#x3068;&#x3044;&#x3046;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nIn Node v0.10, the Readable class described below was added.  For\nbackwards compatibility with older Node programs, Readable streams\nswitch into \"flowing mode\" when a `'data'` event handler is added, or\nwhen the `pause()` or `resume()` methods are called.  The effect is\nthat, even if you are not using the new `read()` method and\n`'readable'` event, you no longer have to worry about losing `'data'`\nchunks.\n-->\n\n<p>Node v0.10 &#x304B;&#x3089;&#x3001;&#x4E0A;&#x8A18;&#x3067;&#x8AAC;&#x660E;&#x3057;&#x305F; Readable &#x30AF;&#x30E9;&#x30B9;&#x304C;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x53E4;&#x3044; Node &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3068;&#x306E;&#x5F8C;&#x65B9;&#x4E92;&#x63DB;&#x6027;&#x306E;&#x305F;&#x3081;&#x306B;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;\n<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x304C;&#x52A0;&#x3048;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x3084;&#x3001;<code>pause()</code> &#x307E;&#x305F;&#x306F;\n<code>resume()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x8AAD;&#x307F;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x300C;flowing &#x30E2;&#x30FC;&#x30C9;&#x300D;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x7D50;&#x679C;&#x3068;&#x3057;&#x3066;&#x3001;&#x65B0;&#x3057;&#x3044; <code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3084; <code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3044;&#x306A;&#x304F;&#x3066;&#x3082;&#x3001;&#x3082;&#x3046; <code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304C;&#x5931;&#x308F;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;\n&#x5FC3;&#x914D;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nMost programs will continue to function normally.  However, this\nintroduces an edge case in the following conditions:\n-->\n\n<p>&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x3053;&#x308C;&#x307E;&#x3067;&#x901A;&#x308A;&#x306B;&#x6A5F;&#x80FD;&#x3059;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x4EE5;&#x4E0B;&#x306E;&#x6761;&#x4EF6;&#x3067;&#x30A8;&#x30C3;&#x30B8;&#x30B1;&#x30FC;&#x30B9;&#x304C;&#x5B58;&#x5728;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* No `'data'` event handler is added.\n* The `pause()` and `resume()` methods are never called.\n-->\n\n<ul>\n<li><code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x304C;&#x767B;&#x9332;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x3002;</li>\n<li><code>pause()</code> &#x304A;&#x3088;&#x3073; <code>resume()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x3002;</li>\n</ul>\n<!--\nFor example, consider the following code:\n-->\n\n<p>&#x4F8B;&#x3048;&#x3070;&#x3001;&#x4EE5;&#x4E0B;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x8003;&#x3048;&#x3066;&#x307F;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// WARNING!  BROKEN!\nnet.createServer(function(socket) {\n\n  // we add an &apos;end&apos; method, but never consume the data\n  socket.on(&apos;end&apos;, function() {\n    // It will never get here.\n    socket.end(&apos;I got your message (but didnt read it)\\n&apos;);\n  });\n\n}).listen(1337);</code></pre>\n<!--\nIn versions of node prior to v0.10, the incoming message data would be\nsimply discarded.  However, in Node v0.10 and beyond, the socket will\nremain paused forever.\n-->\n\n<p>v0.10 &#x3088;&#x308A;&#x524D;&#x306E; Node &#x3067;&#x306F;&#x3001;&#x5165;&#x3063;&#x3066;&#x304D;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5358;&#x7D14;&#x306B;&#x7834;&#x68C4;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;Node v0.10 &#x4EE5;&#x964D;&#x3067;&#x306F;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x4E2D;&#x65AD;&#x3057;&#x305F;&#x307E;&#x307E;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe workaround in this situation is to call the `resume()` method to\ntrigger \"old mode\" behavior:\n-->\n\n<p>&#x3053;&#x306E;&#x72B6;&#x6CC1;&#x306E;&#x56DE;&#x907F;&#x7B56;&#x306F;&#x3001;&#x300C;flowwing &#x30E2;&#x30FC;&#x30C9;&#x300D;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x3078;&#x306E;&#x30C8;&#x30EA;&#x30AC;&#x30FC;&#x3068;&#x3057;&#x3066;\n<code>resume()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Workaround\nnet.createServer(function(socket) {\n\n  socket.on(&apos;end&apos;, function() {\n    socket.end(&apos;I got your message (but didnt read it)\\n&apos;);\n  });\n\n  // start the flow of data, discarding it.\n  socket.resume();\n\n}).listen(1337);</code></pre>\n<!--\nIn addition to new Readable streams switching into flowing-mode, pre-v0.10\nstyle streams can be wrapped in a Readable class using the `wrap()`\nmethod.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x52A0;&#x3048;&#x3066;&#x3001;\n<code>wrap()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x3063;&#x3066; v0.10 &#x3088;&#x308A;&#x524D;&#x306E;&#x30B9;&#x30BF;&#x30A4;&#x30EB;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\nReadable &#x30AF;&#x30E9;&#x30B9;&#x3067;&#x30E9;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Object Mode&quot;,
              &quot;name&quot;: &quot;Object Mode&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;desc&quot;: &quot;<!--\nNormally, Streams operate on Strings and Buffers exclusively.\n-->\n\n<p>&#x901A;&#x5E38;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x307F;&#x3092;&#x6271;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nStreams that are in **object mode** can emit generic JavaScript values\nother than Buffers and Strings.\n-->\n\n<p><strong>&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;</strong> &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x6587;&#x5B57;&#x5217;&#x53CA;&#x3073;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x4EE5;&#x5916;&#x306E;\n&#x4E00;&#x822C;&#x7684;&#x306A;JavaScript&#x306E;&#x5024;&#x3092;&#x6271;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nA Readable stream in object mode will always return a single item from\na call to `stream.read(size)`, regardless of what the size argument\nis.\n-->\n\n<p>&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;<code>stream.read(size)</code> &#x306E;&#x30B5;&#x30A4;&#x30BA;&#x5F15;&#x6570;&#x304C;\n&#x3044;&#x304F;&#x3064;&#x3067;&#x3042;&#x308B;&#x304B;&#x306B;&#x95A2;&#x308F;&#x3089;&#x305A;&#x3001;&#x5E38;&#x306B;&#x4E00;&#x3064;&#x306E;&#x9805;&#x76EE;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nA Writable stream in object mode will always ignore the `encoding`\nargument to `stream.write(data, encoding)`.\n-->\n\n<p>&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;<code>stream.write(data, encoding)</code>\n&#x306E; <code>encoding</code> &#x5F15;&#x6570;&#x3092;&#x5E38;&#x306B;&#x7121;&#x8996;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe special value `null` still retains its special value for object\nmode streams.  That is, for object mode readable streams, `null` as a\nreturn value from `stream.read()` indicates that there is no more\ndata, and [`stream.push(null)`][] will signal the end of stream data\n(`EOF`).\n-->\n\n<p>&#x7279;&#x5225;&#x306A;&#x5024; <code>null</code> &#x306F;&#x3001;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x304A;&#x3044;&#x3066;&#x3082;\n&#x7279;&#x5225;&#x306A;&#x5024;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x306F;&#x3001;<code>stream.read()</code>\n&#x306E;&#x623B;&#x308A;&#x5024; <code>null</code> &#x306F;&#x3082;&#x3046;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7121;&#x3044;&#x3053;&#x3068;&#x3092;&#x3001;[<code>stream.push(null)</code>][]\n&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059; (<code>EOF</code>)&#x3002;\n\n</p>\n<!--\nNo streams in Node core are object mode streams.  This pattern is only\nused by userland streaming libraries.\n-->\n\n<p>Node &#x306E;&#x30B3;&#x30A2;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x306B;&#x306F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x5B58;&#x5728;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x306F;&#x30E6;&#x30FC;&#x30B6;&#x30E9;&#x30F3;&#x30C9;&#x306E;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3067;&#x306E;&#x307F;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nYou should set `objectMode` in your stream child class constructor on\nthe options object.  Setting `objectMode` mid-stream is not safe.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x306F;&#x30B3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306E; <code>options</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067; <code>objectMode</code>\n&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n<code>objectMode</code> &#x3092;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x9014;&#x4E2D;&#x3067;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x5B89;&#x5168;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;State Objects&quot;,
              &quot;name&quot;: &quot;state_objects&quot;,
              &quot;desc&quot;: &quot;<!--\n[Readable][] streams have a member object called `_readableState`.\n[Writable][] streams have a member object called `_writableState`.\n[Duplex][] streams have both.\n-->\n\n<p>[Readable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; <code>_readableState</code> &#x3068;&#x547C;&#x3070;&#x308C;&#x308B;&#x30E1;&#x30F3;&#x30D0;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n[Writable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; <code>_writableState</code> &#x3068;&#x547C;&#x3070;&#x308C;&#x308B;&#x30E1;&#x30F3;&#x30D0;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n[Duplex][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x4E21;&#x65B9;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n**These objects should generally not be modified in child classes.**\nHowever, if you have a Duplex or Transform stream that should be in\n`objectMode` on the readable side, and not in `objectMode` on the\nwritable side, then you may do this in the constructor by setting the\nflag explicitly on the appropriate state object.\n-->\n\n<p><strong>&#x901A;&#x5E38;&#x3001;&#x3053;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5909;&#x66F4;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3082;&#x3057; Duplex &#x307E;&#x305F;&#x306F; Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5074;&#x304C;\n<code>objectMode</code> &#x3067;&#x3001;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5074;&#x304C; <code>objectMode</code> &#x3067;&#x306F;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3067;\n&#x9069;&#x5207;&#x306A;&#x30B9;&#x30C6;&#x30FC;&#x30C8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x30D5;&#x30E9;&#x30B0;&#x3092;&#x660E;&#x793A;&#x7684;&#x306B;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x306A;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var util = require(&apos;util&apos;);\nvar StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;\nvar Transform = require(&apos;stream&apos;).Transform;\nutil.inherits(JSONParseStream, Transform);\n\n// Gets \\n-delimited JSON string data, and emits the parsed objects\nfunction JSONParseStream(options) {\n  if (!(this instanceof JSONParseStream))\n    return new JSONParseStream(options);\n\n  Transform.call(this, options);\n  this._writableState.objectMode = false;\n  this._readableState.objectMode = true;\n  this._buffer = &apos;&apos;;\n  this._decoder = new StringDecoder(&apos;utf8&apos;);\n}\n\nJSONParseStream.prototype._transform = function(chunk, encoding, cb) {\n  this._buffer += this._decoder.write(chunk);\n  // split on newlines\n  var lines = this._buffer.split(/\\r?\\n/);\n  // keep the last partial line buffered\n  this._buffer = lines.pop();\n  for (var l = 0; l &lt; lines.length; l++) {\n    var line = lines[l];\n    try {\n      var obj = JSON.parse(line);\n    } catch (er) {\n      this.emit(&apos;error&apos;, er);\n      return;\n    }\n    // push the parsed object out to the readable consumer\n    this.push(obj);\n  }\n  cb();\n};\n\nJSONParseStream.prototype._flush = function(cb) {\n  // Just handle any leftover\n  var rem = this._buffer.trim();\n  if (rem) {\n    try {\n      var obj = JSON.parse(rem);\n    } catch (er) {\n      this.emit(&apos;error&apos;, er);\n      return;\n    }\n    // push the parsed object out to the readable consumer\n    this.push(obj);\n  }\n  cb();\n};</code></pre>\n<!--\nThe state objects contain other useful information for debugging the\nstate of streams in your programs.  It is safe to look at them, but\nbeyond setting option flags in the constructor, it is **not** safe to\nmodify them.\n-->\n\n<p>&#x30B9;&#x30C6;&#x30FC;&#x30C8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x3001;&#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x3067;&#x5F79;&#x306B;&#x7ACB;&#x3064;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x72B6;&#x614B;&#x3092;\n&#x60C5;&#x5831;&#x3068;&#x3057;&#x3066;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;&#x305D;&#x308C;&#x3092;&#x898B;&#x308B;&#x3053;&#x3068;&#x306F;&#x5B89;&#x5168;&#x3067;&#x3059;&#x304C;&#x3001;&#x3057;&#x304B;&#x3057;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3067;&#x8A2D;&#x5B9A;&#x3057;&#x305F;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x30D5;&#x30E9;&#x30B0;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x5B89;&#x5168;&#x3067;&#x306F; <strong>&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;</strong>&#x3002;\n\n\n</p>\n<!--\n[EventEmitter]: events.html#events_class_events_eventemitter\n[Object mode]: #stream_object_mode\n[`stream.push(chunk)`]: #stream_readable_push_chunk_encoding\n[`stream.push(null)`]: #stream_readable_push_chunk_encoding\n[`stream.push()`]: #stream_readable_push_chunk_encoding\n[`unpipe()`]: #stream_readable_unpipe_destination\n[unpiped]: #stream_readable_unpipe_destination\n[tcp sockets]: net.html#net_class_net_socket\n[zlib streams]: zlib.html\n[zlib]: zlib.html\n[crypto streams]: crypto.html\n[crypto]: crypto.html\n[tls.CryptoStream]: tls.html#tls_class_cryptostream\n[process.stdin]: process.html#process_process_stdin\n[stdout]: process.html#process_process_stdout\n[process.stdout]: process.html#process_process_stdout\n[process.stderr]: process.html#process_process_stderr\n[child process stdout and stderr]: child_process.html#child_process_child_stdout\n[API for Stream Consumers]: #stream_api_for_stream_consumers\n[API for Stream Implementors]: #stream_api_for_stream_implementors\n[Readable]: #stream_class_stream_readable\n[Writable]: #stream_class_stream_writable\n[Duplex]: #stream_class_stream_duplex\n[Transform]: #stream_class_stream_transform\n[`_read(size)`]: #stream_readable_read_size_1\n[`_read()`]: #stream_readable_read_size_1\n[_read]: #stream_readable_read_size_1\n[`writable.write(chunk)`]: #stream_writable_write_chunk_encoding_callback\n[`write(chunk, encoding, callback)`]: #stream_writable_write_chunk_encoding_callback\n[`write()`]: #stream_writable_write_chunk_encoding_callback\n[`stream.write(chunk)`]: #stream_writable_write_chunk_encoding_callback\n[`_write(chunk, encoding, callback)`]: #stream_writable_write_chunk_encoding_callback_1\n[`_write()`]: #stream_writable_write_chunk_encoding_callback_1\n[_write]: #stream_writable_write_chunk_encoding_callback_1\n[`util.inherits`]: util.html#util_util_inherits_constructor_superconstructor\n[`end()`]: #stream_writable_end_chunk_encoding_callback\n-->\n\n&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;displayName&quot;: &quot;State Objects&quot;
            }
          ]
        }
      ],
      &quot;examples&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: stream.Readable&quot;,
          &quot;type&quot;: &quot;example&quot;,
          &quot;name&quot;: &quot;stream.Readable&quot;,
          &quot;desc&quot;: &quot;<!--\n`stream.Readable` is an abstract class designed to be extended with an\nunderlying implementation of the [`_read(size)`][] method.\n-->\n\n<p><code>stream.Readable</code> &#x306F;&#x62BD;&#x8C61;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x3057;&#x3066; [<code>_read(size)</code>][]\n&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x62E1;&#x5F35;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nPlease see above under [API for Stream Consumers][] for how to consume\nstreams in your programs.  What follows is an explanation of how to\nimplement Readable streams in your programs.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F;&#x3001;\n&#x524D;&#x8FF0;&#x306E; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5229;&#x7528;&#x8005;&#x306E;&#x305F;&#x3081;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x306E;&#x5F8C;&#x306B;&#x7D9A;&#x304F;&#x306E;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306E;&#x8AAC;&#x660E;&#x3067;&#x3059;&#x3002;\n\n</p>\n<h4>Example: A Counting Stream</h4>\n<!--\nThis is a basic example of a Readable stream.  It emits the numerals\nfrom 1 to 1,000,000 in ascending order, and then ends.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x57FA;&#x672C;&#x7684;&#x306A;&#x4F8B;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; 1 &#x304B;&#x3089; 1,000,000 &#x307E;&#x3067;&#x306E;&#x6570;&#x3092;&#x6607;&#x9806;&#x3067;&#x751F;&#x6210;&#x3057;&#x3001;&#x305D;&#x3057;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var Readable = require(&apos;stream&apos;).Readable;\nvar util = require(&apos;util&apos;);\nutil.inherits(Counter, Readable);\n\nfunction Counter(opt) {\n  Readable.call(this, opt);\n  this._max = 1000000;\n  this._index = 1;\n}\n\nCounter.prototype._read = function() {\n  var i = this._index++;\n  if (i &gt; this._max)\n    this.push(null);\n  else {\n    var str = &apos;&apos; + i;\n    var buf = new Buffer(str, &apos;ascii&apos;);\n    this.push(buf);\n  }\n};</code></pre>\n<h4>Example: SimpleProtocol v1 (Sub-optimal)</h4>\n<!--\nThis is similar to the `parseHeader` function described above, but\nimplemented as a custom stream.  Also, note that this implementation\ndoes not convert the incoming data to a string.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x524D;&#x306B;&#x8AAC;&#x660E;&#x3057;&#x305F; <code>parseHeader</code> &#x95A2;&#x6570;&#x3068;&#x3088;&#x304F;&#x4F3C;&#x3066;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x72EC;&#x81EA;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x307E;&#x305F;&#x3001;&#x3053;&#x306E;&#x5B9F;&#x88C5;&#x306F;&#x5165;&#x3063;&#x3066;&#x304F;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6587;&#x5B57;&#x5217;&#x306B;&#x5909;&#x63DB;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nHowever, this would be better implemented as a [Transform][] stream.  See\nbelow for a better implementation.\n-->\n\n<p>&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3053;&#x308C;&#x306F; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3067;&#x3088;&#x308A;&#x3046;&#x307E;&#x304F;&#x5B9F;&#x88C5;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x5F8C;&#x8FF0;&#x306E;&#x3088;&#x308A;&#x3088;&#x3044;&#x5B9F;&#x88C5;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// A parser for a simple data protocol.\n// The &quot;header&quot; is a JSON object, followed by 2 \\n characters, and\n// then a message body.\n//\n// NOTE: This can be done more simply as a Transform stream!\n// Using Readable directly for this is sub-optimal.  See the\n// alternative example below under the Transform section.\n\nvar Readable = require(&apos;stream&apos;).Readable;\nvar util = require(&apos;util&apos;);\n\nutil.inherits(SimpleProtocol, Readable);\n\nfunction SimpleProtocol(source, options) {\n  if (!(this instanceof SimpleProtocol))\n    return new SimpleProtocol(source, options);\n\n  Readable.call(this, options);\n  this._inBody = false;\n  this._sawFirstCr = false;\n\n  // source is a readable stream, such as a socket or file\n  this._source = source;\n\n  var self = this;\n  source.on(&apos;end&apos;, function() {\n    self.push(null);\n  });\n\n  // give it a kick whenever the source is readable\n  // read(0) will not consume any bytes\n  source.on(&apos;readable&apos;, function() {\n    self.read(0);\n  });\n\n  this._rawHeader = [];\n  this.header = null;\n}\n\nSimpleProtocol.prototype._read = function(n) {\n  if (!this._inBody) {\n    var chunk = this._source.read();\n\n    // if the source doesn&apos;t have data, we don&apos;t have data yet.\n    if (chunk === null)\n      return this.push(&apos;&apos;);\n\n    // check if the chunk has a \\n\\n\n    var split = -1;\n    for (var i = 0; i &lt; chunk.length; i++) {\n      if (chunk[i] === 10) { // &apos;\\n&apos;\n        if (this._sawFirstCr) {\n          split = i;\n          break;\n        } else {\n          this._sawFirstCr = true;\n        }\n      } else {\n        this._sawFirstCr = false;\n      }\n    }\n\n    if (split === -1) {\n      // still waiting for the \\n\\n\n      // stash the chunk, and try again.\n      this._rawHeader.push(chunk);\n      this.push(&apos;&apos;);\n    } else {\n      this._inBody = true;\n      var h = chunk.slice(0, split);\n      this._rawHeader.push(h);\n      var header = Buffer.concat(this._rawHeader).toString();\n      try {\n        this.header = JSON.parse(header);\n      } catch (er) {\n        this.emit(&apos;error&apos;, new Error(&apos;invalid simple protocol data&apos;));\n        return;\n      }\n      // now, because we got some extra data, unshift the rest\n      // back into the read queue so that our consumer will see it.\n      var b = chunk.slice(split);\n      this.unshift(b);\n\n      // and let them know that we are done parsing the header.\n      this.emit(&apos;header&apos;, this.header);\n    }\n  } else {\n    // from there on, just provide the data to our consumer.\n    // careful not to push(null), since that would indicate EOF.\n    var chunk = this._source.read();\n    if (chunk) this.push(chunk);\n  }\n};\n\n// Usage:\n// var parser = new SimpleProtocol(source);\n// Now parser is a readable stream that will emit &apos;header&apos;\n// with the parsed header data.</code></pre>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;new stream.Readable([options])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;Readable&quot;,
              &quot;* `options` {Object}\n  * `highWaterMark` {Number} The maximum number of bytes to store in\n    the internal buffer before ceasing to read from the underlying\n    resource.  Default&quot;: &quot;16kb\n  * `encoding` {String} If specified, then buffers will be decoded to\n    strings using the specified encoding.  Default=null\n  * `objectMode` {Boolean} Whether this stream should behave\n    as a stream of objects. Meaning that stream.read(n) returns\n    a single value instead of a Buffer of size n.  Default=false&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`options` {Object} (&#x4EFB;&#x610F;) &quot;,
                      &quot;options&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`highWaterMark` {Number} &#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x306E;&#x3092;&#x4E2D;&#x65AD;&#x3059;&#x308B;&#x307E;&#x3067; &#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x8CAF;&#x3081;&#x3066;&#x304A;&#x304F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x306E;&#x6700;&#x5927;&#x5024;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002; &quot;,
                          &quot;name&quot;: &quot;highWaterMark&quot;,
                          &quot;type&quot;: &quot;Number&quot;,
                          &quot;desc&quot;: &quot;&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x306E;&#x3092;&#x4E2D;&#x65AD;&#x3059;&#x308B;&#x307E;&#x3067; &#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x8CAF;&#x3081;&#x3066;&#x304A;&#x304F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x306E;&#x6700;&#x5927;&#x5024;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002;&quot;
                        },
                        {
                          &quot;textRaw&quot;: &quot;`encoding` {String} &#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306F;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067; &#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `null`&#x3002; &quot;,
                          &quot;name&quot;: &quot;encoding&quot;,
                          &quot;type&quot;: &quot;String&quot;,
                          &quot;desc&quot;: &quot;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306F;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067; &#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `null`&#x3002;&quot;
                        },
                        {
                          &quot;textRaw&quot;: &quot;`objectMode` {Boolean} &#x3053;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066; &#x632F;&#x308B;&#x821E;&#x3046;&#x3079;&#x304D;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x3053;&#x308C;&#x306F; `stream.read(n)` &#x304C;&#x30B5;&#x30A4;&#x30BA; n &#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x306F;&#x306A;&#x304F; &#x4E00;&#x3064;&#x306E;&#x5024;&#x3092;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false` &#x3067;&#x3059;&#x3002; &quot;,
                          &quot;name&quot;: &quot;objectMode&quot;,
                          &quot;type&quot;: &quot;Boolean&quot;,
                          &quot;desc&quot;: &quot;&#x3053;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066; &#x632F;&#x308B;&#x821E;&#x3046;&#x3079;&#x304D;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x3053;&#x308C;&#x306F; `stream.read(n)` &#x304C;&#x30B5;&#x30A4;&#x30BA; n &#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x306F;&#x306A;&#x304F; &#x4E00;&#x3064;&#x306E;&#x5024;&#x3092;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false` &#x3067;&#x3059;&#x3002;&quot;
                        }
                      ],
                      &quot;name&quot;: &quot;options&quot;,
                      &quot;type&quot;: &quot;Object&quot;,
                      &quot;desc&quot;: &quot;(&#x4EFB;&#x610F;)&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;options&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nIn classes that extend the Readable class, make sure to call the\nReadable constructor so that the buffering settings can be properly\ninitialized.\n-->\n\n<p><code>Readable</code> &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x78BA;&#x5B9F;&#x306B;\n&#x521D;&#x671F;&#x5316;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;&#x5FC5;&#x305A;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;readable.\\_read(size)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;\\_read&quot;,
              &quot;desc&quot;: &quot;<!--\n* `size` {Number} Number of bytes to read asynchronously\n-->\n\n<ul>\n<li><code>size</code> {Number} &#x975E;&#x540C;&#x671F;&#x306B;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x30D0;&#x30A4;&#x30C8;&#x6570;</li>\n</ul>\n<!--\nNote: **Implement this function, but do NOT call it directly.**\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3001;&#x3057;&#x304B;&#x3057;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</strong>\n\n</p>\n<!--\nThis function should NOT be called directly.  It should be implemented\nby child classes, and only called by the internal Readable class\nmethods.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3042;&#x308A;&#x3001;Readable &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x304B;&#x3089;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nAll Readable stream implementations must provide a `_read` method to\nfetch data from the underlying resource.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x53D6;&#x5F97;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B; <code>_read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThis method is prefixed with an underscore because it is internal to\nthe class that defines it, and should not be called directly by user\nprograms.  However, you **are** expected to override this method in\nyour own extension classes.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3053;&#x308C;&#x3092;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x5185;&#x90E8;&#x306E;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304B;&#x3089;\n&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;&#x306E;&#x63A5;&#x982D;&#x8F9E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x62E1;&#x5F35;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n<strong>&#x6C42;&#x3081;&#x3089;&#x308C;&#x3066;</strong>&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nWhen data is available, put it into the read queue by calling\n`readable.push(chunk)`.  If `push` returns false, then you should stop\nreading.  When `_read` is called again, you should start pushing more\ndata.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308C;&#x3070;&#x3001;<code>readable.push(chunk)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x3067;\n&#x305D;&#x308C;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>push()</code> &#x304C; false &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3092;&#x6B62;&#x3081;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n<code>_read()</code> &#x304C;&#x518D;&#x3073;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x6642;&#x304C;&#x3001;&#x3055;&#x3089;&#x306B;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FFD;&#x52A0;&#x3092;&#x958B;&#x59CB;&#x3059;&#x3079;&#x304D;&#x6642;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `size` argument is advisory.  Implementations where a \"read\" is a\nsingle call that returns data can use this to know how much data to\nfetch.  Implementations where that is not relevant, such as TCP or\nTLS, may ignore this argument, and simply provide data whenever it\nbecomes available.  There is no need, for example to \"wait\" until\n`size` bytes are available before calling [`stream.push(chunk)`][].\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x306F;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x7684;&#x3067;&#x3059;&#x3002;\n&quot;read()&quot; &#x304C;&#x4E00;&#x56DE;&#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3067;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FD4;&#x3059;&#x5B9F;&#x88C5;&#x3067;&#x306F;&#x3001;\n&#x3069;&#x308C;&#x3060;&#x3051;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D6;&#x5F97;&#x3059;&#x3079;&#x304D;&#x304B;&#x77E5;&#x308B;&#x305F;&#x3081;&#x306B;&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\nTCP&#x3084;TLS&#x306A;&#x3069;&#x3001;&#x305D;&#x308C;&#x306B;&#x95A2;&#x9023;&#x3057;&#x306A;&#x3044;&#x5B9F;&#x88C5;&#x3067;&#x306F;&#x3053;&#x306E;&#x5F15;&#x6570;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x3001;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306B;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070; [<code>stream.push(chunk)</code>][] &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3088;&#x308A;&#x524D;&#x306B;&#x3001;\n<code>size</code> &#x30D0;&#x30A4;&#x30C8;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;&#x307E;&#x3067;&#x300C;&#x5F85;&#x3064;&#x300D;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;size&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.push(chunk, [encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;push&quot;,
              &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | null | String} Chunk of data to push into the read queue\n* `encoding` {String} Encoding of String chunks.  Must be a valid\n  Buffer encoding, such as `'utf8'` or `'ascii'`\n* return {Boolean} Whether or not more pushes should be performed\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | null | String} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x30D7;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x308B;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;</li>\n<li><code>encoding</code> {String} &#x6587;&#x5B57;&#x5217;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3002;\n<code>&apos;utf8&apos;</code> &#x3084; <code>&apos;ascii&apos;</code> &#x306A;&#x3069;&#x3001;Buffer &#x306E;&#x6B63;&#x3057;&#x3044;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306E;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n<li>return {Boolean} &#x3055;&#x3089;&#x306B;&#x30D7;&#x30C3;&#x30B7;&#x30E5;&#x3057;&#x3066;&#x3082;&#x3044;&#x3044;&#x304B;&#x3069;&#x3046;&#x304B;</li>\n</ul>\n<!--\nNote: **This function should be called by Readable implementors, NOT\nby consumers of Readable streams.**\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; Readable &#x306E;&#x5B9F;&#x88C5;&#x304B;&#x3089;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;\nReadable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5229;&#x7528;&#x8005;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n\n</p>\n<!--\nThe `_read()` function will not be called again until at least one\n`push(chunk)` call is made.\n-->\n\n<p>&#x5C11;&#x306A;&#x304F;&#x3068;&#x3082;&#x4E00;&#x56DE;&#x306F; <code>push(chunk)</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x306A;&#x3044;&#x3068;&#x3001;<code>_read()</code> &#x95A2;&#x6570;&#x304C;\n&#x518D;&#x3073;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThe `Readable` class works by putting data into a read queue to be\npulled out later by calling the `read()` method when the `'readable'`\nevent fires.\n-->\n\n<p><code>Readable</code> &#x30AF;&#x30E9;&#x30B9;&#x306F;&#x3001;<code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3067;\n&#x5F8C;&#x304B;&#x3089;&#x53D6;&#x308A;&#x51FA;&#x3055;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3001;<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x6642;&#x306B;\n&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x5165;&#x308C;&#x3066;&#x304A;&#x304F;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x6A5F;&#x80FD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `push()` method will explicitly insert some data into the read\nqueue.  If it is called with `null` then it will signal the end of the\ndata (EOF).\n-->\n\n<p><code>push()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x660E;&#x793A;&#x7684;&#x306B;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x633F;&#x5165;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>null</code> &#x3068;&#x5171;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F; (EOF) &#x3053;&#x3068;&#x3092;&#x4F1D;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis API is designed to be as flexible as possible.  For example,\nyou may be wrapping a lower-level source which has some sort of\npause/resume mechanism, and a data callback.  In those cases, you\ncould wrap the low-level source object by doing something like this:\n-->\n\n<p>&#x3053;&#x306E; API &#x306F;&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x67D4;&#x8EDF;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;&#x3042;&#x308B;&#x7A2E;&#x306E;&#x4E2D;&#x65AD;&#xFF0F;&#x518D;&#x958B;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x3068;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x6301;&#x3064;&#x3001;\n&#x3088;&#x308A;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x30BD;&#x30FC;&#x30B9;&#x3092;&#x30E9;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306E;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;\n&#x30E9;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// source is an object with readStop() and readStart() methods,\n// and an `ondata` member that gets called when it has data, and\n// an `onend` member that gets called when the data is over.\n\nutil.inherits(SourceWrapper, Readable);\n\nfunction SourceWrapper(options) {\n  Readable.call(this, options);\n\n  this._source = getLowlevelSourceObject();\n  var self = this;\n\n  // Every time there&apos;s data, we push it into the internal buffer.\n  this._source.ondata = function(chunk) {\n    // if push() returns false, then we need to stop reading from source\n    if (!self.push(chunk))\n      self._source.readStop();\n  };\n\n  // When the source ends, we push the EOF-signalling `null` chunk\n  this._source.onend = function() {\n    self.push(null);\n  };\n}\n\n// _read will be called when the stream wants to pull more data in\n// the advisory size argument is ignored in this case.\nSourceWrapper.prototype._read = function(size) {\n  this._source.readStart();\n};</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;chunk&quot;
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Stream&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Crypto&quot;,
      &quot;name&quot;: &quot;crypto&quot;,
      &quot;desc&quot;: &quot;<!--\n    Stability: 2 - Unstable; API changes are being discussed for\n    future versions.  Breaking changes will be minimized.  See below.\n-->\n\n<pre><code>Stability: 2 - Unstable; &#x5C06;&#x6765;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306B;&#x304A;&#x3044;&#x3066; API &#x306E;&#x5909;&#x66F4;&#x304C;\n&#x8B70;&#x8AD6;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;&#x4E92;&#x63DB;&#x6027;&#x3092;&#x640D;&#x306A;&#x3046;&#x5909;&#x66F4;&#x306F;&#x6700;&#x5C0F;&#x9650;&#x306B;&#x306A;&#x308B;&#x4E88;&#x5B9A;&#x3067;&#x3059;&#x3002;\n&#x5F8C;&#x8FF0;&#x3057;&#x307E;&#x3059;&#x3002;</code></pre>\n<!--\nUse `require('crypto')` to access this module.\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x306B;&#x306F; <code>require(&apos;crypto&apos;)</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe crypto module offers a way of encapsulating secure credentials to be\nused as part of a secure HTTPS net or http connection.\n-->\n\n<p>&#x6697;&#x53F7;&#x5316;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x5B89;&#x5168;&#x306A; HTTPS &#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x3084; http\n&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x4E00;&#x90E8;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x3001;\n&#x5B89;&#x5168;&#x306A;&#x8A8D;&#x8A3C;&#x60C5;&#x5831;&#x3092;&#x30AB;&#x30D7;&#x30BB;&#x30EB;&#x5316;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIt also offers a set of wrappers for OpenSSL's hash, hmac, cipher,\ndecipher, sign and verify methods.\n-->\n\n<p>&#x540C;&#x6642;&#x306B; OpenSSL &#x306E;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x3001;HMAC&#x3001;&#x6697;&#x53F7;&#x3001;&#x5FA9;&#x53F7;&#x3001;&#x7F72;&#x540D;&#x3001;&#x305D;&#x3057;&#x3066;&#x691C;&#x8A3C;&#x3078;&#x306E;&#x30E9;&#x30C3;&#x30D1;&#x30FC;&#x3092;&#x4E00;&#x5F0F;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;crypto.getCiphers()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;getCiphers&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns an array with the names of the supported ciphers.\n-->\n\n<p>&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x6697;&#x53F7;&#x306E;&#x540D;&#x524D;&#x304B;&#x3089;&#x306A;&#x308B;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var ciphers = crypto.getCiphers();\nconsole.log(ciphers); // [&apos;AES-128-CBC&apos;, &apos;AES-128-CBC-HMAC-SHA1&apos;, ...]</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.getHashes()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;getHashes&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns an array with the names of the supported hash algorithms.\n-->\n\n<p>&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x306E;&#x540D;&#x524D;&#x304B;&#x3089;&#x306A;&#x308B;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<pre><code>var hashes = crypto.getHashes();\nconsole.log(hashes); // [&apos;sha&apos;, &apos;sha1&apos;, &apos;sha1WithRSAEncryption&apos;, ...]</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.createCredentials(details)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createCredentials&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a credentials object, with the optional details being a\ndictionary with keys:\n-->\n\n<p>&#x8A8D;&#x8A3C;&#x60C5;&#x5831;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>details</code>\n&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30AD;&#x30FC;&#x3092;&#x6301;&#x3064;&#x8F9E;&#x66F8;&#x3067;&#x3059;:\n\n</p>\n<!--\n* `pfx` : A string or buffer holding the PFX or PKCS12 encoded private\n  key, certificate and CA certificates\n* `key` : A string holding the PEM encoded private key\n* `passphrase` : A string of passphrase for the private key or pfx\n* `cert` : A string holding the PEM encoded certificate\n* `ca` : Either a string or list of strings of PEM encoded CA\n  certificates to trust.\n* `crl` : Either a string or list of strings of PEM encoded CRLs\n  (Certificate Revocation List)\n* `ciphers`: A string describing the ciphers to use or exclude.\n  Consult\n  <http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT>\n  for details on the format.\n-->\n\n<ul>\n<li><code>pfx</code> : PFX &#x307E;&#x305F;&#x306F; PKCS12 &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x79D8;&#x5BC6;&#x9375;&#x3001;&#x8A3C;&#x660E;&#x66F8;&#x3001;&#x304A;&#x3088;&#x3073; CA &#x306E;\n&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x542B;&#x3080;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3002;</li>\n<li><code>key</code> : PEM &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x4FDD;&#x6301;&#x3059;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3002;</li>\n<li><code>passphrase</code>: &#x79D8;&#x5BC6;&#x9375;&#x307E;&#x305F;&#x306F; pfx &#x306E;&#x30D1;&#x30B9;&#x30D5;&#x30EC;&#x30FC;&#x30BA;&#x3002;</li>\n<li><code>cert</code> : PEM &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x4FDD;&#x6301;&#x3059;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3002;</li>\n<li><code>ca</code> : &#x4FE1;&#x983C;&#x3067;&#x304D;&#x308B;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x304C; PEM &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n&#x6587;&#x5B57;&#x5217;&#x306E;&#x914D;&#x5217;&#x3002;</li>\n<li><code>crl</code> : PEM &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F; CRL (Certificate Revocation List&#x3001;\n&#x5931;&#x52B9;&#x3057;&#x305F;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x4E00;&#x89A7;) &#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x5217;&#x306E;&#x914D;&#x5217;&#x3002;</li>\n<li><code>ciphers</code>: &#x4F7F;&#x7528;&#x307E;&#x305F;&#x306F;&#x9664;&#x5916;&#x3059;&#x308B;&#x6697;&#x53F7;&#x3092;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <a href="\&quot;http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT\&quot;">http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT</a>\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n</ul>\n<!--\nIf no 'ca' details are given, then node.js will use the default\npublicly trusted list of CAs as given in\n<http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt>.\n-->\n\n<p>&apos;ca&apos; &#x306E;&#x8A73;&#x7D30;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3001;node.js &#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3068;&#x3057;&#x3066;\n</p>\n<p><a href="\&quot;http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt\&quot;">http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt</a>\n&#x3067;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x308B;&#x3001;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x308B;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;&#x516C;&#x958B;&#x3055;&#x308C;&#x305F;&#x30EA;&#x30B9;&#x30C8;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;details&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.createHash(algorithm)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createHash&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates and returns a hash object, a cryptographic hash with the given\nalgorithm which can be used to generate hash digests.\n-->\n\n<p>&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x306B;&#x3088;&#x308B;&#x6697;&#x53F7;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x95A2;&#x6570;&#x306F;&#x30C0;&#x30A4;&#x30B8;&#x30A7;&#x30B9;&#x30C8;&#x306E;&#x751F;&#x6210;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`algorithm` is dependent on the available algorithms supported by the\nversion of OpenSSL on the platform. Examples are `'sha1'`, `'md5'`,\n`'sha256'`, `'sha512'`, etc.  On recent releases, `openssl\nlist-message-digest-algorithms` will display the available digest\nalgorithms.\n-->\n\n<p><code>algorithm</code> &#x306F;&#x3001;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x4E0A;&#x306E; OpenSSL \n&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070; <code>&apos;sha1&apos;</code>&#x3001;<code>&apos;md5&apos;</code>&#x3001;<code>&apos;sha256&apos;</code>&#x3001;<code>&apos;sha512&apos;</code>&#x3001;&#x306A;&#x3069;&#x3067;&#x3059;&#x3002;\n&#x6700;&#x8FD1;&#x306E;&#x30EA;&#x30EA;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;<code>openssl list-message-digest-algorithms</code>\n&#x3067;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30C0;&#x30A4;&#x30B8;&#x30A7;&#x30B9;&#x30C8;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x304C;&#x8868;&#x793A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: this program that takes the sha1 sum of a file\n-->\n\n<p>&#x4F8B;: &#x3053;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;sha1&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x5024;&#x3092;&#x6C42;&#x3081;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var filename = process.argv[2];\nvar crypto = require(&apos;crypto&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar shasum = crypto.createHash(&apos;sha1&apos;);\n\nvar s = fs.ReadStream(filename);\ns.on(&apos;data&apos;, function(d) {\n  shasum.update(d);\n});\n\ns.on(&apos;end&apos;, function() {\n  var d = shasum.digest(&apos;hex&apos;);\n  console.log(d + &apos;  &apos; + filename);\n});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;algorithm&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.createHmac(algorithm, key)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createHmac&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates and returns a hmac object, a cryptographic hmac with the given\nalgorithm and key.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x3068;&#x30AD;&#x30FC;&#x3067; HMAC &#x3092;&#x8A08;&#x7B97;&#x3059;&#x308B;&#x3001;HMAC &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIt is a [stream](stream.html) that is both readable and writable.  The\nwritten data is used to compute the hmac.  Once the writable side of\nthe stream is ended, use the `read()` method to get the computed\ndigest.  The legacy `update` and `digest` methods are also supported.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306E;&#x4E21;&#x65B9;&#x304C;&#x53EF;&#x80FD;&#x306A; <a href="\&quot;stream.html\&quot;">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</a> &#x3067;&#x3059;&#x3002;\n&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x3092;&#x8A08;&#x7B97;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x5EA6;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5074;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x3068;&#x3001;&#x8A08;&#x7B97;&#x3055;&#x308C;&#x305F;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x30C0;&#x30A4;&#x30B8;&#x30A7;&#x30B9;&#x30C8;&#x3092;\n&#x8AAD;&#x307F;&#x51FA;&#x3059;&#x305F;&#x3081;&#x306B; <code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30EC;&#x30AC;&#x30B7;&#x30FC;&#x306A; <code>update()</code> &#x304A;&#x3088;&#x3073; <code>digest()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3082;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`algorithm` is dependent on the available algorithms supported by\nOpenSSL - see createHash above.  `key` is the hmac key to be used.\n-->\n\n<p><code>algorithm</code> &#x306F; OpenSSL &#x3067;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059; &#xFF0D; \n&#x524D;&#x8FF0;&#x306E; <code>createHash</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;algorithm&quot;
                },
                {
                  &quot;name&quot;: &quot;key&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.createCipher(algorithm, password)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createCipher&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates and returns a cipher object, with the given algorithm and\npassword.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x3068;&#x30D1;&#x30B9;&#x30EF;&#x30FC;&#x30C9;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x6697;&#x53F7;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n<!--\n`algorithm` is dependent on OpenSSL, examples are `'aes192'`, etc.  On\nrecent releases, `openssl list-cipher-algorithms` will display the\navailable cipher algorithms.  `password` is used to derive key and IV,\nwhich must be a `'binary'` encoded string or a [buffer](buffer.html).\n-->\n\n</p>\n<p><code>algorithm</code> &#x306F;&#x3001;OpenSSL &#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;&#x4F8B;&#x3048;&#x3070; <code>&apos;aes192&apos;</code> &#x306A;&#x3069;&#x3067;&#x3059;&#x3002;\n&#x6700;&#x8FD1;&#x306E;&#x30EA;&#x30EA;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;<code>openssl list-cipher-algorithms</code>\n&#x3067;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x6697;&#x53F7;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x304C;&#x8868;&#x793A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>password</code> &#x306F;&#x30AD;&#x30FC;&#x3068; IV &#x306E;&#x751F;&#x6210;&#x306B;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>&apos;binary&apos;</code> &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <a href="\&quot;buffer.html\&quot;">buffer</a>\n&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;\n\n</p>\n<!--\nIt is a [stream](stream.html) that is both readable and writable.  The\nwritten data is used to compute the hash.  Once the writable side of\nthe stream is ended, use the `read()` method to get the computed hash\ndigest.  The legacy `update` and `digest` methods are also supported.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306E;&#x4E21;&#x65B9;&#x304C;&#x53EF;&#x80FD;&#x306A; <a href="\&quot;stream.html\&quot;">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</a> &#x3067;&#x3059;&#x3002;\n&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x3092;&#x8A08;&#x7B97;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x5EA6;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5074;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x3068;&#x3001;&#x8A08;&#x7B97;&#x3055;&#x308C;&#x305F;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x30C0;&#x30A4;&#x30B8;&#x30A7;&#x30B9;&#x30C8;&#x3092;\n&#x8AAD;&#x307F;&#x51FA;&#x3059;&#x305F;&#x3081;&#x306B; <code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30EC;&#x30AC;&#x30B7;&#x30FC;&#x306A; <code>update()</code> &#x304A;&#x3088;&#x3073; <code>digest()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3082;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;algorithm&quot;
                },
                {
                  &quot;name&quot;: &quot;password&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.createCipheriv(algorithm, key, iv)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createCipheriv&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates and returns a cipher object, with the given algorithm, key and\niv.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x3068;&#x30AD;&#x30FC;&#x304A;&#x3088;&#x3073; IV &#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x6697;&#x53F7;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3066;\n&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`algorithm` is the same as the argument to `createCipher()`.  `key` is\nthe raw key used by the algorithm.  `iv` is an [initialization\nvector](http://en.wikipedia.org/wiki/Initialization_vector).\n-->\n\n<p><code>algorithm</code> &#x306F; <code>createCipher()</code> &#x306E;&#x5F15;&#x6570;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n<code>key</code> &#x306F;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x3067;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x308B;&#x751F;&#x306E;&#x30AD;&#x30FC;&#x3067;&#x3059;&#x3002;\n<code>iv</code> &#x306F;<a href="\&quot;http://en.wikipedia.org/wiki/Initialization_vector\&quot;">initialization\nvector</a> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n`key` and `iv` must be `'binary'` encoded strings or\n[buffers](buffer.html).\n-->\n\n<p><code>key</code> &#x3068; <code>iv</code> &#x306F; <code>&apos;binary&apos;</code> &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n<a href="\&quot;buffer.html\&quot;">buffers</a> &#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;algorithm&quot;
                },
                {
                  &quot;name&quot;: &quot;key&quot;
                },
                {
                  &quot;name&quot;: &quot;iv&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.createDecipher(algorithm, password)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createDecipher&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates and returns a decipher object, with the given algorithm and\nkey.  This is the mirror of the [createCipher()][] above.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x3068;&#x30D1;&#x30B9;&#x30EF;&#x30FC;&#x30C9;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x5FA9;&#x53F7;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x524D;&#x8FF0;&#x306E; [createCipher()][] &#x306E;&#x93E1;&#x5199;&#x3057;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;algorithm&quot;
                },
                {
                  &quot;name&quot;: &quot;password&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.createDecipheriv(algorithm, key, iv)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createDecipheriv&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates and returns a decipher object, with the given algorithm, key\nand iv.  This is the mirror of the [createCipheriv()][] above.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x3068;&#x30AD;&#x30FC;&#x3001;IV &#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x5FA9;&#x53F7;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x524D;&#x8FF0;&#x306E; [createCipheriv()][] &#x306E;&#x93E1;&#x5199;&#x3057;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;algorithm&quot;
                },
                {
                  &quot;name&quot;: &quot;key&quot;
                },
                {
                  &quot;name&quot;: &quot;iv&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.createSign(algorithm)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createSign&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates and returns a signing object, with the given algorithm.  On\nrecent OpenSSL releases, `openssl list-public-key-algorithms` will\ndisplay the available signing algorithms. Examples are `'RSA-SHA256'`.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x3067;&#x7F72;&#x540D;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6700;&#x8FD1;&#x306E;OpenSSL&#x306E;&#x30EA;&#x30EA;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;<code>openssl list-public-key-algorithms</code>\n&#x3067;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x7F72;&#x540D;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x306E;&#x4E00;&#x89A7;&#x304C;&#x8868;&#x793A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x4F8B;&#x3048;&#x3070; &apos;RSA-SHA256&apos;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;algorithm&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.createVerify(algorithm)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createVerify&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates and returns a verification object, with the given algorithm.\nThis is the mirror of the signing object above.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x3067;&#x691C;&#x8A3C;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;&#x3053;&#x308C;&#x306F;&#x524D;&#x8FF0;&#x306E;&#x7F72;&#x540D;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x93E1;&#x5199;&#x3057;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;algorithm&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.createDiffieHellman(prime_length)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createDiffieHellman&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a Diffie-Hellman key exchange object and generates a prime of\nthe given bit length. The generator used is `2`.\n-->\n\n<p>&#x30C7;&#x30A3;&#x30D5;&#x30A3;&#x30FC;&#x30FB;&#x30D8;&#x30EB;&#x30DE;&#x30F3;&#x9375;&#x5171;&#x6709;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3001;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x9577;&#x3055;&#x306E;&#x7D20;&#x6570;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;&#x751F;&#x6210;&#x5143;&#x306F; <code>2</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;prime_length&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.createDiffieHellman(prime, [encoding])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createDiffieHellman&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a Diffie-Hellman key exchange object using the supplied prime.\nThe generator used is `2`. Encoding can be `'binary'`, `'hex'`, or\n`'base64'`.  If no encoding is specified, then a buffer is expected.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x7D20;&#x6570;&#x304B;&#x3089;&#x30C7;&#x30A3;&#x30D5;&#x30A3;&#x30FC;&#x30FB;&#x30D8;&#x30EB;&#x30DE;&#x30F3;&#x9375;&#x5171;&#x6709;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x751F;&#x6210;&#x5143;&#x306F; <code>2</code> &#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>&apos;binary&apos;</code>&#x3001;<code>&apos;hex&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;prime&quot;
                },
                {
                  &quot;name&quot;: &quot;encoding&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.getDiffieHellman(group_name)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;getDiffieHellman&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a predefined Diffie-Hellman key exchange object.  The\nsupported groups are: `'modp1'`, `'modp2'`, `'modp5'` (defined in [RFC\n2412][]) and `'modp14'`, `'modp15'`, `'modp16'`, `'modp17'`,\n`'modp18'` (defined in [RFC 3526][]).  The returned object mimics the\ninterface of objects created by [crypto.createDiffieHellman()][]\nabove, but will not allow to change the keys (with\n[diffieHellman.setPublicKey()][] for example).  The advantage of using\nthis routine is that the parties don't have to generate nor exchange\ngroup modulus beforehand, saving both processor and communication\ntime.\n-->\n\n<p>&#x4E8B;&#x524D;&#x306B;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x305F; Diffie-Hellman &#x9375;&#x4EA4;&#x63DB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x308B;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x306F;&#x3001;<code>&apos;modp1&apos;</code>, <code>&apos;modp2&apos;</code>, <code>&apos;modp5&apos;</code>\n([RFC 2412][] &#x3067;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x308B;)&#x3001;\n&#x304A;&#x3088;&#x3073; <code>&apos;modp14&apos;</code>, <code>&apos;modp15&apos;</code>, <code>&apos;modp16&apos;</code>, <code>&apos;modp17&apos;</code>, <code>&apos;modp18&apos;</code>\n([RFC 3526][] &#x3067;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x308B;) &#x3067;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x3001;&#x524D;&#x8FF0;&#x306E;\n[crypto.createDiffieHellman()][]\n&#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x6A21;&#x5023;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x3001;\n(&#x305F;&#x3068;&#x3048;&#x3070; [diffieHellman.setPublicKey()][] &#x3067;)\n&#x9375;&#x3092;&#x4EA4;&#x63DB;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x30EB;&#x30FC;&#x30C1;&#x30F3;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306B;&#x3088;&#x308B;&#x30A2;&#x30C9;&#x30D0;&#x30F3;&#x30C6;&#x30FC;&#x30B8;&#x306F;&#x3001;\n&#x4E8B;&#x524D;&#x306B;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x4FC2;&#x6570;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x4EA4;&#x63DB;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x3082;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;\n&#x51E6;&#x7406;&#x3068;&#x901A;&#x4FE1;&#x306E;&#x6642;&#x9593;&#x3092;&#x5171;&#x306B;&#x7BC0;&#x7D04;&#x3067;&#x304D;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample (obtaining a shared secret):\n-->\n\n<p>&#x4F8B; (&#x5171;&#x6709;&#x9375;&#x3092;&#x53D6;&#x5F97;):\n\n</p>\n<pre><code>var crypto = require(&apos;crypto&apos;);\nvar alice = crypto.getDiffieHellman(&apos;modp5&apos;);\nvar bob = crypto.getDiffieHellman(&apos;modp5&apos;);\n\nalice.generateKeys();\nbob.generateKeys();\n\nvar alice_secret = alice.computeSecret(bob.getPublicKey(), null, &apos;hex&apos;);\nvar bob_secret = bob.computeSecret(alice.getPublicKey(), null, &apos;hex&apos;);\n\n/* alice_secret and bob_secret should be the same */\nconsole.log(alice_secret == bob_secret);</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;group_name&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.pbkdf2(password, salt, iterations, keylen, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;pbkdf2&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous PBKDF2 applies pseudorandom function HMAC-SHA1 to derive\na key of given length from the given password, salt and iterations.\nThe callback gets two arguments `(err, derivedKey)`.\n-->\n\n<p>&#x7591;&#x4F3C;&#x4E71;&#x6570;&#x3092; HMAC-SHA1 &#x95A2;&#x6570;&#x306B;&#x9069;&#x7528;&#x3057;&#x3066;&#x3001;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30D1;&#x30B9;&#x30EF;&#x30FC;&#x30C9;&#x3068; salt \n(&#x30E9;&#x30F3;&#x30C0;&#x30E0;&#x306A;&#x30D0;&#x30A4;&#x30C8;&#x5024;)&#x3001;&#x304A;&#x3088;&#x3073;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x304B;&#x3089;&#x3001;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x9577;&#x3055;&#x306E;&#x9375;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x3001;\n&#x975E;&#x540C;&#x671F;&#x306E; PBKDF2 &#x3067;&#x3059;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;&#x306F;&#x4E8C;&#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B; <code>(err, derivedKey)</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;password&quot;
                },
                {
                  &quot;name&quot;: &quot;salt&quot;
                },
                {
                  &quot;name&quot;: &quot;iterations&quot;
                },
                {
                  &quot;name&quot;: &quot;keylen&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.pbkdf2Sync(password, salt, iterations, keylen)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;pbkdf2Sync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous PBKDF2 function.  Returns derivedKey or throws error.\n-->\n\n<p>&#x540C;&#x671F;&#x7248;&#x306E; PBKDF2 &#x95A2;&#x6570;&#x3002;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x9375;&#x3092;&#x8FD4;&#x3059;&#x304B;&#x3001;&#x4F8B;&#x5916;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;password&quot;
                },
                {
                  &quot;name&quot;: &quot;salt&quot;
                },
                {
                  &quot;name&quot;: &quot;iterations&quot;
                },
                {
                  &quot;name&quot;: &quot;keylen&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.randomBytes(size, [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;randomBytes&quot;,
          &quot;desc&quot;: &quot;<!--\nGenerates cryptographically strong pseudo-random data. Usage:\n-->\n\n<p>&#x6697;&#x53F7;&#x5B66;&#x7684;&#x3067;&#x3001;&#x5F37;&#x3044;&#x7591;&#x4F3C;&#x4E71;&#x6570;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;&#x4F7F;&#x7528;&#x6CD5;:\n\n</p>\n<pre><code>// async\ncrypto.randomBytes(256, function(ex, buf) {\n  if (ex) throw ex;\n  console.log(&apos;Have %d bytes of random data: %s&apos;, buf.length, buf);\n});\n\n// sync\ntry {\n  var buf = crypto.randomBytes(256);\n  console.log(&apos;Have %d bytes of random data: %s&apos;, buf.length, buf);\n} catch (ex) {\n  // handle error\n  // most likely, entropy sources are drained\n}</code></pre>\n<!--\nNOTE: Will throw error or invoke callback with error, if there is not enough\naccumulated entropy to generate cryptographically strong data. In other words,\n`crypto.randomBytes` without callback will not block even if all entropy sources\nare drained.\n-->\n\n<p>&#x6CE8;&#x610F;: &#x3082;&#x3057;&#x6697;&#x53F7;&#x7406;&#x8AD6;&#x7684;&#x306B;&#x5F37;&#x3044;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x5341;&#x5206;&#x306A;&#x7D2F;&#x7A4D;&#x30A8;&#x30F3;&#x30C8;&#x30ED;&#x30D4;&#x30FC;&#x304C;\n&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x308B;&#x304B;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x3068;&#x5171;&#x306B;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x547C;&#x3070;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A00;&#x3044;&#x63DB;&#x3048;&#x308B;&#x3068;&#x3001;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x6E21;&#x3055;&#x305A;&#x306B; <code>crypto.randomBytes()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x3082;&#x3001;\n&#x5168;&#x3066;&#x306E;&#x30A8;&#x30F3;&#x30C8;&#x30ED;&#x30D4;&#x30FC;&#x6E90;&#x304C;&#x67AF;&#x6E07;&#x3059;&#x308B;&#x307E;&#x3067;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x308F;&#x3051;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;size&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;crypto.pseudoRandomBytes(size, [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;pseudoRandomBytes&quot;,
          &quot;desc&quot;: &quot;<!--\nGenerates *non*-cryptographically strong pseudo-random data. The data\nreturned will be unique if it is sufficiently long, but is not\nnecessarily unpredictable. For this reason, the output of this\nfunction should never be used where unpredictability is important,\nsuch as in the generation of encryption keys.\n-->\n\n<p>&#x6697;&#x53F7;&#x5B66;&#x7684;&#x3067;&#x306F; <em>&#x306A;&#x3044;</em>&#x3001;&#x5F37;&#x3044;&#x7591;&#x4F3C;&#x4E71;&#x6570;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5341;&#x5206;&#x306B;&#x9577;&#x3051;&#x308C;&#x3070;&#x30E6;&#x30CB;&#x30FC;&#x30AF;&#x3067;&#x3059;&#x304C;&#x3001;\n&#x5FC5;&#x305A;&#x3057;&#x3082;&#x4E88;&#x6E2C;&#x4E0D;&#x53EF;&#x80FD;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x7406;&#x7531;&#x306E;&#x305F;&#x3081;&#x3001;&#x3053;&#x306E;&#x95A2;&#x6570;&#x306E;&#x51FA;&#x529B;&#x3092;&#x6697;&#x53F7;&#x5316;&#x30AD;&#x30FC;&#x306E;&#x751F;&#x6210;&#x306A;&#x3069;&#x3001;&#x4E88;&#x6E2C;&#x4E0D;&#x53EF;&#x80FD;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x304C;\n&#x91CD;&#x8981;&#x306A;&#x3068;&#x3053;&#x308D;&#x3067;&#x306F;&#x6C7A;&#x3057;&#x3066;&#x4F7F;&#x7528;&#x3057;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nUsage is otherwise identical to `crypto.randomBytes`.\n-->\n\n<p>&#x4ED6;&#x306E;&#x4F7F;&#x3044;&#x65B9;&#x306F; <code>crypto.randomBytes</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;size&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: Hash&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Hash&quot;,
          &quot;desc&quot;: &quot;<!--\nThe class for creating hash digests of data.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x30C0;&#x30A4;&#x30B8;&#x30A7;&#x30B9;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIt is a [stream](stream.html) that is both readable and writable.  The\nwritten data is used to compute the hash.  Once the writable side of\nthe stream is ended, use the `read()` method to get the computed hash\ndigest.  The legacy `update` and `digest` methods are also supported.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306E;&#x4E21;&#x65B9;&#x304C;&#x53EF;&#x80FD;&#x306A; <a href="\&quot;stream.html\&quot;">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</a> &#x3067;&#x3059;&#x3002;\n&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x3092;&#x8A08;&#x7B97;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x5EA6;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5074;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x3068;&#x3001;&#x8A08;&#x7B97;&#x3055;&#x308C;&#x305F;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x30C0;&#x30A4;&#x30B8;&#x30A7;&#x30B9;&#x30C8;&#x3092;\n&#x8AAD;&#x307F;&#x51FA;&#x3059;&#x305F;&#x3081;&#x306B; <code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30EC;&#x30AC;&#x30B7;&#x30FC;&#x306A; <code>update()</code> &#x304A;&#x3088;&#x3073; <code>digest()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3082;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nReturned by `crypto.createHash`.\n-->\n\n<p><code>crypto.createHash()</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;hash.update(data, [input_encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;update&quot;,
              &quot;desc&quot;: &quot;<!--\nUpdates the hash content with the given `data`, the encoding of which\nis given in `input_encoding` and can be `'utf8'`, `'ascii'` or\n`'binary'`.  If no encoding is provided and the input is a string an\nencoding of `'binary'` is enforced. If `data` is a `Buffer` then\n`input_encoding` is ignored.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>data</code> &#x3067;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x306E;&#x5185;&#x5BB9;&#x3092;&#x66F4;&#x65B0;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>input_encoding</code> &#x3067;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x3001;<code>&apos;utf8&apos;</code>&#x3001;<code>&apos;ascii&apos;</code>&#x3001;\n&#x307E;&#x305F;&#x306F; <code>&apos;binary&apos;</code> &#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>data</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F;\n<code>&apos;binary&apos;</code> &#x304C;&#x5F37;&#x5236;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>data</code> &#x304C; <code>Buffer</code> &#x306A;&#x3089;&#x3001;<code>input_encoding</code> &#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis can be called many times with new data as it is streamed.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x65B0;&#x3057;&#x3044;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x6D41;&#x3055;&#x308C;&#x308B;&#x969B;&#x306B;&#x4F55;&#x5EA6;&#x3082;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;
                    },
                    {
                      &quot;name&quot;: &quot;input_encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;hash.digest([encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;digest&quot;,
              &quot;desc&quot;: &quot;<!--\nCalculates the digest of all of the passed data to be hashed.  The\n`encoding` can be `'hex'`, `'binary'` or `'base64'`.  If no encoding\nis provided, then a buffer is returned.\n-->\n\n<p>&#x6E21;&#x3055;&#x308C;&#x305F;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x5316;&#x3055;&#x308C;&#x305F;&#x30C0;&#x30A4;&#x30B8;&#x30A7;&#x30B9;&#x30C8;&#x3092;&#x8A08;&#x7B97;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>encoding</code> &#x306F; <code>&apos;hex&apos;</code>&#x3001;<code>&apos;binary&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote: `hash` object can not be used after `digest()` method has been\ncalled.\n-->\n\n<p>&#x6CE8;&#x610F;: <code>digest()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3067; <code>hash</code> \n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: Hmac&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Hmac&quot;,
          &quot;desc&quot;: &quot;<!--\nClass for creating cryptographic hmac content.\n\nReturned by `crypto.createHmac`.\n-->\n\n<p>hmac &#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>crypto.createHamc</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;hmac.update(data)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;update&quot;,
              &quot;desc&quot;: &quot;<!--\nUpdate the hmac content with the given `data`.  This can be called\nmany times with new data as it is streamed.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>data</code> &#x3067; HMAC &#x306E;&#x5185;&#x5BB9;&#x3092;&#x66F4;&#x65B0;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x65B0;&#x3057;&#x3044;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x6D41;&#x3055;&#x308C;&#x308B;&#x969B;&#x306B;&#x4F55;&#x5EA6;&#x3082;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;hmac.digest([encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;digest&quot;,
              &quot;desc&quot;: &quot;<!--\nCalculates the digest of all of the passed data to the hmac.  The\n`encoding` can be `'hex'`, `'binary'` or `'base64'`.  If no encoding\nis provided, then a buffer is returned.\n-->\n\n<p>&#x6E21;&#x3055;&#x308C;&#x305F;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C; HMAC &#x5316;&#x3055;&#x308C;&#x305F;&#x30C0;&#x30A4;&#x30B8;&#x30A7;&#x30B9;&#x30C8;&#x3092;&#x8A08;&#x7B97;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>encoding</code> &#x306F; <code>&apos;hex&apos;</code>&#x3001;<code>&apos;binary&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote: `hmac` object can not be used after `digest()` method has been\ncalled.\n-->\n\n<p>&#x6CE8;&#x610F;: <code>digest()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3067; <code>hmac</code> \n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: Cipher&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Cipher&quot;,
          &quot;desc&quot;: &quot;<!--\nClass for encrypting data.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6697;&#x53F7;&#x5316;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nReturned by `crypto.createCipher` and `crypto.createCipheriv`.\n-->\n\n<p><code>crypto.createCipher</code> &#x304A;&#x3088;&#x3073; <code>crypto.createCipheriv</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCipher objects are [streams](stream.html) that are both readable and\nwritable.  The written plain text data is used to produce the\nencrypted data on the readable side.  The legacy `update` and `final`\nmethods are also supported.\n-->\n\n<p>&#x6697;&#x53F7;&#x5316;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306E;&#x4E21;&#x65B9;&#x304C;&#x53EF;&#x80FD;&#x306A;\n<a href="\&quot;stream.html\&quot;">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</a> &#x3067;&#x3059;&#x3002;\n&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30D7;&#x30EC;&#x30FC;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5074;&#x306B;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x751F;&#x6210;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30EC;&#x30AC;&#x30B7;&#x30FC;&#x306A; <code>update()</code> &#x304A;&#x3088;&#x3073; <code>final()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3082;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;cipher.update(data, [input_encoding], [output_encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;update&quot;,
              &quot;desc&quot;: &quot;<!--\nUpdates the cipher with `data`, the encoding of which is given in\n`input_encoding` and can be `'utf8'`, `'ascii'` or `'binary'`.  If no\nencoding is provided, then a buffer is expected.\nIf `data` is a `Buffer` then `input_encoding` is ignored.\n-->\n\n<p><code>data</code> &#x3067;&#x6697;&#x53F7;&#x3092;&#x66F4;&#x65B0;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>input_encoding</code> &#x3067;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>&apos;utf8&apos;</code>&#x3001;<code>&apos;ascii&apos;</code>&#x3001;<code>&apos;binary&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x671F;&#x5F85;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>data</code> &#x304C; <code>Buffer</code> &#x306A;&#x3089;&#x3001;<code>input_encoding</code> &#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `output_encoding` specifies the output format of the enciphered\ndata, and can be `'binary'`, `'base64'` or `'hex'`.  If no encoding is\nprovided, then a buffer is returned.\n-->\n\n<p><code>output_encoding</code> &#x306F;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x51FA;&#x529B;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3082;&#x306E;&#x3067;&#x3001;\n<code>&apos;utf8&apos;</code>&#x3001;<code>&apos;ascii&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;binary&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns the enciphered contents, and can be called many times with new\ndata as it is streamed.\n-->\n\n<p>&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30F3;&#x30C6;&#x30F3;&#x30C4;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x3053;&#x308C;&#x306F;&#x65B0;&#x3057;&#x3044;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x6D41;&#x3055;&#x308C;&#x308B;&#x969B;&#x306B;&#x4F55;&#x5EA6;&#x3082;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;
                    },
                    {
                      &quot;name&quot;: &quot;input_encoding&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;output_encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;cipher.final([output_encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;final&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns any remaining enciphered contents, with `output_encoding`\nbeing one of: `'binary'`, `'base64'` or `'hex'`.  If no encoding is\nprovided, then a buffer is returned.\n-->\n\n<p>&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30F3;&#x30C6;&#x30F3;&#x30C4;&#x306E;&#x6B8B;&#x308A;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>output_encoding</code> &#x306F;&#x6B21;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;: <code>&apos;binary&apos;</code>&#x3001;<code>&apos;base64&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;hex&apos;</code>&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote: `cipher` object can not be used after `final()` method has been\ncalled.\n-->\n\n<p>&#x6CE8;&#x610F;: <code>final()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3067; <code>cipher</code> \n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;output_encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;cipher.setAutoPadding(auto_padding=true)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setAutoPadding&quot;,
              &quot;desc&quot;: &quot;<!--\nYou can disable automatic padding of the input data to block size. If\n`auto_padding` is false, the length of the entire input data must be a\nmultiple of the cipher's block size or `final` will fail.  Useful for\nnon-standard padding, e.g. using `0x0` instead of PKCS padding. You\nmust call this before `cipher.final`.\n-->\n\n<p>&#x5165;&#x529B;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x30B5;&#x30A4;&#x30BA;&#x306B;&#x30D1;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;\n&#x6291;&#x6B62;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>auto_padding</code> &#x304C; <code>false</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x5165;&#x529B;&#x30C7;&#x30FC;&#x30BF;&#x5168;&#x4F53;&#x306E;&#x9577;&#x3055;&#x306F;\n&#x6697;&#x53F7;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x30B5;&#x30A4;&#x30BA;&#x306E;&#x500D;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;<code>final()</code> &#x306F;&#x5931;&#x6557;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x975E;&#x6A19;&#x6E96;&#x306E;&#x30D1;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3001;&#x305F;&#x3068;&#x3048;&#x3070; PKCS &#x30D1;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B;\n<code>0x0</code> &#x3092;&#x4F7F;&#x3046;&#x5834;&#x5408;&#x306B;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;\n<code>cipher.final()</code> &#x306E;&#x524D;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;auto_padding&quot;,
                      &quot;default&quot;: &quot;true&quot;
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: Decipher&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Decipher&quot;,
          &quot;desc&quot;: &quot;<!--\nClass for decrypting data.\n\nReturned by `crypto.createDecipher` and `crypto.createDecipheriv`.\n-->\n\n<p>&#x5FA9;&#x53F7;&#x5316;&#x306E;&#x305F;&#x3081;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>crypto.createDecipher</code> &#x304A;&#x3088;&#x3073; <code>crypto.createDecipheriv</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nDecipher objects are [streams](stream.html) that are both readable and\nwritable.  The written enciphered data is used to produce the\nplain-text data on the the readable side.  The legacy `update` and\n`final` methods are also supported.\n-->\n\n<p>&#x5FA9;&#x53F7;&#x5316;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306E;&#x4E21;&#x65B9;&#x304C;&#x53EF;&#x80FD;&#x306A;\n<a href="\&quot;stream.html\&quot;">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</a> &#x3067;&#x3059;&#x3002;\n&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x6697;&#x53F7;&#x5316;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5074;&#x306B;&#x30D7;&#x30EC;&#x30FC;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x751F;&#x6210;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30EC;&#x30AC;&#x30B7;&#x30FC;&#x306A; <code>update()</code> &#x304A;&#x3088;&#x3073; <code>final()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3082;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;decipher.update(data, [input_encoding], [output_encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;update&quot;,
              &quot;desc&quot;: &quot;<!--\nUpdates the decipher with `data`, which is encoded in `'binary'`,\n`'base64'` or `'hex'`.  If no encoding is provided, then a buffer is\nexpected.\nIf `data` is a `Buffer` then `input_encoding` is ignored.\n-->\n\n<p><code>&apos;binary&apos;</code>&#x3001;<code>&apos;base64&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;hex&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x5FA9;&#x53F7;&#x3092;\n<code>data</code> &#x3067;&#x66F4;&#x65B0;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x671F;&#x5F85;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>data</code> &#x304C; <code>Buffer</code> &#x306A;&#x3089;&#x3001;<code>input_encoding</code> &#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `output_decoding` specifies in what format to return the\ndeciphered plaintext: `'binary'`, `'ascii'` or `'utf8'`.  If no\nencoding is provided, then a buffer is returned.\n-->\n\n<p><code>output_decoding</code> &#x306F;&#x5FA9;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30D7;&#x30EC;&#x30FC;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306E;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3082;&#x306E;&#x3067;&#x3001;\n<code>&apos;binary&apos;</code>&#x3001;<code>&apos;ascii&apos;</code> &#x3042;&#x308B;&#x3044;&#x306F; <code>&apos;utf8&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;
                    },
                    {
                      &quot;name&quot;: &quot;input_encoding&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;output_encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;decipher.final([output_encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;final&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns any remaining plaintext which is deciphered, with\n`output_encoding` being one of: `'binary'`, `'ascii'` or `'utf8'`.  If\nno encoding is provided, then a buffer is returned.\n-->\n\n<p>&#x5FA9;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30D7;&#x30EC;&#x30FC;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306E;&#x6B8B;&#x308A;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>output_decoding</code> &#x306F; <code>&apos;binary&apos;</code>&#x3001;<code>&apos;ascii&apos;</code> &#x3042;&#x308B;&#x3044;&#x306F; <code>&apos;utf8&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote: `decipher` object can not be used after `final()` method has been\ncalled.\n-->\n\n<p>&#x6CE8;&#x610F;: <code>final()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3067; <code>decipher</code> \n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;output_encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;decipher.setAutoPadding(auto_padding=true)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setAutoPadding&quot;,
              &quot;desc&quot;: &quot;<!--\nYou can disable auto padding if the data has been encrypted without\nstandard block padding to prevent `decipher.final` from checking and\nremoving it. Can only work if the input data's length is a multiple of\nthe ciphers block size. You must call this before streaming data to\n`decipher.update`.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x304C;&#x975E;&#x6A19;&#x6E96;&#x306E;&#x30D1;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x3001;\n<code>decipher.final()</code> &#x306B;&#x3088;&#x308B;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3092;&#x7121;&#x52B9;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x5165;&#x529B;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x9577;&#x3055;&#x304C;&#x6697;&#x53F7;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x30B5;&#x30A4;&#x30BA;&#x306E;&#x500D;&#x6570;&#x306E;&#x5834;&#x5408;&#x306E;&#x307F;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>decipher.update()</code> &#x306E;&#x524D;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;auto_padding&quot;,
                      &quot;default&quot;: &quot;true&quot;
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: Sign&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Sign&quot;,
          &quot;desc&quot;: &quot;<!--\nClass for generating signatures.\n\nReturned by `crypto.createSign`.\n-->\n\n<p>&#x7F72;&#x540D;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>crypto.createSign</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nSign objects are writable [streams](stream.html).  The written data is\nused to generate the signature.  Once all of the data has been\nwritten, the `sign` method will return the signature.  The legacy\n`update` method is also supported.\n-->\n\n<p>&#x7F72;&#x540D;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x306A; <a href="\&quot;stream.html\&quot;">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</a> &#x3067;&#x3059;&#x3002;\n&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x7F72;&#x540D;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x3068;&#x3001;<code>sign()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x305D;&#x306E;&#x7F72;&#x540D;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30EC;&#x30AC;&#x30B7;&#x30FC;&#x306A; <code>update()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3082;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;sign.update(data)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;update&quot;,
              &quot;desc&quot;: &quot;<!--\nUpdates the sign object with data.  This can be called many times\nwith new data as it is streamed.\n-->\n\n<p>&#x7F72;&#x540D;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x30C7;&#x30FC;&#x30BF;&#x3067;&#x66F4;&#x65B0;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x65B0;&#x3057;&#x3044;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x6D41;&#x3055;&#x308C;&#x308B;&#x969B;&#x306B;&#x4F55;&#x5EA6;&#x3082;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;sign.sign(private_key, [output_format])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;sign&quot;,
              &quot;desc&quot;: &quot;<!--\nCalculates the signature on all the updated data passed through the\nsign.  `private_key` is a string containing the PEM encoded private\nkey for signing.\n-->\n\n<p>&#x7F72;&#x540D;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x5168;&#x3066;&#x306E;&#x66F4;&#x65B0;&#x30C7;&#x30FC;&#x30BF;&#x3067;&#x7F72;&#x540D;&#x3092;&#x8A08;&#x7B97;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>private_key</code> &#x306F; PEM &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x5185;&#x5BB9;&#x3068;&#x3059;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns the signature in `output_format` which can be `'binary'`,\n`'hex'` or `'base64'`. If no encoding is provided, then a buffer is\nreturned.\n-->\n\n<p><code>&apos;binary&apos;</code>&#x3001;<code>&apos;hex&apos;</code>&#x3001;&#x3042;&#x308B;&#x3044;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x305F; <code>output_format</code>\n&#x306B;&#x3088;&#x308B;&#x7F72;&#x540D;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote: `sign` object can not be used after `sign()` method has been\ncalled.\n-->\n\n<p>&#x6CE8;&#x610F;: <code>sign()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3067; <code>sign</code> \n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;private_key&quot;
                    },
                    {
                      &quot;name&quot;: &quot;output_format&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: Verify&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Verify&quot;,
          &quot;desc&quot;: &quot;<!--\nClass for verifying signatures.\n\nReturned by `crypto.createVerify`.\n-->\n\n<p>&#x7F72;&#x540D;&#x3092;&#x691C;&#x8A3C;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>crypto.createVerify</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nVerify objects are writable [streams](stream.html).  The written data\nis used to validate against the supplied signature.  Once all of the\ndata has been written, the `verify` method will return true if the\nsupplied signature is valid.  The legacy `update` method is also\nsupported.\n-->\n\n<p>&#x691C;&#x8A3C;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x306A; <a href="\&quot;stream.html\&quot;">&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</a> &#x3067;&#x3059;&#x3002;\n&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x7F72;&#x540D;&#x3092;&#x691C;&#x8A3C;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x3068;&#x3001;<code>verify()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x7F72;&#x540D;&#x304C;&#x6B63;&#x3057;&#x3051;&#x308C;&#x3070;\n<code>true</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30EC;&#x30AC;&#x30B7;&#x30FC;&#x306A; <code>update()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3082;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;verifier.update(data)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;update&quot;,
              &quot;desc&quot;: &quot;<!--\nUpdates the verifier object with data.  This can be called many times\nwith new data as it is streamed.\n-->\n\n<p>&#x691C;&#x8A3C;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x30C7;&#x30FC;&#x30BF;&#x3067;&#x66F4;&#x65B0;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x65B0;&#x3057;&#x3044;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x6D41;&#x3055;&#x308C;&#x308B;&#x969B;&#x306B;&#x4F55;&#x5EA6;&#x3082;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;verifier.verify(object, signature, [signature_format])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;verify&quot;,
              &quot;desc&quot;: &quot;<!--\nVerifies the signed data by using the `object` and `signature`.\n`object` is  a string containing a PEM encoded object, which can be\none of RSA public key, DSA public key, or X.509 certificate.\n`signature` is the previously calculated signature for the data, in\nthe `signature_format` which can be `'binary'`, `'hex'` or `'base64'`.\nIf no encoding is specified, then a buffer is expected.\n-->\n\n<p>&#x7F72;&#x540D;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092; <code>object</code> &#x3068; <code>signature</code> &#x3067;&#x691C;&#x8A3C;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>object</code> &#x306F; RSA &#x516C;&#x958B;&#x9375;&#x3001;DSA &#x516C;&#x958B;&#x9375;&#x3001;X.509&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3092;\nPEM &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n<code>signature</code> &#x306F;&#x5148;&#x306B;&#x8A08;&#x7B97;&#x3057;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x7F72;&#x540D;&#x3067;&#x3001;\n&#x305D;&#x306E; <code>signature_format</code> &#x306F; <code>&apos;binary&apos;</code>&#x3001;<code>&apos;hex&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code>\n&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x671F;&#x5F85;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns true or false depending on the validity of the signature for\nthe data and public key.\n-->\n\n<p>&#x7F72;&#x540D;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3068;&#x516C;&#x958B;&#x9375;&#x306B;&#x3088;&#x308B;&#x691C;&#x8A3C;&#x306E;&#x7D50;&#x679C;&#x306B;&#x3088;&#x3063;&#x3066; true &#x307E;&#x305F;&#x306F; false &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote: `verifier` object can not be used after `verify()` method has been\ncalled.\n-->\n\n<p>&#x6CE8;&#x610F;: <code>verify()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x5F8C;&#x3067; <code>verifier</code> \n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;object&quot;
                    },
                    {
                      &quot;name&quot;: &quot;signature&quot;
                    },
                    {
                      &quot;name&quot;: &quot;signature_format&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: DiffieHellman&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;DiffieHellman&quot;,
          &quot;desc&quot;: &quot;<!--\nThe class for creating Diffie-Hellman key exchanges.\n\nReturned by `crypto.createDiffieHellman`.\n-->\n\n<p>&#x30C7;&#x30A3;&#x30D5;&#x30A3;&#x30FC;&#x30FB;&#x30D8;&#x30EB;&#x30DE;&#x30F3;&#x9375;&#x5171;&#x6709;&#x306E;&#x305F;&#x3081;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>crypto.creaateDiffieHellman</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;diffieHellman.generateKeys([encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;generateKeys&quot;,
              &quot;desc&quot;: &quot;<!--\nGenerates private and public Diffie-Hellman key values, and returns\nthe public key in the specified encoding. This key should be\ntransferred to the other party. Encoding can be `'binary'`, `'hex'`,\nor `'base64'`.  If no encoding is provided, then a buffer is returned.\n-->\n\n<p>&#x30C7;&#x30A3;&#x30D5;&#x30A3;&#x30FC;&#x30FB;&#x30D8;&#x30EB;&#x30DE;&#x30F3;&#x6CD5;&#x3067;&#x79D8;&#x5BC6;&#x304A;&#x3088;&#x3073;&#x516C;&#x958B;&#x9375;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3001;\n&#x6307;&#x5B9A;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x305F;&#x516C;&#x958B;&#x9375;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x9375;&#x306F;&#x76F8;&#x624B;&#x5074;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>&apos;binary&apos;</code>&#x3001;<code>&apos;hex&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;diffieHellman.computeSecret(other_public_key, [input_encoding], [output_encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;computeSecret&quot;,
              &quot;desc&quot;: &quot;<!--\nComputes the shared secret using `other_public_key` as the other\nparty's public key and returns the computed shared secret. Supplied\nkey is interpreted using specified `input_encoding`, and secret is\nencoded using specified `output_encoding`. Encodings can be\n`'binary'`, `'hex'`, or `'base64'`. If the input encoding is not\nprovided, then a buffer is expected.\n-->\n\n<p><code>other_public_key</code> &#x3092;&#x76F8;&#x624B;&#x5074;&#x306E;&#x516C;&#x958B;&#x9375;&#x3068;&#x3057;&#x3066;&#x5171;&#x6709;&#x306E;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x8A08;&#x7B97;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x516C;&#x958B;&#x9375;&#x306F;&#x6307;&#x5B9A;&#x306E; <code>input_encoding</code> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x89E3;&#x91C8;&#x3055;&#x308C;&#x3001;\n&#x79D8;&#x5BC6;&#x9375;&#x306F; <code>output_encoding</code> &#x3067;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x65B9;&#x6CD5;&#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>&apos;binary&apos;</code>&#x3001;<code>&apos;hex&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x5165;&#x529B;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x671F;&#x5F85;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf no output encoding is given, then a buffer is returned.\n-->\n\n<p>&#x51FA;&#x529B;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;other_public_key&quot;
                    },
                    {
                      &quot;name&quot;: &quot;input_encoding&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;output_encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;diffieHellman.getPrime([encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getPrime&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the Diffie-Hellman prime in the specified encoding, which can\nbe `'binary'`, `'hex'`, or `'base64'`. If no encoding is provided,\nthen a buffer is returned.\n-->\n\n<p>&#x30C7;&#x30A3;&#x30D5;&#x30A3;&#x30FC;&#x30FB;&#x30D8;&#x30EB;&#x30DE;&#x30F3;&#x6CD5;&#x306E;&#x7D20;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>&apos;binary&apos;</code>&#x3001;<code>&apos;hex&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;diffieHellman.getGenerator([encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getGenerator&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the Diffie-Hellman generator in the specified encoding, which can\nbe `'binary'`, `'hex'`, or `'base64'`. If no encoding is provided,\nthen a buffer is returned.\n-->\n\n<p>&#x30C7;&#x30A3;&#x30D5;&#x30A3;&#x30FC;&#x30FB;&#x30D8;&#x30EB;&#x30DE;&#x30F3;&#x6CD5;&#x306E;&#x751F;&#x6210;&#x5143;&#x3092;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>&apos;binary&apos;</code>&#x3001;<code>&apos;hex&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;diffieHellman.getPublicKey([encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getPublicKey&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the Diffie-Hellman public key in the specified encoding, which\ncan be `'binary'`, `'hex'`, or `'base64'`. If no encoding is provided,\nthen a buffer is returned.\n-->\n\n<p>&#x30C7;&#x30A3;&#x30D5;&#x30A3;&#x30FC;&#x30FB;&#x30D8;&#x30EB;&#x30DE;&#x30F3;&#x6CD5;&#x306B;&#x3088;&#x308B;&#x516C;&#x958B;&#x9375;&#x3092;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>&apos;binary&apos;</code>&#x3001;<code>&apos;hex&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;diffieHellman.getPrivateKey([encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getPrivateKey&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the Diffie-Hellman private key in the specified encoding,\nwhich can be `'binary'`, `'hex'`, or `'base64'`. If no encoding is\nprovided, then a buffer is returned.\n-->\n\n<p>&#x30C7;&#x30A3;&#x30D5;&#x30A3;&#x30FC;&#x30FB;&#x30D8;&#x30EB;&#x30DE;&#x30F3;&#x6CD5;&#x306B;&#x3088;&#x308B;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>&apos;binary&apos;</code>&#x3001;<code>&apos;hex&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;diffieHellman.setPublicKey(public_key, [encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setPublicKey&quot;,
              &quot;desc&quot;: &quot;<!--\nSets the Diffie-Hellman public key. Key encoding can be `'binary'`,\n`'hex'` or `'base64'`. If no encoding is provided, then a buffer is\nexpected.\n-->\n\n<p>&#x30C7;&#x30A3;&#x30D5;&#x30A3;&#x30FC;&#x30FB;&#x30D8;&#x30EB;&#x30DE;&#x30F3;&#x6CD5;&#x306B;&#x3088;&#x308B;&#x516C;&#x958B;&#x9375;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x9375;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>&apos;binary&apos;</code>&#x3001;<code>&apos;hex&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x671F;&#x5F85;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;public_key&quot;
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;diffieHellman.setPrivateKey(private_key, [encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setPrivateKey&quot;,
              &quot;desc&quot;: &quot;<!--\nSets the Diffie-Hellman private key. Key encoding can be `'binary'`,\n`'hex'` or `'base64'`. If no encoding is provided, then a buffer is\nexpected.\n-->\n\n<p>&#x30C7;&#x30A3;&#x30D5;&#x30A3;&#x30FC;&#x30FB;&#x30D8;&#x30EB;&#x30DE;&#x30F3;&#x6CD5;&#x306B;&#x3088;&#x308B;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x9375;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>&apos;binary&apos;</code>&#x3001;<code>&apos;hex&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x671F;&#x5F85;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;private_key&quot;
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;crypto.DEFAULT_ENCODING&quot;,
          &quot;name&quot;: &quot;DEFAULT_ENCODING&quot;,
          &quot;desc&quot;: &quot;<!--\nThe default encoding to use for functions that can take either strings\nor buffers.  The default value is `'buffer'`, which makes it default\nto using Buffer objects.  This is here to make the crypto module more\neasily compatible with legacy programs that expected `'binary'` to be\nthe default encoding.\n-->\n\n<p>&#x95A2;&#x6570;&#x304C;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;&#x3001;&#x6587;&#x5B57;&#x5217;&#x304B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;\n&#x3044;&#x305A;&#x308C;&#x304B;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that new programs will probably expect buffers, so only use this\nas a temporary measure.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x304A;&#x305D;&#x3089;&#x304F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x671F;&#x5F85;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x4E00;&#x6642;&#x7684;&#x306A;&#x624B;&#x6BB5;&#x3068;&#x3057;&#x3066;&#x306E;&#x307F;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;modules&quot;: [
        {
          &quot;textRaw&quot;: &quot;Recent API Changes&quot;,
          &quot;name&quot;: &quot;recent_api_changes&quot;,
          &quot;desc&quot;: &quot;<!--\nThe Crypto module was added to Node before there was the concept of a\nunified Stream API, and before there were Buffer objects for handling\nbinary data.\n-->\n\n<p>Crypto &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x3001;&#x7D71;&#x5408;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0; API &#x3084;&#x30D0;&#x30A4;&#x30C8;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6271;&#x3046; Buffer\n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3088;&#x308A;&#x3082;&#x5148;&#x306B; Node &#x306B;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3057;&#x305F;&#x3002;\n\n</p>\n<!--\nAs such, the streaming classes don't have the typical methods found on\nother Node classes, and many methods accepted and returned\nBinary-encoded strings by default rather than Buffers.  This was\nchanged to use Buffers by default instead.\n-->\n\n<p>&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;&#x3053;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30DF;&#x30F3;&#x30B0;&#x306A;&#x30AF;&#x30E9;&#x30B9;&#x306F;&#x4ED6;&#x306E; Node &#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306B;&#x898B;&#x3089;&#x308C;&#x308B;\n&#x5178;&#x578B;&#x7684;&#x306A;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x6301;&#x305F;&#x305A;&#x3001;&#x591A;&#x304F;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x5F15;&#x6570;&#x3084;&#x623B;&#x308A;&#x5024;&#x306B;\nBuffer &#x3067;&#x306F;&#x306A;&#x304F;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3092;&#x4F7F;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis is a breaking change for some use cases, but not all.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3042;&#x308B;&#x30E6;&#x30FC;&#x30B9;&#x30B1;&#x30FC;&#x30B9;&#x306B;&#x304A;&#x3044;&#x3066;&#x306F;&#x4E92;&#x63DB;&#x6027;&#x3092;&#x640D;&#x306A;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x5168;&#x3066;&#x306E;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nFor example, if you currently use the default arguments to the Sign\nclass, and then pass the results to the Verify class, without ever\ninspecting the data, then it will continue to work as before.  Where\nyou once got a binary string and then presented the binary string to\nthe Verify object, you'll now get a Buffer, and present the Buffer to\nthe Verify object.\n-->\n\n<p>&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;Sign &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5F15;&#x6570;&#x3067;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x3066;&#x3001;\n&#x305D;&#x306E;&#x7D50;&#x679C;&#x3092;&#x5168;&#x304F;&#x8ABF;&#x3079;&#x305A;&#x306B; Verify &#x30AF;&#x30E9;&#x30B9;&#x306B;&#x6E21;&#x3057;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x4EE5;&#x524D;&#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x304F;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x3001;&#x73FE;&#x6642;&#x70B9;&#x3067;&#x306F;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x6587;&#x5B57;&#x5217;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x3063;&#x3066;&#x305D;&#x306E;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x6587;&#x5B57;&#x5217;&#x3092;\nVeriy &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x6E21;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;&#x5C06;&#x6765;&#x306F; Buffer &#x3092;&#x53D7;&#x3051;&#x53D6;&#x3063;&#x3066;&#x305D;&#x306E;\nBuffer &#x3092; Verify &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x6E21;&#x3059;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nHowever, if you were doing things with the string data that will not\nwork properly on Buffers (such as, concatenating them, storing in\ndatabases, etc.), or you are passing binary strings to the crypto\nfunctions without an encoding argument, then you will need to start\nproviding encoding arguments to specify which encoding you'd like to\nuse.  To switch to the previous style of using binary strings by\ndefault, set the `crypto.DEFAULT_ENCODING` field to 'binary'.  Note\nthat new programs will probably expect buffers, so only use this as a\ntemporary measure.\n-->\n\n<p>&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;Buffer &#x304C;&#x6587;&#x5B57;&#x5217;&#x3068;&#x6B63;&#x78BA;&#x306B;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x306F;&#x52D5;&#x304B;&#x306A;&#x3044;&#x4F55;&#x304B;&#x3092;&#x3057;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;\n(&#x4F8B;&#x3048;&#x3070;&#x3001;&#x305D;&#x308C;&#x3089;&#x3092;&#x9023;&#x7D50;&#x3057;&#x305F;&#x308A;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x30D9;&#x30FC;&#x30B9;&#x306B;&#x4FDD;&#x5B58;&#x3057;&#x305F;&#x308A;&#x3059;&#x308B;&#x306A;&#x3069;)&#x3001;\n&#x3042;&#x308B;&#x3044;&#x306F;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x6587;&#x5B57;&#x5217;&#x3092; Crypto &#x306E;&#x95A2;&#x6570;&#x306B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x5F15;&#x6570;&#x7121;&#x3057;&#x3067;\n&#x6E21;&#x3057;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x3001;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x5F15;&#x6570;&#x3092;&#x4E0E;&#x3048;&#x3066;&#x3069;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3092;\n&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3044;&#x308B;&#x304B;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x4EE5;&#x524D;&#x306E;&#x3088;&#x3046;&#x306B;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x6587;&#x5B57;&#x5217;&#x3092;&#x4F7F;&#x3046;&#x3088;&#x3046;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x308B;&#x306B;&#x306F;&#x3001;\n<code>crypto.DEFAULT_ENCODING</code> &#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x306B; <code>binary</code> &#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x65B0;&#x3057;&#x3044;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x304A;&#x305D;&#x3089;&#x304F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x671F;&#x5F85;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x4E00;&#x6642;&#x7684;&#x306A;&#x624B;&#x6BB5;&#x3068;&#x3057;&#x3066;&#x306E;&#x307F;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;,
          &quot;type&quot;: &quot;module&quot;,
          &quot;displayName&quot;: &quot;Recent API Changes&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Crypto&quot;
    },
    {
      &quot;textRaw&quot;: &quot;TLS (SSL)&quot;,
      &quot;name&quot;: &quot;tls_(ssl)&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nUse `require('tls')` to access this module.\n-->\n\n<p><code>require(&apos;tls&apos;)</code> &#x3067;&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `tls` module uses OpenSSL to provide Transport Layer Security and/or\nSecure Socket Layer: encrypted stream communication.\n-->\n\n<p><code>tls</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F; OpenSSL &#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067; Transport Layer Security &#x304A;&#x3088;&#x3073;\nSecure Socket Layer: &#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x901A;&#x4FE1;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nTLS/SSL is a public/private key infrastructure. Each client and each\nserver must have a private key. A private key is created like this\n-->\n\n<p>TLS/SSL &#x306F;&#x516C;&#x958B;&#xFF0F;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x57FA;&#x790E;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3069;&#x306E;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3068;&#x30B5;&#x30FC;&#x30D0;&#x3082;&#x79D8;&#x5BC6;&#x9375;&#x304C;&#x5FC5;&#x8981;&#x3067;&#x3059;&#x3002;\n&#x79D8;&#x5BC6;&#x9375;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;\n\n</p>\n<pre><code>openssl genrsa -out ryans-key.pem 1024</code></pre>\n<!--\nAll severs and some clients need to have a certificate. Certificates are public\nkeys signed by a Certificate Authority or self-signed. The first step to\ngetting a certificate is to create a \"Certificate Signing Request\" (CSR)\nfile. This is done with:\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x3068;&#x4E00;&#x90E8;&#x306E;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306F;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x5FC5;&#x8981;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8A3C;&#x660E;&#x66F8;&#x306F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;&#x516C;&#x958B;&#x9375;&#x307E;&#x305F;&#x306F;&#x81EA;&#x8EAB;&#x306B;&#x3088;&#x3063;&#x3066;&#x7F72;&#x540D;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x6700;&#x521D;&#x306E;&#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x306F;&#x300C;&#x8A3C;&#x660E;&#x66F8;&#x7F72;&#x540D;&#x8981;&#x6C42; (CSR)&#x300D;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3067;&#x3059;&#x3002;\n&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>openssl req -new -key ryans-key.pem -out ryans-csr.pem</code></pre>\n<!--\nTo create a self-signed certificate with the CSR, do this:\n-->\n\n<p>CSR &#x304B;&#x3089;&#x81EA;&#x5DF1;&#x7F72;&#x540D;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x306B;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem</code></pre>\n<!--\nAlternatively you can send the CSR to a Certificate Authority for signing.\n-->\n\n<p>&#x4ED6;&#x306B; CSR &#x3092;&#x8A8D;&#x8A3C;&#x5C40;&#x306B;&#x9001;&#x3063;&#x3066;&#x7F72;&#x540D;&#x3057;&#x3066;&#x3082;&#x3089;&#x3046;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n(TODO: docs on creating a CA, for now interested users should just look at\n`test/fixtures/keys/Makefile` in the Node source code)\n-->\n\n<p>(TODO: CA &#x3092;&#x4F5C;&#x308B;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x3001;&#x73FE;&#x5728;&#x306F;&#x8208;&#x5473;&#x3042;&#x308B;&#x30E6;&#x30FC;&#x30B6;&#x306F; Node &#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x304B;&#x3089;\n<code>test/fixtures/keys/Makefile</code> &#x3092;&#x898B;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308B;)\n\n</p>\n<!--\nTo create .pfx or .p12, do this:\n-->\n\n<p>.pfx &#x307E;&#x305F;&#x306F; .p12 &#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x306B;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>openssl pkcs12 -export -in agent5-cert.pem -inkey agent5-key.pem \\\n    -certfile ca-cert.pem -out agent5.pfx</code></pre>\n<ul>\n<li><code>in</code>:  certificate</li>\n<li><code>inkey</code>: private key</li>\n<li><code>certfile</code>: all CA certs concatenated in one file like\n<code>cat ca1-cert.pem ca2-cert.pem &gt; ca-cert.pem</code></li>\n</ul>\n&quot;,
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;Client-initiated renegotiation attack mitigation&quot;,
          &quot;name&quot;: &quot;Client-initiated renegotiation attack mitigation&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nThe TLS protocol lets the client renegotiate certain aspects of the TLS session.\nUnfortunately, session renegotiation requires a disproportional amount of\nserver-side resources, which makes it a potential vector for denial-of-service\nattacks.\n\nTo mitigate this, renegotiations are limited to three times every 10 minutes. An\nerror is emitted on the [CleartextStream][] instance when the threshold is\nexceeded. The limits are configurable:\n\n  - `tls.CLIENT_RENEG_LIMIT`: renegotiation limit, default is 3.\n\n  - `tls.CLIENT_RENEG_WINDOW`: renegotiation window in seconds, default is\n    10 minutes.\n\nDon't change the defaults unless you know what you are doing.\n\nTo test your server, connect to it with `openssl s_client -connect address:port`\nand tap `R<CR>` (that's the letter `R` followed by a carriage return) a few\ntimes.\n-->\n\n<p>TLS &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x3067;&#x306F;&#x3001;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306B; TLS &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x518D;&#x30CD;&#x30B4;&#x30B7;&#x30A8;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3092;\n&#x8A31;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x6B8B;&#x5FF5;&#x306A;&#x304C;&#x3089;&#x3001;&#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x518D;&#x30CD;&#x30B4;&#x30B7;&#x30A8;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x8981;&#x6C42;&#x306F;&#x30B5;&#x30FC;&#x30D0;&#x30B5;&#x30A4;&#x30C9;&#x306B;&#x904E;&#x5EA6;&#x306A;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x3092;\n&#x8981;&#x6C42;&#x3059;&#x308B;&#x305F;&#x3081;&#x3001;&#x305D;&#x308C;&#x306F;&#x6F5C;&#x5728;&#x7684;&#x306A;&#x30B5;&#x30FC;&#x30D0;&#x5F37;&#x5236;&#x505C;&#x6B62;&#x653B;&#x6483;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x3092;&#x8EFD;&#x6E1B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;&#x518D;&#x30CD;&#x30B4;&#x30B7;&#x30A8;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306F; 10 &#x5206;&#x5F53;&#x305F;&#x308A; 3 &#x56DE;&#x307E;&#x3067;&#x306B;\n&#x5236;&#x9650;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;&#x3053;&#x306E;&#x5236;&#x9650;&#x3092;&#x8D85;&#x3048;&#x308B;&#x3068;&#x3001;[CleartextStream][]\n&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x4E0A;&#x3067;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x3053;&#x306E;&#x5236;&#x9650;&#x306F;&#x5909;&#x66F4;&#x53EF;&#x80FD;&#x3067;&#x3059;:\n\n</p>\n<ul>\n<li><p><code>tls.CLIENT_RENEG_LIMIT</code>: &#x518D;&#x30CD;&#x30B4;&#x30B7;&#x30A8;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x4E0A;&#x9650;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 3 &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>tls.CLIENT_RENEG_WINDOW</code>: &#x79D2;&#x5358;&#x4F4D;&#x306E;&#x518D;&#x30CD;&#x30B4;&#x30B7;&#x30A8;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x30A6;&#x30A3;&#x30F3;&#x30C9;&#x30A6;&#x3001;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 10 &#x5206;&#x3067;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<p>&#x3042;&#x306A;&#x305F;&#x304C;&#x4F55;&#x3092;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x304B;&#x5341;&#x5206;&#x306B;&#x7406;&#x89E3;&#x3057;&#x3066;&#x3044;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3092;&#x5909;&#x66F4;&#x3057;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x30B5;&#x30FC;&#x30D0;&#x3092;&#x30C6;&#x30B9;&#x30C8;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;<code>openssl s_client -connect address:port</code>\n&#x304A;&#x3088;&#x3073; <code>R&lt;CR&gt;</code> (<code>R</code> &#x30AD;&#x30FC;&#x306E;&#x5F8C;&#x306B;&#x7D9A;&#x3051;&#x3066;&#x30EA;&#x30BF;&#x30FC;&#x30F3;&#x30AD;&#x30FC;) &#x3092;\n&#x6570;&#x56DE;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;NPN and SNI&quot;,
          &quot;name&quot;: &quot;NPN and SNI&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nNPN (Next Protocol Negotiation) and SNI (Server Name Indication) are TLS\nhandshake extensions allowing you:\n\n  * NPN - to use one TLS server for multiple protocols (HTTP, SPDY)\n  * SNI - to use one TLS server for multiple hostnames with different SSL\n    certificates.\n-->\n\n<p>NPN (Next Protocol Negotitation) &#x3068; SNI (Server Name Indication) &#x306F;\nTLS &#x306E;&#x62E1;&#x5F35;&#x3067;&#x3001;&#x4EE5;&#x4E0B;&#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<ul>\n<li>NPN - &#x4E00;&#x3064;&#x306E; TLS &#x30B5;&#x30FC;&#x30D0;&#x3067;&#x8907;&#x6570;&#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB; (HTTP&#x3001;SPDY) &#x3092;&#x4F7F;&#x7528;&#x3002;</li>\n<li>SNI - &#x4E00;&#x3064;&#x306E; TLS &#x30B5;&#x30FC;&#x30D0;&#x3067;&#x30DB;&#x30B9;&#x30C8;&#x540D;&#x306E;&#x7570;&#x306A;&#x308B;&#x8907;&#x6570;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x4F7F;&#x7528;&#x3002;</li>\n</ul>\n&quot;
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;tls.getCiphers()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;getCiphers&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns an array with the names of the supported SSL ciphers.\n-->\n\n<p>&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B; SSL &#x6697;&#x53F7;&#x540D;&#x306E;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var ciphers = tls.getCiphers();\nconsole.log(ciphers); // [&apos;AES128-SHA&apos;, &apos;AES256-SHA&apos;, ...]</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;tls.createServer(options, [secureConnectionListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createServer&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a new [tls.Server][].  The `connectionListener` argument is\nautomatically set as a listener for the [secureConnection][] event.  The\n`options` object has these possibilities:\n-->\n\n<p>&#x65B0;&#x3057;&#x3044; [tls.Server][] &#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>connectionListener</code> &#x306F; [secureConnection][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;\n&#x81EA;&#x52D5;&#x7684;&#x306B;&#x767B;&#x9332;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>options</code> &#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x6301;&#x3064;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;:\n\n\n</p>\n<!--\n  - `pfx`: A string or `Buffer` containing the private key, certificate and\n    CA certs of the server in PFX or PKCS12 format. (Mutually exclusive with\n    the `key`, `cert` and `ca` options.)\n\n  - `key`: A string or `Buffer` containing the private key of the server in\n    PEM format. (Required)\n\n  - `passphrase`: A string of passphrase for the private key or pfx.\n\n  - `cert`: A string or `Buffer` containing the certificate key of the server in\n    PEM format. (Required)\n\n  - `ca`: An array of strings or `Buffer`s of trusted certificates in PEM\n    format. If this is omitted several well known \"root\" CAs will be used,\n    like VeriSign. These are used to authorize connections.\n\n  - `crl` : Either a string or list of strings of PEM encoded CRLs (Certificate\n    Revocation List)\n\n  - `ciphers`: A string describing the ciphers to use or exclude.\n\n    To mitigate [BEAST attacks] it is recommended that you use this option in\n    conjunction with the `honorCipherOrder` option described below to\n    prioritize the non-CBC cipher.\n\n    Defaults to `AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH`.\n    Consult the [OpenSSL cipher list format documentation] for details on the\n    format. ECDH (Elliptic Curve Diffie-Hellman) ciphers are not yet supported.\n\n\n    `AES128-GCM-SHA256` is used when node.js is linked against OpenSSL 1.0.1\n    or newer and the client speaks TLS 1.2, RC4 is used as a secure fallback.\n\n    **NOTE**: Previous revisions of this section suggested `AES256-SHA` as an\n    acceptable cipher. Unfortunately, `AES256-SHA` is a CBC cipher and therefore\n    susceptible to BEAST attacks. Do *not* use it.\n\n  - `handshakeTimeout`: Abort the connection if the SSL/TLS handshake does not\n    finish in this many milliseconds. The default is 120 seconds.\n\n    A `'clientError'` is emitted on the `tls.Server` object whenever a handshake\n    times out.\n\n  - `honorCipherOrder` : When choosing a cipher, use the server's preferences\n    instead of the client preferences.\n\n    Note that if SSLv2 is used, the server will send its list of preferences\n    to the client, and the client chooses the cipher.\n\n    Although, this option is disabled by default, it is *recommended* that you\n    use this option in conjunction with the `ciphers` option to mitigate\n    BEAST attacks.\n\n  - `requestCert`: If `true` the server will request a certificate from\n    clients that connect and attempt to verify that certificate. Default:\n    `false`.\n\n  - `rejectUnauthorized`: If `true` the server will reject any connection\n    which is not authorized with the list of supplied CAs. This option only\n    has an effect if `requestCert` is `true`. Default: `false`.\n\n  - `NPNProtocols`: An array or `Buffer` of possible NPN protocols. (Protocols\n    should be ordered by their priority).\n\n  - `SNICallback`: A function that will be called if client supports SNI TLS\n    extension. Only one argument will be passed to it: `servername`. And\n    `SNICallback` should return SecureContext instance.\n    (You can use `crypto.createCredentials(...).context` to get proper\n    SecureContext). If `SNICallback` wasn't provided - default callback with\n    high-level API will be used (see below).\n\n  - `sessionIdContext`: A string containing a opaque identifier for session\n    resumption. If `requestCert` is `true`, the default is MD5 hash value\n    generated from command-line. Otherwise, the default is not provided.\n\n  - `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force\n    SSL version 3. The possible values depend on your installation of\n    OpenSSL and are defined in the constant [SSL_METHODS][].\n-->\n\n<ul>\n<li><p><code>pfx</code> : PFX &#x307E;&#x305F;&#x306F; PKCS12 &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x79D8;&#x5BC6;&#x9375;&#x3001;&#x8A3C;&#x660E;&#x66F8;&#x3001;&#x304A;&#x3088;&#x3073; CA &#x306E;\n&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x542B;&#x3080;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;\n(<code>key</code>&#x3001;<code>cert</code>&#x3001;&#x304A;&#x3088;&#x3073; <code>ca</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x306F;&#x76F8;&#x4E92;&#x306B;&#x6392;&#x4ED6;&#x7684;&#x3067;&#x3059;)&#x3002;</p>\n</li>\n<li><p><code>key</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> &#x3067;&#x3059;\n(&#x5FC5;&#x9808;)&#x3002;</p>\n</li>\n<li><p><code>passphrase</code>: &#x79D8;&#x5BC6;&#x9375;&#x307E;&#x305F;&#x306F; pfx &#x306E;&#x30D1;&#x30B9;&#x30D5;&#x30EC;&#x30FC;&#x30BA;&#x3092;&#x8868;&#x3059;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>cert</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> &#x3067;&#x3059;\n(&#x5FC5;&#x9808;)&#x3002;</p>\n</li>\n<li><p><code>ca</code>: PEM&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n<code>Buffer</code> &#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x30D9;&#x30EA;&#x30B5;&#x30A4;&#x30F3;&#x306A;&#x3069;&#x306E;&#x3088;&#x304F;&#x77E5;&#x3089;&#x308C;&#x305F;&#x300C;&#x30EB;&#x30FC;&#x30C8;&#x300D;&#x8A8D;&#x8A3C;&#x5C40;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306F;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x8A8D;&#x8A3C;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>crl</code> : PEM &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F; CRL (Certificate Revocation List&#x3001;\n&#x5931;&#x52B9;&#x3057;&#x305F;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x4E00;&#x89A7;) &#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x5217;&#x306E;&#x914D;&#x5217;&#x3002;</p>\n</li>\n<li><p><code>ciphers</code>: &#x4F7F;&#x7528;&#x307E;&#x305F;&#x306F;&#x9664;&#x5916;&#x3059;&#x308B;&#x6697;&#x53F7;&#x3092;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;</p>\n<p>[BEAST &#x653B;&#x6483;]&#x3092;&#x6291;&#x5236;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x4EE5;&#x4E0B;&#x306B;&#x793A;&#x3059; <code>honorCipherOrder</code>\n&#x3092;&#x5171;&#x306B;&#x4F7F;&#x3063;&#x3066;&#x3001;&#x975E; CBC &#x6697;&#x53F7;&#x3092;&#x512A;&#x5148;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x63A8;&#x5968;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH</code> &#x3067;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; [OpenSSL &#x6697;&#x53F7;&#x30EA;&#x30B9;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\nECDH (Elliptic Curve Diffie-Hellman) &#x6697;&#x53F7;&#x306F;&#x307E;&#x3060;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;&#x3002;</p>\n<p><code>AES128-GCM-SHA256</code> &#x306F;&#x3001;Node.js &#x304C; OpenSSL 1.0.1 &#x4EE5;&#x964D;&#x3068;&#x30EA;&#x30F3;&#x30AF;&#x3055;&#x308C;&#x3066;&#x3044;&#x3066;&#x3001;\n&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C; TLS 1.2 &#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\nRC4 &#x306F;&#x5B89;&#x5168;&#x306A;&#x30D5;&#x30A9;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n<p><strong>&#x6CE8;&#x610F;</strong>: &#x4EE5;&#x524D;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E;&#x3053;&#x306E;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F; <code>AES256-SHA</code> &#x3092;\n&#x53D7;&#x3051;&#x5165;&#x308C;&#x53EF;&#x80FD;&#x306A;&#x6697;&#x53F7;&#x3067;&#x3042;&#x308B;&#x304B;&#x306E;&#x3088;&#x3046;&#x306B;&#x793A;&#x3057;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x6B8B;&#x5FF5;&#x306A;&#x304C;&#x3089;&#x3001;<code>AES256-SHA</code> &#x306F; CBC &#x6697;&#x53F7;&#x3067;&#x3042;&#x308A;&#x3001;&#x3057;&#x305F;&#x304C;&#x3063;&#x3066; BEAST\n&#x653B;&#x6483;&#x306B;&#x306F;&#x5F31;&#x3044;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>handshakeTimeout</code>: SSL/TLS &#x30CF;&#x30F3;&#x30C9;&#x30B7;&#x30A7;&#x30FC;&#x30AF;&#x304C;&#x3053;&#x306E;&#x6642;&#x9593; (&#x30DF;&#x30EA;&#x79D2;)\n&#x4EE5;&#x5185;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x63A5;&#x7D9A;&#x3092;&#x30A2;&#x30DC;&#x30FC;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 120 &#x79D2;&#x3067;&#x3059;&#x3002;</p>\n<p>&#x30CF;&#x30F3;&#x30C9;&#x30B7;&#x30A7;&#x30FC;&#x30AF;&#x304C;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3059;&#x308B;&#x3068;&#x3001;<code>tls.Server</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;\n<code>&apos;clientError&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>honorCipherOrder</code> :\n&#x6697;&#x53F7;&#x3092;&#x9078;&#x629E;&#x3059;&#x308B;&#x969B;&#x306B;&#x3001;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3067;&#x306F;&#x306A;&#x304F;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n<p>SSLv2 &#x304C;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x5834;&#x5408;&#x306F;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x8A2D;&#x5B9A;&#x306E;&#x30EA;&#x30B9;&#x30C8;&#x3092;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306B;&#x9001;&#x4FE1;&#x3057;&#x3001;\n&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x6697;&#x53F7;&#x3092;&#x9078;&#x629E;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</p>\n<p>&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x7121;&#x52B9;&#x3067;&#x3059;&#x304C;&#x3001;BEAST &#x653B;&#x6483;&#x3092;&#x6291;&#x5236;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n<code>ciphers</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x5171;&#x306B;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092; <em>&#x63A8;&#x5968;</em> &#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>requestCert</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x63A5;&#x7D9A;&#x3057;&#x3088;&#x3046;&#x3068;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304B;&#x3089;&#x306E;\n&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x8981;&#x6C42;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>rejectUnauthorized</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;\n&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x7834;&#x68C4;&#x3057;&#x307E;&#x3059;&#xFF0E;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F; <code>requestCert</code> &#x304C; <code>true</code> &#x306E;&#x5834;&#x5408;&#x3060;&#x3051;&#x52B9;&#x679C;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>NPNProtocols</code>: NPN &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x3067;&#x4F7F;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> &#x306E;&#x914D;&#x5217;\n(&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x306F;&#x305D;&#x306E;&#x512A;&#x5148;&#x5EA6;&#x306B;&#x5FDC;&#x3058;&#x3066;&#x4E26;&#x3093;&#x3067;&#x3044;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;)&#x3002;</p>\n</li>\n<li><p><code>SNICallback</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C; TLS &#x62E1;&#x5F35;&#x306E; SNI &#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x306B;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x95A2;&#x6570;&#x3067;&#x3059;&#x3002;\n<code>servername</code> &#x304C;&#x552F;&#x4E00;&#x306E;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>SNICallback</code> &#x306F; SecureContext &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x8FD4;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;\n(SecureContext &#x3092;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B; <code>crypto.createCredentials(...).context</code>\n&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;)&#x3002;\n<code>SNICallback</code> &#x304C;&#x6E21;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3068;&#x3057;&#x3066;\n&#x5F8C;&#x8FF0;&#x3059;&#x308B;&#x9AD8;&#x6C34;&#x6E96; API &#x304C;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>sessionIdContext</code>: &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x518D;&#x958B;&#x306E;&#x305F;&#x3081;&#x306E;&#x8B58;&#x5225;&#x5B50;&#x3068;&#x306A;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>requestCedrt</code> &#x304C; <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x5F15;&#x6570;&#x304B;&#x3089;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x305F; MD5 &#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x5024;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;</p>\n</li>\n<li><p><code>secureProtocol</code>: &#x4F7F;&#x7528;&#x3059;&#x308B; SSL &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3001;&#x305F;&#x3068;&#x3048;&#x3070; <code>SSLv3_method</code> &#x306F;\nSSL version 3 &#x306E;&#x4F7F;&#x7528;&#x3092;&#x5F37;&#x5236;&#x3057;&#x307E;&#x3059;&#x3002;&#x53EF;&#x80FD;&#x306A;&#x5024;&#x306F;&#x4F7F;&#x7528;&#x3059;&#x308B; OpenSSL &#x306B;&#x3088;&#x3063;&#x3066;\n&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x308B; [SSL_METHODS][] &#x5B9A;&#x6570;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nHere is a simple example echo server:\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306F;&#x30A8;&#x30B3;&#x30FC;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  key: fs.readFileSync(&apos;server-key.pem&apos;),\n  cert: fs.readFileSync(&apos;server-cert.pem&apos;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n  // This is necessary only if the client uses the self-signed certificate.\n  ca: [ fs.readFileSync(&apos;client-cert.pem&apos;) ]\n};\n\nvar server = tls.createServer(options, function(cleartextStream) {\n  console.log(&apos;server connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  cleartextStream.write(&quot;welcome!\\n&quot;);\n  cleartextStream.setEncoding(&apos;utf8&apos;);\n  cleartextStream.pipe(cleartextStream);\n});\nserver.listen(8000, function() {\n  console.log(&apos;server bound&apos;);\n});</code></pre>\n<!--\nOr\n-->\n\n<p>&#x3042;&#x308B;&#x3044;&#x306F;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;server.pfx&apos;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n};\n\nvar server = tls.createServer(options, function(cleartextStream) {\n  console.log(&apos;server connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  cleartextStream.write(&quot;welcome!\\n&quot;);\n  cleartextStream.setEncoding(&apos;utf8&apos;);\n  cleartextStream.pipe(cleartextStream);\n});\nserver.listen(8000, function() {\n  console.log(&apos;server bound&apos;);\n});</code></pre>\n<!--\nYou can test this server by connecting to it with `openssl s_client`:\n-->\n\n<p><code>openssl s_client</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3053;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30C6;&#x30B9;&#x30C8;&#x3092;&#x884C;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>openssl s_client -connect 127.0.0.1:8000</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;secureConnectionListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;tls.connect(options, [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;connect&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a new client connection to the given `port` and `host` (old API) or\n`options.port` and `options.host`. (If `host` is omitted, it defaults to\n`localhost`.) `options` should be an object which specifies:\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>port</code> &#x3068; <code>host</code> (&#x65E7; API) &#x307E;&#x305F;&#x306F; <code>options.port</code> &#x3068; <code>options.host</code>\n&#x3067;&#x65B0;&#x3057;&#x3044;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;\n(<code>host</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>localhost</code> &#x3067;&#x3059;)&#x3002;\n<code>options</code> &#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;:\n\n</p>\n<!--\n  - `host`: Host the client should connect to\n\n  - `port`: Port the client should connect to\n\n  - `socket`: Establish secure connection on a given socket rather than\n    creating a new socket. If this option is specified, `host` and `port`\n    are ignored.\n\n  - `pfx`: A string or `Buffer` containing the private key, certificate and\n    CA certs of the server in PFX or PKCS12 format.\n\n  - `key`: A string or `Buffer` containing the private key of the client in\n    PEM format.\n\n  - `passphrase`: A string of passphrase for the private key or pfx.\n\n  - `cert`: A string or `Buffer` containing the certificate key of the client in\n    PEM format.\n\n  - `ca`: An array of strings or `Buffer`s of trusted certificates in PEM\n    format. If this is omitted several well known \"root\" CAs will be used,\n    like VeriSign. These are used to authorize connections.\n\n  - `rejectUnauthorized`: If `true`, the server certificate is verified against\n    the list of supplied CAs. An `'error'` event is emitted if verification\n    fails. Default: `true`.\n\n  - `NPNProtocols`: An array of strings or `Buffer`s containing supported NPN\n    protocols. `Buffer`s should have following format: `0x05hello0x05world`,\n    where first byte is next protocol name's length. (Passing array should\n    usually be much simpler: `['hello', 'world']`.)\n\n  - `servername`: Servername for SNI (Server Name Indication) TLS extension.\n\n  - `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force\n    SSL version 3. The possible values depend on your installation of\n    OpenSSL and are defined in the constant [SSL_METHODS][].\n-->\n\n<ul>\n<li><p><code>host</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DB;&#x30B9;&#x30C8;&#x3002;</p>\n</li>\n<li><p><code>port</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x3002;</p>\n</li>\n<li><p><code>socket</code>: &#x65B0;&#x3057;&#x3044;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x4E0A;&#x3067;\n&#x30BB;&#x30AD;&#x30E5;&#x30A2;&#x306A;&#x63A5;&#x7D9A;&#x3092;&#x78BA;&#x7ACB;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;<code>host</code> &#x304A;&#x3088;&#x3073; <code>port</code> &#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>pfx</code> : PFX &#x307E;&#x305F;&#x306F; PKCS12 &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x79D8;&#x5BC6;&#x9375;&#x3001;&#x8A3C;&#x660E;&#x66F8;&#x3001;\n&#x304A;&#x3088;&#x3073;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x5BFE;&#x3059;&#x308B; CA &#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x542B;&#x3080;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3002;</p>\n</li>\n<li><p><code>key</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n<code>Buffer</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>passphrase</code>: &#x79D8;&#x5BC6;&#x9375;&#x307E;&#x305F;&#x306F; pfx &#x306E;&#x30D1;&#x30B9;&#x30D5;&#x30EC;&#x30FC;&#x30BA;&#x3092;&#x8868;&#x3059;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>cert</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>ca</code>: PEM&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n<code>Buffer</code> &#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x30D9;&#x30EA;&#x30B5;&#x30A4;&#x30F3;&#x306A;&#x3069;&#x306E;&#x3088;&#x304F;&#x77E5;&#x3089;&#x308C;&#x305F;&#x300C;&#x30EB;&#x30FC;&#x30C8;&#x300D;&#x8A8D;&#x8A3C;&#x5C40;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306F;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x8A8D;&#x8A3C;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>rejectUnauthorized</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x8A3C;&#x660E;&#x66F8;&#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;\n&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x691C;&#x8A3C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x306F; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B; <em>&#x524D;</em> &#x306B;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x30EC;&#x30D9;&#x30EB;&#x3067;&#x884C;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; true &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>NPNProtocols</code>: &#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3059;&#x308B; NPN &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> \n&#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>Buffer</code> &#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306A;&#x5F62;&#x5F0F;&#x3067;&#x3059;: <code>0x05hello0x5world</code>\n&#x6700;&#x521D;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x306F;&#x6B21;&#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x540D;&#x306E;&#x9577;&#x3055;&#x3067;&#x3059;\n(&#x901A;&#x5E38;&#x3001;&#x914D;&#x5217;&#x3092;&#x6E21;&#x3059;&#x65B9;&#x304C;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x3067;&#x3059;: <code>[&apos;hello&apos;, &apos;world&apos;]</code>)&#x3002;</p>\n</li>\n<li><p><code>servername</code>: TLS &#x62E1;&#x5F35;&#x3067;&#x3042;&#x308B; SNI (Server Name Indication) &#x306E;&#x30B5;&#x30FC;&#x30D0;&#x540D;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>secureProtocol</code>: &#x4F7F;&#x7528;&#x3059;&#x308B; SSL &#x65B9;&#x5F0F;&#x3001;&#x305F;&#x3068;&#x3048;&#x3070; <code>SSLv3_method</code> &#x306F;\nSSL &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 3 &#x3092;&#x5F37;&#x5236;&#x3057;&#x307E;&#x3059;&#x3002;&#x53EF;&#x80FD;&#x306A;&#x5024;&#x306F;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B; OpenSSL\n&#x3068;&#x3001;&#x305D;&#x306E;&#x5B9A;&#x6570; [SSL_METHODS][] &#x306E;&#x5B9A;&#x7FA9;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nThe `callback` parameter will be added as a listener for the\n['secureConnect'][] event.\n\n`tls.connect()` returns a [CleartextStream][] object.\n\nHere is an example of a client of echo server as described previously:\n-->\n\n<p><code>callback</code> &#x5F15;&#x6570;&#x306F; [&apos;secureConnect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;\n&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>tls.connect()</code> &#x306F; [CleartextStream][] &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x524D;&#x8FF0;&#x306E;&#x30A8;&#x30B3;&#x30FC;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  // These are necessary only if using the client certificate authentication\n  key: fs.readFileSync(&apos;client-key.pem&apos;),\n  cert: fs.readFileSync(&apos;client-cert.pem&apos;),\n\n  // This is necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync(&apos;server-cert.pem&apos;) ]\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&apos;client connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&apos;utf8&apos;);\ncleartextStream.on(&apos;data&apos;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&apos;end&apos;, function() {\n  server.close();\n});</code></pre>\n<!--\nOr\n-->\n\n<p>&#x307E;&#x305F;&#x306F;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;client.pfx&apos;)\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&apos;client connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&apos;utf8&apos;);\ncleartextStream.on(&apos;data&apos;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&apos;end&apos;, function() {\n  server.close();\n});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;port&quot;
                },
                {
                  &quot;name&quot;: &quot;host&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;tls.connect(port, [host], [options], [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;connect&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a new client connection to the given `port` and `host` (old API) or\n`options.port` and `options.host`. (If `host` is omitted, it defaults to\n`localhost`.) `options` should be an object which specifies:\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>port</code> &#x3068; <code>host</code> (&#x65E7; API) &#x307E;&#x305F;&#x306F; <code>options.port</code> &#x3068; <code>options.host</code>\n&#x3067;&#x65B0;&#x3057;&#x3044;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;\n(<code>host</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>localhost</code> &#x3067;&#x3059;)&#x3002;\n<code>options</code> &#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;:\n\n</p>\n<!--\n  - `host`: Host the client should connect to\n\n  - `port`: Port the client should connect to\n\n  - `socket`: Establish secure connection on a given socket rather than\n    creating a new socket. If this option is specified, `host` and `port`\n    are ignored.\n\n  - `pfx`: A string or `Buffer` containing the private key, certificate and\n    CA certs of the server in PFX or PKCS12 format.\n\n  - `key`: A string or `Buffer` containing the private key of the client in\n    PEM format.\n\n  - `passphrase`: A string of passphrase for the private key or pfx.\n\n  - `cert`: A string or `Buffer` containing the certificate key of the client in\n    PEM format.\n\n  - `ca`: An array of strings or `Buffer`s of trusted certificates in PEM\n    format. If this is omitted several well known \"root\" CAs will be used,\n    like VeriSign. These are used to authorize connections.\n\n  - `rejectUnauthorized`: If `true`, the server certificate is verified against\n    the list of supplied CAs. An `'error'` event is emitted if verification\n    fails. Default: `true`.\n\n  - `NPNProtocols`: An array of strings or `Buffer`s containing supported NPN\n    protocols. `Buffer`s should have following format: `0x05hello0x05world`,\n    where first byte is next protocol name's length. (Passing array should\n    usually be much simpler: `['hello', 'world']`.)\n\n  - `servername`: Servername for SNI (Server Name Indication) TLS extension.\n\n  - `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force\n    SSL version 3. The possible values depend on your installation of\n    OpenSSL and are defined in the constant [SSL_METHODS][].\n-->\n\n<ul>\n<li><p><code>host</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DB;&#x30B9;&#x30C8;&#x3002;</p>\n</li>\n<li><p><code>port</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x3002;</p>\n</li>\n<li><p><code>socket</code>: &#x65B0;&#x3057;&#x3044;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x4E0A;&#x3067;\n&#x30BB;&#x30AD;&#x30E5;&#x30A2;&#x306A;&#x63A5;&#x7D9A;&#x3092;&#x78BA;&#x7ACB;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;<code>host</code> &#x304A;&#x3088;&#x3073; <code>port</code> &#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>pfx</code> : PFX &#x307E;&#x305F;&#x306F; PKCS12 &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x79D8;&#x5BC6;&#x9375;&#x3001;&#x8A3C;&#x660E;&#x66F8;&#x3001;\n&#x304A;&#x3088;&#x3073;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x5BFE;&#x3059;&#x308B; CA &#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x542B;&#x3080;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3002;</p>\n</li>\n<li><p><code>key</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x79D8;&#x5BC6;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n<code>Buffer</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>passphrase</code>: &#x79D8;&#x5BC6;&#x9375;&#x307E;&#x305F;&#x306F; pfx &#x306E;&#x30D1;&#x30B9;&#x30D5;&#x30EC;&#x30FC;&#x30BA;&#x3092;&#x8868;&#x3059;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>cert</code>: PEM &#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x9375;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>ca</code>: PEM&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306B;&#x3088;&#x308B;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;\n<code>Buffer</code> &#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x30D9;&#x30EA;&#x30B5;&#x30A4;&#x30F3;&#x306A;&#x3069;&#x306E;&#x3088;&#x304F;&#x77E5;&#x3089;&#x308C;&#x305F;&#x300C;&#x30EB;&#x30FC;&#x30C8;&#x300D;&#x8A8D;&#x8A3C;&#x5C40;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306F;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x8A8D;&#x8A3C;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>rejectUnauthorized</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x8A3C;&#x660E;&#x66F8;&#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;\n&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x691C;&#x8A3C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x306F; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B; <em>&#x524D;</em> &#x306B;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x30EC;&#x30D9;&#x30EB;&#x3067;&#x884C;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; true &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>NPNProtocols</code>: &#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3059;&#x308B; NPN &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F; <code>Buffer</code> \n&#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>Buffer</code> &#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306A;&#x5F62;&#x5F0F;&#x3067;&#x3059;: <code>0x05hello0x5world</code>\n&#x6700;&#x521D;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x306F;&#x6B21;&#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x540D;&#x306E;&#x9577;&#x3055;&#x3067;&#x3059;\n(&#x901A;&#x5E38;&#x3001;&#x914D;&#x5217;&#x3092;&#x6E21;&#x3059;&#x65B9;&#x304C;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x3067;&#x3059;: <code>[&apos;hello&apos;, &apos;world&apos;]</code>)&#x3002;</p>\n</li>\n<li><p><code>servername</code>: TLS &#x62E1;&#x5F35;&#x3067;&#x3042;&#x308B; SNI (Server Name Indication) &#x306E;&#x30B5;&#x30FC;&#x30D0;&#x540D;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>secureProtocol</code>: &#x4F7F;&#x7528;&#x3059;&#x308B; SSL &#x65B9;&#x5F0F;&#x3001;&#x305F;&#x3068;&#x3048;&#x3070; <code>SSLv3_method</code> &#x306F;\nSSL &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 3 &#x3092;&#x5F37;&#x5236;&#x3057;&#x307E;&#x3059;&#x3002;&#x53EF;&#x80FD;&#x306A;&#x5024;&#x306F;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B; OpenSSL\n&#x3068;&#x3001;&#x305D;&#x306E;&#x5B9A;&#x6570; [SSL_METHODS][] &#x306E;&#x5B9A;&#x7FA9;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nThe `callback` parameter will be added as a listener for the\n['secureConnect'][] event.\n\n`tls.connect()` returns a [CleartextStream][] object.\n\nHere is an example of a client of echo server as described previously:\n-->\n\n<p><code>callback</code> &#x5F15;&#x6570;&#x306F; [&apos;secureConnect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;\n&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>tls.connect()</code> &#x306F; [CleartextStream][] &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x524D;&#x8FF0;&#x306E;&#x30A8;&#x30B3;&#x30FC;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  // These are necessary only if using the client certificate authentication\n  key: fs.readFileSync(&apos;client-key.pem&apos;),\n  cert: fs.readFileSync(&apos;client-cert.pem&apos;),\n\n  // This is necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync(&apos;server-cert.pem&apos;) ]\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&apos;client connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&apos;utf8&apos;);\ncleartextStream.on(&apos;data&apos;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&apos;end&apos;, function() {\n  server.close();\n});</code></pre>\n<!--\nOr\n-->\n\n<p>&#x307E;&#x305F;&#x306F;:\n\n</p>\n<pre><code>var tls = require(&apos;tls&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;client.pfx&apos;)\n};\n\nvar cleartextStream = tls.connect(8000, options, function() {\n  console.log(&apos;client connected&apos;,\n              cleartextStream.authorized ? &apos;authorized&apos; : &apos;unauthorized&apos;);\n  process.stdin.pipe(cleartextStream);\n  process.stdin.resume();\n});\ncleartextStream.setEncoding(&apos;utf8&apos;);\ncleartextStream.on(&apos;data&apos;, function(data) {\n  console.log(data);\n});\ncleartextStream.on(&apos;end&apos;, function() {\n  server.close();\n});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;port&quot;
                },
                {
                  &quot;name&quot;: &quot;host&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;tls.createSecurePair([credentials], [isServer], [requestCert], [rejectUnauthorized])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createSecurePair&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a new secure pair object with two streams, one of which reads/writes\nencrypted data, and one reads/writes cleartext data.\nGenerally the encrypted one is piped to/from an incoming encrypted data stream,\nand the cleartext one is used as a replacement for the initial encrypted stream.\n - `credentials`: A credentials object from crypto.createCredentials( ... )\n\n - `isServer`: A boolean indicating whether this tls connection should be\n   opened as a server or a client.\n\n - `requestCert`: A boolean indicating whether a server should request a\n   certificate from a connecting client. Only applies to server connections.\n\n - `rejectUnauthorized`: A boolean indicating whether a server should\n   automatically reject clients with invalid certificates. Only applies to\n   servers with `requestCert` enabled.\n\n`tls.createSecurePair()` returns a SecurePair object with [cleartext][] and\n`encrypted` stream properties.\n-->\n\n<p>&#x4E8C;&#x3064;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x6301;&#x3064;&#x30BB;&#x30AD;&#x30E5;&#x30A2;&#x30DA;&#x30A2;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x3064;&#x306F;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8AAD;&#x307F;&#x66F8;&#x304D;&#x3057;&#x3001;&#x3082;&#x3046;&#x4E00;&#x3064;&#x306F;&#x5E73;&#x6587;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8AAD;&#x307F;&#x66F8;&#x304D;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x901A;&#x5E38;&#x3001;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x5916;&#x90E8;&#x304B;&#x3089;&#x306E;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x9023;&#x7D50;&#x3055;&#x308C;&#x3001;\n&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x5E73;&#x6587;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<ul>\n<li><p><code>credentials</code>: <code>crypto.createCredentials( ... )</code> &#x3067;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;\n&#x8A3C;&#x660E;&#x66F8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3002;</p>\n</li>\n<li><p><code>isServer</code>: &#x3053;&#x306E; TLS &#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x30B5;&#x30FC;&#x30D0;&#x3068;&#x3057;&#x3066;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x793A;&#x3059;\n&#x30D6;&#x30FC;&#x30EA;&#x30A2;&#x30F3;&#x5024;&#x3002;</p>\n</li>\n<li><p><code>requestCert</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304B;&#x3089;&#x306E;&#x63A5;&#x7D9A;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306B;\n&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x8981;&#x6C42;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x793A;&#x3059;&#x30D6;&#x30FC;&#x30EA;&#x30A2;&#x30F3;&#x5024;&#x3002;\n&#x30B5;&#x30FC;&#x30D0;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x306E;&#x307F;&#x9069;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>rejectUnauthorized</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x8A8D;&#x8A3C;&#x304C;&#x4E0D;&#x6B63;&#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x3001;\n&#x81EA;&#x52D5;&#x7684;&#x306B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3092;&#x7834;&#x68C4;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x793A;&#x3059;&#x30D6;&#x30FC;&#x30EA;&#x30A2;&#x30F3;&#x5024;&#x3002;\n<code>requestCert</code> &#x304C;&#x6709;&#x52B9;&#x306A;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x306E;&#x307F;&#x9069;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<p><code>tls.createSequrePair()</code> &#x306F;&#x3001;[cleartext][] &#x3068; <code>encrypted</code>\n&#x3092;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3068;&#x3057;&#x3066;&#x6301;&#x3064; <code>SecurePair</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;credentials&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;isServer&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;requestCert&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;rejectUnauthorized&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;tls.SLAB_BUFFER_SIZE&quot;,
          &quot;name&quot;: &quot;SLAB_BUFFER_SIZE&quot;,
          &quot;desc&quot;: &quot;<!--\nSize of slab buffer used by all tls servers and clients.\nDefault: `10 * 1024 * 1024`.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; TLS &#x30B5;&#x30FC;&#x30D0;&#x53CA;&#x3073;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3067;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x308B;&#x30B9;&#x30E9;&#x30D6;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;: <code>10 * 1024 * 1024</code>&#x3002;\n\n\n</p>\n<!--\nDon't change the defaults unless you know what you are doing.\n-->\n\n<p>&#x3042;&#x306A;&#x305F;&#x304C;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x3053;&#x3068;&#x3092;&#x7406;&#x89E3;&#x3057;&#x3066;&#x3044;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3092;&#x5909;&#x66F4;&#x3057;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: SecurePair&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;SecurePair&quot;,
          &quot;desc&quot;: &quot;<!--\nReturned by tls.createSecurePair.\n-->\n\n<p><code>tls.createSecurePair</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;secure&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;secure&quot;,
              &quot;desc&quot;: &quot;<!--\nThe event is emitted from the SecurePair once the pair has successfully\nestablished a secure connection.\n\nSimilarly to the checking for the server 'secureConnection' event,\npair.cleartext.authorized should be checked to confirm whether the certificate\nused properly authorized.\n-->\n\n<p>SecurePair &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x30DA;&#x30A2;&#x304C;&#x5B89;&#x5168;&#x306A;&#x63A5;&#x7D9A;&#x3092;&#x78BA;&#x7ACB;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30B5;&#x30FC;&#x30D0;&#x306E; <code>&apos;secureConnection&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3068;&#x540C;&#x69D8;&#x306B;&#x3001;\n<code>pari.cleartext.authorized</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x63A5;&#x7D9A;&#x76F8;&#x624B;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x627F;&#x8A8D;&#x3067;&#x304D;&#x305F;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;\n&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: tls.Server&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;tls.Server&quot;,
          &quot;desc&quot;: &quot;<!--\nThis class is a subclass of `net.Server` and has the same methods on it.\nInstead of accepting just raw TCP connections, this accepts encrypted\nconnections using TLS or SSL.\n-->\n\n<p>&#x3053;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306F; <code>net.Server</code> &#x306E;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;&#x540C;&#x3058;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x751F;&#x306E; TCP &#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x53D7;&#x3051;&#x5165;&#x308C;&#x308B;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;\nTLS &#x307E;&#x305F;&#x306F; SSL &#x3092;&#x4F7F;&#x3063;&#x305F;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;secureConnection&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;secureConnection&quot;,
              &quot;desc&quot;: &quot;<p><code>function (cleartextStream) {}</code>\n\n</p>\n<!--\nThis event is emitted after a new connection has been successfully\nhandshaked. The argument is a instance of [CleartextStream][]. It has all the\ncommon stream methods and events.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x3001;&#x65B0;&#x3057;&#x3044;&#x63A5;&#x7D9A;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30B7;&#x30A7;&#x30FC;&#x30AF;&#x304C;&#x6210;&#x529F;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5F15;&#x6570;&#x306F; [CleartextStream][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x5171;&#x901A;&#x3059;&#x308B;&#x5168;&#x3066;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3068;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`cleartextStream.authorized` is a boolean value which indicates if the\nclient has verified by one of the supplied certificate authorities for the\nserver. If `cleartextStream.authorized` is false, then\n`cleartextStream.authorizationError` is set to describe how authorization\nfailed. Implied but worth mentioning: depending on the settings of the TLS\nserver, you unauthorized connections may be accepted.\n`cleartextStream.npnProtocol` is a string containing selected NPN protocol.\n`cleartextStream.servername` is a string containing servername requested with\nSNI.\n-->\n\n<p><code>cleartextStream.authorized</code> &#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x306B;&#x3088;&#x3063;&#x3066;\n&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x305F;&#x304B;&#x3092;&#x793A;&#x3059; boolean &#x5024;&#x3067;&#x3059;&#x3002;\n<code>cleartextStream.authorized</code> &#x304C; false &#x306E;&#x5834;&#x5408;&#x3001;\n<code>cleartextStream.authorizationError</code> &#x306B;&#x306F;&#x3069;&#x306E;&#x3088;&#x3046;&#x306B;&#x8A8D;&#x8A3C;&#x304C;&#x5931;&#x6557;&#x3057;&#x305F;&#x306E;&#x304B;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6697;&#x9ED9;&#x7684;&#x3067;&#x3059;&#x304C;&#x8A00;&#x53CA;&#x3059;&#x308B;&#x4FA1;&#x5024;&#x306E;&#x3042;&#x308B;&#x3053;&#x3068;:\nTLS &#x30B5;&#x30FC;&#x30D0;&#x306E;&#x8A2D;&#x5B9A;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>cleartextStream.npnProtocol</code> &#x306F;&#x3001;&#x9078;&#x629E;&#x3055;&#x308C;&#x305F; NPN &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x3092;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>cleartextStream.servername</code> &#x306F;&#x3001;SNI &#x3067;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3055;&#x308C;&#x305F;&#x30B5;&#x30FC;&#x30D0;&#x540D;&#x3092;&#x6301;&#x3064;\n&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;clientError&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;clientError&quot;,
              &quot;desc&quot;: &quot;<p><code>function (exception, securePair) { }</code>\n\n</p>\n<!--\nWhen a client connection emits an 'error' event before secure connection is\nestablished - it will be forwarded here.\n-->\n\n<p>&#x30BB;&#x30AD;&#x30E5;&#x30A2;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x78BA;&#x7ACB;&#x3055;&#x308C;&#x308B;&#x524D;&#x306B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;\n<code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x767A;&#x3057;&#x305F;&#x5834;&#x5408; &#xFF0D; &#x3053;&#x3053;&#x306B;&#x8EE2;&#x9001;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`securePair` is the `tls.SecurePair` that the error originated from.\n-->\n\n<p><code>securePair</code> &#x306F;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F; <code>tls.SecurePair</code> &#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;newSession&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;newSession&quot;,
              &quot;desc&quot;: &quot;<p><code>function (sessionId, sessionData) { }</code>\n\n</p>\n<!--\nEmitted on creation of TLS session. May be used to store sessions in external\nstorage.\n-->\n\n<p>TLS &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x5916;&#x90E8;&#x30B9;&#x30C8;&#x30EC;&#x30FC;&#x30B8;&#x306B;&#x4FDD;&#x5B58;&#x3059;&#x308B;&#x5834;&#x5408;&#x306B;&#x4F7F;&#x3048;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;resumeSession&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;resumeSession&quot;,
              &quot;desc&quot;: &quot;<p><code>function (sessionId, callback) { }</code>\n\n</p>\n<!--\nEmitted when client wants to resume previous TLS session. Event listener may\nperform lookup in external storage using given `sessionId`, and invoke\n`callback(null, sessionData)` once finished. If session can't be resumed\n(i.e. doesn't exist in storage) one may call `callback(null, null)`. Calling\n`callback(err)` will terminate incoming connection and destroy socket.\n-->\n\n<p>&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x4EE5;&#x524D;&#x306E; TLS &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x518D;&#x958B;&#x3092;&#x8981;&#x6C42;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EA;&#x30B9;&#x30CA;&#x306F;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>sessionId</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x5916;&#x90E8;&#x30B9;&#x30C8;&#x30EC;&#x30FC;&#x30B8;&#x304B;&#x3089;\n&#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x898B;&#x3064;&#x3051;&#x305F;&#x5834;&#x5408;&#x3001;<code>callback(null, sessionData)</code> &#x3092;&#x4E00;&#x5EA6;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;\n&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x518D;&#x958B;&#x3067;&#x304D;&#x306A;&#x3044;&#x5834;&#x5408; (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x30B9;&#x30C8;&#x30EC;&#x30FC;&#x30B8;&#x306B;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;)&#x3001;\n<code>callback(null, null)</code> &#x3092;&#x547C;&#x3076;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>callback(err)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x63A5;&#x7D9A;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x7834;&#x68C4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;server.listen(port, [host], [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;desc&quot;: &quot;<!--\nBegin accepting connections on the specified `port` and `host`.  If the\n`host` is omitted, the server will accept connections directed to any\nIPv4 address (`INADDR_ANY`).\n-->\n\n<p>&#x6307;&#x5B9A;&#x306E; <code>port</code> &#x3068; <code>host</code> &#x3067;&#x63A5;&#x7D9A;&#x306E;&#x53D7;&#x3051;&#x5165;&#x308C;&#x3092;&#x958B;&#x59CB;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>host</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x3069;&#x3093;&#x306A; IPv4 &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x304B;&#x3089;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x307E;&#x3059; (<code>INADDR_ANY</code>)&#x3002;\n\n</p>\n<!--\nThis function is asynchronous. The last parameter `callback` will be called\nwhen the server has been bound.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3059;&#x3002;\n&#x6700;&#x5F8C;&#x306E;&#x5F15;&#x6570; <code>callback</code> &#x306F;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x308B;&#x3068;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nSee `net.Server` for more information.\n-->\n\n<p>&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F; <code>net.Server</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;port&quot;
                    },
                    {
                      &quot;name&quot;: &quot;host&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.close()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nStops the server from accepting new connections. This function is\nasynchronous, the server is finally closed when the server emits a `'close'`\nevent.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x65B0;&#x3057;&#x3044;&#x63A5;&#x7D9A;&#x3092;&#x53D7;&#x3051;&#x5165;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x6700;&#x7D42;&#x7684;&#x306B;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x308B;&#x3068;&#x30B5;&#x30FC;&#x30D0;&#x306F; <code>&apos;close&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.address()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;address&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the bound address, the address family name and port of the\nserver as reported by the operating system.  See [net.Server.address()][] for\nmore information.\n-->\n\n<p>&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x5831;&#x544A;&#x3055;&#x308C;&#x305F;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x305F;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3068;\n&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x30D5;&#x30A1;&#x30DF;&#x30EA;&#x540D;&#x3001;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002; \n&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x306F; [net.Server.address()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.addContext(hostname, credentials)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;addContext&quot;,
              &quot;desc&quot;: &quot;<!--\nAdd secure context that will be used if client request's SNI hostname is\nmatching passed `hostname` (wildcards can be used). `credentials` can contain\n`key`, `cert` and `ca`.\n-->\n\n<p>&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x8981;&#x6C42;&#x3057;&#x3066;&#x304D;&#x305F; SNI &#x30DB;&#x30B9;&#x30C8;&#x540D;&#x3068; <code>hostname</code> (&#x30EF;&#x30A4;&#x30EB;&#x30C9;&#x30AB;&#x30FC;&#x30C9;&#x3092;&#x4F7F;&#x7528;&#x53EF;&#x80FD;)\n&#x304C;&#x30DE;&#x30C3;&#x30C1;&#x3057;&#x305F;&#x5834;&#x5408;&#x306E;&#x30BB;&#x30AD;&#x30E5;&#x30EA;&#x30C6;&#x30A3;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3092;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>credentials</code> &#x306F; <code>key</code>&#x3001;<code>cert</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>ca</code> &#x3092;&#x542B;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;hostname&quot;
                    },
                    {
                      &quot;name&quot;: &quot;credentials&quot;
                    }
                  ]
                }
              ]
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;server.maxConnections&quot;,
              &quot;name&quot;: &quot;maxConnections&quot;,
              &quot;desc&quot;: &quot;<!--\nSet this property to reject connections when the server's connection count\ngets high.\n-->\n\n<p>&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x63A5;&#x7D9A;&#x6570;&#x304C;&#x3053;&#x308C;&#x3092;&#x8D8A;&#x3048;&#x305F;&#x5834;&#x5408;&#x306B;&#x63A5;&#x7D9A;&#x3092;&#x7834;&#x68C4;&#x3057;&#x307E;&#x3059;&#x3002;\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;server.connections&quot;,
              &quot;name&quot;: &quot;connections&quot;,
              &quot;desc&quot;: &quot;<!--\nThe number of concurrent connections on the server.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x4E26;&#x884C;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: CryptoStream&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;CryptoStream&quot;,
          &quot;desc&quot;: &quot;<!--\nThis is an encrypted stream.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;cryptoStream.bytesWritten&quot;,
              &quot;name&quot;: &quot;bytesWritten&quot;,
              &quot;desc&quot;: &quot;<!--\nA proxy to the underlying socket's bytesWritten accessor, this will return\nthe total bytes written to the socket, *including the TLS overhead*.\n-->\n\n<p>&#x4E0B;&#x5C64;&#x306B;&#x3042;&#x308B;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E; bytesWritten &#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x30D7;&#x30ED;&#x30AD;&#x30B7;&#x3067;&#x3001;\n<em>TLS &#x306E;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30D8;&#x30C3;&#x30C9;&#x3092;&#x542B;&#x3081;&#x3066;</em> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C8;&#x30FC;&#x30BF;&#x30EB;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3092;\n&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: tls.CleartextStream&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;tls.CleartextStream&quot;,
          &quot;desc&quot;: &quot;<!--\nThis is a stream on top of the *Encrypted* stream that makes it possible to\nread/write an encrypted data as a cleartext data.\n\nThis instance implements a duplex [Stream][] interfaces.  It has all the\ncommon stream methods and events.\n-->\n\n<p>&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x4E0A;&#x3067;&#x3001;&#x6697;&#x53F7;&#x5316;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5E73;&#x6587;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3068;&#x3057;&#x3066;\n&#x8AAD;&#x307F;&#x66F8;&#x304D;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306F;&#x53CC;&#x65B9;&#x5411;&#x306E; [Stream][] &#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x5171;&#x901A;&#x306A;&#x5168;&#x3066;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3068;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>A ClearTextStream is the <code>clear</code> member of a SecurePair object.\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;secureConnect&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;secureConnect&quot;,
              &quot;desc&quot;: &quot;<!--\nThis event is emitted after a new connection has been successfully handshaked. \nThe listener will be called no matter if the server's certificate was\nauthorized or not. It is up to the user to test `cleartextStream.authorized`\nto see if the server certificate was signed by one of the specified CAs.\nIf `cleartextStream.authorized === false` then the error can be found in\n`cleartextStream.authorizationError`. Also if NPN was used - you can check\n`cleartextStream.npnProtocol` for negotiated protocol.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E; TLS/SSL &#x30CF;&#x30F3;&#x30C9;&#x30B7;&#x30A7;&#x30FC;&#x30AF;&#x304C;&#x6210;&#x529F;&#x3059;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30EA;&#x30B9;&#x30CA;&#x306F;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x304C;&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x305F;&#x304B;&#x3069;&#x3046;&#x304B;&#x306B;&#x95A2;&#x308F;&#x3089;&#x305A;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30B5;&#x30FC;&#x30D0;&#x8A3C;&#x660E;&#x66F8;&#x304C;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306B;&#x627F;&#x8A8D;&#x3055;&#x308C;&#x305F;&#x304B;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n<code>cleartextStream.authorized</code> &#x3092;&#x78BA;&#x8A8D;&#x3059;&#x308B;&#x304B;&#x306F;&#x30E6;&#x30FC;&#x30B6;&#x6B21;&#x7B2C;&#x3067;&#x3059;&#x3002;\n<code>cleartextStream.authorized === false</code>&#x306E;&#x5834;&#x5408;&#x3001;\n<code>cleartextStream.authorizationError</code> &#x304B;&#x3089;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x898B;&#x3064;&#x3051;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x540C;&#x69D8;&#x306B; NPN &#x304C;&#x4F7F;&#x308F;&#x308C;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x306F; <code>cleartextStream.npnProtocol</code>\n&#x304B;&#x3089;&#x5408;&#x610F;&#x3055;&#x308C;&#x305F;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;cleartextStream.authorized&quot;,
              &quot;name&quot;: &quot;authorized&quot;,
              &quot;desc&quot;: &quot;<!--\nA boolean that is `true` if the peer certificate was signed by one of the\nspecified CAs, otherwise `false`\n-->\n\n<p>&#x63A5;&#x7D9A;&#x76F8;&#x624B;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x304C; CA &#x306E;&#x4E00;&#x3064;&#x306B;&#x3088;&#x3063;&#x3066;&#x7F72;&#x540D;&#x3055;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070; <code>true</code>&#x3001;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;cleartextStream.authorizationError&quot;,
              &quot;name&quot;: &quot;authorizationError&quot;,
              &quot;The reason why the peer&apos;s certificate has not been verified. This property\nbecomes available only when `cleartextStream.authorized&quot;: &quot;== false`.&quot;,
              &quot;desc&quot;: &quot;<p>&#x63A5;&#x7D9A;&#x76F8;&#x624B;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x304C;&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x7406;&#x7531;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F; <code>cleartextStream.authorized === false</code>\n&#x306E;&#x5834;&#x5408;&#x3060;&#x3051;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;cleartextStream.remoteAddress&quot;,
              &quot;name&quot;: &quot;remoteAddress&quot;,
              &quot;desc&quot;: &quot;<!--\nThe string representation of the remote IP address. For example,\n`'74.125.127.100'` or `'2001:4860:a005::68'`.\n-->\n\n<p>&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x306E; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;<code>&apos;74.125.127.100&apos;</code> &#x3042;&#x308B;&#x3044;&#x306F; <code>&apos;2001:4860:a005::68&apos;</code>&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;cleartextStream.remotePort&quot;,
              &quot;name&quot;: &quot;remotePort&quot;,
              &quot;desc&quot;: &quot;<!--\nThe numeric representation of the remote port. For example, `443`.\n-->\n\n<p>&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30DD;&#x30FC;&#x30C8;&#x306E;&#x6570;&#x5024;&#x8868;&#x73FE;&#x3067;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;<code>443</code>&#x3002;\n\n</p>\n<!--\n[OpenSSL cipher list format documentation]: http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT\n[BEAST attacks]: http://blog.ivanristic.com/2011/10/mitigating-the-beast-attack-on-tls.html\n[CleartextStream]: #tls_class_tls_cleartextstream\n[net.Server.address()]: net.html#net_server_address\n['secureConnect']: #tls_event_secureconnect\n[secureConnection]: #tls_event_secureconnection\n[Stream]: stream.html#stream_stream\n[SSL_METHODS]: http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_PROTOCOL_METHODS\n[tls.Server]: #tls_class_tls_server\n-->\n\n&quot;
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;cleartextStream.getPeerCertificate()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getPeerCertificate&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns an object representing the peer's certificate. The returned object has\nsome properties corresponding to the field of the certificate.\n-->\n\n<p>&#x63A5;&#x7D9A;&#x76F8;&#x624B;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x8A3C;&#x660E;&#x66F8;&#x306E;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x306B;&#x5BFE;&#x5FDC;&#x3059;&#x308B;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>{ subject: \n   { C: &apos;UK&apos;,\n     ST: &apos;Acknack Ltd&apos;,\n     L: &apos;Rhys Jones&apos;,\n     O: &apos;node.js&apos;,\n     OU: &apos;Test TLS Certificate&apos;,\n     CN: &apos;localhost&apos; },\n  issuer: \n   { C: &apos;UK&apos;,\n     ST: &apos;Acknack Ltd&apos;,\n     L: &apos;Rhys Jones&apos;,\n     O: &apos;node.js&apos;,\n     OU: &apos;Test TLS Certificate&apos;,\n     CN: &apos;localhost&apos; },\n  valid_from: &apos;Nov 11 09:52:22 2009 GMT&apos;,\n  valid_to: &apos;Nov  6 09:52:22 2029 GMT&apos;,\n  fingerprint: &apos;2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF&apos; }</code></pre>\n<!--\nIf the peer does not provide a certificate, it returns `null` or an empty\nobject.\n-->\n\n<p>&#x63A5;&#x7D9A;&#x76F8;&#x624B;&#x304C;&#x8A3C;&#x660E;&#x66F8;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n<code>null</code> &#x307E;&#x305F;&#x306F;&#x7A7A;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;cleartextStream.getCipher()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getCipher&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns an object representing the cipher name and the SSL/TLS\nprotocol version of the current connection.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x63A5;&#x7D9A;&#x306B;&#x304A;&#x3051;&#x308B;&#x6697;&#x53F7;&#x3068; SSL/TLS &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;\n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>{ name: &apos;AES256-SHA&apos;, version: &apos;TLSv1/SSLv3&apos; }</code></pre>\n<!--\nSee SSL_CIPHER_get_name() and SSL_CIPHER_get_version() in\nhttp://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_CIPHERS for more\ninformation.\n-->\n\n<p>&#x8A73;&#x7D30;&#x306F;\n<a href="\&quot;http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_CIPHERS\&quot;">http://www.openssl.org/docs/ssl/ssl.html#DEALING_WITH_CIPHERS</a>\n&#x3067; <code>SSL_CIPHER_get_name()</code> &#x304A;&#x3088;&#x3073; <code>SSL_CIPHER_get_version()</code> &#x3092;\n&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;cleartextStream.address()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;address&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the bound address, the address family name and port of the\nunderlying socket as reported by the operating system. Returns an\nobject with three properties, e.g.\n`{ port: 12346, family: 'IPv4', address: '127.0.0.1' }`\n-->\n\n<p>&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x5831;&#x544A;&#x3055;&#x308C;&#x305F;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x305F;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3068;\n&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x30D5;&#x30A1;&#x30DF;&#x30EA;&#x540D;&#x3001;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x4E8C;&#x3064;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n<code>{ port: 12346, family: &apos;IPv4&apos;, address: &apos;127.0.0.1&apos; }</code>\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;TLS (SSL)&quot;
    },
    {
      &quot;textRaw&quot;: &quot;StringDecoder&quot;,
      &quot;name&quot;: &quot;stringdecoder&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nTo use this module, do `require('string_decoder')`. StringDecoder decodes a\nbuffer to a string. It is a simple interface to `buffer.toString()` but provides\nadditional support for utf8.\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x306B;&#x306F; <code>require(&apos;string_decoder&apos;)</code> &#x3092;&#x3057;&#x307E;&#x3059;&#x3002;\nStringDecoder &#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304B;&#x3089;&#x6587;&#x5B57;&#x5217;&#x306B;&#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x5358;&#x7D14;&#x306A;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9; <code>buffer.toString()</code> &#x3067;&#x3059;&#x304C;&#x3001;\nUTF-8 &#x3092;&#x7279;&#x5225;&#x306B;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;\nvar decoder = new StringDecoder(&apos;utf8&apos;);\n\nvar cent = new Buffer([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nvar euro = new Buffer([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));</code></pre>\n&quot;,
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: StringDecoder&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;StringDecoder&quot;,
          &quot;desc&quot;: &quot;<!--\nAccepts a single argument, `encoding` which defaults to `utf8`.\n-->\n\n<p>&#x6587;&#x5B57;&#x5217;&#x306E;&#x5F15;&#x6570; <code>encoding</code> &#x3092;&#x53D7;&#x3051;&#x53D6;&#x308A;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;utf8&apos;</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;decoder.write(buffer)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;write&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns a decoded string.\n-->\n\n<p>&#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;buffer&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;decoder.end()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;end&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns any trailing bytes that were left in the buffer.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x6B8B;&#x3063;&#x305F;&#x7D42;&#x7AEF;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;StringDecoder&quot;
    },
    {
      &quot;textRaw&quot;: &quot;File System&quot;,
      &quot;name&quot;: &quot;fs&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nFile I/O is provided by simple wrappers around standard POSIX functions.  To\nuse this module do `require('fs')`. All the methods have asynchronous and\nsynchronous forms.\n-->\n\n<p>File I/O &#x306F; POSIX &#x6A19;&#x6E96;&#x306E;&#x95A2;&#x6570;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x5358;&#x7D14;&#x306A;&#x30E9;&#x30C3;&#x30D1;&#x30FC;&#x3068;&#x3057;&#x3066;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x306B;&#x306F; <code>require(&apos;fs&apos;)</code> &#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x975E;&#x540C;&#x671F;&#x3068;&#x540C;&#x671F;&#x306E;&#x5F62;&#x5F0F;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe asynchronous form always take a completion callback as its last argument.\nThe arguments passed to the completion callback depend on the method, but the\nfirst argument is always reserved for an exception. If the operation was\ncompleted successfully, then the first argument will be `null` or `undefined`.\n\nWhen using the synchronous form any exceptions are immediately thrown.\nYou can use try/catch to handle exceptions or allow them to bubble up.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E;&#x5F62;&#x5F0F;&#x306F;&#x5E38;&#x306B;&#x6700;&#x5F8C;&#x306E;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x6E21;&#x3055;&#x308C;&#x308B;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x6700;&#x521D;&#x306E;&#x5F15;&#x6570;&#x306F;&#x5E38;&#x306B;&#x4F8B;&#x5916;&#x306E;&#x305F;&#x3081;&#x306B;&#x4E88;&#x7D04;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x64CD;&#x4F5C;&#x304C;&#x6210;&#x529F;&#x3067;&#x5B8C;&#x4E86;&#x3059;&#x308B;&#x3068;&#x6700;&#x521D;&#x306E;&#x5F15;&#x6570;&#x306F; <code>null</code> &#x307E;&#x305F;&#x306F; <code>undefined</code> &#x3068;&#x306A;&#x308A;&#x307E;&#x3059;\n\n</p>\n<p>&#x540C;&#x671F;&#x306E;&#x5F62;&#x5F0F;&#x3067;&#x306F;&#x3001;&#x5168;&#x3066;&#x306E;&#x4F8B;&#x5916;&#x306F;&#x3059;&#x3050;&#x306B;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x5916;&#x306F; try/catch &#x3067;&#x6355;&#x307E;&#x3048;&#x308B;&#x3053;&#x3068;&#x3082;&#x3001;&#x305D;&#x306E;&#x307E;&#x307E;&#x901A;&#x904E;&#x3055;&#x305B;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nHere is an example of the asynchronous version:\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code>var fs = require(&apos;fs&apos;);\n\nfs.unlink(&apos;/tmp/hello&apos;, function (err) {\n  if (err) throw err;\n  console.log(&apos;successfully deleted /tmp/hello&apos;);\n});</code></pre>\n<!--\nHere is the synchronous version:\n-->\n\n<p>&#x540C;&#x671F;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x3059;:\n\n</p>\n<pre><code>var fs = require(&apos;fs&apos;);\n\nfs.unlinkSync(&apos;/tmp/hello&apos;)\nconsole.log(&apos;successfully deleted /tmp/hello&apos;);</code></pre>\n<!--\nWith the asynchronous methods there is no guaranteed ordering. So the\nfollowing is prone to error:\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3067;&#x306F;&#x9806;&#x5E8F;&#x306E;&#x4FDD;&#x8A3C;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x4EE5;&#x4E0B;&#x306E;&#x3088;&#x3046;&#x306A;&#x50BE;&#x5411;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>fs.rename(&apos;/tmp/hello&apos;, &apos;/tmp/world&apos;, function (err) {\n  if (err) throw err;\n  console.log(&apos;renamed complete&apos;);\n});\nfs.stat(&apos;/tmp/world&apos;, function (err, stats) {\n  if (err) throw err;\n  console.log(&apos;stats: &apos; + JSON.stringify(stats));\n});</code></pre>\n<!--\nIt could be that `fs.stat` is executed before `fs.rename`.\nThe correct way to do this is to chain the callbacks.\n-->\n\n<p><code>fs.stat</code> &#x306F; <code>fs.rename</code> &#x3088;&#x308A;&#x5148;&#x306B;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x53EF;&#x80FD;&#x6027;&#x304C;&#x3042;&#x308A;r&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x3057;&#x3044;&#x65B9;&#x6CD5;&#x306F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>fs.rename(&apos;/tmp/hello&apos;, &apos;/tmp/world&apos;, function (err) {\n  if (err) throw err;\n  fs.stat(&apos;/tmp/world&apos;, function (err, stats) {\n    if (err) throw err;\n    console.log(&apos;stats: &apos; + JSON.stringify(stats));\n  });\n});</code></pre>\n<!--\nIn busy processes, the programmer is _strongly encouraged_ to use the\nasynchronous versions of these calls. The synchronous versions will block\nthe entire process until they complete--halting all connections.\n\nRelative path to filename can be used, remember however that this path will be\nrelative to `process.cwd()`.\n-->\n\n<p>&#x5FD9;&#x3057;&#x3044;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3067;&#x306F;&#x3001;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DE;&#x306F;&#x3053;&#x308C;&#x3089;&#x306E;&#x975E;&#x540C;&#x671F;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;<em>&#x5F37;&#x304F;&#x63A8;&#x5968;</em>&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x540C;&#x671F;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306F;&#x305D;&#x308C;&#x304C;&#x5B8C;&#x4E86;&#x3059;&#x308B;&#x307E;&#x3067;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x5168;&#x4F53;&#x3092;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059; &#xFF0D; &#x5168;&#x3066;&#x306E;&#x63A5;&#x7D9A;&#x3092;&#x505C;&#x6B62;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x306B;&#x306F;&#x76F8;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3002;&#x3057;&#x304B;&#x3057;&#x3001;&#x3053;&#x306E;&#x30D1;&#x30B9;&#x306F;\n<code>process.cwd()</code> &#x304B;&#x3089;&#x306E;&#x76F8;&#x5BFE;&#x30D1;&#x30B9;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x601D;&#x3044;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nMost fs functions let you omit the callback argument. If you do, a default\ncallback is used that ignores errors, but prints a deprecation\nwarning.\n-->\n\n<p>fs &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x95A2;&#x6570;&#x306F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x5F15;&#x6570;&#x3092;&#x7701;&#x7565;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3059;&#x308B;&#x3068;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x7121;&#x8996;&#x3059;&#x308B;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x3001;\n&#x5EC3;&#x6B62;&#x4E88;&#x5B9A;&#x306E;&#x8B66;&#x544A;&#x304C;&#x51FA;&#x529B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n**IMPORTANT**: Omitting the callback is deprecated.  v0.12 will throw the\nerrors as exceptions.\n-->\n\n<p><strong>&#x91CD;&#x8981;</strong>: &#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306E;&#x7701;&#x7565;&#x306F;&#x5EC3;&#x6B62;&#x4E88;&#x5B9A;&#x3067;&#x3059;&#x3002;v0.12 &#x306F;&#x4F8B;&#x5916;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3059;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;fs.rename(oldPath, newPath, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;rename&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous rename(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; rename(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;oldPath&quot;
                },
                {
                  &quot;name&quot;: &quot;newPath&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.renameSync(oldPath, newPath)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;renameSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous rename(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; rename(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;oldPath&quot;
                },
                {
                  &quot;name&quot;: &quot;newPath&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.ftruncate(fd, len, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;ftruncate&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous ftruncate(2). No arguments other than a possible exception are\ngiven to the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; ftruncate(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;len&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.ftruncateSync(fd, len)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;ftruncateSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous ftruncate(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; ftruncate(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;len&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.truncate(path, len, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;truncate&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous truncate(2). No arguments other than a possible exception are\ngiven to the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; truncate(2)&#x3002;\n&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;len&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.truncateSync(path, len)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;truncateSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous truncate(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; truncate(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;len&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.chown(path, uid, gid, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;chown&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous chown(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; chown(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;uid&quot;
                },
                {
                  &quot;name&quot;: &quot;gid&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.chownSync(path, uid, gid)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;chownSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous chown(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; chown(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;uid&quot;
                },
                {
                  &quot;name&quot;: &quot;gid&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.fchown(fd, uid, gid, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;fchown&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous fchown(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; fchown(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;uid&quot;
                },
                {
                  &quot;name&quot;: &quot;gid&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.fchownSync(fd, uid, gid)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;fchownSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous fchown(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; fchown(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;uid&quot;
                },
                {
                  &quot;name&quot;: &quot;gid&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.lchown(path, uid, gid, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;lchown&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous lchown(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; lchown(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;uid&quot;
                },
                {
                  &quot;name&quot;: &quot;gid&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.lchownSync(path, uid, gid)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;lchownSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous lchown(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; lchown(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;uid&quot;
                },
                {
                  &quot;name&quot;: &quot;gid&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.chmod(path, mode, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;chmod&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous chmod(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; chmod(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;mode&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.chmodSync(path, mode)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;chmodSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous chmod(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; chmod(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;mode&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.fchmod(fd, mode, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;fchmod&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous fchmod(2). No arguments other than a possible exception\nare given to the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; fchmod(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;mode&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.fchmodSync(fd, mode)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;fchmodSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous fchmod(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; fchmod(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;mode&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.lchmod(path, mode, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;lchmod&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous lchmod(2). No arguments other than a possible exception\nare given to the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; lchmod(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nOnly available on Mac OS X.\n-->\n\n<p>Mac OS X &#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;mode&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.lchmodSync(path, mode)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;lchmodSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous lchmod(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; lchmod(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;mode&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.stat(path, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;stat&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous stat(2). The callback gets two arguments `(err, stats)` where\n`stats` is a [fs.Stats](#fs_class_fs_stats) object.  See the [fs.Stats](#fs_class_fs_stats)\nsection below for more information.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; stat(2)&#x3002;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; 2 &#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B; <code>(err, stats)</code>&#x3067;&#x3001;\n<code>stats</code> &#x306F; <a href="\&quot;#fs_class_fs_stats\&quot;">fs.Stats</a> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <a href="\&quot;#fs_class_fs_stats\&quot;">fs.Stats</a> &#x306E;&#x7BC0;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nSee the [fs.Stats](#fs.Stats) section below for more information.\n-->\n\n<p>&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x306F;&#x5F8C;&#x8FF0;&#x306E; <a href="\&quot;#fs.Stats\&quot;">fs.Stats</a> &#x306E;&#x7BC0;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.lstat(path, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;lstat&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous lstat(2). The callback gets two arguments `(err, stats)` where\n`stats` is a `fs.Stats` object. `lstat()` is identical to `stat()`, except that if\n`path` is a symbolic link, then the link itself is stat-ed, not the file that it\nrefers to.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; lstat(2)&#x3002;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; 2 &#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B; <code>(err, stats)</code>&#x3067;&#x3001;\n<code>stats</code> &#x306F; <code>fs.Stats</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n<code>lstat()</code> &#x306F;&#x30D1;&#x30B9;&#x304C;&#x30B7;&#x30F3;&#x30DC;&#x30EA;&#x30C3;&#x30AF;&#x30EA;&#x30F3;&#x30AF;&#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x3001;\n&#x53C2;&#x7167;&#x5148;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3067;&#x306F;&#x306A;&#x304F;&#x305D;&#x306E;&#x30EA;&#x30F3;&#x30AF;&#x81EA;&#x8EAB;&#x304C;&#x8ABF;&#x3079;&#x3089;&#x308C;&#x308B;&#x70B9;&#x3092;&#x9664;&#x3044;&#x3066; <code>stat()</code> &#x3068;&#x540C;&#x3058;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.fstat(fd, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;fstat&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous fstat(2). The callback gets two arguments `(err, stats)` where\n`stats` is a `fs.Stats` object. `fstat()` is identical to `stat()`, except that\nthe file to be stat-ed is specified by the file descriptor `fd`.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; fstat(2)&#x3002;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; 2 &#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B; <code>(err, stats)</code> &#x3067;&#x3001;\n<code>stats</code> &#x306F; <code>fs.Stats</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n&#x72B6;&#x614B;&#x3092;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50; <code>fd</code> &#x3067;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x9664;&#x3044;&#x3066;&#x3001;\n<code>fstat()</code> &#x306F; <code>stat()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.statSync(path)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;statSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous stat(2). Returns an instance of `fs.Stats`.\n-->\n\n<p>&#x540C;&#x671F;&#x306E; stat(2)&#x3002;<code>fs.Stats</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.lstatSync(path)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;lstatSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous lstat(2). Returns an instance of `fs.Stats`.\n-->\n\n<p>&#x540C;&#x671F;&#x306E; lstat(2)&#x3002;<code>fs.Stats</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.fstatSync(fd)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;fstatSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous fstat(2). Returns an instance of `fs.Stats`.\n-->\n\n<p>&#x540C;&#x671F;&#x306E; fstat(2)&#x3002;<code>fs.Stats</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.link(srcpath, dstpath, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;link&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous link(2). No arguments other than a possible exception are given to\nthe completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; link(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;srcpath&quot;
                },
                {
                  &quot;name&quot;: &quot;dstpath&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.linkSync(srcpath, dstpath)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;linkSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous link(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; link(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;srcpath&quot;
                },
                {
                  &quot;name&quot;: &quot;dstpath&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.symlink(srcpath, dstpath, [type], callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;symlink&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous symlink(2). No arguments other than a possible exception are given\nto the completion callback.\nThe `type` argument can be set to `'dir'`, `'file'`, or `'junction'` (default\nis `'file'`) and is only available on Windows (ignored on other platforms).\nNote that Windows junction points require the destination path to be absolute.  When using\n`'junction'`, the `destination` argument will automatically be normalized to absolute path.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; symlink(2)&#x3002;\n&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>type</code> &#x5F15;&#x6570;&#x306F; <code>&apos;dir&apos;</code>&#x3001;<code>&apos;file&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;junction</code>&apos; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;file&apos;</code>)\n&#x306B;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x3001;Windows &#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;\n(&#x4ED6;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;)&#x3002;\nWindows &#x306E;&#x30B8;&#x30E3;&#x30F3;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306F;&#x5BFE;&#x8C61;&#x306B;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x8981;&#x6C42;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n<code>&apos;junction&apos;</code> &#x3092;&#x4F7F;&#x3046;&#x3068;&#x3001;<code>destination</code> &#x5F15;&#x6570;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x306B;&#x6B63;&#x898F;&#x5316;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;srcpath&quot;
                },
                {
                  &quot;name&quot;: &quot;dstpath&quot;
                },
                {
                  &quot;name&quot;: &quot;type&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.symlinkSync(srcpath, dstpath, [type])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;symlinkSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous symlink(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; symlink(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;srcpath&quot;
                },
                {
                  &quot;name&quot;: &quot;dstpath&quot;
                },
                {
                  &quot;name&quot;: &quot;type&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.readlink(path, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;readlink&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous readlink(2). The callback gets two arguments `(err,\nlinkString)`.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; readlink(2)&#x3002;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; 2 &#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B; <code>(err, linkString)</code>&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.readlinkSync(path)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;readlinkSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous readlink(2). Returns the symbolic link's string value.\n-->\n\n<p>&#x540C;&#x671F;&#x306E; readlink(2)&#x3002;&#x30B7;&#x30F3;&#x30DC;&#x30EA;&#x30C3;&#x30AF;&#x30EA;&#x30F3;&#x30AF;&#x306E;&#x6301;&#x3064;&#x6587;&#x5B57;&#x5217;&#x5024;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.realpath(path, [cache], callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;realpath&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous realpath(2). The `callback` gets two arguments `(err,\nresolvedPath)`. May use `process.cwd` to resolve relative paths. `cache` is an\nobject literal of mapped paths that can be used to force a specific path\nresolution or avoid additional `fs.stat` calls for known real paths.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; realpath(2)&#x3002;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; 2 &#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B; <code>(err, resolvedPath)</code>&#x3067;&#x3059;&#x3002;\n&#x76F8;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x89E3;&#x6C7A;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B; <code>process.cwd</code> &#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>cache</code> &#x306F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3001;&#x30D1;&#x30B9;&#x304C;&#x30AD;&#x30FC;&#x3068;&#x3057;&#x3066;&#x542B;&#x307E;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;&#x305D;&#x306E;&#x5024;&#x304C;\n&#x5F37;&#x5236;&#x7684;&#x306B;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30D1;&#x30B9;&#x3068;&#x3057;&#x3066;&#x6271;&#x308F;&#x308C;&#x3001;<code>fs.stat</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x30D1;&#x30B9;&#x304C;&#x5B9F;&#x5728;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x306E;\n&#x78BA;&#x8A8D;&#x304C;&#x7701;&#x304B;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var cache = {&apos;/etc&apos;:&apos;/private/etc&apos;};\nfs.realpath(&apos;/etc/passwd&apos;, cache, function (err, resolvedPath) {\n  if (err) throw err;\n  console.log(resolvedPath);\n});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;cache&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.realpathSync(path, [cache])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;realpathSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous realpath(2). Returns the resolved path.\n-->\n\n<p>&#x540C;&#x671F;&#x306E; realpath(2)&#x3002;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30D1;&#x30B9;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;cache&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.unlink(path, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;unlink&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous unlink(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; unlink(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.unlinkSync(path)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;unlinkSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous unlink(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; unlink(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.rmdir(path, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;rmdir&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; rmdir(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.rmdirSync(path)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;rmdirSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous rmdir(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; rmdir(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.mkdir(path, [mode], callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;mkdir&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous mkdir(2). No arguments other than a possible exception are given\nto the completion callback. `mode` defaults to `0777`.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; mkdir(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>mode</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0777</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;mode&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.mkdirSync(path, [mode])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;mkdirSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous mkdir(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; mkdir(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;mode&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.readdir(path, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;readdir&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous readdir(3).  Reads the contents of a directory.\nThe callback gets two arguments `(err, files)` where `files` is an array of\nthe names of the files in the directory excluding `'.'` and `'..'`.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; readdir(3)&#x3002;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306E;&#x5185;&#x5BB9;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; 2 &#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B; <code>(err, files)</code>&#x3067;&#x3001;\n<code>files</code> &#x306F; <code>&apos;.&apos;</code> &#x3068; <code>&apos;..&apos;</code> &#x3092;&#x9664;&#x304F;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x5185;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.readdirSync(path)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;readdirSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous readdir(3). Returns an array of filenames excluding `'.'` and\n`'..'`.\n-->\n\n<p>&#x540C;&#x671F;&#x306E; readdir(3)&#x3002;<code>&apos;.&apos;</code> &#x3068; <code>&apos;..&apos;</code> &#x3092;&#x9664;&#x304F;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x5185;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x306E;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.close(fd, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;close&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous close(2).  No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; close(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.closeSync(fd)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;closeSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous close(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; close(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.open(path, flags, [mode], callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;open&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous file open. See open(2). `flags` can be:\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3002;open(2) &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30D5;&#x30E9;&#x30B0;&#x306F;&#x4EE5;&#x4E0B;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<!--\n* `'r'` - Open file for reading.\nAn exception occurs if the file does not exist.\n-->\n\n<ul>\n<li><code>&apos;r&apos;</code> - &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5C02;&#x7528;&#x3067;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x4F8B;&#x5916;&#x304C;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\n* `'r+'` - Open file for reading and writing.\nAn exception occurs if the file does not exist.\n-->\n\n<ul>\n<li><code>&apos;r+&apos;</code> - &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x8AAD;&#x307F;&#x66F8;&#x304D;&#x4E21;&#x7528;&#x3067;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x4F8B;&#x5916;&#x304C;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\n* `'rs'` - Open file for reading in synchronous mode. Instructs the operating\n  system to bypass the local file system cache.\n\n  This is primarily useful for opening files on NFS mounts as it allows you to\n  skip the potentially stale local cache. It has a very real impact on I/O\n  performance so don't use this flag unless you need it.\n\n  Note that this doesn't turn `fs.open()` into a synchronous blocking call.\n  If that's what you want then you should be using `fs.openSync()`\n-->\n\n<ul>\n<li><p><code>&apos;rs&apos;</code> - &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x540C;&#x671F;&#x30E2;&#x30FC;&#x30C9;&#x3067;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x305F;&#x3081;&#x306B;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x3092;\n&#x30D0;&#x30A4;&#x30D1;&#x30B9;&#x3059;&#x308B;&#x3088;&#x3046;&#x306B;&#x6307;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n<p>&#x3053;&#x308C;&#x306F;&#x4E3B;&#x306B; NFS &#x306B;&#x30DE;&#x30A6;&#x30F3;&#x30C8;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x3066;&#x3001;&#x6F5C;&#x5728;&#x7684;&#x306B;&#x53E4;&#x3044;\n&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x306E;&#x306B;&#x5F79;&#x7ACB;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;I/O &#x30D1;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30F3;&#x30B9;&#x306B;&#x3068;&#x3066;&#x3082;&#x6DF1;&#x523B;&#x306A;&#x5F71;&#x97FF;&#x3092;&#x4E0E;&#x3048;&#x308B;&#x305F;&#x3081;&#x3001;&#x5FC5;&#x8981;&#x3067;&#x306A;&#x3044;&#x9650;&#x308A;&#x306F;\n&#x3053;&#x306E;&#x30D5;&#x30E9;&#x30B0;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</p>\n<p>&#x3053;&#x308C;&#x306F; <code>fs.open()</code> &#x3092;&#x540C;&#x671F;&#x7684;&#x306A;&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306B;&#x3059;&#x308B;&#x308F;&#x3051;&#x3067;&#x306F;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x304C;&#x5FC5;&#x8981;&#x306A;&#x5834;&#x5408;&#x306F; <code>fs.openSync()</code> &#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\n* `'rs+'` - Open file for reading and writing, telling the OS to open it\n  synchronously. See notes for `'rs'` about using this with caution.\n-->\n\n<ul>\n<li><code>&apos;rs+&apos;</code> - &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x8AAD;&#x307F;&#x66F8;&#x304D;&#x4E21;&#x65B9;&#x3067;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x3001;OS &#x306B;&#x540C;&#x671F;&#x7684;&#x306B;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3059;&#x308B;&#x3088;&#x3046;&#x306B;\n&#x4F1D;&#x3048;&#x307E;&#x3059;&#x3002;&#x3053;&#x308C;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x969B;&#x306E;&#x8B66;&#x544A;&#x306F; <code>&apos;rs&apos;</code> &#x306E;&#x6CE8;&#x610F;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n</ul>\n<!--\n* `'w'` - Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n-->\n\n<ul>\n<li><code>&apos;w&apos;</code> - &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5C02;&#x7528;&#x3067;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x304B; (&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;)&#x3001;&#x307E;&#x305F;&#x306F;&#x9577;&#x3055; 0 &#x306B;&#x5207;&#x308A;&#x8A70;&#x3081;&#x3089;&#x308C;&#x307E;&#x3059;\n(&#x5B58;&#x5728;&#x3059;&#x308B;&#x5834;&#x5408;)&#x3002;</li>\n</ul>\n<!--\n* `'wx'` - Like `'w'` but fails if `path` exists.\n-->\n\n<ul>\n<li><code>&apos;wx&apos;</code> - <code>&apos;w&apos;</code> &#x3068;&#x4F3C;&#x3066;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;<code>path</code> &#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x3068;&#x5931;&#x6557;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\n* `'w+'` - Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n-->\n\n<ul>\n<li><code>&apos;w+&apos;</code> - &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x8AAD;&#x307F;&#x66F8;&#x304D;&#x4E21;&#x7528;&#x3067;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306F;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x304B; (&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;)&#x3001;&#x307E;&#x305F;&#x306F;&#x9577;&#x3055; 0 &#x306B;&#x5207;&#x308A;&#x8A70;&#x3081;&#x3089;&#x308C;&#x307E;&#x3059;\n(&#x5B58;&#x5728;&#x3059;&#x308B;&#x5834;&#x5408;)&#x3002;</li>\n</ul>\n<!--\n* `'wx+'` - Like `'w+'` but fails if `path` exists.\n-->\n\n<ul>\n<li><code>&apos;wx+&apos;</code> - <code>&apos;w+&apos;</code> &#x3068;&#x4F3C;&#x3066;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;<code>path</code> &#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x3068;&#x5931;&#x6557;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\n* `'a'` - Open file for appending.\nThe file is created if it does not exist.\n-->\n\n<ul>\n<li><code>&apos;a&apos;</code> - &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x8FFD;&#x8A18;&#x7528;&#x3067;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\n* `'ax'` - Like `'a'` but fails if `path` exists.\n-->\n\n<ul>\n<li><code>&apos;ax&apos;</code> - <code>&apos;a&apos;</code> &#x3068;&#x4F3C;&#x3066;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;<code>path</code> &#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x3068;&#x5931;&#x6557;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\n* `'a+'` - Open file for reading and appending.\nThe file is created if it does not exist.\n-->\n\n<ul>\n<li><code>&apos;a+&apos;</code> - &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x304A;&#x3088;&#x3073;&#x8FFD;&#x8A18;&#x7528;&#x3067;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\n* `'ax+'` - Like `'a+'` but fails if `path` exists.\n-->\n\n<ul>\n<li><code>&apos;ax+&apos;</code> - <code>&apos;a+&apos;</code> &#x3068;&#x4F3C;&#x3066;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;<code>path</code> &#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x3068;&#x5931;&#x6557;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\n`mode` sets the file mode (permission and sticky bits), but only if the file was\ncreated. It defaults to `0666`, readable and writeable.\n-->\n\n<p><code>mode</code> &#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30E2;&#x30FC;&#x30C9; (&#x8A31;&#x53EF;&#x3068;&#x30B9;&#x30C6;&#x30A3;&#x30C3;&#x30AD;&#x30FC;&#x30D3;&#x30C3;&#x30C8;) &#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x5834;&#x5408;&#x306B;&#x9650;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 0666 &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe callback gets two arguments `(err, fd)`.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; 2 &#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B; <code>(err, fd)</code>&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe exclusive flag `'x'` (`O_EXCL` flag in open(2)) ensures that `path` is newly\ncreated. On POSIX systems, `path` is considered to exist even if it is a symlink\nto a non-existent file. The exclusive flag may or may not work with network file\nsystems.\n-->\n\n<p>&#x6392;&#x4ED6;&#x30D5;&#x30E9;&#x30B0; <code>&apos;x&apos;</code> (open(2) &#x306E; <code>O_EXCL</code> &#x30D5;&#x30E9;&#x30B0;) &#x306F;&#x3001;\n<code>path</code> &#x304C;&#x65B0;&#x3057;&#x3044;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3068;&#x3057;&#x3066;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x4FDD;&#x8A3C;&#x3057;&#x307E;&#x3059;&#x3002;\nPOSIX &#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3067;&#x306F;&#x3001;<code>path</code> &#x304C;&#x305F;&#x3068;&#x3048;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3078;&#x306E;&#x30B7;&#x30F3;&#x30DC;&#x30EA;&#x30C3;&#x30AF;&#x3060;&#x3068;&#x3057;&#x3066;&#x3082;\n&#x5B58;&#x5728;&#x3059;&#x308B;&#x3068;&#x898B;&#x306A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6392;&#x4ED6;&#x30E2;&#x30FC;&#x30C9;&#x306F;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3067;&#x306F;&#x52D5;&#x304F;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3057;&#x3001;\n&#x52D5;&#x304B;&#x306A;&#x3044;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nOn Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.\n-->\n\n<p>Linux &#x3067;&#x306F;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x8FFD;&#x8A18;&#x30E2;&#x30FC;&#x30C9;&#x3067;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x30DD;&#x30B8;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306F;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30AB;&#x30FC;&#x30CD;&#x30EB;&#x306F;&#x30DD;&#x30B8;&#x30B7;&#x30E7;&#x30F3;&#x5F15;&#x6570;&#x3092;&#x7121;&#x8996;&#x3057;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5E38;&#x306B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x6700;&#x5F8C;&#x306B;&#x8FFD;&#x8A18;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;flags&quot;
                },
                {
                  &quot;name&quot;: &quot;mode&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.openSync(path, flags, [mode])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;openSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous version of `fs.open()`.\n-->\n\n<p>&#x540C;&#x671F;&#x7248;&#x306E; open(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;flags&quot;
                },
                {
                  &quot;name&quot;: &quot;mode&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.utimes(path, atime, mtime, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;utimes&quot;,
          &quot;desc&quot;: &quot;<!--\nChange file timestamps.\nChange file timestamps of the file referenced by the supplied path.\n-->\n\n<p>&#x6E21;&#x3055;&#x308C;&#x305F;&#x30D1;&#x30B9;&#x304C;&#x53C2;&#x7167;&#x3059;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x30BF;&#x30A4;&#x30E0;&#x30B9;&#x30BF;&#x30F3;&#x30D7;&#x3092;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;atime&quot;
                },
                {
                  &quot;name&quot;: &quot;mtime&quot;
                }
              ]
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;atime&quot;
                },
                {
                  &quot;name&quot;: &quot;mtime&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.utimesSync(path, atime, mtime)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;utimesSync&quot;,
          &quot;desc&quot;: &quot;<!--\nChange file timestamps.\nChange file timestamps of the file referenced by the supplied path.\n-->\n\n<p>&#x6E21;&#x3055;&#x308C;&#x305F;&#x30D1;&#x30B9;&#x304C;&#x53C2;&#x7167;&#x3059;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x30BF;&#x30A4;&#x30E0;&#x30B9;&#x30BF;&#x30F3;&#x30D7;&#x3092;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;atime&quot;
                },
                {
                  &quot;name&quot;: &quot;mtime&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.futimes(fd, atime, mtime, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;futimes&quot;,
          &quot;desc&quot;: &quot;<!--\nChange the file timestamps of a file referenced by the supplied file\ndescriptor.\n-->\n\n<p>&#x6E21;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;&#x53C2;&#x7167;&#x3059;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x30BF;&#x30A4;&#x30E0;&#x30B9;&#x30BF;&#x30F3;&#x30D7;&#x3092;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;atime&quot;
                },
                {
                  &quot;name&quot;: &quot;mtime&quot;
                }
              ]
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;atime&quot;
                },
                {
                  &quot;name&quot;: &quot;mtime&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.futimesSync(fd, atime, mtime)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;futimesSync&quot;,
          &quot;desc&quot;: &quot;<!--\nChange the file timestamps of a file referenced by the supplied file\ndescriptor.\n-->\n\n<p>&#x6E21;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;&#x53C2;&#x7167;&#x3059;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x30BF;&#x30A4;&#x30E0;&#x30B9;&#x30BF;&#x30F3;&#x30D7;&#x3092;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;atime&quot;
                },
                {
                  &quot;name&quot;: &quot;mtime&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.fsync(fd, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;fsync&quot;,
          &quot;desc&quot;: &quot;<!--\nAsynchronous fsync(2). No arguments other than a possible exception are given\nto the completion callback.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306E; fsync(2)&#x3002;&#x5B8C;&#x4E86;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x306F;&#x767A;&#x751F;&#x3057;&#x5F97;&#x308B;&#x4F8B;&#x5916;&#x4EE5;&#x5916;&#x306B;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.fsyncSync(fd)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;fsyncSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous fsync(2).\n-->\n\n<p>&#x540C;&#x671F;&#x306E; fsync(2)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.write(fd, buffer, offset, length, position, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;write&quot;,
          &quot;desc&quot;: &quot;<!--\nWrite `buffer` to the file specified by `fd`.\n-->\n\n<p><code>fd</code> &#x3067;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B; <code>buffer</code> &#x3092;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`offset` and `length` determine the part of the buffer to be written.\n-->\n\n<p><code>offset</code> &#x3068; <code>length</code> &#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x90E8;&#x5206;&#x3092;&#x6C7A;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`position` refers to the offset from the beginning of the file where this data\nshould be written. If `position` is `null`, the data will be written at the\ncurrent position.\nSee pwrite(2).\n-->\n\n<p><code>position</code> &#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x4F4D;&#x7F6E;&#x3092;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x5148;&#x982D;&#x304B;&#x3089;&#x306E;&#x30AA;&#x30D5;&#x30BB;&#x30C3;&#x30C8;&#x3067;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>position</code> &#x304C; <code>null</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x73FE;&#x5728;&#x306E;&#x4F4D;&#x7F6E;&#x304B;&#x3089;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x307E;&#x3059;&#x3002;\npwrite(2) &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nThe callback will be given two arguments `(err, written)` where `written`\nspecifies how many _bytes_ were written.\nThe callback will be given three arguments `(err, written, buffer)` where `written`\nspecifies how many _bytes_ were written from `buffer`.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; 3 &#x3064;&#x306E;&#x5F15;&#x6570;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x308B; <code>(err, written, buffer)</code> &#x3067;&#x3001;\n<code>written</code> &#x306F; <code>buffer</code> &#x304B;&#x3089;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;<em>&#x30D0;&#x30A4;&#x30C8;&#x6570;</em>&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that it is unsafe to use `fs.write` multiple times on the same file\nwithout waiting for the callback. For this scenario,\n`fs.createWriteStream` is strongly recommended.\n-->\n\n<p>&#x540C;&#x3058;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3055;&#x308C;&#x308B;&#x306E;&#x3092;&#x5F85;&#x3064;&#x3053;&#x3068;&#x306A;&#x304F; <code>fs.write()</code> &#x3092;&#x4F55;&#x5EA6;&#x3082;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306F;&#x3001;&#x5B89;&#x5168;&#x3067;&#x306F;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x306E;&#x30B7;&#x30CA;&#x30EA;&#x30AA;&#x3067;&#x306F;&#x3001; <code>fs.createWriteStream()</code> &#x3092;&#x5F37;&#x304F;&#x63A8;&#x5968;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>On Linux, positional writes don&apos;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;buffer&quot;
                },
                {
                  &quot;name&quot;: &quot;offset&quot;
                },
                {
                  &quot;name&quot;: &quot;length&quot;
                },
                {
                  &quot;name&quot;: &quot;position&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.writeSync(fd, buffer, offset, length, position)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;writeSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous version of `fs.write()`. Returns the number of bytes written.\n-->\n\n<p>&#x540C;&#x671F;&#x7248;&#x306E; <code>fs.write()</code>&#x3002;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;buffer&quot;
                },
                {
                  &quot;name&quot;: &quot;offset&quot;
                },
                {
                  &quot;name&quot;: &quot;length&quot;
                },
                {
                  &quot;name&quot;: &quot;position&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.read(fd, buffer, offset, length, position, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;read&quot;,
          &quot;desc&quot;: &quot;<!--\nRead data from the file specified by `fd`.\n-->\n\n<p><code>fd</code> &#x3067;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`buffer` is the buffer that the data will be written to.\n-->\n\n<p><code>buffer</code> &#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n`offset` is the offset in the buffer to start writing at.\n-->\n\n<p><code>offset</code> &#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3092;&#x958B;&#x59CB;&#x3059;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x5185;&#x306E;&#x30AA;&#x30D5;&#x30BB;&#x30C3;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n`length` is an integer specifying the number of bytes to read.\n-->\n\n<p><code>length</code> &#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x6574;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n`position` is an integer specifying where to begin reading from in the file.\nIf `position` is `null`, data will be read from the current file position.\n-->\n\n<p><code>position</code> &#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3092;&#x958B;&#x59CB;&#x3059;&#x308B;&#x4F4D;&#x7F6E;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x6574;&#x6570;&#x3067;&#x3059;&#x3002;\n<code>position</code> &#x304C; <code>null</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x73FE;&#x5728;&#x306E;&#x4F4D;&#x7F6E;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe callback is given the three arguments, `(err, bytesRead, buffer)`.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;3&#x3064;&#x306E;&#x5F15;&#x6570;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x308B; <code>(err, bytesRead, buffer)</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;buffer&quot;
                },
                {
                  &quot;name&quot;: &quot;offset&quot;
                },
                {
                  &quot;name&quot;: &quot;length&quot;
                },
                {
                  &quot;name&quot;: &quot;position&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.readSync(fd, buffer, offset, length, position)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;readSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous version of `fs.read`. Returns the number of `bytesRead`.\n-->\n\n<p>&#x540C;&#x671F;&#x7248;&#x306E; <code>fs.read</code>&#x3002;<code>bytesRead</code> &#x306E;&#x6570;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                },
                {
                  &quot;name&quot;: &quot;buffer&quot;
                },
                {
                  &quot;name&quot;: &quot;offset&quot;
                },
                {
                  &quot;name&quot;: &quot;length&quot;
                },
                {
                  &quot;name&quot;: &quot;position&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.readFile(filename, [options], callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;readFile&quot;,
          &quot;* `filename` {String}\n* `options` {Object}\n  * `encoding` {String | Null} default&quot;: &quot;`null`\n  * `flag` {String} default = `&apos;r&apos;`\n* `callback` {Function}&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;textRaw&quot;: &quot;`filename` {String} &quot;,
                  &quot;name&quot;: &quot;filename&quot;,
                  &quot;type&quot;: &quot;String&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;`options` {Object} &quot;,
                  &quot;options&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`encoding` {String | Null} &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `null` &quot;,
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;type&quot;: &quot;String | Null&quot;,
                      &quot;desc&quot;: &quot;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `null`&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`flag` {String} &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `&apos;r&apos;` &quot;,
                      &quot;name&quot;: &quot;flag&quot;,
                      &quot;type&quot;: &quot;String&quot;,
                      &quot;desc&quot;: &quot;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `&apos;r&apos;`&quot;
                    }
                  ],
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;type&quot;: &quot;Object&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;textRaw&quot;: &quot;`callback` {Function} &quot;,
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;type&quot;: &quot;Function&quot;
                }
              ]
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;filename&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ],
          &quot;desc&quot;: &quot;<!--\nAsynchronously reads the entire contents of a file. Example:\n-->\n\n<p>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x5168;&#x4F53;&#x306E;&#x5185;&#x5BB9;&#x3092;&#x975E;&#x540C;&#x671F;&#x306B;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>fs.readFile(&apos;/etc/passwd&apos;, function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});</code></pre>\n<!--\nThe callback is passed two arguments `(err, data)`, where `data` is the\ncontents of the file.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; 2 &#x3064;&#x306E;&#x5F15;&#x6570;&#x304C;&#x6E21;&#x3055;&#x308C;&#x308B; <code>(err, data)</code> &#x3067;&#x3001;<code>data</code> &#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x5185;&#x5BB9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIf no encoding is specified, then the raw buffer is returned.\n-->\n\n<p>&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x751F;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;fs.readFileSync(filename, [options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;readFileSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous version of `fs.readFile`. Returns the contents of the `filename`.\n-->\n\n<p>&#x540C;&#x671F;&#x7248;&#x306E; <code>fs.readFile</code>&#x3002;<code>filename</code> &#x306E;&#x5185;&#x5BB9;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the `encoding` option is specified then this function returns a\nstring. Otherwise it returns a buffer.\n-->\n\n<p><code>encoding</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;filename&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.writeFile(filename, data, [options], callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;writeFile&quot;,
          &quot;* `filename` {String}\n* `data` {String | Buffer}\n* `options` {Object}\n  * `encoding` {String | Null} default&quot;: &quot;`&apos;utf8&apos;`\n  * `mode` {Number} default = `438` (aka `0666` in Octal)\n  * `flag` {String} default = `&apos;w&apos;`\n* `callback` {Function}&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;textRaw&quot;: &quot;`filename` {String} &quot;,
                  &quot;name&quot;: &quot;filename&quot;,
                  &quot;type&quot;: &quot;String&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;`data` {String | Buffer} &quot;,
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;type&quot;: &quot;String | Buffer&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;`options` {Object} &quot;,
                  &quot;options&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`encoding` {String | Null} &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `&apos;utf8&apos;` &quot;,
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;type&quot;: &quot;String | Null&quot;,
                      &quot;desc&quot;: &quot;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `&apos;utf8&apos;`&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`mode` {Number} &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `438` (8&#x9032;&#x6570;&#x306E; `0666`) &quot;,
                      &quot;name&quot;: &quot;mode&quot;,
                      &quot;type&quot;: &quot;Number&quot;,
                      &quot;desc&quot;: &quot;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `438` (8&#x9032;&#x6570;&#x306E; `0666`)&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`flag` {String} &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `&apos;w&apos;` &quot;,
                      &quot;name&quot;: &quot;flag&quot;,
                      &quot;type&quot;: &quot;String&quot;,
                      &quot;desc&quot;: &quot;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `&apos;w&apos;`&quot;
                    }
                  ],
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;type&quot;: &quot;Object&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;textRaw&quot;: &quot;`callback` {Function} &quot;,
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;type&quot;: &quot;Function&quot;
                }
              ]
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;filename&quot;
                },
                {
                  &quot;name&quot;: &quot;data&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ],
          &quot;desc&quot;: &quot;<!--\nAsynchronously writes data to a file, replacing the file if it already exists.\n`data` can be a string or a buffer.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x65E2;&#x306B;&#x5B58;&#x5728;&#x3059;&#x308B;&#x5834;&#x5408;&#x306F;&#x7F6E;&#x304D;&#x63DB;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>data</code> &#x306F;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `encoding` option is ignored if `data` is a buffer. It defaults\nto `'utf8'`.\n-->\n\n<p><code>data</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5834;&#x5408;&#x3001;<code>encoding</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;utf8&apos;</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>fs.writeFile(&apos;message.txt&apos;, &apos;Hello Node&apos;, function (err) {\n  if (err) throw err;\n  console.log(&apos;It\\&apos;s saved!&apos;);\n});</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;fs.writeFileSync(filename, data, [options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;writeFileSync&quot;,
          &quot;desc&quot;: &quot;<!--\nThe synchronous version of `fs.writeFile`.\n-->\n\n<p>&#x540C;&#x671F;&#x7248;&#x306E; <code>fs.writeFile</code>&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;filename&quot;
                },
                {
                  &quot;name&quot;: &quot;data&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.appendFile(filename, data, [options], callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;appendFile&quot;,
          &quot;* `filename` {String}\n* `data` {String | Buffer}\n* `options` {Object}\n  * `encoding` {String | Null} default&quot;: &quot;`&apos;utf8&apos;`\n  * `mode` {Number} default = `438` (aka `0666` in Octal)\n  * `flag` {String} default = `&apos;a&apos;`\n* `callback` {Function}&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;textRaw&quot;: &quot;`filename` {String} &quot;,
                  &quot;name&quot;: &quot;filename&quot;,
                  &quot;type&quot;: &quot;String&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;`data` {String | Buffer} &quot;,
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;type&quot;: &quot;String | Buffer&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;`options` {Object} &quot;,
                  &quot;options&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`encoding` {String | Null} &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `&apos;utf8&apos;` &quot;,
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;type&quot;: &quot;String | Null&quot;,
                      &quot;desc&quot;: &quot;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `&apos;utf8&apos;`&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`mode` {Number} &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `438` (8&#x9032;&#x6570;&#x306E; `0666`) &quot;,
                      &quot;name&quot;: &quot;mode&quot;,
                      &quot;type&quot;: &quot;Number&quot;,
                      &quot;desc&quot;: &quot;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `438` (8&#x9032;&#x6570;&#x306E; `0666`)&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`flag` {String} &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `&apos;a&apos;` &quot;,
                      &quot;name&quot;: &quot;flag&quot;,
                      &quot;type&quot;: &quot;String&quot;,
                      &quot;desc&quot;: &quot;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `&apos;a&apos;`&quot;
                    }
                  ],
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;type&quot;: &quot;Object&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;textRaw&quot;: &quot;`callback` {Function} &quot;,
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;type&quot;: &quot;Function&quot;
                }
              ]
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;filename&quot;
                },
                {
                  &quot;name&quot;: &quot;data&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ],
          &quot;desc&quot;: &quot;<!--\nAsynchronously append data to a file, creating the file if it not yet exists.\n`data` can be a string or a buffer.\n-->\n\n<p>&#x975E;&#x540C;&#x671F;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>data</code> &#x306F;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>fs.appendFile(&apos;message.txt&apos;, &apos;data to append&apos;, function (err) {\n  if (err) throw err;\n  console.log(&apos;The &quot;data to append&quot; was appended to file!&apos;);\n});</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;fs.appendFileSync(filename, data, [options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;appendFileSync&quot;,
          &quot;desc&quot;: &quot;<!--\nThe synchronous version of `fs.appendFile`.\n-->\n\n<p>&#x540C;&#x671F;&#x7248;&#x306E; <code>fs.appendFile</code>&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;filename&quot;
                },
                {
                  &quot;name&quot;: &quot;data&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.watchFile(filename, [options], listener)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;watchFile&quot;,
          &quot;stability&quot;: 2,
          &quot;stabilityText&quot;: &quot;Unstable.  Use fs.watch instead, if possible.&quot;,
          &quot;desc&quot;: &quot;<!--\nWatch for changes on `filename`. The callback `listener` will be called each\ntime the file is accessed.\n-->\n\n<p><code>filename</code> &#x306E;&#x5909;&#x66F4;&#x3092;&#x76E3;&#x8996;&#x3057;&#x307E;&#x3059;&#x3002;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306E; <code>listener</code> &#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3055;&#x308C;&#x308B;&#x5EA6;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe second argument is optional. The `options` if provided should be an object\ncontaining two members a boolean, `persistent`, and `interval`. `persistent`\nindicates whether the process should continue to run as long as files are\nbeing watched. `interval` indicates how often the target should be polled,\nin milliseconds. The default is `{ persistent: true, interval: 5007 }`.\n-->\n\n<p>&#x7B2C; 2 &#x5F15;&#x6570;&#x306F;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3059;&#xFF0E;\n<code>options</code> &#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;&#x305D;&#x308C;&#x306F; boolean &#x306E; <code>persistent</code> &#x3068; <code>interval</code>\n&#x306E;&#x4E8C;&#x3064;&#x306E;&#x30E1;&#x30F3;&#x30D0;&#x3092;&#x542B;&#x3080;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n<code>persistent</code> &#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x76E3;&#x8996;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x9593;&#x3001;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x5B9F;&#x884C;&#x3057;&#x7D9A;&#x3051;&#x308B;&#x3053;&#x3068;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>interval</code> &#x306F;&#x5BFE;&#x8C61;&#x3092;&#x30DD;&#x30FC;&#x30EA;&#x30F3;&#x30B0;&#x3059;&#x308B;&#x9593;&#x9694;&#x3092;&#x30DF;&#x30EA;&#x79D2;&#x3067;&#x793A;&#x3057;&#x307E;&#x3059;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>{ persistent: true, interval: 5007 }</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `listener` gets two arguments the current stat object and the previous\nstat object:\n-->\n\n<p><code>listener</code> &#x306F;&#x73FE;&#x5728;&#x306E;&#x72B6;&#x614B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x524D;&#x306E;&#x72B6;&#x614B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E; 2 &#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<pre><code>fs.watchFile(&apos;message.text&apos;, function (curr, prev) {\n  console.log(&apos;the current mtime is: &apos; + curr.mtime);\n  console.log(&apos;the previous mtime was: &apos; + prev.mtime);\n});</code></pre>\n<!--\nThese stat objects are instances of `fs.Stat`.\n\nIf you want to be notified when the file was modified, not just accessed\nyou need to compare `curr.mtime` and `prev.mtime`.\n-->\n\n<p>&#x3053;&#x308C;&#x3089;&#x306E;&#x72B6;&#x614B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; <code>fs.Stat</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3055;&#x308C;&#x305F;&#x3060;&#x3051;&#x3067;&#x306A;&#x304F;&#x3001;&#x5909;&#x66F4;&#x3055;&#x308C;&#x305F;&#x6642;&#x306E;&#x901A;&#x77E5;&#x304C;&#x5FC5;&#x8981;&#x3067;&#x3042;&#x308C;&#x3070;&#x3001;<code>curr.mtime</code> &#x3068; <code>prev.mtime</code> &#x3092;&#x6BD4;&#x8F03;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;filename&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;listener&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.unwatchFile(filename, [listener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;unwatchFile&quot;,
          &quot;stability&quot;: 2,
          &quot;stabilityText&quot;: &quot;Unstable.  Use fs.watch instead, if possible.&quot;,
          &quot;desc&quot;: &quot;<!--\nStop watching for changes on `filename`. If `listener` is specified, only that\nparticular listener is removed. Otherwise, *all* listeners are removed and you\nhave effectively stopped watching `filename`.\n\nCalling `fs.unwatchFile()` with a filename that is not being watched is a\nno-op, not an error.\n-->\n\n<p><code>filename</code> &#x306E;&#x5909;&#x66F4;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x76E3;&#x8996;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>listener</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x8A72;&#x5F53;&#x306E; <code>listener</code> &#x3060;&#x3051;&#x304C;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;<em>&#x5168;&#x3066;&#x306E;</em> &#x30EA;&#x30B9;&#x30CA;&#x304C;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x3001;\n<code>filenam</code> &#x306E;&#x76E3;&#x8996;&#x306F;&#x4E8B;&#x5B9F;&#x4E0A;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x76E3;&#x8996;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x305F; <code>fs.unwatchFile()</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306F;\n&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x306A;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x4F55;&#x3082;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;filename&quot;
                },
                {
                  &quot;name&quot;: &quot;listener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.watch(filename, [options], [listener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;watch&quot;,
          &quot;stability&quot;: 2,
          &quot;stabilityText&quot;: &quot;Unstable.&quot;,
          &quot;desc&quot;: &quot;<!--\nWatch for changes on `filename`, where `filename` is either a file or a\ndirectory.  The returned object is a [fs.FSWatcher](#fs_class_fs_fswatcher).\n\nThe second argument is optional. The `options` if provided should be an object\ncontaining a boolean member `persistent`, which indicates whether the process\nshould continue to run as long as files are being watched. The default is\n`{ persistent: true }`.\n\nThe listener callback gets two arguments `(event, filename)`.  `event` is either\n'rename' or 'change', and `filename` is the name of the file which triggered\nthe event.\n-->\n\n<p><code>filename</code> &#x306E;&#x5909;&#x66F4;&#x3092;&#x76E3;&#x8996;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>filename</code> &#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x307E;&#x305F;&#x306F;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306E;&#x3069;&#x3061;&#x3089;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x623B;&#x308A;&#x5024;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; <a href="\&quot;#fs.FSWatcher\&quot;">fs.FSWatcher</a> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x7B2C; 2 &#x5F15;&#x6570;&#x306F;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x306A;&#x3089;&#x3001;<code>options</code> &#x306F; boolean &#x306E; <code>persistent</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;\n&#x6301;&#x3064;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3042;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n<code>persistent</code> &#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x76E3;&#x8996;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x9593;&#x3001;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x5B9F;&#x884C;&#x3057;&#x7D9A;&#x3051;&#x308B;&#x3053;&#x3068;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>{ persistent: true }</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x4E8C;&#x3064;&#x306E;&#x5F15;&#x6570; <code>(event, filename)</code> &#x3092;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>event</code> &#x306F; <code>&apos;rename&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;change&apos;</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>filename</code> &#x306F;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x5F15;&#x304D;&#x8D77;&#x3053;&#x3057;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x540D;&#x524D;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;miscs&quot;: [
            {
              &quot;textRaw&quot;: &quot;Caveats&quot;,
              &quot;name&quot;: &quot;Caveats&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;desc&quot;: &quot;<!--\nThe `fs.watch` API is not 100% consistent across platforms, and is\nunavailable in some situations.\n-->\n\n<p><code>fs.watch</code> API &#x306F;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x9593;&#x3067; 100% &#x5B8C;&#x5168;&#x3067;&#x306F;&#x3042;&#x308A;m&#x305B;&#x3093;&#x3057;&#x3001;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30B7;&#x30C1;&#x30E5;&#x30A8;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x5229;&#x7528;&#x4E0D;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;miscs&quot;: [
                {
                  &quot;textRaw&quot;: &quot;Availability&quot;,
                  &quot;name&quot;: &quot;Availability&quot;,
                  &quot;type&quot;: &quot;misc&quot;,
                  &quot;desc&quot;: &quot;<!--\nThis feature depends on the underlying operating system providing a way\nto be notified of filesystem changes.\n-->\n\n<p>&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x306F;&#x4E0B;&#x5C64;&#x306E;&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304C;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x5909;&#x66F4;&#x306E;\n&#x901A;&#x77E5;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* On Linux systems, this uses `inotify`.\n* On BSD systems (including OS X), this uses `kqueue`.\n* On SunOS systems (including Solaris and SmartOS), this uses `event ports`.\n* On Windows systems, this feature depends on `ReadDirectoryChangesW`.\n-->\n\n<ul>\n<li>Linux &#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3067;&#x306F; <code>inotify</code> &#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li>BSD &#x30B7;&#x30B9;&#x30C6;&#x30E0; (OS X &#x3092;&#x542B;&#x307F;&#x307E;&#x3059;) &#x3067;&#x306F; <code>kqueue</code> &#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li>SunOS &#x30B7;&#x30B9;&#x30C6;&#x30E0; (Solaris &#x304A;&#x3088;&#x3073; SmartOS &#x3092;&#x542B;&#x307F;&#x307E;&#x3059;) &#x3067;&#x306F; <code>event ports</code>\n&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li>Windows &#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3067;&#x306F;&#x3001;&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x306F; <code>ReadDirectoryChangesW</code> &#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nIf the underlying functionality is not available for some reason, then\n`fs.watch` will not be able to function.  For example, watching files or\ndirectories on network file systems (NFS, SMB, etc.) often doesn't work\nreliably or at all.\n-->\n\n<p>&#x4F55;&#x3089;&#x304B;&#x306E;&#x7406;&#x7531;&#x3067;&#x4E0B;&#x5C64;&#x306E;&#x6A5F;&#x80FD;&#x304C;&#x4F7F;&#x3048;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;<code>fs.watch()</code> &#x306F;&#x4F7F;&#x3048;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0; (NFS&#x3001;SMB&#x3001;&#x305D;&#x306E;&#x4ED6;) &#x306F;&#x3057;&#x3070;&#x3057;&#x3070;\n&#x4FE1;&#x983C;&#x3067;&#x304D;&#x306A;&#x3044;&#x304B;&#x5168;&#x304F;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nYou can still use `fs.watchFile`, which uses stat polling, but it is slower and\nless reliable.\n-->\n\n<p>stat &#x3092;&#x30DD;&#x30FC;&#x30EA;&#x30F3;&#x30B0;&#x3059;&#x308B; <code>fs.watchFile()</code> &#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x9045;&#x304F;&#x3066;&#x4FE1;&#x983C;&#x6027;&#x306F;&#x3088;&#x308A;&#x4F4E;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;Filename Argument&quot;,
                  &quot;name&quot;: &quot;Filename Argument&quot;,
                  &quot;type&quot;: &quot;misc&quot;,
                  &quot;desc&quot;: &quot;<!--\nProviding `filename` argument in the callback is not supported\non every platform (currently it's only supported on Linux and Windows).  Even\non supported platforms `filename` is not always guaranteed to be provided.\nTherefore, don't assume that `filename` argument is always provided in the\ncallback, and have some fallback logic if it is null.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306B;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x308B; <code>filename</code> &#x5F15;&#x6570;&#x306F;&#x3001;\n&#x5168;&#x3066;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x308B;&#x308F;&#x3051;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;\n(&#x73FE;&#x6642;&#x70B9;&#x3067;&#x306F; Linux &#x3068; Windows &#x3067;&#x306E;&#x307F;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x3059;)&#x3002;\n&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x308B;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x3042;&#x3063;&#x3066;&#x3082;&#x3001;<code>filename</code> &#x304C;&#x5E38;&#x306B;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x304C;\n&#x4FDD;&#x8A3C;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x308F;&#x3051;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; <code>filename</code> &#x5F15;&#x6570;&#x304C;&#x5E38;&#x306B;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x308B;&#x3068;&#x4EEE;&#x5B9A;&#x305B;&#x305A;&#x3001;\n&#x305D;&#x308C;&#x304C; <code>null</code> &#x3060;&#x3063;&#x305F;&#x3068;&#x304D;&#x306E;&#x4EE3;&#x66FF;&#x624B;&#x6BB5;&#x3092;&#x6301;&#x3064;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>fs.watch(&apos;somedir&apos;, function (event, filename) {\n  console.log(&apos;event is: &apos; + event);\n  if (filename) {\n    console.log(&apos;filename provided: &apos; + filename);\n  } else {\n    console.log(&apos;filename not provided&apos;);\n  }\n});</code></pre>\n&quot;
                }
              ]
            }
          ],
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;filename&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;listener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.exists(path, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;exists&quot;,
          &quot;desc&quot;: &quot;<!--\nTest whether or not the given path exists by checking with the file system.\nThen call the `callback` argument with either true or false.  Example:\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30D1;&#x30B9;&#x304C;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x4E0A;&#x306B;&#x5B58;&#x5728;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x691C;&#x67FB;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3057;&#x3066;&#x5F15;&#x6570;&#x306E; <code>callback</code> &#x3092;&#x771F;&#x304B;&#x507D;&#x304B;&#x691C;&#x67FB;&#x306E;&#x7D50;&#x679C;&#x3068;&#x3068;&#x3082;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F8B;:\n\n</p>\n<pre><code>fs.exists(&apos;/etc/passwd&apos;, function (exists) {\n  util.debug(exists ? &quot;it&apos;s there&quot; : &quot;no passwd!&quot;);\n});</code></pre>\n<!--\n`fs.exists()` is an anachronism and exists only for historical reasons.\nThere should almost never be a reason to use it in your own code.\n-->\n\n<p><code>fs.exists()</code> &#x306F;&#x6642;&#x4EE3;&#x932F;&#x8AA4;&#x3067;&#x3001;&#x5B58;&#x5728;&#x3059;&#x308B;&#x7406;&#x7531;&#x306F;&#x6B74;&#x53F2;&#x7684;&#x7D4C;&#x7DEF;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;\n&#x3042;&#x306A;&#x305F;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x3079;&#x304D;&#x7406;&#x7531;&#x304C;&#x3042;&#x3063;&#x3066;&#x306F;&#x3044;&#x3051;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nIn particular, checking if a file exists before opening it is an anti-pattern\nthat leaves you vulnerable to race conditions: another process may remove the\nfile between the calls to `fs.exists()` and `fs.open()`.  Just open the file\nand handle the error when it's not there.\n-->\n\n<p>&#x3068;&#x308A;&#x308F;&#x3051;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3059;&#x308B;&#x524D;&#x306B;&#x5B58;&#x5728;&#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x306E;&#x306F;&#x3001;\n&#x3042;&#x306A;&#x305F;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x7AF6;&#x5408;&#x6761;&#x4EF6;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x8106;&#x5F31;&#x306B;&#x3059;&#x308B;&#x30A2;&#x30F3;&#x30C1;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x3067;&#x3059;:\n<code>fs.exists()</code> &#x3068; <code>fs.open()</code> &#x306E;&#x9593;&#x306B;&#x5225;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;\n&#x524A;&#x9664;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x5358;&#x7D14;&#x306B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x3066;&#x3001;&#x305D;&#x308C;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x6642;&#x306F;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x51E6;&#x7406;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.existsSync(path)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;existsSync&quot;,
          &quot;desc&quot;: &quot;<!--\nSynchronous version of `fs.exists`.\n-->\n\n<p>&#x540C;&#x671F;&#x7248;&#x306E; <code>fs.exists</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.createReadStream(path, [options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createReadStream&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new ReadStream object (See `Readable Stream`).\n-->\n\n<p>&#x65B0;&#x3057;&#x3044; ReadStream &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059; (<code>Readable Stream</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<!--\n`options` is an object with the following defaults:\n-->\n\n<p><code>options</code> &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x3092;&#x6301;&#x3064;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;:\n\n</p>\n<pre><code>{ flags: &apos;r&apos;,\n  encoding: null,\n  fd: null,\n  mode: 0666,\n  autoClose: true\n}</code></pre>\n<!--\n`options` can include `start` and `end` values to read a range of bytes from\nthe file instead of the entire file.  Both `start` and `end` are inclusive and\nstart at 0. The `encoding` can be `'utf8'`, `'ascii'`, or `'base64'`.\n-->\n\n<p>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x5168;&#x4F53;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x4E00;&#x90E8;&#x306E;&#x7BC4;&#x56F2;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x305F;&#x3081;&#x3001;\n<code>options</code> &#x306B; <code>start</code> &#x304A;&#x3088;&#x3073; <code>end</code> &#x3092;&#x542B;&#x3081;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>start</code> &#x3068; <code>end</code> &#x306F;&#x3069;&#x3061;&#x3089;&#x3082;&#x5305;&#x542B;&#x7684;&#x3067;0&#x304B;&#x3089;&#x59CB;&#x307E;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>encoding</code> &#x306F; <code>&apos;utf8&apos;</code>&#x3001;<code>&apos;ascii&apos;</code>&#x3001;&#x307E;&#x305F;&#x306F; <code>&apos;base64&apos;</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIf `autoClose` is false, then the file descriptor won't be closed, even if\nthere's an error.  It is your responsiblity to close it and make sure\nthere's no file descriptor leak.  If `autoClose` is set to true (default\nbehavior), on `error` or `end` the file descriptor will be closed\nautomatically.\n-->\n\n<p><code>autoClose</code> &#x304C; <code>false</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x306A;&#x3044;&#x9650;&#x308A;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x306F;\n&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;\n&#x30EA;&#x30FC;&#x30AF;&#x3057;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x306E;&#x306F;&#x3042;&#x306A;&#x305F;&#x306E;&#x8CAC;&#x52D9;&#x3067;&#x3059;&#x3002;\n<code>autoClose</code> &#x304C; <code>true</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x3067;&#x3059;)&#x3001;\n<code>error</code> &#x307E;&#x305F;&#x306F; <code>end</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAn example to read the last 10 bytes of a file which is 100 bytes long:\n-->\n\n<p>100 &#x30D0;&#x30A4;&#x30C8;&#x306E;&#x9577;&#x3055;&#x3092;&#x6301;&#x3064;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x6700;&#x5F8C;&#x306E; 10 &#x30D0;&#x30A4;&#x30C8;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x4F8B;:\n\n</p>\n<pre><code>fs.createReadStream(&apos;sample.txt&apos;, {start: 90, end: 99});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;fs.createWriteStream(path, [options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createWriteStream&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new WriteStream object (See `Writable Stream`).\n-->\n\n<p>&#x65B0;&#x3057;&#x3044; WriteStream &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059; (<code>Writable Stream</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<!--\n`options` is an object with the following defaults:\n-->\n\n<p><code>options</code> &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x3092;&#x6301;&#x3064;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;:\n\n</p>\n<pre><code>{ flags: &apos;w&apos;,\n  encoding: null,\n  mode: 0666 }</code></pre>\n<!--\n`options` may also include a `start` option to allow writing data at\nsome position past the beginning of the file.  Modifying a file rather\nthan replacing it may require a `flags` mode of `r+` rather than the\ndefault mode `w`.\n-->\n\n<p><code>options</code> &#x306B;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x3069;&#x306E;&#x4F4D;&#x7F6E;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x304B;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;\n<code>start</code> &#x3092;&#x542B;&#x3081;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x7F6E;&#x63DB;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x5909;&#x66F4;&#x3059;&#x308B;&#x5834;&#x5408;&#x306F;&#x3001; <code>flags</code> &#x306B;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;\n<code>w</code> &#x3067;&#x306F;&#x306A;&#x304F; <code>r+</code> &#x304C;&#x5FC5;&#x8981;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: fs.Stats&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;fs.Stats&quot;,
          &quot;desc&quot;: &quot;<!--\nObjects returned from `fs.stat()`, `fs.lstat()` and `fs.fstat()` and their\nsynchronous counterparts are of this type.\n-->\n\n<p><code>fs.stat()</code>&#x3001;<code>fs.lstat()</code>&#x3001;<code>fs.fstat()</code>&#x3001;&#x305D;&#x3057;&#x3066;&#x305D;&#x308C;&#x3089;&#x306E;&#x540C;&#x671F;&#x7248; &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x308B;\n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x3053;&#x306E;&#x578B;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n - `stats.isFile()`\n - `stats.isDirectory()`\n - `stats.isBlockDevice()`\n - `stats.isCharacterDevice()`\n - `stats.isSymbolicLink()` (only valid with  `fs.lstat()`)\n - `stats.isFIFO()`\n - `stats.isSocket()`\n-->\n\n<ul>\n<li><code>stats.isFile()</code></li>\n<li><code>stats.isDirectory()</code></li>\n<li><code>stats.isBlockDevice()</code></li>\n<li><code>stats.isCharacterDevice()</code></li>\n<li><code>stats.isSymbolicLink()</code> (<code>fs.lstat()</code> &#x3067;&#x306E;&#x307F;&#x6709;&#x52B9;)</li>\n<li><code>stats.isFIFO()</code></li>\n<li><code>stats.isSocket()</code></li>\n</ul>\n<!--\nFor a regular file `util.inspect(stats)` would return a string very\nsimilar to this:\n-->\n\n<p><code>util.inspect(stats)</code> &#x306F;&#x901A;&#x5E38;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306A;&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>{ dev: 2114,\n  ino: 48064969,\n  mode: 33188,\n  nlink: 1,\n  uid: 85,\n  gid: 100,\n  rdev: 0,\n  size: 527,\n  blksize: 4096,\n  blocks: 8,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT }</code></pre>\n<!--\nPlease note that `atime`, `mtime` and `ctime` are instances\nof [Date][MDN-Date] object and to compare the values of\nthese objects you should use appropriate methods. For most\ngeneral uses [getTime()][MDN-Date-getTime] will return\nthe number of milliseconds elapsed since _1 January 1970\n00:00:00 UTC_ and this integer should be sufficient for\nany comparison, however there additional methods which can\nbe used for displaying fuzzy information. More details can\nbe found in the [MDN JavaScript Reference][MDN-Date] page.\n-->\n\n<p><code>atime</code>&#x3001;<code>mtime</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>ctime</code> &#x306F; [Date][MDN-Date] &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3042;&#x308A;&#x3001;\n&#x305D;&#x306E;&#x5024;&#x3092;&#x6BD4;&#x8F03;&#x3059;&#x308B;&#x306B;&#x306F;&#x9069;&#x5207;&#x306A;&#x65B9;&#x6CD5;&#x304C;&#x3042;&#x308B;&#x3068;&#x3044;&#x3046;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3082;&#x3063;&#x3068;&#x3082;&#x4E00;&#x822C;&#x7684;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x308B; [getTime()][MDN-Date-getTime] &#x306F; <em>1970 &#x5E74; 1 &#x6708;\n1 &#x65E5;</em>&#x304B;&#x3089;&#x306E;&#x7D4C;&#x904E;&#x6642;&#x9593;&#x3092;&#x30DF;&#x30EA;&#x79D2;&#x5358;&#x4F4D;&#x3067;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x6BD4;&#x8F03;&#x306B;&#x306F;&#x5341;&#x5206;&#x3067;&#x3059;&#x304C;&#x3001;&#x66D6;&#x6627;&#x306A;&#x60C5;&#x5831;&#x3092;&#x8868;&#x793A;&#x3059;&#x308B;&#x306B;&#x306F;&#x5225;&#x306E;&#x65B9;&#x6CD5;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3088;&#x308A;&#x8A73;&#x3057;&#x3044;&#x60C5;&#x5831;&#x306F; [MDN JavaScript Reference][MDN-Date] &#x3067;&#x63A2;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: fs.ReadStream&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;fs.ReadStream&quot;,
          &quot;desc&quot;: &quot;<!--\n`ReadStream` is a [Readable Stream](stream.html#stream_class_stream_readable).\n-->\n\n<p><code>ReadStream</code> &#x306F; <a href="\&quot;stream.html#stream_class_stream_readable\&quot;">Readable Stream</a>\n&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;open&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;open&quot;,
              &quot;desc&quot;: &quot;<!--\n* `fd` {Integer} file descriptor used by the ReadStream.\n\nEmitted when the ReadStream's file is opened.\n-->\n\n<ul>\n<li><code>fd</code> {Integer} ReadStream &#x3067;&#x4F7F;&#x308F;&#x308C;&#x308B; &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x3002;</li>\n</ul>\n<p>ReadStream &#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: fs.WriteStream&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;fs.WriteStream&quot;,
          &quot;desc&quot;: &quot;<!--\n`WriteStream` is a [Writable Stream](stream.html#stream_class_stream_writable).\n-->\n\n<p><code>WriteStream</code> &#x306F; <a href="\&quot;stream.html#stream_class_stream_writable\&quot;">Writable Stream</a>\n&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;open&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;open&quot;,
              &quot;desc&quot;: &quot;<!--\n* `fd` {Integer} file descriptor used by the WriteStream.\n\nEmitted when the WriteStream's file is opened.\n-->\n\n<ul>\n<li><code>fd</code> {Integer} WriteStream &#x3067;&#x4F7F;&#x308F;&#x308C;&#x308B; &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x3002;</li>\n</ul>\n<p>WriteStream &#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x304C;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;file.bytesWritten&quot;,
              &quot;name&quot;: &quot;bytesWritten&quot;,
              &quot;desc&quot;: &quot;<!--\nThe number of bytes written so far. Does not include data that is still queued\nfor writing.\n-->\n\n<p>&#x3053;&#x308C;&#x307E;&#x3067;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3002;\n&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x304C;&#x30AD;&#x30E5;&#x30FC;&#x30A4;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x305F;&#x307E;&#x307E;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x542B;&#x307E;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: fs.FSWatcher&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;fs.FSWatcher&quot;,
          &quot;desc&quot;: &quot;<!--\nObjects returned from `fs.watch()` are of this type.\n-->\n\n<p><code>fs.watch()</code> &#x304C;&#x8FD4;&#x3059;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x3053;&#x306E;&#x578B;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;watcher.close()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nStop watching for changes on the given `fs.FSWatcher`.\n-->\n\n<p><code>fs.FSWatcher</code> &#x306B;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x76E3;&#x8996;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ],
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;change&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;change&quot;,
              &quot;desc&quot;: &quot;<!--\n* `event` {String} The type of fs change\n* `filename` {String} The filename that changed (if relevant/available)\n-->\n\n<ul>\n<li><code>event</code> {String} &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x5909;&#x66F4;&#x306E;&#x7A2E;&#x985E;&#x3067;&#x3059;&#x3002;</li>\n<li><code>filename</code> {String} &#x5909;&#x66F4;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3067;&#x3059; (&#x3082;&#x3057;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3042;&#x308C;&#x3070;)&#x3002;</li>\n</ul>\n<!--\nEmitted when something changes in a watched directory or file.\nSee more details in [fs.watch](#fs_fs_watch_filename_options_listener).\n-->\n\n<p>&#x76E3;&#x8996;&#x3057;&#x3066;&#x3044;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x307E;&#x305F;&#x306F;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x306B;&#x5909;&#x66F4;&#x304C;&#x3042;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x3057;&#x304F;&#x306F; <a href="\&quot;#fs_fs_watch_filename_options_listener\&quot;">fs.watch</a>\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;params&quot;: [],
              &quot;desc&quot;: &quot;<!--\nEmitted when an error occurs.\n-->\n\n<p>&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;fs&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Path&quot;,
      &quot;name&quot;: &quot;path&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nThis module contains utilities for handling and transforming file\npaths.  Almost all these methods perform only string transformations.\nThe file system is not consulted to check whether paths are valid.\n\nUse `require('path')` to use this module.  The following methods are provided:\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x30D1;&#x30B9;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x51E6;&#x7406;&#x3084;&#x5909;&#x63DB;&#x3092;&#x884C;&#x3046;&#x30E6;&#x30FC;&#x30C6;&#x30A3;&#x30EA;&#x30C6;&#x30A3;&#x3092;&#x542B;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x6587;&#x5B57;&#x5217;&#x306E;&#x5909;&#x63DB;&#x3060;&#x3051;&#x3092;&#x884C;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30D1;&#x30B9;&#x304C;&#x6B63;&#x3057;&#x3044;&#x304B;&#x691C;&#x8A3C;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x5C0B;&#x306D;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x306B;&#x306F;<code>require(&apos;path&apos;)</code>&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;path.normalize(p)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;normalize&quot;,
          &quot;desc&quot;: &quot;<!--\nNormalize a string path, taking care of `'..'` and `'.'` parts.\n->\n\n文字列によるパスを正規化します。`'..'` と `'.'` の要素には注意してください。\n\n<!--\nWhen multiple slashes are found, they're replaced by a single one;\nwhen the path contains a trailing slash, it is preserved.\nOn Windows backslashes are used.\n-->\n\n<p>&#x8907;&#x6570;&#x306E;&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x304C;&#x898B;&#x3064;&#x304B;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x3089;&#x306F;&#x4E00;&#x3064;&#x306B;&#x7F6E;&#x63DB;&#x3055;&#x308C;&#x307E;&#x3059;;\n&#x30D1;&#x30B9;&#x306E;&#x6700;&#x5F8C;&#x306B;&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x304C;&#x542B;&#x307E;&#x308C;&#x3066;&#x3044;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F;&#x7DAD;&#x6301;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\nWindows &#x3067;&#x306F;&#x30D0;&#x30C3;&#x30AF;&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.normalize(&apos;/foo/bar//baz/asdf/quux/..&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;p&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.join([path1], [path2], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;join&quot;,
          &quot;desc&quot;: &quot;<!--\nJoin all arguments together and normalize the resulting path.\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x5F15;&#x6570;&#x3092;&#x4E00;&#x3064;&#x306B;&#x7D50;&#x5408;&#x3057;&#x3001;&#x7D50;&#x679C;&#x3068;&#x3057;&#x3066;&#x5F97;&#x3089;&#x308C;&#x308B;&#x30D1;&#x30B9;&#x3092;&#x6B63;&#x898F;&#x5316;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nArguments must be strings.  In v0.8, non-string arguments were\nsilently ignored.  In v0.10 and up, an exception is thrown.\n-->\n\n<p>&#x5F15;&#x6570;&#x306F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x306A;&#x304F;&#x3066;&#x306F;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\nv0.8 &#x3067;&#x306F;&#x3001;&#x975E;&#x6587;&#x5B57;&#x5217;&#x306E;&#x5F15;&#x6570;&#x306F;&#x9759;&#x304B;&#x306B;&#x7121;&#x8996;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\nv0.10 &#x4EE5;&#x964D;&#x3067;&#x306F;&#x3001;&#x4F8B;&#x5916;&#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.join(&apos;/foo&apos;, &apos;bar&apos;, &apos;baz/asdf&apos;, &apos;quux&apos;, &apos;..&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;\n\npath.join(&apos;foo&apos;, {}, &apos;bar&apos;)\n// throws exception\nTypeError: Arguments to path.join must be strings</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path1&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;path2&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.resolve([from ...], to)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolve&quot;,
          &quot;desc&quot;: &quot;<!--\nResolves `to` to an absolute path.\n-->\n\n<p><code>to</code> &#x306E;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x89E3;&#x6C7A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf `to` isn't already absolute `from` arguments are prepended in right to left\norder, until an absolute path is found. If after using all `from` paths still\nno absolute path is found, the current working directory is used as well. The\nresulting path is normalized, and trailing slashes are removed unless the path\ngets resolved to the root directory. Non-string arguments are ignored.\n-->\n\n<p>&#x3082;&#x3057; <code>to</code> &#x304C;&#x65E2;&#x306B;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x304C;&#x898B;&#x3064;&#x304B;&#x308B;&#x307E;&#x3067; <code>from</code> &#x5F15;&#x6570;&#x3092;&#x53F3;&#x304B;&#x3089;&#x5DE6;&#x306E;&#x9806;&#x3067;&#x5148;&#x982D;&#x306B;&#x52A0;&#x3048;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E; <code>from</code> &#x3092;&#x52A0;&#x3048;&#x305F;&#x5F8C;&#x3001;&#x30D1;&#x30B9;&#x304C;&#x307E;&#x3060;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x304C;&#x540C;&#x69D8;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x7D50;&#x679C;&#x306E;&#x30D1;&#x30B9;&#x306F;&#x6B63;&#x898F;&#x5316;&#x3055;&#x308C;&#x3001;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30D1;&#x30B9;&#x304C;&#x30EB;&#x30FC;&#x30C8;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3067;&#x306A;&#x3044;&#x9650;&#x308A;&#x672B;&#x5C3E;&#x306E;&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x306F;&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6587;&#x5B57;&#x5217;&#x3067;&#x306A;&#x3044;&#x5F15;&#x6570;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAnother way to think of it is as a sequence of `cd` commands in a shell.\n-->\n\n<p>&#x305D;&#x308C;&#x306F;&#x30B7;&#x30A7;&#x30EB;&#x306B;&#x304A;&#x3051;&#x308B; <code>cd</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306E;&#x5217;&#x3060;&#x3068;&#x8003;&#x3048;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.resolve(&apos;foo/bar&apos;, &apos;/tmp/file/&apos;, &apos;..&apos;, &apos;a/../subfile&apos;)</code></pre>\n<!--\nIs similar to:\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x4EE5;&#x4E0B;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>cd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../subfile\npwd</code></pre>\n<!--\nThe difference is that the different paths don't need to exist and may also be\nfiles.\n-->\n\n<p>&#x3044;&#x306F;&#x3001;&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x30D1;&#x30B9;&#x304C;&#x5FC5;&#x305A;&#x3057;&#x3082;&#x5B58;&#x5728;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x306A;&#x3044;&#x3053;&#x3068;&#x3068;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3067;&#x3082;&#x69CB;&#x308F;&#x306A;&#x3044;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.resolve(&apos;/foo/bar&apos;, &apos;./baz&apos;)\n// returns\n&apos;/foo/bar/baz&apos;\n\npath.resolve(&apos;/foo/bar&apos;, &apos;/tmp/file/&apos;)\n// returns\n&apos;/tmp/file&apos;\n\npath.resolve(&apos;wwwroot&apos;, &apos;static_files/png/&apos;, &apos;../gif/image.gif&apos;)\n// if currently in /home/myself/node, it returns\n&apos;/home/myself/node/wwwroot/static_files/gif/image.gif&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;from ...&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;to&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.relative(from, to)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;relative&quot;,
          &quot;desc&quot;: &quot;<!--\nSolve the relative path from `from` to `to`.\n-->\n\n<p><code>from</code> &#x304B;&#x3089; <code>to</code> &#x3078;&#x306E;&#x76F8;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x89E3;&#x6C7A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAt times we have two absolute paths, and we need to derive the relative\npath from one to the other.  This is actually the reverse transform of\n`path.resolve`, which means we see that:\n-->\n\n<p>&#x4E8C;&#x3064;&#x306E;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x304C;&#x3042;&#x308A;&#x3001;&#x4E00;&#x65B9;&#x304B;&#x3089;&#x4ED6;&#x65B9;&#x3078;&#x306E;&#x76F8;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x5F97;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x5834;&#x5408;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x5B9F;&#x969B;&#x306E;&#x3068;&#x3053;&#x308D;&#x3001;<code>path.resolve()</code> &#x3068;&#x306F;&#x9006;&#x306E;&#x5909;&#x63DB;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>path.resolve(from, path.relative(from, to)) == path.resolve(to)</code></pre>\n<!--\nExamples:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.relative(&apos;C:\\\\orandea\\\\test\\\\aaa&apos;, &apos;C:\\\\orandea\\\\impl\\\\bbb&apos;)\n// returns\n&apos;..\\\\..\\\\impl\\\\bbb&apos;\n\npath.relative(&apos;/data/orandea/test/aaa&apos;, &apos;/data/orandea/impl/bbb&apos;)\n// returns\n&apos;../../impl/bbb&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;from&quot;
                },
                {
                  &quot;name&quot;: &quot;to&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.dirname(p)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;dirname&quot;,
          &quot;desc&quot;: &quot;<!--\nReturn the directory name of a path.  Similar to the Unix `dirname` command.\n-->\n\n<p>&#x30D1;&#x30B9;&#x306B;&#x542B;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x540D;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;Unix&#x306E; <code>dirname</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.dirname(&apos;/foo/bar/baz/asdf/quux&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;p&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.basename(p, [ext])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;basename&quot;,
          &quot;desc&quot;: &quot;<!--\nReturn the last portion of a path.  Similar to the Unix `basename` command.\n-->\n\n<p>&#x30D1;&#x30B9;&#x306E;&#x6700;&#x5F8C;&#x306E;&#x8981;&#x7D20;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;Unix&#x306E; <code>basename</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;)\n// returns\n&apos;quux.html&apos;\n\npath.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;, &apos;.html&apos;)\n// returns\n&apos;quux&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;p&quot;
                },
                {
                  &quot;name&quot;: &quot;ext&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.extname(p)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;extname&quot;,
          &quot;desc&quot;: &quot;<!--\nReturn the extension of the path, from the last '.' to end of string\nin the last portion of the path.  If there is no '.' in the last portion\nof the path or the first character of it is '.', then it returns\nan empty string.  Examples:\n-->\n\n<p>&#x30D1;&#x30B9;&#x306E;&#x6700;&#x5F8C;&#x306E;&#x8981;&#x7D20;&#x306B;&#x3064;&#x3044;&#x3066;&#x3001;&#x6700;&#x5F8C;&#x306E; &apos;.&apos; &#x304B;&#x3089;&#x6587;&#x5B57;&#x5217;&#x306E;&#x6700;&#x5F8C;&#x307E;&#x3067;&#x306E;&#x30D1;&#x30B9;&#x306E;&#x62E1;&#x5F35;&#x5B50;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6700;&#x5F8C;&#x306E;&#x8981;&#x7D20;&#x306B; &apos;.&apos; &#x304C;&#x542B;&#x307E;&#x308C;&#x3066;&#x3044;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3001;&#x3082;&#x3057;&#x304F;&#x306F; &apos;.&apos; &#x304C;&#x6700;&#x521D;&#x306E;&#x6587;&#x5B57;&#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x7A7A;&#x306E;&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F8B;:\n\n</p>\n<pre><code>path.extname(&apos;index.html&apos;)\n// returns\n&apos;.html&apos;\n\npath.extname(&apos;index.coffee.md&apos;)\n// returns\n&apos;.md&apos;\n\npath.extname(&apos;index.&apos;)\n// returns\n&apos;.&apos;\n\npath.extname(&apos;index&apos;)\n// returns\n&apos;&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;p&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;path.sep&quot;,
          &quot;name&quot;: &quot;sep&quot;,
          &quot;desc&quot;: &quot;<!--\nThe platform-specific file separator. `'\\\\'` or `'/'`.\n-->\n\n<p>&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x56FA;&#x6709;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30BB;&#x30D1;&#x30EC;&#x30FC;&#x30BF;&#x3002; <code>&apos;\\\\&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;/&apos;</code>&#x3002;\n\n</p>\n<!--\nAn example on *nix:\n-->\n\n<p>*nix &#x3067;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>&apos;foo/bar/baz&apos;.split(path.sep)\n// returns\n[&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]</code></pre>\n<!--\nAn example on Windows:\n-->\n\n<p>Windows &#x3067;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>&apos;foo\\\\bar\\\\baz&apos;.split(path.sep)\n// returns\n[&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;path.delimiter&quot;,
          &quot;name&quot;: &quot;delimiter&quot;,
          &quot;desc&quot;: &quot;<!--\nThe platform-specific path delimiter, `;` or `':'`.\n-->\n\n<p>&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x56FA;&#x6709;&#x306E;&#x30D1;&#x30B9;&#x533A;&#x5207;&#x308A;&#x6587;&#x5B57;&#x3001;<code>&apos;;&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;:&apos;</code>&#x3002;\n\n</p>\n<!--\nAn example on *nix:\n-->\n\n<p>*nix &#x3067;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>console.log(process.env.PATH)\n// &apos;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&apos;\n\nprocess.env.PATH.split(path.delimiter)\n// returns\n[&apos;/usr/bin&apos;, &apos;/bin&apos;, &apos;/usr/sbin&apos;, &apos;/sbin&apos;, &apos;/usr/local/bin&apos;]</code></pre>\n<!--\nAn example on Windows:\n-->\n\n<p>Windows &#x3067;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>console.log(process.env.PATH)\n// &apos;C:\\Windows\\system32;C:\\Windows;C:\\Program Files\\nodejs\\&apos;\n\nprocess.env.PATH.split(path.delimiter)\n// returns\n[&apos;C:\\Windows\\system32&apos;, &apos;C:\\Windows&apos;, &apos;C:\\Program Files\\nodejs\\&apos;]</code></pre>\n&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Path&quot;
    },
    {
      &quot;textRaw&quot;: &quot;net&quot;,
      &quot;name&quot;: &quot;net&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nThe `net` module provides you with an asynchronous network wrapper. It contains\nmethods for creating both servers and clients (called streams). You can include\nthis module with `require('net');`\n-->\n\n<p><code>net</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x975E;&#x540C;&#x671F;&#x306A;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x306E;&#x30E9;&#x30C3;&#x30D1;&#x30FC;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x30B5;&#x30FC;&#x30D0;&#x3068;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x4E21;&#x65B9; (&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x547C;&#x3070;&#x308C;&#x307E;&#x3059;) &#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x65B9;&#x6CD5;&#x3092;&#x542B;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;<code>require(&quot;net&quot;);</code>&#x306B;&#x3088;&#x3063;&#x3066;&#x53D6;&#x308A;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;net.createServer([options], [connectionListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createServer&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a new TCP server. The `connectionListener` argument is\nautomatically set as a listener for the ['connection'][] event.\n\n`options` is an object with the following defaults:\n-->\n\n<p>&#x65B0;&#x3057;&#x3044; TCP &#x30B5;&#x30FC;&#x30D0;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>connectionListener</code> &#x5F15;&#x6570;&#x306F; [&apos;connection&apos;][]\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3068;&#x3057;&#x3066;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>options</code> &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x3092;&#x6301;&#x3064;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;:\n\n</p>\n<pre><code>{ allowHalfOpen: false\n}</code></pre>\n<!--\nIf `allowHalfOpen` is `true`, then the socket won't automatically send a FIN\npacket when the other end of the socket sends a FIN packet. The socket becomes\nnon-readable, but still writable. You should call the `end()` method explicitly.\nSee ['end'][] event for more information.\n-->\n\n<p><code>allowHalfOpen</code> &#x304C; <code>true</code> &#x3060;&#x3068;&#x3001;&#x53CD;&#x5BFE;&#x5074;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C; FIN &#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x3066;&#x304D;&#x3066;&#x3082;&#x81EA;&#x52D5;&#x7684;&#x306B; FIN &#x3092;&#x9001;&#x4FE1;&#x3057;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x3067;&#x306F;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x304C;&#x3001;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x306E;&#x307E;&#x307E;&#x3067;&#x3059;&#x3002;\n&#x660E;&#x793A;&#x7684;&#x306B; <code>end()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n[&apos;end&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x60C5;&#x5831;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nHere is an example of an echo server which listens for connections\non port 8124:\n-->\n\n<p>8124 &#x756A;&#x306E;&#x30DD;&#x30FC;&#x30C8;&#x3078;&#x306E;&#x63A5;&#x7D9A;&#x3092;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x308B;&#x30A8;&#x30B3;&#x30FC;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>var net = require(&apos;net&apos;);\nvar server = net.createServer(function(c) { //&apos;connection&apos; listener\n  console.log(&apos;server connected&apos;);\n  c.on(&apos;end&apos;, function() {\n    console.log(&apos;server disconnected&apos;);\n  });\n  c.write(&apos;hello\\r\\n&apos;);\n  c.pipe(c);\n});\nserver.listen(8124, function() { //&apos;listening&apos; listener\n  console.log(&apos;server bound&apos;);\n});</code></pre>\n<!--\nTest this by using `telnet`:\n-->\n\n<p><code>telnet</code> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>telnet localhost 8124</code></pre>\n<!--\nTo listen on the socket `/tmp/echo.sock` the third line from the last would\njust be changed to\n-->\n\n<p><code>&apos;/tmp/echo.sock&apos;</code> &#x3078;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x308B;&#x306B;&#x306F;&#x3001;&#x6700;&#x5F8C;&#x304B;&#x3089;&#x4E09;&#x884C;&#x76EE;&#x3092;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>server.listen(&apos;/tmp/echo.sock&apos;, function() { //&apos;listening&apos; listener</code></pre>\n<!--\nUse `nc` to connect to a UNIX domain socket server:\n-->\n\n<p><code>nc</code> &#x3092;&#x4F7F;&#x3063;&#x3066; UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30B5;&#x30FC;&#x30D0;&#x3078;&#x63A5;&#x7D9A;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>nc -U /tmp/echo.sock</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;connectionListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;net.connect(options, [connectionListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;connect&quot;,
          &quot;desc&quot;: &quot;<!--\nConstructs a new socket object and opens the socket to the given location.\nWhen the socket is established, the ['connect'][] event will be emitted.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x69CB;&#x7BC9;&#x3057;&#x3001;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30ED;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3078;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;\n&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x78BA;&#x7ACB;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;[&apos;connect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor TCP sockets, `options` argument should be an object which specifies:\n-->\n\n<p>TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x5834;&#x5408;&#x3001;<code>options</code> &#x5F15;&#x6570;&#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n  - `port`: Port the client should connect to (Required).\n\n  - `host`: Host the client should connect to. Defaults to `'localhost'`.\n\n  - `localAddress`: Local interface to bind to for network connections.\n-->\n\n<ul>\n<li><p><code>port</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x3067;&#x3059; (&#x5FC5;&#x9808;)&#x3002;</p>\n</li>\n<li><p><code>host</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DB;&#x30B9;&#x30C8;&#x3067;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>localhost</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>localAddress</code>: &#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x63A5;&#x7D9A;&#x3092;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3059;&#x308B;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3067;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nFor UNIX domain sockets, `options` argument should be an object which specifies:\n-->\n\n<p>UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x5834;&#x5408;&#x3001;<code>options</code> &#x5F15;&#x6570;&#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n  - `path`: Path the client should connect to (Required).\n-->\n\n<ul>\n<li><code>path</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30D1;&#x30B9;&#x3067;&#x3059; (&#x5FC5;&#x9808;)&#x3002;</li>\n</ul>\n<!--\nCommon options are:\n-->\n\n<p>&#x5171;&#x901A;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;:\n\n</p>\n<!--\n  - `allowHalfOpen`: if `true`, the socket won't automatically send\n    a FIN packet when the other end of the socket sends a FIN packet.\n    Defaults to `false`.  See ['end'][] event for more information.\n-->\n\n<ul>\n<li><code>allowHalfOpen</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x53CD;&#x5BFE;&#x5074;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C; FIN\n&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x3066;&#x304D;&#x3066;&#x3082;&#x81EA;&#x52D5;&#x7684;&#x306B; FIN &#x3092;&#x9001;&#x4FE1;&#x3057;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n[&apos;end&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x60C5;&#x5831;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nThe `connectListener` parameter will be added as an listener for the\n['connect'][] event.\n-->\n\n<p><code>connectListener</code> &#x5F15;&#x6570;&#x306F; [&apos;connect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nHere is an example of a client of echo server as described previously:\n-->\n\n<p>&#x524D;&#x8FF0;&#x306E;&#x30A8;&#x30B3;&#x30FC;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>var net = require(&apos;net&apos;);\nvar client = net.connect({port: 8124},\n    function() { //&apos;connect&apos; listener\n  console.log(&apos;client connected&apos;);\n  client.write(&apos;world!\\r\\n&apos;);\n});\nclient.on(&apos;data&apos;, function(data) {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&apos;end&apos;, function() {\n  console.log(&apos;client disconnected&apos;);\n});</code></pre>\n<!--\nTo connect on the socket `/tmp/echo.sock` the second line would just be\nchanged to\n-->\n\n<p><code>&apos;/tmp/echo.sock&apos;</code> &#x3078;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;2 &#x884C;&#x76EE;&#x3092;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var client = net.connect({path: &apos;/tmp/echo.sock&apos;});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;connectionListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;connectionListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;net.createConnection(options, [connectionListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createConnection&quot;,
          &quot;desc&quot;: &quot;<!--\nConstructs a new socket object and opens the socket to the given location.\nWhen the socket is established, the ['connect'][] event will be emitted.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x69CB;&#x7BC9;&#x3057;&#x3001;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30ED;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3078;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;\n&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x78BA;&#x7ACB;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;[&apos;connect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor TCP sockets, `options` argument should be an object which specifies:\n-->\n\n<p>TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x5834;&#x5408;&#x3001;<code>options</code> &#x5F15;&#x6570;&#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n  - `port`: Port the client should connect to (Required).\n\n  - `host`: Host the client should connect to. Defaults to `'localhost'`.\n\n  - `localAddress`: Local interface to bind to for network connections.\n-->\n\n<ul>\n<li><p><code>port</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x3067;&#x3059; (&#x5FC5;&#x9808;)&#x3002;</p>\n</li>\n<li><p><code>host</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30DB;&#x30B9;&#x30C8;&#x3067;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>localhost</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>localAddress</code>: &#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x63A5;&#x7D9A;&#x3092;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3059;&#x308B;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3067;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nFor UNIX domain sockets, `options` argument should be an object which specifies:\n-->\n\n<p>UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x5834;&#x5408;&#x3001;<code>options</code> &#x5F15;&#x6570;&#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n  - `path`: Path the client should connect to (Required).\n-->\n\n<ul>\n<li><code>path</code>: &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30D1;&#x30B9;&#x3067;&#x3059; (&#x5FC5;&#x9808;)&#x3002;</li>\n</ul>\n<!--\nCommon options are:\n-->\n\n<p>&#x5171;&#x901A;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;:\n\n</p>\n<!--\n  - `allowHalfOpen`: if `true`, the socket won't automatically send\n    a FIN packet when the other end of the socket sends a FIN packet.\n    Defaults to `false`.  See ['end'][] event for more information.\n-->\n\n<ul>\n<li><code>allowHalfOpen</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x53CD;&#x5BFE;&#x5074;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C; FIN\n&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x3066;&#x304D;&#x3066;&#x3082;&#x81EA;&#x52D5;&#x7684;&#x306B; FIN &#x3092;&#x9001;&#x4FE1;&#x3057;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n[&apos;end&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x60C5;&#x5831;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nThe `connectListener` parameter will be added as an listener for the\n['connect'][] event.\n-->\n\n<p><code>connectListener</code> &#x5F15;&#x6570;&#x306F; [&apos;connect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nHere is an example of a client of echo server as described previously:\n-->\n\n<p>&#x524D;&#x8FF0;&#x306E;&#x30A8;&#x30B3;&#x30FC;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>var net = require(&apos;net&apos;);\nvar client = net.connect({port: 8124},\n    function() { //&apos;connect&apos; listener\n  console.log(&apos;client connected&apos;);\n  client.write(&apos;world!\\r\\n&apos;);\n});\nclient.on(&apos;data&apos;, function(data) {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&apos;end&apos;, function() {\n  console.log(&apos;client disconnected&apos;);\n});</code></pre>\n<!--\nTo connect on the socket `/tmp/echo.sock` the second line would just be\nchanged to\n-->\n\n<p><code>&apos;/tmp/echo.sock&apos;</code> &#x3078;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;2 &#x884C;&#x76EE;&#x3092;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var client = net.connect({path: &apos;/tmp/echo.sock&apos;});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;connectionListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;net.connect(port, [host], [connectListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;connect&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a TCP connection to `port` on `host`. If `host` is omitted,\n`'localhost'` will be assumed.\nThe `connectListener` parameter will be added as an listener for the\n['connect'][] event.\n-->\n\n<p><code>host</code> &#x4E0A;&#x306E; <code>port</code> &#x306B;&#x5BFE;&#x3059;&#x308B; TCP &#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>host</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x308B;&#x3068; <code>localhost</code> &#x304C;&#x4EEE;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>connectListener</code> &#x5F15;&#x6570;&#x306F; [&apos;connect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;port&quot;
                },
                {
                  &quot;name&quot;: &quot;host&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;connectListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;port&quot;
                },
                {
                  &quot;name&quot;: &quot;host&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;connectListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;net.createConnection(port, [host], [connectListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createConnection&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a TCP connection to `port` on `host`. If `host` is omitted,\n`'localhost'` will be assumed.\nThe `connectListener` parameter will be added as an listener for the\n['connect'][] event.\n-->\n\n<p><code>host</code> &#x4E0A;&#x306E; <code>port</code> &#x306B;&#x5BFE;&#x3059;&#x308B; TCP &#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>host</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x308B;&#x3068; <code>localhost</code> &#x304C;&#x4EEE;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>connectListener</code> &#x5F15;&#x6570;&#x306F; [&apos;connect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;port&quot;
                },
                {
                  &quot;name&quot;: &quot;host&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;connectListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;net.connect(path, [connectListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;connect&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates unix socket connection to `path`.\nThe `connectListener` parameter will be added as an listener for the\n['connect'][] event.\n-->\n\n<p><code>path</code> &#x306B;&#x5BFE;&#x3059;&#x308B; UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>connectListener</code> &#x5F15;&#x6570;&#x306F; [&apos;connect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;connectListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;connectListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;net.createConnection(path, [connectListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createConnection&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates unix socket connection to `path`.\nThe `connectListener` parameter will be added as an listener for the\n['connect'][] event.\n-->\n\n<p><code>path</code> &#x306B;&#x5BFE;&#x3059;&#x308B; UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>connectListener</code> &#x5F15;&#x6570;&#x306F; [&apos;connect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path&quot;
                },
                {
                  &quot;name&quot;: &quot;connectListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;net.isIP(input)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;isIP&quot;,
          &quot;desc&quot;: &quot;<!--\nTests if input is an IP address. Returns 0 for invalid strings,\nreturns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.\n-->\n\n<p><code>input</code> &#x304C; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x304B;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4E0D;&#x6B63;&#x306A;&#x6587;&#x5B57;&#x5217;&#x3060;&#x3068; 0&#x3001;IP &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 4 &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3060;&#x3068; 4&#xFF0C;IP &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 6\n&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3060;&#x3068; 6 &#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;input&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;net.isIPv4(input)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;isIPv4&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns true if input is a version 4 IP address, otherwise returns false.\n-->\n\n<p><code>input</code> &#x304C; &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 4 &#x306E; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306A;&#x3089; true&#x3001;&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070; false &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;input&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;net.isIPv6(input)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;isIPv6&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns true if input is a version 6 IP address, otherwise returns false.\n-->\n\n<p><code>input</code> &#x304C; &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 6 &#x306E; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306A;&#x3089; true&#x3001;&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070; false &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;input&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: net.Server&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;net.Server&quot;,
          &quot;desc&quot;: &quot;<!--\nThis class is used to create a TCP or UNIX server.\n-->\n\n<p>&#x3053;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306F; TCP &#x307E;&#x305F;&#x306F; UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;server.listen(port, [host], [backlog], [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;desc&quot;: &quot;<!--\nBegin accepting connections on the specified `port` and `host`.  If the\n`host` is omitted, the server will accept connections directed to any\nIPv4 address (`INADDR_ANY`). A port value of zero will assign a random port.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F; <code>port</code> &#x3068; <code>host</code> &#x3067;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x53D7;&#x3051;&#x5165;&#x308C;&#x3092;&#x958B;&#x59CB;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>host</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x3069;&#x3093;&#x306A; IPv4 &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3078;&#x306E;&#x63A5;&#x7D9A;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x307E;&#x3059;\n(<code>INADDR_ANY</code>)&#x3002;\n&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x306B; 0 &#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;&#x30E9;&#x30F3;&#x30C0;&#x30E0;&#x306A;&#x30DD;&#x30FC;&#x30C8;&#x304C;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBacklog is the maximum length of the queue of pending connections.\nThe actual length will be determined by your OS through sysctl settings such as\n`tcp_max_syn_backlog` and `somaxconn` on linux. The default value of this\nparameter is 511 (not 512).\n-->\n\n<p>&#x30D0;&#x30C3;&#x30AF;&#x30ED;&#x30B0;&#x306F;&#x4FDD;&#x7559;&#x3055;&#x308C;&#x305F;&#x63A5;&#x7D9A;&#x306E;&#x30AD;&#x30E5;&#x30FC;&#x306E;&#x6700;&#x5927;&#x9577;&#x3067;&#x3059;&#x3002;\n&#x5B9F;&#x969B;&#x306E;&#x9577;&#x3055;&#x306F; Linux &#x3067;&#x306F; <code>tcp_max_syn_backlog</code> &#x3084; <code>somaxconn</code> &#x306A;&#x3069;&#x3001;\nsysctl &#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x901A;&#x3058;&#x3066; OS &#x306B;&#x3088;&#x3063;&#x3066;&#x6C7A;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30D1;&#x30E9;&#x30E1;&#x30FC;&#x30BF;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x306F; 511 (512 &#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;) &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThis function is asynchronous.  When the server has been bound,\n['listening'][] event will be emitted.  The last parameter `callback`\nwill be added as an listener for the ['listening'][] event.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3059;&#x3002;\n&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;[&apos;listening&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6700;&#x5F8C;&#x306E;&#x5F15;&#x6570; <code>callback</code> &#x306F; [&apos;listening&apos;][] &#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nOne issue some users run into is getting `EADDRINUSE` errors. This means that\nanother server is already running on the requested port. One way of handling this\nwould be to wait a second and then try again. This can be done with\n-->\n\n<p>&#x4E00;&#x90E8;&#x306E;&#x30E6;&#x30FC;&#x30B6;&#x304C;&#x9665;&#x308B;&#x554F;&#x984C;&#x306E;&#x4E00;&#x3064;&#x306F;&#x3001;<code>EADDRINUSE</code> &#x30A8;&#x30E9;&#x30FC;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;&#x4ED6;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x8981;&#x6C42;&#x3055;&#x308C;&#x305F;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306B;&#x5BFE;&#x7167;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306E;&#x4E00;&#x3064;&#x306F;&#x3001;1&#x79D2;&#x5F85;&#x6A5F;&#x3057;&#x3066;&#x304B;&#x3089;&#x30EA;&#x30C8;&#x30E9;&#x30A4;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;\n\n</p>\n<pre><code>server.on(&apos;error&apos;, function (e) {\n  if (e.code == &apos;EADDRINUSE&apos;) {\n    console.log(&apos;Address in use, retrying...&apos;);\n    setTimeout(function () {\n      server.close();\n      server.listen(PORT, HOST);\n    }, 1000);\n  }\n});</code></pre>\n<!--\n(Note: All sockets in Node set `SO_REUSEADDR` already)\n-->\n\n<p>&#x6CE8;&#x610F;: Node &#x306E;&#x5168;&#x3066;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F; <code>SO_REUSEADDR</code> &#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;)\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;port&quot;
                    },
                    {
                      &quot;name&quot;: &quot;host&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;backlog&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.listen(path, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;desc&quot;: &quot;<!--\nStart a UNIX socket server listening for connections on the given `path`.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>path</code> &#x3078;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x308B;&#x3059;&#x308B; UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x3092;&#x958B;&#x59CB;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis function is asynchronous.  When the server has been bound,\n['listening'][] event will be emitted.  The last parameter `callback`\nwill be added as an listener for the ['listening'][] event.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3059;&#x3002;\n&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;[&apos;listening&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6700;&#x5F8C;&#x306E;&#x5F15;&#x6570; <code>callback</code> &#x306F; [&apos;listening&apos;][] &#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;path&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.listen(handle, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`handle` {Object} &quot;,
                      &quot;name&quot;: &quot;handle&quot;,
                      &quot;type&quot;: &quot;Object&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`callback` {Function} &quot;,
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;type&quot;: &quot;Function&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;handle&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nThe `handle` object can be set to either a server or socket (anything\nwith an underlying `_handle` member), or a `{fd: <n>}` object.\n-->\n\n<p><code>handle</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x306F;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x307E;&#x305F;&#x306F;&#x30BD;&#x30B1;&#x30C3;&#x30C8; (&#x4E0B;&#x5C64;&#x306E; <code>_handle</code> &#x30E1;&#x30F3;&#x30D0;&#x306A;&#x3089;\n&#x306A;&#x3093;&#x3067;&#x3082;) &#x307E;&#x305F;&#x306F;&#x3001; <code>{fd: &lt;n&gt;}</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis will cause the server to accept connections on the specified\nhandle, but it is presumed that the file descriptor or handle has\nalready been bound to a port or domain socket.\n-->\n\n<p>&#x3053;&#x308C;&#x306B;&#x3088;&#x308A;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x3078;&#x306E;&#x63A5;&#x7D9A;&#x3092;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x308B;&#x3053;&#x3068;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x307E;&#x305F;&#x306F;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x306F;&#x65E2;&#x306B;&#x30DD;&#x30FC;&#x30C8;&#x307E;&#x305F;&#x306F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;\n&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x3082;&#x306E;&#x3068;&#x898B;&#x306A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nListening on a file descriptor is not supported on Windows.\n-->\n\n<p>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x3078;&#x306E;&#x30EA;&#x30B9;&#x30CB;&#x30F3;&#x30B0;&#x306F; Windows &#x3067;&#x306F;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThis function is asynchronous.  When the server has been bound,\n['listening'](#event_listening_) event will be emitted.\nthe last parameter `callback` will be added as an listener for the\n['listening'](#event_listening_) event.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3059;&#x3002;\n&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;[&apos;listening&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6700;&#x5F8C;&#x306E;&#x5F15;&#x6570; <code>callback</code> &#x306F; [&apos;listening&apos;][] &#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;server.close([callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nStops the server from accepting new connections and keeps existing\nconnections. This function is asynchronous, the server is finally\nclosed when all connections are ended and the server emits a `'close'`\nevent. Optionally, you can pass a callback to listen for the `'close'`\nevent.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x65B0;&#x3057;&#x3044;&#x63A5;&#x7D9A;&#x3092;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x308B;&#x306E;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;&#x65E2;&#x5B58;&#x306E;&#x63A5;&#x7D9A;&#x306F;&#x7DAD;&#x6301;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x6700;&#x7D42;&#x7684;&#x306B;&#x5168;&#x3066;&#x306E;&#x63A5;&#x7D9A;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x3068;\n<code>&apos;close&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x3066;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x3057;&#x3066;&#x3001;<code>&apos;close&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x6E21;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.address()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;address&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the bound address, the address family name and port of the server\nas reported by the operating system.\nUseful to find which port was assigned when giving getting an OS-assigned address.\nReturns an object with three properties, e.g.\n`{ port: 12346, family: 'IPv4', address: '127.0.0.1' }`\n-->\n\n<p>&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x5831;&#x544A;&#x3055;&#x308C;&#x305F;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x305F;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3068;\n&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x30D5;&#x30A1;&#x30DF;&#x30EA;&#x540D;&#x3001;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\nOS&#x306B;&#x3088;&#x3063;&#x3066;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x305F;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x304C;&#x6E21;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x3001;&#x3069;&#x306E;&#x30DD;&#x30FC;&#x30C8;&#x306B;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x305F;&#x3082;&#x306E;&#x304B;&#x3092;&#x8ABF;&#x3079;&#x308B;&#x306E;&#x306B;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; 3 &#x3064;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n<code>{ port: 12346, family: &apos;IPv4&apos;, address: &apos;127.0.0.1&apos; }</code>\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var server = net.createServer(function (socket) {\n  socket.end(&quot;goodbye\\n&quot;);\n});\n\n// grab a random port.\nserver.listen(function() {\n  address = server.address();\n  console.log(&quot;opened server on %j&quot;, address);\n});</code></pre>\n<!--\nDon't call `server.address()` until the `'listening'` event has been emitted.\n-->\n\n<p><code>&apos;listening&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x308B;&#x524D;&#x306B; <code>server.address()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x306F;&#x3044;&#x3051;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.unref()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;unref&quot;,
              &quot;desc&quot;: &quot;<!--\nCalling `unref` on a server will allow the program to exit if this is the only\nactive server in the event system. If the server is already `unref`d calling\n`unref` again will have no effect.\n-->\n\n<p>&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;&#x3053;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x3060;&#x3051;&#x304C;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x5834;&#x5408;&#x306B;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;\n&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;<code>unref</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x65E2;&#x306B; <code>unref</code> &#x3055;&#x308C;&#x305F;&#x30B5;&#x30FC;&#x30D0;&#x3067;&#x518D;&#x3073; <code>unref</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x5F71;&#x97FF;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.ref()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;ref&quot;,
              &quot;desc&quot;: &quot;<!--\nOpposite of `unref`, calling `ref` on a previously `unref`d server will *not*\nlet the program exit if it's the only server left (the default behavior). If\nthe server is `ref`d calling `ref` again will have no effect.\n-->\n\n<p><code>unref</code> &#x3068;&#x306F;&#x9006;&#x306B;&#x3001;&#x4EE5;&#x524D;&#x306B; <code>unref</code> &#x3055;&#x308C;&#x305F;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x552F;&#x4E00;&#x6B8B;&#x3063;&#x305F;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x306A;&#x3063;&#x3066;&#x3082;&#x3001;\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x7D42;&#x4E86; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x52D5;&#x4F5C;&#x3067;&#x3059;) &#x3057;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3001;<code>ref</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x65E2;&#x306B; <code>ref</code> &#x3055;&#x308C;&#x305F;&#x30B5;&#x30FC;&#x30D0;&#x3067;&#x518D;&#x3073; <code>ref</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x5F71;&#x97FF;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.getConnections(callback)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getConnections&quot;,
              &quot;desc&quot;: &quot;<!--\nAsynchronously get the number of concurrent connections on the server. Works\nwhen sockets were sent to forks.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x4E0A;&#x306E;&#x4E26;&#x884C;&#x30B3;&#x30CD;&#x30AF;&#x30AA;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x6570;&#x3092;&#x975E;&#x540C;&#x671F;&#x306B;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C; fork &#x3057;&#x305F;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x3089;&#x308C;&#x3066;&#x3082;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCallback should take two arguments `err` and `count`.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; <code>err</code> &#x3068; <code>count</code> &#x306E;&#x4E8C;&#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D6;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;callback&quot;
                    }
                  ]
                }
              ]
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;server.maxConnections&quot;,
              &quot;name&quot;: &quot;maxConnections&quot;,
              &quot;desc&quot;: &quot;<!--\nSet this property to reject connections when the server's connection count gets\nhigh.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x63A5;&#x7D9A;&#x6570;&#x304C;&#x5927;&#x304D;&#x304F;&#x306A;&#x3063;&#x305F;&#x6642;&#x306B;&#x63A5;&#x7D9A;&#x3092;&#x62D2;&#x5426;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIt is not recommended to use this option once a socket has been sent to a child\nwith `child_process.fork()`.\n-->\n\n<p><code>child_process.fork()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x3089;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x5BFE;&#x3057;&#x3066;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x63A8;&#x5968;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;server.connections&quot;,
              &quot;name&quot;: &quot;connections&quot;,
              &quot;desc&quot;: &quot;<!--\nThis function is **deprecated**; please use [server.getConnections()][] instead.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; <strong>&#x5EC3;&#x6B62;&#x4E88;&#x5B9A;</strong> &#x3067;&#x3059;;\n&#x4EE3;&#x308F;&#x308A;&#x306B; [server.getConnections()][] &#x3092;&#x4F7F;&#x3063;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nThe number of concurrent connections on the server.\n-->\n\n<p>&#x3053;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x4E0A;&#x306E;&#x4E26;&#x884C;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThis becomes `null` when sending a socket to a child with\n`child_process.fork()`. To poll forks and get current number of active\nconnections use asynchronous `server.getConnections` instead.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C; <code>child_process.fork()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x3089;&#x308C;&#x308B;&#x3068;&#x3001;\n&#x3053;&#x308C;&#x306F; <code>null</code> &#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\nfork &#x3057;&#x305F;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x30DD;&#x30FC;&#x30EA;&#x30F3;&#x30B0;&#x3057;&#x3066;&#x73FE;&#x5728;&#x306E;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x63A5;&#x7D9A;&#x3092;&#x5F97;&#x308B;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;\n&#x975E;&#x540C;&#x671F;&#x306E; <code>server.getConnections</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\n`net.Server` is an [EventEmitter][] with the following events:\n-->\n\n<p><code>net.Server</code> &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x6301;&#x3064; [EventEmitter][] &#x3067;&#x3059;:\n\n</p>\n&quot;
            }
          ],
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;listening&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;listening&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when the server has been bound after calling `server.listen`.\n-->\n\n<p><code>server.listen()</code> &#x304C;&#x547C;&#x3070;&#x308C;&#x305F;&#x5F8C;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;connection&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;connection&quot;,
              &quot;params&quot;: [],
              &quot;desc&quot;: &quot;<!--\nEmitted when a new connection is made. `socket` is an instance of\n`net.Socket`.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>socket</code> &#x306F; <code>net.Socket</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when the server closes. Note that if connections exist, this\nevent is not emitted until all connections are ended.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x63A5;&#x7D9A;&#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x3068;&#x3001;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x5168;&#x3066;&#x306E;&#x63A5;&#x7D9A;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x307E;&#x3067;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;params&quot;: [],
              &quot;desc&quot;: &quot;<!--\nEmitted when an error occurs.  The `'close'` event will be called directly\nfollowing this event.  See example in discussion of `server.listen`.\n-->\n\n<p>&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x7D9A;&#x3044;&#x3066; <code>&apos;close&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x76F4;&#x63A5;&#x751F;&#x6210;&#x3055;&#x308C;&#x308B;&#x5834;&#x5408;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>server.listen()</code> &#x306E;&#x4F8B;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: net.Socket&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;net.Socket&quot;,
          &quot;desc&quot;: &quot;<!--\nThis object is an abstraction of a TCP or UNIX socket.  `net.Socket`\ninstances implement a duplex Stream interface.  They can be created by the\nuser and used as a client (with `connect()`) or they can be created by Node\nand passed to the user through the `'connection'` event of a server.\n-->\n\n<p>&#x3053;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; TCP &#x307E;&#x305F;&#x306F; UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x62BD;&#x8C61;&#x5316;&#x3057;&#x305F;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n<code>net.Socket</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306F;&#x53CC;&#x65B9;&#x5411;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306F;&#x30E6;&#x30FC;&#x30B6;&#x306B;&#x3088;&#x3063;&#x3066; (<code>connect()</code> &#x306B;&#x3088;&#x3063;&#x3066;) &#x4F5C;&#x6210;&#x3055;&#x308C;&#x3066;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x304B;&#x3001;\nNode &#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x3066;&#x30B5;&#x30FC;&#x30D0;&#x306E; <code>&apos;connection&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x901A;&#x3058;&#x3066;&#x30E6;&#x30FC;&#x30B6;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;new net.Socket([options])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;Socket&quot;,
              &quot;desc&quot;: &quot;<!--\nConstruct a new socket object.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x69CB;&#x7BC9;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`options` is an object with the following defaults:\n-->\n\n<p><code>options</code> &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x3092;&#x6301;&#x3064;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>{ fd: null\n  allowHalfOpen: false,\n  readable: false,\n  writable: false\n}</code></pre>\n<!--\n`fd` allows you to specify the existing file descriptor of socket.\nSet `readable` and/or `writable` to `true` to allow reads and/or writes on this\nsocket (NOTE: Works only when `fd` is passed).\nAbout `allowHalfOpen`, refer to `createServer()` and `'end'` event.\n-->\n\n<p><code>fd</code> &#x306B;&#x65E2;&#x5B58;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>readable</code> &#x304A;&#x3088;&#x3073; <code>writable</code> &#x3092; <code>true</code> &#x306B;&#x3059;&#x308B;&#x3068;&#x3001;&#x3053;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x305F;&#x306F;\n&#x66F8;&#x304D;&#x51FA;&#x3057;&#x53EF;&#x80FD;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059; (&#x6CE8;&#x610F;: <code>fd</code> &#x304C;&#x6E21;&#x3055;&#x308C;&#x5834;&#x5408;&#x306E;&#x307F;&#x52B9;&#x679C;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;)&#x3002;\n<code>allowHalfOpen</code> &#x306B;&#x3064;&#x3044;&#x3066;&#x306F; <code>createServer()</code> &#x304A;&#x3088;&#x3073; <code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;options&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.connect(port, [host], [connectListener])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;connect&quot;,
              &quot;desc&quot;: &quot;<!--\nOpens the connection for a given socket. If `port` and `host` are given,\nthen the socket will be opened as a TCP socket, if `host` is omitted,\n`localhost` will be assumed. If a `path` is given, the socket will be\nopened as a unix socket to that path.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>port</code> &#x3068; <code>host</code> &#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F; TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3068;&#x3057;&#x3066;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>host</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F; <code>localhost</code> &#x304C;&#x4EEE;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>path</code> &#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x305D;&#x306E;&#x30D1;&#x30B9;&#x3078;&#x306E; UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3068;&#x3057;&#x3066;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNormally this method is not needed, as `net.createConnection` opens the\nsocket. Use this only if you are implementing a custom Socket.\n-->\n\n<p>&#x901A;&#x5E38;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x5FC5;&#x8981;&#x306A;&#x304F;&#x3001;<code>net.createConnection</code> &#x3067;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x306E;&#x306F;&#x3001;&#x30AB;&#x30B9;&#x30BF;&#x30DE;&#x30A4;&#x30BA;&#x3055;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThis function is asynchronous. When the ['connect'][] event is emitted the\nsocket is established. If there is a problem connecting, the `'connect'` event\nwill not be emitted, the `'error'` event will be emitted with the exception.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3059;&#x3002;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x78BA;&#x7ACB;&#x3055;&#x308C;&#x308B;&#x3068; [&apos;connect&apos;][]\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x63A5;&#x7D9A;&#x3067;&#x554F;&#x984C;&#x304C;&#x3042;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; <code>&apos;connect&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x305A;&#x3001;\n&#x4F8B;&#x5916;&#x3068;&#x3068;&#x3082;&#x306B; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `connectListener` parameter will be added as an listener for the\n['connect'][] event.\n-->\n\n<p><code>connectListener</code> &#x5F15;&#x6570;&#x306F; [&apos;connect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x306B;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;path&quot;
                    },
                    {
                      &quot;name&quot;: &quot;connectListener&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;port&quot;
                    },
                    {
                      &quot;name&quot;: &quot;host&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;connectListener&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.connect(path, [connectListener])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;connect&quot;,
              &quot;desc&quot;: &quot;<!--\nOpens the connection for a given socket. If `port` and `host` are given,\nthen the socket will be opened as a TCP socket, if `host` is omitted,\n`localhost` will be assumed. If a `path` is given, the socket will be\nopened as a unix socket to that path.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>port</code> &#x3068; <code>host</code> &#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F; TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3068;&#x3057;&#x3066;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>host</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F; <code>localhost</code> &#x304C;&#x4EEE;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>path</code> &#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x305D;&#x306E;&#x30D1;&#x30B9;&#x3078;&#x306E; UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3068;&#x3057;&#x3066;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNormally this method is not needed, as `net.createConnection` opens the\nsocket. Use this only if you are implementing a custom Socket.\n-->\n\n<p>&#x901A;&#x5E38;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x5FC5;&#x8981;&#x306A;&#x304F;&#x3001;<code>net.createConnection</code> &#x3067;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x306E;&#x306F;&#x3001;&#x30AB;&#x30B9;&#x30BF;&#x30DE;&#x30A4;&#x30BA;&#x3055;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThis function is asynchronous. When the ['connect'][] event is emitted the\nsocket is established. If there is a problem connecting, the `'connect'` event\nwill not be emitted, the `'error'` event will be emitted with the exception.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3059;&#x3002;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x78BA;&#x7ACB;&#x3055;&#x308C;&#x308B;&#x3068; [&apos;connect&apos;][]\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x63A5;&#x7D9A;&#x3067;&#x554F;&#x984C;&#x304C;&#x3042;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; <code>&apos;connect&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x305A;&#x3001;\n&#x4F8B;&#x5916;&#x3068;&#x3068;&#x3082;&#x306B; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `connectListener` parameter will be added as an listener for the\n['connect'][] event.\n-->\n\n<p><code>connectListener</code> &#x5F15;&#x6570;&#x306F; [&apos;connect&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x306B;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;path&quot;
                    },
                    {
                      &quot;name&quot;: &quot;connectListener&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.setEncoding([encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setEncoding&quot;,
              &quot;desc&quot;: &quot;<!--\nSet the encoding for the socket as a Readable Stream. See\n[stream.setEncoding()][] for more information.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x5165;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; [stream.setEncoding()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.write(data, [encoding], [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;write&quot;,
              &quot;desc&quot;: &quot;<!--\nSends data on the socket. The second parameter specifies the encoding in the\ncase of a string--it defaults to UTF8 encoding.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6587;&#x5B57;&#x5217;&#x306E;&#x5834;&#x5408;&#x3001;&#x7B2C; 2 &#x5F15;&#x6570;&#x306F;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x307E;&#x3059; &#xFF0D; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; UTF-8 &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns `true` if the entire data was flushed successfully to the kernel\nbuffer. Returns `false` if all or part of the data was queued in user memory.\n`'drain'` will be emitted when the buffer is again free.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x5168;&#x4F53;&#x306E;&#x30AB;&#x30FC;&#x30CD;&#x30EB;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3078;&#x306E;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x304C;&#x6210;&#x529F;&#x3059;&#x308B;&#x3068; <code>true</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30FC;&#x30BF;&#x5168;&#x4F53;&#x307E;&#x305F;&#x306F;&#x4E00;&#x90E8;&#x304C;&#x30E6;&#x30FC;&#x30B6;&#x30E1;&#x30E2;&#x30EA;&#x5185;&#x306E;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x5165;&#x308C;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x518D;&#x3073;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x7A7A;&#x3044;&#x305F;&#x5834;&#x5408;&#x306F; <code>&apos;drain&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe optional `callback` parameter will be executed when the data is finally\nwritten out - this may not be immediately.\n-->\n\n<p>&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>callback</code> &#x5F15;&#x6570;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x6700;&#x7D42;&#x7684;&#x306B;&#x51FA;&#x529B;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;\n&#xFF0D; &#x3053;&#x308C;&#x306F;&#x3059;&#x3050;&#x306B;&#x306F;&#x8D77;&#x304D;&#x306A;&#x3044;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.end([data], [encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;end&quot;,
              &quot;desc&quot;: &quot;<!--\nHalf-closes the socket. i.e., it sends a FIN packet. It is possible the\nserver will still send some data.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x30CF;&#x30FC;&#x30D5;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x307E;&#x3059;&#x3002;&#x4F8B;&#x3048;&#x3070; FIN &#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x307E;&#x3060;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x9001;&#x308A;&#x7D9A;&#x3051;&#x3066;&#x304F;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf `data` is specified, it is equivalent to calling\n`socket.write(data, encoding)` followed by `socket.end()`.\n-->\n\n<p><code>data</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n<code>socket.write(data, encoding)</code> &#x306B;&#x7D9A;&#x3051;&#x3066; <code>socket.end()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x306E;&#x3068;&#x7B49;&#x4FA1;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.destroy()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;destroy&quot;,
              &quot;desc&quot;: &quot;<!--\nEnsures that no more I/O activity happens on this socket. Only necessary in\ncase of errors (parse error or so).\n-->\n\n<p>&#x3053;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x4E0A;&#x3067;&#x3069;&#x3093;&#x306A; I/O &#x3082;&#x8D77;&#x3053;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x4FDD;&#x8A3C;&#x3057;&#x307E;&#x3059;&#x3002;\n(&#x30D1;&#x30FC;&#x30B9;&#x30A8;&#x30E9;&#x30FC;&#x306A;&#x3069;&#x306E;) &#x30A8;&#x30E9;&#x30FC;&#x306E;&#x5834;&#x5408;&#x306B;&#x3060;&#x3051;&#x5FC5;&#x8981;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.pause()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;pause&quot;,
              &quot;desc&quot;: &quot;<!--\nPauses the reading of data. That is, `'data'` events will not be emitted.\nUseful to throttle back an upload.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3092;&#x4E2D;&#x65AD;&#x3057;&#x307E;&#x3059;&#x3002;&#x3064;&#x307E;&#x308A;&#x3001;<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30A2;&#x30C3;&#x30D7;&#x30ED;&#x30FC;&#x30C9;&#x901F;&#x5EA6;&#x3092;&#x843D;&#x3068;&#x3059;&#x305F;&#x3081;&#x306B;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.resume()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;resume&quot;,
              &quot;desc&quot;: &quot;<!--\nResumes reading after a call to `pause()`.\n-->\n\n<p><code>pause()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x5F8C;&#x3067;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3092;&#x518D;&#x958B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.setTimeout(timeout, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setTimeout&quot;,
              &quot;desc&quot;: &quot;<!--\nSets the socket to timeout after `timeout` milliseconds of inactivity on\nthe socket. By default `net.Socket` do not have a timeout.\n-->\n\n<p>&#x3053;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x975E;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306B;&#x306A;&#x3063;&#x3066;&#x304B;&#x3089; <code>timeout</code> &#x30DF;&#x30EA;&#x79D2;&#x5F8C;&#x306B;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;\n&#x3059;&#x308B;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F; <code>net.Socket</code> &#x306F;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nWhen an idle timeout is triggered the socket will receive a `'timeout'`\nevent but the connection will not be severed. The user must manually `end()`\nor `destroy()` the socket.\n-->\n\n<p>&#x30A2;&#x30A4;&#x30C9;&#x30EB;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x304C;&#x5F15;&#x304D;&#x8D77;&#x3053;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F; <code>&apos;timeout&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x5207;&#x65AD;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30E6;&#x30FC;&#x30B6;&#x306F;&#x624B;&#x52D5;&#x3067; <code>end()</code> &#x307E;&#x305F;&#x306F; <code>destroy()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf `timeout` is 0, then the existing idle timeout is disabled.\n-->\n\n<p><code>timeout</code> &#x304C; 0 &#x306E;&#x5834;&#x5408;&#x3001;&#x30A2;&#x30A4;&#x30C9;&#x30EB;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x306F;&#x7121;&#x52B9;&#x306B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe optional `callback` parameter will be added as a one time listener for the\n`'timeout'` event.\n-->\n\n<p>&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>callback</code> &#x5F15;&#x6570;&#x306F;&#x3001;<code>timeouot</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x4E00;&#x56DE;&#x9650;&#x308A;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;timeout&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.setNoDelay([noDelay])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setNoDelay&quot;,
              &quot;desc&quot;: &quot;<!--\nDisables the Nagle algorithm. By default TCP connections use the Nagle\nalgorithm, they buffer data before sending it off. Setting `true` for\n`noDelay` will immediately fire off data each time `socket.write()` is called.\n`noDelay` defaults to `true`.\n-->\n\n<p>Nagle &#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x3092;&#x7121;&#x52B9;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F; TCP &#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F; Nagle &#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x524D;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>noDelay</code> &#x306B; <code>true</code> &#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F; <code>socket.write()</code>\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5EA6;&#x306B;&#x5373;&#x5EA7;&#x306B;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>true</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;noDelay&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.setKeepAlive([enable], [initialDelay])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setKeepAlive&quot;,
              &quot;desc&quot;: &quot;<!--\nEnable/disable keep-alive functionality, and optionally set the initial\ndelay before the first keepalive probe is sent on an idle socket.\n`enable` defaults to `false`.\n\nSet `initialDelay` (in milliseconds) to set the delay between the last\ndata packet received and the first keepalive probe. Setting 0 for\ninitialDelay will leave the value unchanged from the default\n(or previous) setting. Defaults to `0`.\n-->\n\n<p>&#x30AD;&#x30FC;&#x30D7;&#x30A2;&#x30E9;&#x30A4;&#x30D6;&#x6A5F;&#x80FD;&#x3092;&#x6709;&#x52B9;/&#x7121;&#x52B9;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x6700;&#x521D;&#x306E; keepalive probe &#x304C;&#x30A2;&#x30A4;&#x30C9;&#x30EB;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;&#x306E;&#x521D;&#x671F;&#x9045;&#x5EF6;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>enable</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>initialDelay</code> (&#x30DF;&#x30EA;&#x79D2;) &#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;\n&#x6700;&#x5F8C;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x3066;&#x304B;&#x3089;&#x6700;&#x521D;&#x306E; keepalive probe &#x307E;&#x3067;&#x306E;&#x9045;&#x5EF6;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x521D;&#x671F;&#x9045;&#x5EF6;&#x306B; 0 &#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x8A2D;&#x5B9A;&#x304B;&#x3089;&#x5024;&#x3092;&#x5909;&#x66F4;&#x3055;&#x308C;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;enable&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;initialDelay&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.address()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;address&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns the bound address, the address family name and port of the\nsocket as reported by the operating system. Returns an object with\nthree properties, e.g.\n`{ port: 12346, family: 'IPv4', address: '127.0.0.1' }`\n-->\n\n<p>&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x5831;&#x544A;&#x3055;&#x308C;&#x305F;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x305F;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3068;\n&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x30D5;&#x30A1;&#x30DF;&#x30EA;&#x540D;&#x3001;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; 3 &#x3064;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n<code>{ port: 12346, family: &apos;IPv4&apos;, address: &apos;127.0.0.1&apos; }</code>\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.unref()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;unref&quot;,
              &quot;desc&quot;: &quot;<!--\nCalling `unref` on a socket will allow the program to exit if this is the only\nactive socket in the event system. If the socket is already `unref`d calling\n`unref` again will have no effect.\n-->\n\n<p>&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;&#x3053;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3060;&#x3051;&#x304C;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x5834;&#x5408;&#x306B;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;\n&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;<code>unref</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x65E2;&#x306B; <code>unref</code> &#x3055;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x518D;&#x3073; <code>unref</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x5F71;&#x97FF;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.ref()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;ref&quot;,
              &quot;desc&quot;: &quot;<!--\nOpposite of `unref`, calling `ref` on a previously `unref`d socket will *not*\nlet the program exit if it's the only socket left (the default behavior). If\nthe socket is `ref`d calling `ref` again will have no effect.\n-->\n\n<p><code>unref</code> &#x3068;&#x306F;&#x9006;&#x306B;&#x3001;&#x4EE5;&#x524D;&#x306B; <code>unref</code> &#x3055;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x552F;&#x4E00;&#x6B8B;&#x3063;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x306A;&#x3063;&#x3066;&#x3082;&#x3001;\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x7D42;&#x4E86; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x52D5;&#x4F5C;&#x3067;&#x3059;) &#x3057;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3001;<code>ref</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x65E2;&#x306B; <code>ref</code> &#x3055;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x518D;&#x3073; <code>ref</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x5F71;&#x97FF;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;socket.bufferSize&quot;,
              &quot;name&quot;: &quot;bufferSize&quot;,
              &quot;desc&quot;: &quot;<!--\n`net.Socket` has the property that `socket.write()` always works. This is to\nhelp users get up and running quickly. The computer cannot always keep up\nwith the amount of data that is written to a socket - the network connection\nsimply might be too slow. Node will internally queue up the data written to a\nsocket and send it out over the wire when it is possible. (Internally it is\npolling on the socket's file descriptor for being writable).\n\nThe consequence of this internal buffering is that memory may grow. This\nproperty shows the number of characters currently buffered to be written.\n(Number of characters is approximately equal to the number of bytes to be\nwritten, but the buffer may contain strings, and the strings are lazily\nencoded, so the exact number of bytes is not known.)\n\nUsers who experience large or growing `bufferSize` should attempt to\n\"throttle\" the data flows in their program with `pause()` and `resume()`.\n-->\n\n<p><code>net.Socket</code> &#x306B;&#x306F;&#x3001;<code>socket.write()</code> &#x3068;&#x5E38;&#x306B;&#x5354;&#x8ABF;&#x3059;&#x308B;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30E6;&#x30FC;&#x30B6;&#x304C;&#x5B9F;&#x884C;&#x901F;&#x5EA6;&#x3092;&#x5411;&#x4E0A;&#x3055;&#x305B;&#x308B;&#x624B;&#x52A9;&#x3051;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30F3;&#x30D4;&#x30E5;&#x30FC;&#x30BF;&#x306F;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x91CF;&#x306B;&#x3064;&#x3044;&#x3066;&#x3044;&#x304F;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n- &#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x63A5;&#x7D9A;&#x306F;&#x3001;&#x5358;&#x7D14;&#x306B;&#x9045;&#x3059;&#x304E;&#x307E;&#x3059;&#x3002;\nNode &#x306F;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5185;&#x90E8;&#x306E;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x5165;&#x308C;&#x3001;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x6642;&#x306B;&#x30EF;&#x30A4;&#x30E4;&#x4E0A;&#x306B;&#x9001;&#x4FE1;&#x3057;&#x307E;&#x3059; (&#x5185;&#x90E8;&#x3067;&#x306F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;&#x306E;&#x3092;&#x30DD;&#x30FC;&#x30EA;&#x30F3;&#x30B0;&#x3057;&#x307E;&#x3059;)&#x3002;\n\n</p>\n<p>&#x5185;&#x90E8;&#x7684;&#x306A;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x7D50;&#x679C;&#x3001;&#x30E1;&#x30E2;&#x30EA;&#x6D88;&#x8CBB;&#x304C;&#x5897;&#x5927;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F;&#x3001;&#x73FE;&#x5728;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306E;&#x305F;&#x3081;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x6587;&#x5B57;&#x6570;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n(&#x6587;&#x5B57;&#x6570;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3068;&#x307B;&#x307C;&#x540C;&#x3058;&#x3067;&#x3059;&#x304C;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x6587;&#x5B57;&#x5217;&#x3092;&#x542B;&#x3093;&#x3067;&#x3044;&#x308B;&#x5834;&#x5408;&#x3001;&#x6587;&#x5B57;&#x5217;&#x306F;&#x9045;&#x5EF6;&#x7684;&#x306B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;&#x3001;&#x6B63;&#x78BA;&#x306A;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x306F;&#x5206;&#x304B;&#x3063;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;)\n\n</p>\n<p>&#x5927;&#x304D;&#x306A;&#x3001;&#x3042;&#x308B;&#x3044;&#x306F;&#x5897;&#x5927;&#x3059;&#x308B; <code>bufferSize</code> &#x3092;&#x4F53;&#x9A13;&#x3057;&#x305F;&#x30E6;&#x30FC;&#x30B6;&#x306F;&#x3001;&#x305D;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067; <code>pause()</code> &#x304A;&#x3088;&#x3073; <code>resume()</code> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x30C7;&#x30FC;&#x30BF;&#x30D5;&#x30ED;&#x30FC;&#x3092;&#x300C;&#x6291;&#x3048;&#x3088;&#x3046;&#x300D;&#x3068;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.remoteAddress&quot;,
              &quot;name&quot;: &quot;remoteAddress&quot;,
              &quot;desc&quot;: &quot;<!--\nThe string representation of the remote IP address. For example,\n`'74.125.127.100'` or `'2001:4860:a005::68'`.\n-->\n\n<p>&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x306E; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;<code>&apos;74.125.127.100&apos;</code> &#x3042;&#x308B;&#x3044;&#x306F; <code>&apos;2001:4860:a005::68&apos;</code>&#x3002;\n\n</p>\n<!--\nThis member is only present in server-side connections.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30F3;&#x30D0;&#x306F;&#x30B5;&#x30FC;&#x30D0;&#x30B5;&#x30A4;&#x30C9;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x306E;&#x307F;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.remotePort&quot;,
              &quot;name&quot;: &quot;remotePort&quot;,
              &quot;desc&quot;: &quot;<!--\nThe numeric representation of the remote port. For example,\n`80` or `21`.\n-->\n\n<p>&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30DD;&#x30FC;&#x30C8;&#x306E;&#x6570;&#x5024;&#x8868;&#x73FE;&#x3067;&#x3059;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;<code>80</code> &#x3084; <code>21</code>&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.localAddress&quot;,
              &quot;name&quot;: &quot;localAddress&quot;,
              &quot;desc&quot;: &quot;<!--\nThe string representation of the local IP address the remote client is\nconnecting on. For example, if you are listening on `'0.0.0.0'` and the\nclient connects on `'192.168.1.1'`, the value would be `'192.168.1.1'`.\n-->\n\n<p>&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x63A5;&#x7D9A;&#x3057;&#x3066;&#x3044;&#x308B;&#x30ED;&#x30FC;&#x30AB;&#x30EB; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070;&#x3001; <code>&apos;0.0.0.0&apos;</code> &#x3092;&#x30EA;&#x30C3;&#x30B9;&#x30F3;&#x3057;&#x3066;&#x3044;&#x3066;&#x3001;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C; <code>&apos;192.168.1.1&apos;</code>\n&#x306B;&#x63A5;&#x7D9A;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;&#x3053;&#x306E;&#x5024;&#x306F; <code>&apos;192.168.1.1&apos;</code> &#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.localPort&quot;,
              &quot;name&quot;: &quot;localPort&quot;,
              &quot;desc&quot;: &quot;<!--\nThe numeric representation of the local port. For example,\n`80` or `21`.\n-->\n\n<p>&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30DD;&#x30FC;&#x30C8;&#x306E;&#x6570;&#x5024;&#x8868;&#x73FE;&#x3067;&#x3059;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;<code>80</code> &#x3084; <code>21</code>&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.bytesRead&quot;,
              &quot;name&quot;: &quot;bytesRead&quot;,
              &quot;desc&quot;: &quot;<!--\nThe amount of received bytes.\n-->\n\n<p>&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x30D0;&#x30A4;&#x30C8;&#x306E;&#x5408;&#x8A08;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.bytesWritten&quot;,
              &quot;name&quot;: &quot;bytesWritten&quot;,
              &quot;desc&quot;: &quot;<!--\nThe amount of bytes sent.\n-->\n\n<p>&#x9001;&#x4FE1;&#x3057;&#x305F;&#x30D0;&#x30A4;&#x30C8;&#x306E;&#x5408;&#x8A08;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n`net.Socket` instances are [EventEmitter][] with the following events:\n-->\n\n<p><code>net.Socket</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x6301;&#x3064; [EventEmitter][] &#x3067;&#x3059;:\n\n</p>\n&quot;
            }
          ],
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;connect&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;connect&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when a socket connection is successfully established.\nSee `connect()`.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x78BA;&#x7ACB;&#x304C;&#x6210;&#x529F;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>connect()</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;data&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;data&quot;,
              &quot;params&quot;: [],
              &quot;desc&quot;: &quot;<!--\nEmitted when data is received.  The argument `data` will be a `Buffer` or\n`String`.  Encoding of data is set by `socket.setEncoding()`.\n(See the [Readable Stream][] section for more information.)\n\nNote that the __data will be lost__ if there is no listener when a `Socket`\nemits a `'data'` event.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>data</code> &#x5F15;&#x6570;&#x306F; <code>Buffer</code> &#x307E;&#x305F;&#x306F; <code>String</code> &#x3067;&#x3059;&#x3002;\n&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; <code>socket.setEncoding()</code> &#x3067;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n(&#x3088;&#x308A;&#x8A73;&#x3057;&#x3044;&#x60C5;&#x5831;&#x306F; [Readable Stream][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<p><code>Socket</code> &#x304C; <code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x305F;&#x6642;&#x306B;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;\n<strong>&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5931;&#x308F;&#x308C;&#x308B;</strong>&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;end&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;end&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when the other end of the socket sends a FIN packet.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x76F8;&#x624B;&#x5074;&#x304C; FIN &#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8; (<code>allowHalfOpen == false</code>) &#x3067;&#x306F;&#x3001;\n&#x4FDD;&#x7559;&#x3055;&#x308C;&#x3066;&#x3044;&#x305F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x304C;&#x51FA;&#x529B;&#x3055;&#x308C;&#x308B;&#x3068;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x7834;&#x68C4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x3001;<code>allowHalfOpen == true</code> &#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x3068;&#x3001;\n&#x30E6;&#x30FC;&#x30B6;&#x304C;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3081;&#x308B;&#x3088;&#x3046;&#x306B;&#x3057;&#x3066;&#x304A;&#x304F;&#x305F;&#x3081;&#x306B;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B; <code>end()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3044;&#x306E;&#x3067;&#x3001;\n&#x30E6;&#x30FC;&#x30B6;&#x304C; <code>end()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;By default (`allowHalfOpen&quot;: &quot;= false`) the socket will destroy its file\ndescriptor  once it has written out its pending write queue.  However, by\nsetting `allowHalfOpen == true` the socket will not automatically `end()`\nits side allowing the user to write arbitrary amounts of data, with the\ncaveat that the user is required to `end()` their side now.&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;timeout&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;timeout&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted if the socket times out from inactivity. This is only to notify that\nthe socket has been idle. The user must manually close the connection.\n\nSee also: `socket.setTimeout()`\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3057;&#x3066;&#x975E;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306B;&#x306A;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x30A2;&#x30A4;&#x30C9;&#x30EB;&#x306B;&#x306A;&#x3063;&#x305F;&#x3053;&#x3068;&#x3092;&#x901A;&#x77E5;&#x3059;&#x308B;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;\n&#x5229;&#x7528;&#x8005;&#x306F;&#x624B;&#x52D5;&#x3067;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>socket.setTimeout()</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;drain&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;drain&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when the write buffer becomes empty. Can be used to throttle uploads.\n\nSee also: the return values of `socket.write()`\n-->\n\n<p>&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x7A7A;&#x306B;&#x306A;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x30A2;&#x30C3;&#x30D7;&#x30ED;&#x30FC;&#x30C9;&#x901F;&#x5EA6;&#x3092;&#x843D;&#x3068;&#x3059;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>socket.write()</code> &#x306E;&#x623B;&#x308A;&#x5024;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;params&quot;: [],
              &quot;desc&quot;: &quot;<!--\nEmitted when an error occurs.  The `'close'` event will be called directly\nfollowing this event.\n-->\n\n<p>&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;<code>&apos;close&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x5F8C;&#x306B;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\n* `had_error` {Boolean} true if the socket had a transmission error\n-->\n\n<ul>\n<li><code>had_error</code> {Boolean} &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x8EE2;&#x9001;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F; true &#x3067;&#x3059;&#x3002;</li>\n</ul>\n<!--\nEmitted once the socket is fully closed. The argument `had_error` is a boolean\nwhich says if the socket was closed due to a transmission error.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5F15;&#x6570; <code>had_error</code> &#x306F; boolean &#x3067;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x8EE2;&#x9001;&#x30A8;&#x30E9;&#x30FC;&#x3067;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x305F;&#x306E;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;net&quot;
    },
    {
      &quot;textRaw&quot;: &quot;UDP / Datagram Sockets&quot;,
      &quot;name&quot;: &quot;dgram&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nDatagram sockets are available through `require('dgram')`.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F; <code>require(&apos;dgram&apos;)</code> &#x3067;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nImportant note: the behavior of `dgram.Socket#bind()` has changed in v0.10\nand is always asynchronous now.  If you have code that looks like this:\n-->\n\n<p>&#x91CD;&#x8981;&#x306A;&#x6CE8;&#x610F;: <code>dgram.Socket#bind()</code> &#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F; v0.10 &#x3067;&#x5909;&#x66F4;&#x3055;&#x308C;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x5E38;&#x306B;&#x975E;&#x540C;&#x671F;&#x306B;&#x306A;&#x308A;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x3082;&#x3057;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306A;&#x30B3;&#x30FC;&#x30C9;&#x304C;&#x3042;&#x308B;&#x3068;:\n\n</p>\n<pre><code>var s = dgram.createSocket(&apos;udp4&apos;);\ns.bind(1234);\ns.addMembership(&apos;224.0.0.114&apos;);</code></pre>\n<!--\nYou have to change it to this:\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x5909;&#x66F4;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code>var s = dgram.createSocket(&apos;udp4&apos;);\ns.bind(1234, function() {\n  s.addMembership(&apos;224.0.0.114&apos;);\n});</code></pre>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;dgram.createSocket(type, [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createSocket&quot;,
          &quot;desc&quot;: &quot;<!--\n* `type` String. Either 'udp4' or 'udp6'\n* `callback` Function. Attached as a listener to `message` events.\n  Optional\n* Returns: Socket object\n-->\n\n<ul>\n<li><code>type</code> String. &apos;udp4&apos; &#x307E;&#x305F;&#x306F; &apos;udp6&apos; &#x306E;&#x3044;&#x305A;&#x308C;&#x304B;</li>\n<li><code>callback</code> Function. <code>&apos;message&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x308B;&#x3001;\nOptional</li>\n<li>Returns: Socket object</li>\n</ul>\n<!--\nCreates a datagram Socket of the specified types.  Valid types are `udp4`\nand `udp6`.\n\nTakes an optional callback which is added as a listener for `message` events.\n\nCall `socket.bind` if you want to receive datagrams. `socket.bind()` will bind\nto the \"all interfaces\" address on a random port (it does the right thing for\nboth `udp4` and `udp6` sockets). You can then retrieve the address and port\nwith `socket.address().address` and `socket.address().port`.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x7A2E;&#x985E;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x59A5;&#x5F53;&#x306A;&#x7A2E;&#x985E;&#x306F; <code>udp4</code> &#x3068; <code>udp6</code>&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F; <code>message</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x3044;&#x5834;&#x5408;&#x306F; <code>socket.bind()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>socket.bind()</code> &#x306F;&#x300C;&#x5168;&#x3066;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x300D;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306B;&#x30E9;&#x30F3;&#x30C0;&#x30E0;&#x306A;&#x30DD;&#x30FC;&#x30C8;\n(<code>udp4</code> &#x3068; <code>udp6</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x4E21;&#x65B9;&#x3067;&#x6B63;&#x3057;&#x3044;&#x3082;&#x306E;&#x3067;&#x3059;) &#x3092;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3068;&#x30DD;&#x30FC;&#x30C8;&#x306F; <code>socket.address().address</code> &#x304A;&#x3088;&#x3073;\n<code>socket.address().port</code> &#x3067;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;type&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: dgram.Socket&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;dgram.Socket&quot;,
          &quot;desc&quot;: &quot;<!--\nThe dgram Socket class encapsulates the datagram functionality.  It\nshould be created via `dgram.createSocket(type, [callback])`.\n-->\n\n<p>dgram Scoket &#x30AF;&#x30E9;&#x30B9;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x6A5F;&#x80FD;&#x3092;&#x30AB;&#x30D7;&#x30BB;&#x30EB;&#x5316;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; <code>dgram.createSocket(type, [callback])</code> &#x3092;&#x901A;&#x3058;&#x3066;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;message&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;message&quot;,
              &quot;desc&quot;: &quot;<!--\n* `msg` Buffer object. The message\n* `rinfo` Object. Remote address information\n-->\n\n<ul>\n<li><code>msg</code> Buffer object. &#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;</li>\n<li><code>rinfo</code> Object. &#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306E;&#x60C5;&#x5831;</li>\n</ul>\n<!--\nEmitted when a new datagram is available on a socket.  `msg` is a `Buffer` and `rinfo` is\nan object with the sender's address information and the number of bytes in the datagram.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x4E0A;&#x3067;&#x65B0;&#x3057;&#x3044;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x5230;&#x7740;&#x3057;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;<code>msg</code> &#x306F; <code>Buffer</code> &#x3067;&#x3001;\n<code>rinfo</code> &#x306F;&#x9001;&#x4FE1;&#x8005;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x60C5;&#x5831;&#x3068;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3092;&#x6301;&#x3063;&#x305F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;listening&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;listening&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when a socket starts listening for datagrams.  This happens as soon as UDP sockets\nare created.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x3092;&#x958B;&#x59CB;&#x3059;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; UDP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x308B;&#x3068;&#x3059;&#x3050;&#x306B;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when a socket is closed with `close()`.  No new `message` events will be emitted\non this socket.\n-->\n\n<p><code>close()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3059;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x306F;&#x65B0;&#x3057;&#x3044; <code>message</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;params&quot;: [],
              &quot;desc&quot;: &quot;<!--\nEmitted when an error occurs.\n-->\n\n<p>&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;socket.send(buf, offset, length, port, address, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;send&quot;,
              &quot;desc&quot;: &quot;<!--\n* `buf` Buffer object.  Message to be sent\n* `offset` Integer. Offset in the buffer where the message starts.\n* `length` Integer. Number of bytes in the message.\n* `port` Integer. Destination port.\n* `address` String. Destination hostname or IP address.\n* `callback` Function. Called when the message has been sent. Optional.\n-->\n\n<ul>\n<li><code>buf</code> Buffer &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3002;</li>\n<li><code>offset</code> &#x6574;&#x6570;&#x3002;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x306E;&#x958B;&#x59CB;&#x4F4D;&#x7F6E;&#x3068;&#x306A;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x5185;&#x306E;&#x30AA;&#x30D5;&#x30BB;&#x30C3;&#x30C8;&#x3002;</li>\n<li><code>length</code> &#x6574;&#x6570;&#x3002;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x9577;&#x3002;</li>\n<li><code>port</code> &#x6574;&#x6570;&#x3002;&#x63A5;&#x7D9A;&#x5148;&#x306E;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x3002;</li>\n<li><code>address</code> &#x6587;&#x5B57;&#x5217;&#x3002;&#x63A5;&#x7D9A;&#x5148;&#x306E;&#x30DB;&#x30B9;&#x30C8;&#x540D;&#x307E;&#x305F;&#x306F; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3002;</li>\n<li><code>callback</code> &#x95A2;&#x6570;&#x3002;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x304C;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x3068;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3055;&#x308C;&#x308B;&#x3002;&#x4EFB;&#x610F;&#x3002;</li>\n</ul>\n<!--\nFor UDP sockets, the destination port and address must be specified.  A string\nmay be supplied for the `address` parameter, and it will be resolved with DNS.\n-->\n\n<p>UDP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x306F;&#x3001;&#x76F8;&#x624B;&#x5148;&#x306E;&#x30DD;&#x30FC;&#x30C8;&#x3068;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306F;&#x5FC5;&#x305A;&#x6307;&#x5B9A;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>address</code> &#x30D1;&#x30E9;&#x30E1;&#x30FC;&#x30BF;&#x306B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F; DNS &#x306B;&#x3088;&#x3063;&#x3066;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the address is omitted or is an empty string, `'0.0.0.0'` or `'::0'` is used\ninstead.  Depending on the network configuration, those defaults may or may not\nwork; it's best to be explicit about the destination address.\n-->\n\n<p>&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3084;&#x7A7A;&#x6587;&#x5B57;&#x5217;&#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x4EE3;&#x308F;&#x308A;&#x306B; <code>&apos;0.0.0.0&apos;</code> &#x307E;&#x305F;&#x306F;\n<code>&apos;::0&apos;</code> &#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x306E;&#x69CB;&#x6210;&#x306B;&#x3088;&#x3063;&#x3066;&#x306F;&#x3001;&#x3053;&#x308C;&#x3089;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x306F;\n&#x52D5;&#x4F5C;&#x3057;&#x305F;&#x308A;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x308A;&#x3057;&#x307E;&#x3059;; &#x76F8;&#x624B;&#x5148;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306F;&#x660E;&#x793A;&#x7684;&#x306B;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x6700;&#x9069;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the socket has not been previously bound with a call to `bind`, it gets\nassigned a random port number and is bound to the \"all interfaces\" address\n(`'0.0.0.0'` for `udp4` sockets, `'::0'` for `udp6` sockets.)\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x4EE5;&#x524D;&#x306B; <code>bind</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306B;&#x3088;&#x3063;&#x3066;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x30E9;&#x30F3;&#x30C0;&#x30E0;&#x306A;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x304C;&#x300C;&#x5168;&#x3066;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x300D;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;\n(<code>udp4</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x306F; 0.0.0.0&#x3001;<code>udp6</code> &#x3067;&#x306F; ::0)&#x3002;\n\n</p>\n<!--\nAn optional callback may be specified to detect DNS errors or for determining\nwhen it's safe to reuse the `buf` object.  Note that DNS lookups delay the time\nto send for at least one tick.  The only way to know for sure that the datagram\nhas been sent is by using a callback.\n-->\n\n<p>DNS &#x306B;&#x304A;&#x3051;&#x308B;&#x30A8;&#x30E9;&#x30FC;&#x691C;&#x51FA;&#x3068;&#x3001;<code>buf</code> &#x304C;&#x518D;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x3053;&#x3068;&#x3092;&#x5B89;&#x5168;&#x306B;&#x77E5;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\nDNS &#x30EB;&#x30C3;&#x30AF;&#x30A2;&#x30C3;&#x30D7;&#x306F;&#x9001;&#x4FE1;&#x3092;&#x5C11;&#x306A;&#x304F;&#x3068;&#x3082;&#x6B21;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x307E;&#x3067;&#x9045;&#x3089;&#x305B;&#x308B;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x9001;&#x4FE1;&#x304C;&#x884C;&#x308F;&#x308C;&#x305F;&#x3053;&#x3068;&#x3092;&#x78BA;&#x5B9F;&#x306B;&#x77E5;&#x308B;&#x552F;&#x4E00;&#x306E;&#x624B;&#x6BB5;&#x306F;&#x3001;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of sending a UDP packet to a random port on `localhost`;\n-->\n\n<p><code>localhost</code> &#x306E;&#x9069;&#x5F53;&#x306A;&#x30DD;&#x30FC;&#x30C8;&#x306B; UDP &#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x4F8B;;\n\n</p>\n<pre><code>var dgram = require(&apos;dgram&apos;);\nvar message = new Buffer(&quot;Some bytes&quot;);\nvar client = dgram.createSocket(&quot;udp4&quot;);\nclient.send(message, 0, message.length, 41234, &quot;localhost&quot;, function(err, bytes) {\n  client.close();\n});</code></pre>\n<!--\n**A Note about UDP datagram size**\n\nThe maximum size of an `IPv4/v6` datagram depends on the `MTU` (_Maximum Transmission Unit_)\nand on the `Payload Length` field size.\n\n- The `Payload Length` field is `16 bits` wide, which means that a normal payload\n  cannot be larger than 64K octets including internet header and data\n  (65,507 bytes = 65,535 − 8 bytes UDP header − 20 bytes IP header);\n  this is generally true for loopback interfaces, but such long datagrams\n  are impractical for most hosts and networks.\n\n- The `MTU` is the largest size a given link layer technology can support for datagrams.\n  For any link, `IPv4` mandates a minimum `MTU` of `68` octets, while the recommended `MTU`\n  for IPv4 is `576` (typically recommended as the `MTU` for dial-up type applications),\n  whether they arrive whole or in fragments.\n\n  For `IPv6`, the minimum `MTU` is `1280` octets, however, the mandatory minimum\n  fragment reassembly buffer size is `1500` octets.\n  The value of `68` octets is very small, since most current link layer technologies have\n  a minimum `MTU` of `1500` (like Ethernet).\n\nNote that it's impossible to know in advance the MTU of each link through which\na packet might travel, and that generally sending a datagram greater than\nthe (receiver) `MTU` won't work (the packet gets silently dropped, without\ninforming the source that the data did not reach its intended recipient).\n-->\n\n<p><strong>UDP &#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x306B;&#x3064;&#x3044;&#x3066;</strong>\n\n</p>\n<p><code>IPv4/v6</code> &#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x6700;&#x5927;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x306F; <code>MTU</code> (<em>Maximum Transmission Unit</em>) &#x3068;&#x3001;\n<code>Payload Length</code> &#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x30B5;&#x30A4;&#x30BA;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<ul>\n<li><p><code>Payload Length</code> &#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x30B5;&#x30A4;&#x30BA;&#x306F; 16bit &#x9577;&#x3067;&#x3001;&#x3053;&#x308C;&#x306F;&#x901A;&#x5E38;&#x306E;&#x30DA;&#x30A4;&#x30ED;&#x30FC;&#x30C9;&#x304C;\nIP &#x30D8;&#x30C3;&#x30C0;&#x3068;&#x30C7;&#x30FC;&#x30BF;&#x542B;&#x3081;&#x3066; 64K &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x3088;&#x308A;&#x9577;&#x304F;&#x306A;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;\n(65,507 &#x30D0;&#x30A4;&#x30C8; = 65,535 &#x2212; 8 &#x30D0;&#x30A4;&#x30C8;&#x306E; UDP &#x30D8;&#x30C3;&#x30C0; &#x2212; 20 &#x30D0;&#x30A4;&#x30C8;&#x306E; IP &#x30D8;&#x30C3;&#x30C0;);\n&#x3053;&#x308C;&#x306F;&#x4E00;&#x822C;&#x7684;&#x306B;&#x30EB;&#x30FC;&#x30D7;&#x30D0;&#x30C3;&#x30AF;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x6B63;&#x3057;&#x3044;&#x3082;&#x306E;&#x306E;&#x3001;\n&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30DB;&#x30B9;&#x30C8;&#x3068;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x306B;&#x3068;&#x3063;&#x3066;&#x9577;&#x5927;&#x306A;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x306F;\n&#x73FE;&#x5B9F;&#x7684;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</p>\n</li>\n<li><p><code>MTU</code> &#x306F;&#x30EA;&#x30F3;&#x30AF;&#x5C64;&#x306B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x30B5;&#x30A4;&#x30BA;&#x3092;&#x4E0E;&#x3048;&#x308B;&#x6280;&#x8853;&#x3067;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x3082;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x3069;&#x3093;&#x306A;&#x30EA;&#x30F3;&#x30AF;&#x3067;&#x3082;&#x3001;&#x305D;&#x308C;&#x3089;&#x304C;&#x5168;&#x4F53;&#x3068;&#x3057;&#x3066;&#x5230;&#x7740;&#x3059;&#x308B;&#x304B;&#x65AD;&#x7247;&#x5316;&#x3055;&#x308C;&#x308B;&#x304B;&#x306B;&#x95A2;&#x308F;&#x3089;&#x305A;&#x3001;\n<code>IPv4</code> &#x306F;&#x6700;&#x4F4E; <code>69</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x5FC5;&#x8981;&#x3067;&#x3001;&#x63A8;&#x5968;&#x3055;&#x308C;&#x308B; <code>IPv4</code> &#x306E; <code>MTU</code> &#x306F; <code>576</code> &#x3067;&#x3059;\n(&#x5178;&#x578B;&#x7684;&#x306A;&#x30C0;&#x30A4;&#x30E4;&#x30EB;&#x30A2;&#x30C3;&#x30D7;&#x578B;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>MUT</code> &#x63A8;&#x5968;&#x5024;)&#x3002;</p>\n<p><code>IPv6</code> &#x3067;&#x306F;&#x6700;&#x5C0F;&#x306E; <code>MTU</code> &#x306F; <code>1280</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x3067;&#x3059;&#x304C;&#x3001;&#x30D5;&#x30E9;&#x30B0;&#x30E1;&#x30F3;&#x30C8;&#x3092;&#x518D;&#x69CB;&#x7BC9;&#x3059;&#x308B;\n&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30B5;&#x30A4;&#x30BA;&#x306F;&#x6700;&#x4F4E; <code>1500</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x304C;&#x5FC5;&#x8981;&#x3067;&#x3059;&#x3002;\n<code>68</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x306F;&#x3068;&#x3066;&#x3082;&#x5C0F;&#x3055;&#x3044;&#x306E;&#x3067;&#x3001;&#x3082;&#x3063;&#x3068;&#x3082;&#x73FE;&#x4EE3;&#x7684;&#x306A;&#x30EA;&#x30F3;&#x30AF;&#x5C64;&#x6280;&#x8853;&#x3067;&#x306F;&#x3001;\n&#x6700;&#x5C0F;&#x306E; <code>MTU</code> &#x306F; <code>1500</code> &#x3067;&#x3059; (&#x30A4;&#x30FC;&#x30B5;&#x30CD;&#x30C3;&#x30C8;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;)&#x3002;</p>\n</li>\n</ul>\n<p>&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x901A;&#x904E;&#x3059;&#x308B;&#x5404;&#x30EA;&#x30F3;&#x30AF;&#x306E; MTU &#x3092;&#x3042;&#x3089;&#x304B;&#x3058;&#x3081;&#x77E5;&#x308B;&#x3053;&#x3068;&#x306F;\n&#x3067;&#x304D;&#x306A;&#x3044;&#x3053;&#x3068;&#x3001;(&#x53D7;&#x4FE1;&#x5074;&#x306E;) <code>MTU</code> &#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x3066;&#x3082;\n&#x901A;&#x5E38;&#x306F;&#x52D5;&#x4F5C;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;\n(&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x9001;&#x308A;&#x4E3B;&#x306B;&#x77E5;&#x3089;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F;&#x9ED9;&#x3063;&#x3066;&#x6368;&#x3066;&#x3089;&#x308C;&#x3001;\n&#x610F;&#x56F3;&#x3057;&#x305F;&#x53D7;&#x4FE1;&#x8005;&#x306B;&#x5230;&#x9054;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;)&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;buf&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;length&quot;
                    },
                    {
                      &quot;name&quot;: &quot;port&quot;
                    },
                    {
                      &quot;name&quot;: &quot;address&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.bind(port, [address], [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;bind&quot;,
              &quot;desc&quot;: &quot;<!--\n* `port` Integer\n* `address` String, Optional\n* `callback` Function with no parameters, Optional. Callback when\n  binding is done.\n-->\n\n<ul>\n<li><code>port</code> Integer</li>\n<li><code>address</code> String&#x3001;&#x4EFB;&#x610F;</li>\n<li><code>callback</code> &#x5F15;&#x6570;&#x306E;&#x306A;&#x3044;&#x95A2;&#x6570;&#x3001;&#x4EFB;&#x610F;&#x3002;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x6642;&#x306B;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nFor UDP sockets, listen for datagrams on a named `port` and optional\n`address`. If `address` is not specified, the OS will try to listen on\nall addresses.  After binding is done, a \"listening\" event is emitted\nand the `callback`(if specified) is called. Specifying both a\n\"listening\" event listener and `callback` is not harmful but not very\nuseful.\n-->\n\n<p>UDP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x3001;<code>port</code> &#x3068;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>address</code> &#x3067;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x3092;\n&#x5F85;&#x3061;&#x53D7;&#x3051;&#x307E;&#x3059;&#x3002;\n<code>address</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;OS &#x306F;&#x5168;&#x3066;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x304B;&#x3089;&#x306E;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x3092;&#x8A66;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x5B8C;&#x4E86;&#x3059;&#x308B;&#x3068;&#x3001;<code>&apos;listening&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x3001;\n(&#x3082;&#x3057;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;) <code>callback</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>&apos;listening&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EA;&#x30B9;&#x30CA;&#x3068; <code>callback</code> &#x306E;&#x4E21;&#x65B9;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x3066;&#x3082;&#x6709;&#x5BB3;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x304C;\n&#x3042;&#x307E;&#x308A;&#x5F79;&#x306B;&#x306F;&#x7ACB;&#x3061;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nA bound datagram socket keeps the node process running to receive\ndatagrams.\n-->\n\n<p>&#x675F;&#x7E1B;&#x3055;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x53D7;&#x4FE1;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B; node &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;\n&#x5B9F;&#x884C;&#x3092;&#x7DAD;&#x6301;&#x3057;&#x7D9A;&#x3051;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf binding fails, an \"error\" event is generated. In rare case (e.g.\nbinding a closed socket), an `Error` may be thrown by this method.\n-->\n\n<p>&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x304C;&#x5931;&#x6557;&#x3059;&#x308B;&#x3068;&#x3001;<code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x307E;&#x308C;&#x306A;&#x30B1;&#x30FC;&#x30B9; (&#x305F;&#x3068;&#x3048;&#x3070;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3078;&#x306E;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;) &#x3067;&#x306F;&#x3001;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; <code>Error</code> &#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of a UDP server listening on port 41234:\n-->\n\n<p>41234 &#x756A;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x308B; UDP &#x30B5;&#x30FC;&#x30D0;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>var dgram = require(&quot;dgram&quot;);\n\nvar server = dgram.createSocket(&quot;udp4&quot;);\n\nserver.on(&quot;error&quot;, function (err) {\n  console.log(&quot;server error:\\n&quot; + err.stack);\n  server.close();\n});\n\nserver.on(&quot;message&quot;, function (msg, rinfo) {\n  console.log(&quot;server got: &quot; + msg + &quot; from &quot; +\n    rinfo.address + &quot;:&quot; + rinfo.port);\n});\n\nserver.on(&quot;listening&quot;, function () {\n  var address = server.address();\n  console.log(&quot;server listening &quot; +\n      address.address + &quot;:&quot; + address.port);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;port&quot;
                    },
                    {
                      &quot;name&quot;: &quot;address&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.close()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nClose the underlying socket and stop listening for data on it.\n-->\n\n<p>&#x4E0B;&#x5C64;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.address()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;address&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns an object containing the address information for a socket.  For UDP sockets,\nthis object will contain `address` , `family` and `port`.\n-->\n\n<p>&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C;&#x6301;&#x3063;&#x3066;&#x3044;&#x308B;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x60C5;&#x5831;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; <code>address</code>&#x3001;<code>port</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>family</code> &#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.setBroadcast(flag)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setBroadcast&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`flag` Boolean &quot;,
                      &quot;name&quot;: &quot;flag&quot;,
                      &quot;desc&quot;: &quot;Boolean&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;flag&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nSets or clears the `SO_BROADCAST` socket option.  When this option is set, UDP packets\nmay be sent to a local interface's broadcast address.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3; <code>SO_BROADCAST</code> &#x3092;&#x8A2D;&#x5B9A;&#x307E;&#x305F;&#x306F;&#x30AF;&#x30EA;&#x30A2;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;UDP &#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306E;&#x30D6;&#x30ED;&#x30FC;&#x30C9;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x7528;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306B;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.setTTL(ttl)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setTTL&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`ttl` Integer &quot;,
                      &quot;name&quot;: &quot;ttl&quot;,
                      &quot;desc&quot;: &quot;Integer&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;ttl&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nSets the `IP_TTL` socket option.  TTL stands for \"Time to Live,\" but in this context it\nspecifies the number of IP hops that a packet is allowed to go through.  Each router or\ngateway that forwards a packet decrements the TTL.  If the TTL is decremented to 0 by a\nrouter, it will not be forwarded.  Changing TTL values is typically done for network\nprobes or when multicasting.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>IP_TTL</code> &#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\nTTL &#x306F;&#x300C;&#x751F;&#x5B58;&#x671F;&#x9593;&#x300D;&#x3092;&#x8868;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;&#x3053;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x306F;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x901A;&#x904E;&#x3092;&#x8A31;&#x53EF;&#x3055;&#x308C;&#x308B; IP &#x306E;&#x30DB;&#x30C3;&#x30D7;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5404;&#x30EB;&#x30FC;&#x30BF;&#x307E;&#x305F;&#x306F;&#x30B2;&#x30FC;&#x30C8;&#x30A6;&#x30A7;&#x30A4;&#x306F;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x9001;&#x51FA;&#x3059;&#x308B;&#x969B; TTL &#x3092;&#x30C7;&#x30AF;&#x30EA;&#x30E1;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30EB;&#x30FC;&#x30BF;&#x306B;&#x3088;&#x3063;&#x3066; TTL &#x304C;&#x30C7;&#x30AF;&#x30EA;&#x30E1;&#x30F3;&#x30C8;&#x3055;&#x308C;&#x3066; 0 &#x306B;&#x306A;&#x308B;&#x3068;&#x305D;&#x308C;&#x306F;&#x9001;&#x51FA;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\nTTL &#x5024;&#x306E;&#x5909;&#x66F4;&#x306F;&#x901A;&#x5E38;&#x3001;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x306E;&#x8ABF;&#x67FB;&#x3084;&#x30DE;&#x30EB;&#x30C1;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x3067;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe argument to `setTTL()` is a number of hops between 1 and 255.  The default on most\nsystems is 64.\n-->\n\n<p><code>setTTL()</code> &#x306E;&#x5F15;&#x6570;&#x306F; 1 &#x304B;&#x3089; 255 &#x306E;&#x30DB;&#x30C3;&#x30D7;&#x6570;&#x3067;&#x3067;&#x3059;&#x3002;&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3067;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 64 &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.setMulticastTTL(ttl)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setMulticastTTL&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`ttl` Integer &quot;,
                      &quot;name&quot;: &quot;ttl&quot;,
                      &quot;desc&quot;: &quot;Integer&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;ttl&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nSets the `IP_MULTICAST_TTL` socket option.  TTL stands for \"Time to Live,\" but in this\ncontext it specifies the number of IP hops that a packet is allowed to go through,\nspecifically for multicast traffic.  Each router or gateway that forwards a packet\ndecrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.\n\nThe argument to `setMulticastTTL()` is a number of hops between 0 and 255.  The default on most\nsystems is 1.\n-->\n\n<p><code>IP_MULTICAST_TTL</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\nTTL &#x306F;&#x300C;&#x751F;&#x5B58;&#x671F;&#x9593;&#x300D;&#x3092;&#x8868;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;&#x3053;&#x306E;&#x6587;&#x8108;&#x3067;&#x306F;&#x7279;&#x306B;&#x30DE;&#x30EB;&#x30C1;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x306E;&#x30C8;&#x30E9;&#x30D5;&#x30A3;&#x30C3;&#x30AF;&#x306B;&#x304A;&#x3044;&#x3066;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x901A;&#x904E;&#x3067;&#x304D;&#x308B;IP&#x30DB;&#x30C3;&#x30D7;&#x306E;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x30EB;&#x30FC;&#x30BF;&#x30FC;&#x307E;&#x305F;&#x306F;&#x30B2;&#x30FC;&#x30C8;&#x30A6;&#x30A7;&#x30A4;&#x306F;&#x3001;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x8EE2;&#x9001;&#x3059;&#x308B;&#x969B;&#x306B; TTL &#x3092;&#x30C7;&#x30AF;&#x30EA;&#x30E1;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\nTTL &#x304C;&#x30EB;&#x30FC;&#x30BF;&#x30FC;&#x306B;&#x3088;&#x3063;&#x3066; 0 &#x307E;&#x3067;&#x30C7;&#x30AF;&#x30EA;&#x30E1;&#x30F3;&#x30C8;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F;&#x8EE2;&#x9001;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>setMulticastTTL()</code> &#x306E;&#x5F15;&#x6570;&#x306F;&#x30DB;&#x30C3;&#x30D7;&#x3092;&#x8868;&#x3059;&#x6570;&#x5024;&#x3067;&#x3001;0 &#x304B;&#x3089; 255 &#x306E;&#x9593;&#x3067;&#x3059;&#x3002;\n&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3067;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 1 &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.setMulticastLoopback(flag)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setMulticastLoopback&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`flag` Boolean &quot;,
                      &quot;name&quot;: &quot;flag&quot;,
                      &quot;desc&quot;: &quot;Boolean&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;flag&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nSets or clears the `IP_MULTICAST_LOOP` socket option.  When this option is set, multicast\npackets will also be received on the local interface.\n-->\n\n<p><code>IP_MULTICAST_LOOP</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x8A2D;&#x5B9A;&#x307E;&#x305F;&#x306F;&#x30AF;&#x30EA;&#x30A2;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30DE;&#x30EB;&#x30C1;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x306E;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3067;&#x3082;&#x53D7;&#x4FE1;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.addMembership(multicastAddress, [multicastInterface])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;addMembership&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`multicastAddress` String &quot;,
                      &quot;name&quot;: &quot;multicastAddress&quot;,
                      &quot;desc&quot;: &quot;String&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`multicastInterface` String, Optional &quot;,
                      &quot;name&quot;: &quot;multicastInterface&quot;,
                      &quot;optional&quot;: true,
                      &quot;desc&quot;: &quot;String&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;multicastAddress&quot;
                    },
                    {
                      &quot;name&quot;: &quot;multicastInterface&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nTells the kernel to join a multicast group with `IP_ADD_MEMBERSHIP` socket option.\n\nIf `multicastInterface` is not specified, the OS will try to add membership to all valid\ninterfaces.\n-->\n\n<p><code>IP_ADD_MEMBERSHIP</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x3001;&#x30DE;&#x30EB;&#x30C1;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x306B;&#x53C2;&#x52A0;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x30AB;&#x30FC;&#x30CD;&#x30EB;&#x306B;&#x4F1D;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>multicastInterface</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5168;&#x3066;&#x306E;&#x59A5;&#x5F53;&#x306A;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x30E1;&#x30F3;&#x30D0;&#x30FC;&#x30B7;&#x30C3;&#x30D7;&#x306B;&#x52A0;&#x3048;&#x3088;&#x3046;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.dropMembership(multicastAddress, [multicastInterface])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;dropMembership&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`multicastAddress` String &quot;,
                      &quot;name&quot;: &quot;multicastAddress&quot;,
                      &quot;desc&quot;: &quot;String&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`multicastInterface` String, Optional &quot;,
                      &quot;name&quot;: &quot;multicastInterface&quot;,
                      &quot;optional&quot;: true,
                      &quot;desc&quot;: &quot;String&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;multicastAddress&quot;
                    },
                    {
                      &quot;name&quot;: &quot;multicastInterface&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nOpposite of `addMembership` - tells the kernel to leave a multicast group with\n`IP_DROP_MEMBERSHIP` socket option. This is automatically called by the kernel\nwhen the socket is closed or process terminates, so most apps will never need to call\nthis.\n\nIf `multicastInterface` is not specified, the OS will try to drop membership to all valid\ninterfaces.\n-->\n\n<p><code>addMembership</code> &#x306E;&#x53CD;&#x5BFE;&#x3067;&#x3059; - <code>IP_DROP_MEMBERSHIP</code> &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;&#x30DE;&#x30EB;&#x30C1;&#x30AD;&#x30E3;&#x30B9;&#x30C8;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x304B;&#x3089;&#x629C;&#x3051;&#x308B;&#x3053;&#x3068;&#x3092;&#x30AB;&#x30FC;&#x30CD;&#x30EB;&#x306B;&#x4F1D;&#x3048;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x6642;&#x3084;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x7D42;&#x4E86;&#x6642;&#x306B;&#x30AB;&#x30FC;&#x30CD;&#x30EB;&#x306B;&#x3088;&#x3063;&#x3066;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;&#x3001;&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x3053;&#x308C;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<p><code>multicastInterface</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5168;&#x3066;&#x306E;&#x59A5;&#x5F53;&#x306A;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x30E1;&#x30F3;&#x30D0;&#x30FC;&#x30B7;&#x30C3;&#x30D7;&#x304B;&#x3089;&#x524A;&#x9664;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;socket.unref()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;unref&quot;,
              &quot;desc&quot;: &quot;<!--\nCalling `unref` on a socket will allow the program to exit if this is the only\nactive socket in the event system. If the socket is already `unref`d calling\n`unref` again will have no effect.\n-->\n\n<p>&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x304A;&#x3044;&#x3066;&#x3001;&#x3053;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3060;&#x3051;&#x304C;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x5834;&#x5408;&#x306B;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;\n&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;<code>unref</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x65E2;&#x306B; <code>unref</code> &#x3055;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x518D;&#x3073; <code>unref</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x5F71;&#x97FF;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;socket.ref()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;ref&quot;,
              &quot;desc&quot;: &quot;<!--\nOpposite of `unref`, calling `ref` on a previously `unref`d socket will *not*\nlet the program exit if it's the only socket left (the default behavior). If\nthe socket is `ref`d calling `ref` again will have no effect.\n-->\n\n<p><code>unref</code> &#x3068;&#x306F;&#x9006;&#x306B;&#x3001;&#x4EE5;&#x524D;&#x306B; <code>unref</code> &#x3055;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x552F;&#x4E00;&#x6B8B;&#x3063;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x306A;&#x3063;&#x3066;&#x3082;&#x3001;\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x7D42;&#x4E86; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x52D5;&#x4F5C;&#x3067;&#x3059;) &#x3057;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3001;<code>ref</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x65E2;&#x306B; <code>ref</code> &#x3055;&#x308C;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x518D;&#x3073; <code>ref</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3082;&#x5F71;&#x97FF;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;dgram&quot;
    },
    {
      &quot;textRaw&quot;: &quot;DNS&quot;,
      &quot;name&quot;: &quot;dns&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nUse `require('dns')` to access this module. All methods in the dns module\nuse C-Ares except for `dns.lookup` which uses `getaddrinfo(3)` in a thread\npool. C-Ares is much faster than `getaddrinfo` but the system resolver is\nmore consistent with how other programs operate. When a user does\n`net.connect(80, 'google.com')` or `http.get({ host: 'google.com' })` the\n`dns.lookup` method is used. Users who need to do a large number of lookups\nquickly should use the methods that go through C-Ares.\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x306B;&#x306F; <code>require(&apos;dns&apos;)</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\ndns &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x5168;&#x3066;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; C-Ares &#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305F;&#x3060;&#x3057;&#x3001;<code>dns.lookup</code> &#x306F;&#x30B9;&#x30EC;&#x30C3;&#x30C9;&#x30D7;&#x30FC;&#x30EB;&#x4E0A;&#x3067; <code>getaddrinfo(3)</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\nC-Ares &#x306F; <code>getaddrinfo</code> &#x3088;&#x308A;&#x305A;&#x3063;&#x3068;&#x901F;&#x3044;&#x3082;&#x306E;&#x306E;&#x3001;\n&#x4ED6;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3068;&#x9023;&#x643A;&#x3059;&#x308B;&#x306B;&#x306F;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x30EA;&#x30BE;&#x30EB;&#x30D0;&#x306E;&#x65B9;&#x304C;&#x4E00;&#x8CAB;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30E6;&#x30FC;&#x30B6;&#x304C; <code>net.connect(80, &apos;google.com&apos;)</code> &#x307E;&#x305F;&#x306F;\n<code>http.get({ host: &apos;google.com&apos; })</code> &#x3092;&#x884C;&#x3063;&#x305F;&#x6642;&#x3001;<code>dns.lookup</code>\n&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x591A;&#x6570;&#x306E;&#x30EB;&#x30C3;&#x30AF;&#x30A2;&#x30C3;&#x30D7;&#x3092;&#x7D20;&#x65E9;&#x304F;&#x5B9F;&#x884C;&#x3057;&#x305F;&#x3044;&#x30E6;&#x30FC;&#x30B6;&#x306F;&#x3001;\nC-Ares &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nHere is an example which resolves `'www.google.com'` then reverse\nresolves the IP addresses which are returned.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; <code>&apos;www.google.com&apos;</code> &#x3092;&#x89E3;&#x6C7A;&#x3057;&#x3066;&#x3001;&#x8FD4;&#x3055;&#x308C;&#x305F; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3092;&#x9006;&#x5F15;&#x304D;&#x3067;&#x89E3;&#x6C7A;&#x3059;&#x308B;&#x4F8B;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>var dns = require(&apos;dns&apos;);\n\ndns.resolve4(&apos;www.google.com&apos;, function (err, addresses) {\n  if (err) throw err;\n\n  console.log(&apos;addresses: &apos; + JSON.stringify(addresses));\n\n  addresses.forEach(function (a) {\n    dns.reverse(a, function (err, domains) {\n      if (err) {\n        throw err;\n      }\n\n      console.log(&apos;reverse for &apos; + a + &apos;: &apos; + JSON.stringify(domains));\n    });\n  });\n});</code></pre>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;dns.lookup(domain, [family], callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;lookup&quot;,
          &quot;desc&quot;: &quot;<!--\nResolves a domain (e.g. `'google.com'`) into the first found A (IPv4) or\nAAAA (IPv6) record.\nThe `family` can be the integer `4` or `6`. Defaults to `null` that indicates\nboth Ip v4 and v6 address family.\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3; (&#x4F8B; <code>&apos;google.com&apos;</code>) &#x3092;&#x89E3;&#x6C7A;&#x3057;&#x3066;&#x6700;&#x521D;&#x306B;&#x898B;&#x3064;&#x304B;&#x3063;&#x305F;\nA (IPv4) &#x307E;&#x305F;&#x306F; AAAA (IPv6) &#x30EC;&#x30B3;&#x30FC;&#x30C9;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>family</code> &#x306F;&#x6574;&#x6570;&#x306E; <code>4</code> &#x307E;&#x305F;&#x306F; <code>6</code> &#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>null</code> &#x3067;&#x3001;IP v4 &#x3068; v6 &#x306E;&#x4E21;&#x65B9;&#x3092;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x30D5;&#x30A1;&#x30DF;&#x30EA;&#x30FC;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe callback has arguments `(err, address, family)`.  The `address` argument\nis a string representation of a IP v4 or v6 address. The `family` argument\nis either the integer 4 or 6 and denotes the family of `address` (not\nnecessarily the value initially passed to `lookup`).\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x5F15;&#x6570; <code>(err, address, family)</code> &#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n<code>address</code> &#x5F15;&#x6570;&#x306F; IP v4 &#x307E;&#x305F;&#x306F; v6 &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>family</code> &#x5F15;&#x6570;&#x306F;&#x6574;&#x6570;&#x306E; 4 &#x307E;&#x305F;&#x306F; 6 &#x3067;&#x3001;<code>address</code> &#x306E;&#x30D5;&#x30A1;&#x30DF;&#x30EA;&#x30FC;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;\n(&#x3053;&#x306E;&#x5024;&#x306F;&#x5FC5;&#x305A;&#x3057;&#x3082;&#x6700;&#x521D;&#x306B; <code>lookup</code> &#x306B;&#x6E21;&#x3059;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;)&#x3002;\n\n</p>\n<!--\nOn error, `err` is an `Error` object, where `err.code` is the error code.\nKeep in mind that `err.code` will be set to `'ENOENT'` not only when\nthe domain does not exist but also when the lookup fails in other ways\nsuch as no available file descriptors.\n-->\n\n<p>&#x30A8;&#x30E9;&#x30FC;&#x6642;&#x3001;<code>err</code> &#x306F; <code>Error</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3001;<code>err.code</code> &#x306F;&#x30A8;&#x30E9;&#x30FC;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x3059;&#x3002;\n<code>err.code</code> &#x304C; <code>&apos;ENOENT&apos;</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x306E;&#x306F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;&#x3060;&#x3051;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x304C;&#x4F7F;&#x3048;&#x306A;&#x3044;&#x306A;&#x3069;&#x30EB;&#x30C3;&#x30AF;&#x30A2;&#x30C3;&#x30D7;&#x304C;&#x5931;&#x6557;&#x3057;&#x305F;&#x5834;&#x5408;&#x3082;&#x3042;&#x308B;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;domain&quot;
                },
                {
                  &quot;name&quot;: &quot;family&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;dns.resolve(domain, [rrtype], callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolve&quot;,
          &quot;desc&quot;: &quot;<!--\nResolves a domain (e.g. `'google.com'`) into an array of the record types\nspecified by rrtype. Valid rrtypes are `'A'` (IPV4 addresses, default),\n`'AAAA'` (IPV6 addresses), `'MX'` (mail exchange records), `'TXT'` (text\nrecords), `'SRV'` (SRV records), `'PTR'` (used for reverse IP lookups),\n`'NS'` (name server records) and `'CNAME'` (canonical name records).\n-->\n\n<p>&#x30C9;&#x30E1;&#x30A4;&#x30F3; (&#x4F8B; <code>&apos;google.com&apos;</code>) &#x3092;&#x89E3;&#x6C7A;&#x3057;&#x3066; <code>rrtype</code> &#x3067;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30EC;&#x30B3;&#x30FC;&#x30C9;&#x30BF;&#x30A4;&#x30D7;&#x306E;&#x914D;&#x5217;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x59A5;&#x5F53;&#x306A; <code>rrtype</code> &#x306F; <code>&apos;A&apos;</code> (IPV4&#x30A2;&#x30C9;&#x30EC;&#x30B9;)&#x3001;<code>&apos;AAAA&apos;</code> (IPV6&#x30A2;&#x30C9;&#x30EC;&#x30B9;)&#x3001;\n<code>&apos;MX&apos;</code> (mail exchange&#x30EC;&#x30B3;&#x30FC;&#x30C9;), <code>&apos;TXT&apos;</code> (&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x30EC;&#x30B3;&#x30FC;&#x30C9;)&#x3001;\n<code>&apos;SRV&apos;</code> (SRV&#x30EC;&#x30B3;&#x30FC;&#x30C9;)&#x3001;<code>&apos;PTR&apos;</code> (IP &#x3092;&#x9006;&#x5F15;&#x304D;&#x3067;&#x30EB;&#x30C3;&#x30AF;&#x30A2;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x308B;)&#x3001;\n<code>&apos;NS&apos;</code> (&#x30CD;&#x30FC;&#x30E0;&#x30B5;&#x30FC;&#x30D0;&#x30EC;&#x30B3;&#x30FC;&#x30C9;)&#x3001;&#x305D;&#x3057;&#x3066; <code>&apos;CNAME&apos;</code> (&#x5225;&#x540D;&#x30EC;&#x30B3;&#x30FC;&#x30C9;) &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe callback has arguments `(err, addresses)`.  The type of each item\nin `addresses` is determined by the record type, and described in the\ndocumentation for the corresponding lookup methods below.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x5F15;&#x6570; <code>(err, addresses)</code> &#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n<code>addresses</code> &#x306E;&#x5404;&#x8981;&#x7D20;&#x306E;&#x7A2E;&#x985E;&#x306F;&#x30EC;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x7A2E;&#x985E;&#x306B;&#x3088;&#x3063;&#x3066;&#x6C7A;&#x307E;&#x308A;&#x3001;\n&#x5BFE;&#x5FDC;&#x3059;&#x308B;&#x5F8C;&#x8FF0;&#x306E;&#x30EB;&#x30C3;&#x30AF;&#x30A2;&#x30C3;&#x30D7;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3067;&#x8A18;&#x8FF0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nOn error, `err` is an `Error` object, where `err.code` is\none of the error codes listed below.\n-->\n\n<p>&#x30A8;&#x30E9;&#x30FC;&#x6642;&#x3001;<code>err</code> &#x306F; <code>Error</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3001;\n<code>err.errno</code> &#x306F;&#x5F8C;&#x8FF0;&#x3059;&#x308B;&#x30A8;&#x30E9;&#x30FC;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;domain&quot;
                },
                {
                  &quot;name&quot;: &quot;rrtype&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;dns.resolve4(domain, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolve4&quot;,
          &quot;desc&quot;: &quot;<!--\nThe same as `dns.resolve()`, but only for IPv4 queries (`A` records).\n`addresses` is an array of IPv4 addresses (e.g.\n`['74.125.79.104', '74.125.79.105', '74.125.79.106']`).\n-->\n\n<p><code>dns.resolve()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x304C;&#x3001;IPv4 &#x30A2;&#x30C9;&#x30EC;&#x30B9; (<code>A</code> &#x30EC;&#x30B3;&#x30FC;&#x30C9;) &#x3060;&#x3051;&#x3092;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x307E;&#x3059;&#x3002;\n<code>addresses</code> &#x306F; IPv4 &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x306E;&#x914D;&#x5217;&#x3067;&#x3059; (&#x4F8B;<br>\n<code>[&apos;74.125.79.104&apos;, &apos;74.125.79.105&apos;, &apos;74.125.79.106&apos;]</code>)\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;domain&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;dns.resolve6(domain, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolve6&quot;,
          &quot;desc&quot;: &quot;<!--\nThe same as `dns.resolve4()` except for IPv6 queries (an `AAAA` query).\n-->\n\n<p>IPv6 (<code>AAAA</code> &#x30EC;&#x30B3;&#x30FC;&#x30C9;) &#x3092;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x308B;&#x3053;&#x3068;&#x3092;&#x9664;&#x3044;&#x3066; <code>dns.resolve4()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;domain&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;dns.resolveMx(domain, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolveMx&quot;,
          &quot;desc&quot;: &quot;<!--\nThe same as `dns.resolve()`, but only for mail exchange queries (`MX` records).\n-->\n\n<p><code>dns.resolve()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x304C;&#x3001;mail exchange (<code>MX</code> &#x30EC;&#x30B3;&#x30FC;&#x30C9;) &#x3060;&#x3051;&#x3092;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`addresses` is an array of MX records, each with a priority and an exchange\nattribute (e.g. `[{'priority': 10, 'exchange': 'mx.example.com'},...]`).\n-->\n\n<p><code>addresses</code> &#x306F; MX &#x30EC;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x914D;&#x5217;&#x3067;&#x3001;&#x305D;&#x308C;&#x305E;&#x308C;&#x306F; priority &#x3068; exchange &#x306E;&#x5C5E;&#x6027;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;\n(&#x4F8B; <code>[{&apos;priority&apos;: 10, &apos;exchange&apos;: &apos;mx.example.com&apos;},...]</code>)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;domain&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;dns.resolveTxt(domain, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolveTxt&quot;,
          &quot;The same as `dns.resolve()`, but only for text queries (`TXT` records).\n`addresses` is an array of the text records available for `domain` (e.g.,\n`[&apos;v&quot;: &quot;spf1 ip4:0.0.0.0 ~all&apos;]`).&quot;,
          &quot;desc&quot;: &quot;<p><code>dns.resolve()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x304C;&#x3001;&#x30C6;&#x30AD;&#x30B9;&#x30C8; (<code>TXT</code> &#x30EC;&#x30B3;&#x30FC;&#x30C9;) &#x3060;&#x3051;&#x3092;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x307E;&#x3059;&#x3002;\n<code>addresses</code> &#x306F; <code>domain</code> &#x3067;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x30EC;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n(&#x4F8B;&#x3001;<code>[&apos;v=spf1 ip4:0.0.0.0 ~all&apos;]</code>)\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;domain&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;dns.resolveSrv(domain, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolveSrv&quot;,
          &quot;desc&quot;: &quot;<!--\nThe same as `dns.resolve()`, but only for service records (`SRV` records).\n`addresses` is an array of the SRV records available for `domain`. Properties\nof SRV records are priority, weight, port, and name (e.g.,\n`[{'priority': 10, {'weight': 5, 'port': 21223, 'name': 'service.example.com'}, ...]`).\n-->\n\n<p><code>dns.resolve()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x304C;&#x3001;&#x30B5;&#x30FC;&#x30D3;&#x30B9;&#x30EC;&#x30B3;&#x30FC;&#x30C9; (<code>SRV</code> &#x30EC;&#x30B3;&#x30FC;&#x30C9;) &#x3060;&#x3051;&#x3092;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x307E;&#x3059;&#x3002;\n<code>addresses</code> &#x306F; <code>domain</code> &#x3067;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A; SRV &#x30EC;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\nSRV &#x30EC;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F; priority&#x3001;weight&#x3001;port&#x3001;&#x305D;&#x3057;&#x3066; name &#x3067;&#x3059;\n(&#x4F8B; <code>[{&apos;priority&apos;: 10, {&apos;weight&apos;: 5, &apos;port&apos;: 21223, &apos;name&apos;: &apos;service.example.com&apos;}, ...]</code>)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;domain&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;dns.resolveNs(domain, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolveNs&quot;,
          &quot;desc&quot;: &quot;<!--\nThe same as `dns.resolve()`, but only for name server records (`NS` records).\n`addresses` is an array of the name server records available for `domain`\n(e.g., `['ns1.example.com', 'ns2.example.com']`).\n-->\n\n<p><code>dns.resolve()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x304C;&#x3001;&#x30CD;&#x30FC;&#x30E0;&#x30B5;&#x30FC;&#x30D0;&#x30EC;&#x30B3;&#x30FC;&#x30C9; (<code>NS</code> &#x30EC;&#x30B3;&#x30FC;&#x30C9;) \n&#x3060;&#x3051;&#x3092;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x307E;&#x3059;&#x3002;\n<code>address</code> &#x306F; <code>domain</code> &#x3067;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30CD;&#x30FC;&#x30E0;&#x30B5;&#x30FC;&#x30D0;&#x30EC;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x914D;&#x5217;&#x3067;&#x3059;\n(&#x4F8B; <code>[&apos;ns1.example.com&apos;, &apos;ns2.example.com&apos;]</code>)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;domain&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;dns.resolveCname(domain, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolveCname&quot;,
          &quot;desc&quot;: &quot;<!--\nThe same as `dns.resolve()`, but only for canonical name records (`CNAME`\nrecords). `addresses` is an array of the canonical name records available for\n`domain` (e.g., `['bar.example.com']`).\n-->\n\n<p><code>dns.resolve()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x304C;&#x3001;&#x5225;&#x540D;&#x30EC;&#x30B3;&#x30FC;&#x30C9; (<code>CNAME</code> &#x30EC;&#x30B3;&#x30FC;&#x30C9;) \n&#x3060;&#x3051;&#x3092;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x307E;&#x3059;&#x3002;\n<code>address</code> &#x306F; <code>domain</code> &#x3067;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x5225;&#x540D;&#x30EC;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x914D;&#x5217;&#x3067;&#x3059;\n<code>domain</code> (e.g., <code>[&apos;bar.example.com&apos;]</code>)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;domain&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;dns.reverse(ip, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;reverse&quot;,
          &quot;desc&quot;: &quot;<!--\nReverse resolves an ip address to an array of domain names.\n-->\n\n<p>IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x304B;&#x3089;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x540D;&#x306E;&#x914D;&#x5217;&#x3078;&#x9006;&#x5F15;&#x304D;&#x3067;&#x89E3;&#x6C7A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe callback has arguments `(err, domains)`.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x5F15;&#x6570; <code>(err, domains)</code> &#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nOn error, `err` is an `Error` object, where `err.code` is\none of the error codes listed below.\n-->\n\n<p>&#x30A8;&#x30E9;&#x30FC;&#x6642;&#x3001;<code>err</code> &#x306F; <code>Error</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3001;\n<code>err.errno</code> &#x306F;&#x5F8C;&#x8FF0;&#x3059;&#x308B;&#x30A8;&#x30E9;&#x30FC;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;ip&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;modules&quot;: [
        {
          &quot;textRaw&quot;: &quot;Error codes&quot;,
          &quot;name&quot;: &quot;error_codes&quot;,
          &quot;desc&quot;: &quot;<!--\nEach DNS query can return one of the following error codes:\n-->\n\n<p>&#x3069;&#x306E; DNS &#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x3082;&#x4EE5;&#x4E0B;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x4E00;&#x3064;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<!--\n- `dns.NODATA`: DNS server returned answer with no data.\n- `dns.FORMERR`: DNS server claims query was misformatted.\n- `dns.SERVFAIL`: DNS server returned general failure.\n- `dns.NOTFOUND`: Domain name not found.\n- `dns.NOTIMP`: DNS server does not implement requested operation.\n- `dns.REFUSED`: DNS server refused query.\n- `dns.BADQUERY`: Misformatted DNS query.\n- `dns.BADNAME`: Misformatted domain name.\n- `dns.BADFAMILY`: Unsupported address family.\n- `dns.BADRESP`: Misformatted DNS reply.\n- `dns.CONNREFUSED`: Could not contact DNS servers.\n- `dns.TIMEOUT`: Timeout while contacting DNS servers.\n- `dns.EOF`: End of file.\n- `dns.FILE`: Error reading file.\n- `dns.NOMEM`: Out of memory.\n- `dns.DESTRUCTION`: Channel is being destroyed.\n- `dns.BADSTR`: Misformatted string.\n- `dns.BADFLAGS`: Illegal flags specified.\n- `dns.NONAME`: Given hostname is not numeric.\n- `dns.BADHINTS`: Illegal hints flags specified.\n- `dns.NOTINITIALIZED`: c-ares library initialization not yet performed.\n- `dns.LOADIPHLPAPI`: Error loading iphlpapi.dll.\n- `dns.ADDRGETNETWORKPARAMS`: Could not find GetNetworkParams function.\n- `dns.CANCELLED`: DNS query cancelled.\n-->\n\n<ul>\n<li><code>dns.NODATA</code>: DNS &#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x306A;&#x3044;&#x3068;&#x5FDC;&#x7B54;&#x3057;&#x305F;&#x3002;</li>\n<li><code>dns.FORMERR</code>: DNS &#x30B5;&#x30FC;&#x30D0;&#x304C;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x304C;&#x4E0D;&#x6B63;&#x3060;&#x3068;&#x4E3B;&#x5F35;&#x3057;&#x305F;&#x3002;</li>\n<li><code>dns.SERVFAIL</code>: DNS &#x30B5;&#x30FC;&#x30D0;&#x304C;&#x4E00;&#x822C;&#x7684;&#x306A;&#x5931;&#x6557;&#x3092;&#x8FD4;&#x3057;&#x305F;&#x3002;</li>\n<li><code>dns.NOTFOUND</code>: &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x540D;&#x304C;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x3044;&#x3002;</li>\n<li><code>dns.NOTIMP</code>: DNS &#x30B5;&#x30FC;&#x30D0;&#x306F;&#x8981;&#x6C42;&#x3055;&#x308C;&#x305F;&#x64CD;&#x4F5C;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x3044;&#x306A;&#x3044;&#x3002;</li>\n<li><code>dns.REFUSED</code>: DNS &#x30B5;&#x30FC;&#x30D0;&#x304C;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x3092;&#x62D2;&#x5426;&#x3057;&#x305F;&#x3002;</li>\n<li><code>dns.BADQUERY</code>: DNS &#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x306E;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x304C;&#x4E0D;&#x6B63;&#x3002;</li>\n<li><code>dns.BADNAME</code>: &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x540D;&#x306E;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x304C;&#x4E0D;&#x6B63;&#x3002;</li>\n<li><code>dns.BADFAMILY</code>: &#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x306A;&#x3044;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x30D5;&#x30A1;&#x30DF;&#x30EA;&#x30FC;&#x3002;</li>\n<li><code>dns.BADRESP</code>: DNS &#x5FDC;&#x7B54;&#x306E;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x304C;&#x4E0D;&#x6B63;&#x3002;</li>\n<li><code>dns.CONNREFUSED</code>: DNS &#x30B5;&#x30FC;&#x30D0;&#x306B;&#x63A5;&#x7D9A;&#x3067;&#x304D;&#x306A;&#x3044;&#x3002;</li>\n<li><code>dns.TIMEOUT</code>: DNS &#x30B5;&#x30FC;&#x30D0;&#x3078;&#x306E;&#x63A5;&#x7D9A;&#x304C;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3057;&#x305F;&#x3002;</li>\n<li><code>dns.EOF</code>: &#x30A8;&#x30F3;&#x30C9;&#x30AA;&#x30D6;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3002;</li>\n<li><code>dns.FILE</code>: &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x304C;&#x30A8;&#x30E9;&#x30FC;&#x3002;</li>\n<li><code>dns.NOMEM</code>: &#x30E1;&#x30E2;&#x30EA;&#x4E0D;&#x8DB3;&#x3002;</li>\n<li><code>dns.DESTRUCTION</code>: &#x30C1;&#x30E3;&#x30CD;&#x30EB;&#x304C;&#x58CA;&#x308C;&#x3066;&#x3044;&#x308B;&#x3002;</li>\n<li><code>dns.BADSTR</code>: &#x6587;&#x5B57;&#x5217;&#x306E;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x304C;&#x4E0D;&#x6B63;&#x3002;</li>\n<li><code>dns.BADFLAGS</code>: &#x4E0D;&#x6B63;&#x306A;&#x30D5;&#x30E9;&#x30B0;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x3002;</li>\n<li><code>dns.NONAME</code>: &#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30DB;&#x30B9;&#x30C8;&#x540D;&#x304C;&#x6570;&#x5024;&#x3067;&#x306F;&#x306A;&#x3044;&#x3002;</li>\n<li><code>dns.BADHINTS</code>: &#x4E0D;&#x6B63;&#x306A;&#x30D2;&#x30F3;&#x30C8;&#x30D5;&#x30E9;&#x30B0;&#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x3002;</li>\n<li><code>dns.NOTINITIALIZED</code>: c-ares &#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x304C;&#x521D;&#x671F;&#x5316;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x3002;</li>\n<li><code>dns.LOADIPHLPAPI</code>: iphlpapi.dll &#x306E;&#x30ED;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067;&#x30A8;&#x30E9;&#x30FC;&#x3002;</li>\n<li><code>dns.ADDRGETNETWORKPARAMS</code>: GetNetworkParams &#x95A2;&#x6570;&#x304C;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x3044;&#x3002;</li>\n<li><code>dns.CANCELLED</code>: DNS &#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x304C;&#x30AD;&#x30E3;&#x30F3;&#x30BB;&#x30EB;&#x3055;&#x308C;&#x305F;&#x3002;</li>\n</ul>\n&quot;,
          &quot;type&quot;: &quot;module&quot;,
          &quot;displayName&quot;: &quot;Error codes&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;DNS&quot;
    },
    {
      &quot;textRaw&quot;: &quot;HTTP&quot;,
      &quot;name&quot;: &quot;http&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nTo use the HTTP server and client one must `require('http')`.\n-->\n\n<p>HTTP &#x30B5;&#x30FC;&#x30D0;&#x304A;&#x3088;&#x3073;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x306B;&#x306F;&#x3044;&#x305A;&#x308C;&#x3082; <code>require(&apos;http&apos;)</code> &#x304C;&#x5FC5;&#x8981;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe HTTP interfaces in Node are designed to support many features\nof the protocol which have been traditionally difficult to use.\nIn particular, large, possibly chunk-encoded, messages. The interface is\ncareful to never buffer entire requests or responses--the\nuser is able to stream data.\n-->\n\n<p>Node &#x306E; HTTP &#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;&#x3001;\n&#x4F1D;&#x7D71;&#x7684;&#x306B;&#x6271;&#x3044;&#x304C;&#x96E3;&#x3057;&#x304B;&#x3063;&#x305F;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x306E;&#x591A;&#x304F;&#x306E;&#x6A5F;&#x80FD;&#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x3068;&#x308A;&#x308F;&#x3051;&#x5927;&#x304D;&#x304F;&#x3066;&#x3001;&#x5834;&#x5408;&#x306B;&#x3088;&#x3063;&#x3066;&#x306F;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x5316;&#x3055;&#x308C;&#x305F;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3067;&#x3059;&#x3002;\n&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;&#x6C7A;&#x3057;&#x3066;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x307E;&#x305F;&#x306F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x5168;&#x4F53;&#x3092;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3057;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x6C17;&#x3092;&#x3064;&#x3051;&#x3066;&#x3044;&#x307E;&#x3059;\n&#xFF0D; &#x5229;&#x7528;&#x8005;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nHTTP message headers are represented by an object like this:\n-->\n\n<p>HTTP &#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x30D8;&#x30C3;&#x30C0;&#x306F;&#x3053;&#x306E;&#x3088;&#x3046;&#x306A;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x3057;&#x3066;&#x8868;&#x73FE;&#x3055;&#x308C;&#x307E;&#x3059;:\n\n</p>\n<pre><code>{ &apos;content-length&apos;: &apos;123&apos;,\n  &apos;content-type&apos;: &apos;text/plain&apos;,\n  &apos;connection&apos;: &apos;keep-alive&apos;,\n  &apos;accept&apos;: &apos;*/*&apos; }</code></pre>\n<!--\nKeys are lowercased. Values are not modified.\n-->\n\n<p>&#x30AD;&#x30FC;&#x306F;&#x5C0F;&#x6587;&#x5B57;&#x5316;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x5024;&#x306F;&#x5909;&#x66F4;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nIn order to support the full spectrum of possible HTTP applications, Node's\nHTTP API is very low-level. It deals with stream handling and message\nparsing only. It parses a message into headers and body but it does not\nparse the actual headers or the body.\n-->\n\n<p>&#x8003;&#x3048;&#x3089;&#x308C;&#x308B; HTTP &#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x5B8C;&#x5168;&#x306B;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;\nNode &#x306E; HTTP API &#x306F;&#x3068;&#x3066;&#x3082;&#x4F4E;&#x6C34;&#x6E96;&#x3067;&#x3059;&#x3002;&#x305D;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30EA;&#x30F3;&#x30B0;&#x3068;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x306E;&#x89E3;&#x6790;&#x3060;&#x3051;&#x306B;&#x5BFE;&#x51E6;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x89E3;&#x6790;&#x306F;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x30D8;&#x30C3;&#x30C0;&#x3068;&#x30DC;&#x30C7;&#x30A3;&#x306B;&#x5206;&#x3051;&#x307E;&#x3059;&#x304C;&#x3001;&#x5B9F;&#x969B;&#x306E;&#x30D8;&#x30C3;&#x30C0;&#x3068;&#x30DC;&#x30C7;&#x30A3;&#x306F;&#x89E3;&#x6790;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n\n</p>\n&quot;,
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;`STATUS_CODES` {Object} &quot;,
          &quot;name&quot;: &quot;STATUS_CODES&quot;,
          &quot;A collection of all the standard HTTP response status codes, and the\nshort description of each.  For example, `http.STATUS_CODES[404]&quot;: &quot;== &apos;Not\nFound&apos;`.&quot;,
          &quot;desc&quot;: &quot;<p>&#x5168;&#x3066;&#x306E; HTTP &#x6A19;&#x6E96;&#x30B9;&#x30C6;&#x30FC;&#x30BF;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x3068;&#x77ED;&#x3044;&#x8AAC;&#x660E;&#x306E;&#x30B3;&#x30EC;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3059;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;<code>http.STATUS_CODES[404] === &apos;Not Found&apos;</code>&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;http.globalAgent&quot;,
          &quot;name&quot;: &quot;globalAgent&quot;,
          &quot;desc&quot;: &quot;<!--\nGlobal instance of Agent which is used as the default for all http client\nrequests.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; HTTP &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3067;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x308B;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E; Agent &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;http.IncomingMessage&quot;,
          &quot;name&quot;: &quot;IncomingMessage&quot;,
          &quot;desc&quot;: &quot;<!--\nAn `IncomingMessage` object is created by [http.Server][] or\n[http.ClientRequest][] and passed as the first argument to the `'request'`\nand `'response'` event respectively. It may be used to access response status,\nheaders and data.\n-->\n\n<p><code>IncomingMessage</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; [http.Server][] &#x307E;&#x305F;&#x306F; [http.ClientRequest][]\n&#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x3001;<code>&apos;request&apos;</code> &#x304A;&#x3088;&#x3073; <code>&apos;response&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;\n&#x6700;&#x521D;&#x306E;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x30B9;&#x30C6;&#x30FC;&#x30BF;&#x30B9;&#x3001;&#x30D8;&#x30C3;&#x30C0;&#x3001;&#x304A;&#x3088;&#x3073;&#x30C7;&#x30FC;&#x30BF;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIt implements the [Readable Stream][] interface, as well as the\nfollowing additional events, methods, and properties.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; [Readable Stream][] &#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306E;&#x5B9F;&#x88C5;&#x3067;&#x3001;\n&#x4EE5;&#x4E0B;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3001;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3001;&#x304A;&#x3088;&#x3073;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x8FFD;&#x52A0;&#x3067;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<p><code>function () { }</code>\n\n</p>\n<!--\nIndicates that the underlaying connection was closed.\nJust like `'end'`, this event occurs only once per response.\n-->\n\n<p>&#x4E0B;&#x5C64;&#x306E;&#x63A5;&#x7D9A;&#x304C;&#x5207;&#x65AD;&#x3055;&#x308C;&#x305F;&#x3053;&#x3068;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>&apos;end&apos;</code> &#x3068;&#x540C;&#x69D8;&#x3001;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x6BCE;&#x306B;&#x4E00;&#x5EA6;&#x3060;&#x3051;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nJust like `'end'`, this event occurs only once per response. See\n[http.ServerResponse][]'s `'close'` event for more information.\n-->\n\n<p><code>&apos;end&apos;</code> &#x306E;&#x3088;&#x3046;&#x306B;&#x3001;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x6BCE;&#x306B;&#x4E00;&#x56DE;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n[http.ServerResponse][] &#x306E; <code>&apos;close&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x60C5;&#x5831;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;message.httpVersion&quot;,
              &quot;name&quot;: &quot;httpVersion&quot;,
              &quot;desc&quot;: &quot;<!--\nIn case of server request, the HTTP version sent by the client. In the case of\nclient response, the HTTP version of the connected-to server.\nProbably either `'1.1'` or `'1.0'`.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x5834;&#x5408;&#x3001;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x9001;&#x4FE1;&#x3057;&#x305F; HTTP &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x3059;&#x3002;\n&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x306E;&#x5834;&#x5408;&#x3001;&#x63A5;&#x7D9A;&#x3057;&#x305F;&#x30B5;&#x30FC;&#x30D0;&#x306E; HTTP &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x3059;&#x3002;\n&#x3044;&#x305A;&#x308C;&#x306E;&#x5834;&#x5408;&#x3082; <code>&apos;1.1&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;1.0&apos;</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nAlso `response.httpVersionMajor` is the first integer and\n`response.httpVersionMinor` is the second.\n-->\n\n<p>&#x540C;&#x69D8;&#x306B; <code>response.httpVersionMajor</code> &#x306F;&#x6700;&#x521D;&#x306E;&#x6574;&#x6570;&#x3001;\n<code>response.httpVersionMinor</code> &#x306F; 2 &#x756A;&#x76EE;&#x306E;&#x6574;&#x6570;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;message.headers&quot;,
              &quot;name&quot;: &quot;headers&quot;,
              &quot;desc&quot;: &quot;<!--\nThe request/response headers object.\n-->\n\n<p>&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#xFF0F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30D8;&#x30C3;&#x30C0;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nRead only map of header names and values. Header names are lower-cased.\nExample:\n-->\n\n<p>&#x30D8;&#x30C3;&#x30C0;&#x540D;&#x3068;&#x5024;&#x306E;&#x30EA;&#x30FC;&#x30C9;&#x30AA;&#x30F3;&#x30EA;&#x30FC;&#x306A;&#x30DE;&#x30C3;&#x30D7;&#x3067;&#x3059;&#x3002;&#x30D8;&#x30C3;&#x30C0;&#x540D;&#x306F;&#x5C0F;&#x6587;&#x5B57;&#x3067;&#x3059;&#x3002;\n&#x4F8B;:\n\n</p>\n<pre><code>// Prints something like:\n//\n// { &apos;user-agent&apos;: &apos;curl/7.22.0&apos;,\n//   host: &apos;127.0.0.1:8000&apos;,\n//   accept: &apos;*/*&apos; }\nconsole.log(request.headers);</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;message.trailers&quot;,
              &quot;name&quot;: &quot;trailers&quot;,
              &quot;desc&quot;: &quot;<!--\nThe request/response trailers object. Only populated after the 'end' event.\n-->\n\n<p>&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#xFF0F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x306E;&#x30C8;&#x30EC;&#x30FC;&#x30E9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n<code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x5F8C;&#x306B;&#x3060;&#x3051;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;message.method&quot;,
              &quot;name&quot;: &quot;method&quot;,
              &quot;desc&quot;: &quot;<!--\n**Only valid for request obtained from [http.Server][].**\n-->\n\n<p><strong> [http.Server][] &#x304B;&#x3089;&#x5F97;&#x305F;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3067;&#x306E;&#x307F;&#x6709;&#x52B9;&#x3067;&#x3059; </strong>\n\n</p>\n<!--\nThe request method as a string. Read only. Example:\n`'GET'`, `'DELETE'`.\n-->\n\n<p>&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x8868;&#x3059;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;&#x53C2;&#x7167;&#x306E;&#x307F;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n&#x4F8B;: <code>&apos;GET&apos;</code>&#x3001;<code>&apos;DELETE&apos;</code>\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;message.url&quot;,
              &quot;name&quot;: &quot;url&quot;,
              &quot;desc&quot;: &quot;<!--\n**Only valid for request obtained from [http.Server][].**\n-->\n\n<p><strong> [http.Server][] &#x304B;&#x3089;&#x5F97;&#x305F;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3067;&#x306E;&#x307F;&#x6709;&#x52B9;&#x3067;&#x3059; </strong>\n\n</p>\n<!--\nRequest URL string. This contains only the URL that is\npresent in the actual HTTP request. If the request is:\n-->\n\n<p>&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8; URL &#x3092;&#x8868;&#x3059;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x5B9F;&#x969B;&#x306E; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306B;&#x5B58;&#x5728;&#x3059;&#x308B; URL &#x3060;&#x3051;&#x3092;&#x542B;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;:\n\n</p>\n<pre><code>GET /status?name=ryan HTTP/1.1\\r\\n\nAccept: text/plain\\r\\n\n\\r\\n</code></pre>\n<!--\nThen `request.url` will be:\n-->\n\n<p>&#x3053;&#x306E;&#x5834;&#x5408;&#x306E; <code>request.url</code> &#x306F;&#x3053;&#x3046;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<pre><code>&apos;/status?name=ryan&apos;</code></pre>\n<!--\nIf you would like to parse the URL into its parts, you can use\n`require('url').parse(request.url)`.  Example:\n-->\n\n<p>URL &#x306E;&#x8981;&#x7D20;&#x3092;&#x89E3;&#x6790;&#x3057;&#x305F;&#x3044;&#x5834;&#x5408;&#x306F;&#x3001;\n<code>require(&apos;url&apos;).parse(request.url)</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>node&gt; require(&apos;url&apos;).parse(&apos;/status?name=ryan&apos;)\n{ href: &apos;/status?name=ryan&apos;,\n  search: &apos;?name=ryan&apos;,\n  query: &apos;name=ryan&apos;,\n  pathname: &apos;/status&apos; }</code></pre>\n<!--\nIf you would like to extract the params from the query string,\nyou can use the `require('querystring').parse` function, or pass\n`true` as the second argument to `require('url').parse`.  Example:\n-->\n\n<p>&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x6587;&#x5B57;&#x5217;&#x304B;&#x3089;&#x30D1;&#x30E9;&#x30E1;&#x30FC;&#x30BF;&#x3092;&#x53D6;&#x308A;&#x51FA;&#x3057;&#x305F;&#x3044;&#x5834;&#x5408;&#x306F;&#x3001;\n<code>require(&apos;querystring&apos;).parse</code> &#x95A2;&#x6570;&#x3092;&#x53C2;&#x7167;&#x3059;&#x308B;&#x304B;&#x3001;\n<code>require(&apos;url&apos;).parse</code> &#x306E;&#x7B2C; 2 &#x5F15;&#x6570;&#x306B; <code>true</code> &#x3092;&#x6E21;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>node&gt; require(&apos;url&apos;).parse(&apos;/status?name=ryan&apos;, true)\n{ href: &apos;/status?name=ryan&apos;,\n  search: &apos;?name=ryan&apos;,\n  query: { name: &apos;ryan&apos; },\n  pathname: &apos;/status&apos; }</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;message.statusCode&quot;,
              &quot;name&quot;: &quot;statusCode&quot;,
              &quot;desc&quot;: &quot;<!--\n**Only valid for response obtained from `http.ClientRequest`.**\n-->\n\n<p><strong> <code>http.ClientRequest</code> &#x304B;&#x3089;&#x5F97;&#x305F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x3067;&#x306E;&#x307F;&#x6709;&#x52B9;&#x3067;&#x3059; </strong>\n\n</p>\n<!--\nThe 3-digit HTTP response status code. E.G. `404`.\n-->\n\n<p>3 &#x6841;&#x306E;&#x6570;&#x5B57;&#x306B;&#x3088;&#x308B;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x306E;&#x30B9;&#x30C6;&#x30FC;&#x30BF;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x3059;&#x3002;&#x4F8B;&#x3048;&#x3070; <code>404</code>&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;message.socket&quot;,
              &quot;name&quot;: &quot;socket&quot;,
              &quot;desc&quot;: &quot;<!--\nThe `net.Socket` object associated with the connection.\n-->\n\n<p>&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x95A2;&#x9023;&#x3065;&#x3051;&#x3089;&#x308C;&#x305F; <code>net.Socket</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nWith HTTPS support, use request.connection.verifyPeer() and\nrequest.connection.getPeerCertificate() to obtain the client's\nauthentication details.\n-->\n\n<p>HTTPS &#x3067;&#x306F; <code>request.connection.verifyPeer()</code> &#x3068;\n<code>request.connection.getPeerCertificate()</code> &#x3067;\n&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x8A8D;&#x8A3C;&#x306E;&#x8A73;&#x7D30;&#x3092;&#x53D6;&#x5F97;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;message.setTimeout(msecs, callback)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setTimeout&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`msecs` {Number} &quot;,
                      &quot;name&quot;: &quot;msecs&quot;,
                      &quot;type&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`callback` {Function} &quot;,
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;type&quot;: &quot;Function&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;msecs&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nCalls `message.connection.setTimeout(msecs, callback)`.\n-->\n\n<p><code>message.connection.setTimeout(msecs, callback)</code> &#x3092;&#x547C;&#x3073;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;http.createServer([requestListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createServer&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new web server object.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044; Web &#x30B5;&#x30FC;&#x30D0;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `requestListener` is a function which is automatically\nadded to the `'request'` event.\n-->\n\n<p><code>requestListener</code> &#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B; <code>&apos;request&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x52A0;&#x3048;&#x3089;&#x308C;&#x308B;&#x95A2;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;requestListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;http.createClient([port], [host])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createClient&quot;,
          &quot;desc&quot;: &quot;<!--\nThis function is **deprecated**; please use [http.request()][] instead.\nConstructs a new HTTP client. `port` and `host` refer to the server to be\nconnected to.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; <strong>deprecated</strong> &#x3067;&#x3059;; &#x4EE3;&#x308F;&#x308A;&#x306B;\n[http.request()][] &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x65B0;&#x3057;&#x3044; HTTP &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3092;&#x69CB;&#x7BC9;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>port</code> &#x3068; <code>host</code> &#x306F;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;port&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;host&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;http.request(options, [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;request&quot;,
          &quot;desc&quot;: &quot;<!--\nNode maintains several connections per server to make HTTP requests.\nThis function allows one to transparently issue requests.\n-->\n\n<p>Node &#x306F; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x884C;&#x3046;&#x305F;&#x3081;&#x306B;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x3054;&#x3068;&#x306B;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;\n&#x4FDD;&#x6301;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x305D;&#x306E;&#x4E00;&#x3064;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x900F;&#x904E;&#x7684;&#x306B;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x767A;&#x884C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`options` can be an object or a string. If `options` is a string, it is\nautomatically parsed with [url.parse()][].\n-->\n\n<p><code>options</code> &#x306F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>options</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F; [url.parse()][] &#x306B;&#x3088;&#x3063;&#x3066;&#x81EA;&#x52D5;&#x7684;&#x306B;\n&#x89E3;&#x6790;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nOptions:\n-->\n\n<p>&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;:\n\n</p>\n<!--\n- `host`: A domain name or IP address of the server to issue the request to.\n  Defaults to `'localhost'`.\n- `hostname`: To support `url.parse()` `hostname` is preferred over `host`\n- `port`: Port of remote server. Defaults to 80.\n- `localAddress`: Local interface to bind for network connections.\n- `socketPath`: Unix Domain Socket (use one of host:port or socketPath)\n- `method`: A string specifying the HTTP request method. Defaults to `'GET'`.\n- `path`: Request path. Defaults to `'/'`. Should include query string if any.\n  E.G. `'/index.html?page=12'`\n- `headers`: An object containing request headers.\n- `auth`: Basic authentication i.e. `'user:password'` to compute an\n  Authorization header.\n- `agent`: Controls [Agent][] behavior. When an Agent is used request will\n  default to `Connection: keep-alive`. Possible values:\n - `undefined` (default): use [global Agent][] for this host and port.\n - `Agent` object: explicitly use the passed in `Agent`.\n - `false`: opts out of connection pooling with an Agent, defaults request to\n   `Connection: close`.\n-->\n\n<ul>\n<li><code>host</code>: &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x767A;&#x884C;&#x3059;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x540D;&#x307E;&#x305F;&#x306F; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3002;</li>\n<li><code>hostname</code>: <code>url.parse()</code> &#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3002;<code>hostname</code> &#x306F; <code>host</code> &#x3092;&#x4E0A;&#x66F8;&#x304D;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>port</code>: &#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30DD;&#x30FC;&#x30C8;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 80 &#x3067;&#x3059;&#x3002;</li>\n<li><code>localAddress</code>: &#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x63A5;&#x7D9A;&#x3092;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3059;&#x308B;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3067;&#x3059;&#x3002;</li>\n<li><code>socketPath</code>: Unix &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8; (host:port &#x307E;&#x305F;&#x306F; socketPath &#x306E;&#x3069;&#x3061;&#x3089;&#x304B;)</li>\n<li><code>method</code>: HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306E;&#x6587;&#x5B57;&#x5217;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;GET&apos;</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>path</code>: &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30D1;&#x30B9;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;/&apos;</code> &#x3067;&#x3059;&#x3002;\n&#x5FC5;&#x8981;&#x306A;&#x3089;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x542B;&#x3081;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#xFF0E;\n&#x4F8B; <code>&apos;/index.html?page=12&apos;</code></li>\n<li><code>headers</code>: &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x542B;&#x3080;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3002;</li>\n<li><code>auth</code>: &#x30D9;&#x30FC;&#x30B7;&#x30C3;&#x30AF;&#x8A8D;&#x8A3C;&#x3059;&#x306A;&#x308F;&#x3061; Authorization &#x30D8;&#x30C3;&#x30C0;&#x306E;&#x305F;&#x3081;&#x306E;\n<code>&apos;user:password&apos;</code>&#x3002;</li>\n<li><code>agent</code>: [Agent][] &#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x3092;&#x5236;&#x5FA1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;Connection:keep-alive &#x304C;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x53EF;&#x80FD;&#x306A;&#x5024;&#x306F;:<ul>\n<li><code>undefined</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;): &#x30DB;&#x30B9;&#x30C8;&#x3068;&#x30DD;&#x30FC;&#x30C8;&#x3067; [global Agent][] &#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>Agent</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;: &#x660E;&#x793A;&#x7684;&#x306B;&#x6E21;&#x3055;&#x308C;&#x305F; <code>Agent</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>false</code>: Agent &#x306B;&#x3088;&#x308B;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x30D7;&#x30FC;&#x30EA;&#x30F3;&#x30B0;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n Connection:close &#x306E;&#x5834;&#x5408;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x3059;&#x3002;</li>\n</ul>\n</li>\n</ul>\n<!--\nThe optional `callback` parameter will be added as a one time listener for\nthe ['response'][] event.\n-->\n\n<p>&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>callback</code> &#x5F15;&#x6570;&#x306F;&#x3001;[&apos;response&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3078;&#x306E;\n&#x4E00;&#x56DE;&#x9650;&#x308A;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`http.request()` returns an instance of the [http.ClientRequest][]\nclass. The `ClientRequest` instance is a writable stream. If one needs to\nupload a file with a POST request, then write to the `ClientRequest` object.\n-->\n\n<p><code>http.request()</code> &#x306F; [http.ClientRequest][] &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>http.ClientRequest</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x306A;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n&#x3082;&#x3057; POST &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3067;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x30A2;&#x30C3;&#x30D7;&#x30ED;&#x30FC;&#x30C9;&#x304C;&#x3057;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;\n<code>http.ClientRequest</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x51FA;&#x529B;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var options = {\n  hostname: &apos;www.google.com&apos;,\n  port: 80,\n  path: &apos;/upload&apos;,\n  method: &apos;POST&apos;\n};\n\nvar req = http.request(options, function(res) {\n  console.log(&apos;STATUS: &apos; + res.statusCode);\n  console.log(&apos;HEADERS: &apos; + JSON.stringify(res.headers));\n  res.setEncoding(&apos;utf8&apos;);\n  res.on(&apos;data&apos;, function (chunk) {\n    console.log(&apos;BODY: &apos; + chunk);\n  });\n});\n\nreq.on(&apos;error&apos;, function(e) {\n  console.log(&apos;problem with request: &apos; + e.message);\n});\n\n// write data to request body\nreq.write(&apos;data\\n&apos;);\nreq.write(&apos;data\\n&apos;);\nreq.end();</code></pre>\n<!--\nNote that in the example `req.end()` was called. With `http.request()` one\nmust always call `req.end()` to signify that you're done with the request -\neven if there is no data being written to the request body.\n-->\n\n<p>&#x3053;&#x306E;&#x4F8B;&#x3067; <code>req.end()</code> &#x304C;&#x547C;&#x3070;&#x308C;&#x3066;&#x3044;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n<code>http.request()</code> &#x3067;&#x306F;&#x3001;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x3053;&#x3068;&#x3092;&#x793A;&#x3059;&#x305F;&#x3081;&#x306B;&#x3001;\n&#x5E38;&#x306B; <code>req.end()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;\n- &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30DC;&#x30C7;&#x30A3;&#x306B;&#x51FA;&#x529B;&#x3059;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x306A;&#x304B;&#x3063;&#x305F;&#x3068;&#x3057;&#x3066;&#x3082;&#x3002;\n\n</p>\n<!--\nIf any error is encountered during the request (be that with DNS resolution,\nTCP level errors, or actual HTTP parse errors) an `'error'` event is emitted\non the returned request object.\n-->\n\n<p>&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x4E2D;&#x306B;&#x4F55;&#x3089;&#x304B;&#x306E;&#x30A8;&#x30E9;&#x30FC; (DNS &#x89E3;&#x6C7A;&#x3001;TCP &#x30EC;&#x30D9;&#x30EB;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x3001;HTTP &#x30D1;&#x30FC;&#x30B9;&#x30A8;&#x30E9;&#x30FC;&#x306A;&#x3069;) &#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3068;&#x3001;&#x623B;&#x308A;&#x5024;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n<!--\nThere are a few special headers that should be noted.\n-->\n\n<p>&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x7279;&#x5225;&#x306A;&#x30D8;&#x30C3;&#x30C0;&#x306B;&#x6CE8;&#x610F;&#x304C;&#x5FC5;&#x8981;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n* Sending a 'Connection: keep-alive' will notify Node that the connection to\n  the server should be persisted until the next request.\n\n* Sending a 'Content-length' header will disable the default chunked encoding.\n\n* Sending an 'Expect' header will immediately send the request headers.\n  Usually, when sending 'Expect: 100-continue', you should both set a timeout\n  and listen for the `continue` event. See RFC2616 Section 8.2.3 for more\n  information.\n\n* Sending an Authorization header will override using the `auth` option\n  to compute basic authentication.\n-->\n\n<ul>\n<li><p>&apos;Connection: keep-alive&apos; &#x306E;&#x9001;&#x4FE1;&#x306F;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x3078;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6B21;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x307E;&#x3067;&#x6301;&#x7D9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092; Node &#x306B;&#x901A;&#x77E5;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p>&apos;Content-length&apos; &#x30D8;&#x30C3;&#x30C0;&#x306E;&#x9001;&#x4FE1;&#x306F;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3092;&#x7121;&#x52B9;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p>&apos;Expect&apos; &#x30D8;&#x30C3;&#x30C0;&#x306E;&#x9001;&#x4FE1;&#x306F;&#x3001;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x5373;&#x6642;&#x306B;&#x9001;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x901A;&#x5E38;&#x3001;&apos;Expect: 100-continue&apos; &#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x3068;&#x3001;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3068; <code>continue</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x307E;&#x3059;&#x3002;&#x8A73;&#x7D30;&#x306F; RFC2616 &#x306E; 8.2.3 &#x7BC0;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</p>\n</li>\n<li><p>Authorization &#x30D8;&#x30C3;&#x30C0;&#x306E;&#x9001;&#x4FE1;&#x306F;&#x3001;<code>auth</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x3088;&#x308B;&#x30D9;&#x30FC;&#x30B7;&#x30C3;&#x30AF;&#x8A8D;&#x8A3C;&#x3092;\n&#x4E0A;&#x66F8;&#x304D;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;http.get(options, [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;get&quot;,
          &quot;desc&quot;: &quot;<!--\nSince most requests are GET requests without bodies, Node provides this\nconvenience method. The only difference between this method and `http.request()`\nis that it sets the method to GET and calls `req.end()` automatically.\n-->\n\n<p>&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306F;&#x672C;&#x6587;&#x306E;&#x306A;&#x3044; GET &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3067;&#x3042;&#x308B;&#x305F;&#x3081;&#x3001;\nNode &#x306F;&#x4FBF;&#x5229;&#x306A;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3068; <code>http.request()</code> &#x306E;&#x9593;&#x306E;&#x9055;&#x3044;&#x306F;&#x3001;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092; GET &#x306B;&#x8A2D;&#x5B9A;&#x3057;&#x3066;\n<code>req.end()</code> &#x3092;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>http.get(&quot;http://www.google.com/index.html&quot;, function(res) {\n  console.log(&quot;Got response: &quot; + res.statusCode);\n}).on(&apos;error&apos;, function(e) {\n  console.log(&quot;Got error: &quot; + e.message);\n});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: http.Server&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;http.Server&quot;,
          &quot;desc&quot;: &quot;<!--\nThis is an [EventEmitter][] with the following events:\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x6301;&#x3064; [EventEmitter][] &#x3067;&#x3059;:\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;request&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;request&quot;,
              &quot;desc&quot;: &quot;<p><code>function (request, response) { }</code>\n\n</p>\n<!--\nEmitted each time there is a request. Note that there may be multiple requests\nper connection (in the case of keep-alive connections).\n-->\n\n<p>&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x5EA6;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3054;&#x3068;&#x306B;&#x8907;&#x6570;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;&#x3042;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;\n(Keep Alive &#x306A;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x5834;&#x5408;)&#x3002;\n\n</p>\n<!--\n `request` is an instance of [http.IncomingMessage][] and `response` is\nan instance of [http.ServerResponse][].\n-->\n\n<p><code>request</code> &#x306F; [http.IncomingMessage][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3001;\n<code>response</code> &#x306F; [http.ServerResponse][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;connection&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;connection&quot;,
              &quot;desc&quot;: &quot;<p><code>function (socket) { }</code>\n\n</p>\n<!--\n When a new TCP stream is established. `socket` is an object of type\n `net.Socket`. Usually users will not want to access this event. In\n particular, the socket will not emit `readable` events because of how\n the protocol parser attaches to the socket. The `socket` can also be\n accessed at `request.connection`.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044; TCP &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x78BA;&#x7ACB;&#x3057;&#x305F;&#x6642;&#x3002;\n<code>socket</code> &#x306F; <code>net.Socket</code> &#x578B;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n&#x901A;&#x5E38;&#x306E;&#x5229;&#x7528;&#x8005;&#x304C;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3057;&#x305F;&#x304F;&#x306A;&#x308B;&#x3053;&#x3068;&#x306F;&#x306A;&#x3044;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n&#x3068;&#x308A;&#x308F;&#x3051;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x30D1;&#x30FC;&#x30B5;&#x306B;&#x30A2;&#x30BF;&#x30C3;&#x30C1;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;&#x3001;\n<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>socket</code> &#x306F; <code>request.connection</code> &#x304B;&#x3089;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<p><code>function () { }</code>\n\n</p>\n<!--\n Emitted when the server closes.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;checkContinue&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;checkContinue&quot;,
              &quot;desc&quot;: &quot;<p><code>function (request, response) { }</code>\n\n</p>\n<!--\nEmitted each time a request with an http Expect: 100-continue is received.\nIf this event isn't listened for, the server will automatically respond\nwith a 100 Continue as appropriate.\n-->\n\n<p>http&#x306E; Expect: 100-continue &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x53D7;&#x4FE1;&#x3059;&#x308B;&#x5EA6;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x76E3;&#x8996;&#x3055;&#x308C;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B; 100 Continue &#x3092;&#x5FDC;&#x7B54;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nHandling this event involves calling [response.writeContinue()][] if the client\nshould continue to send the request body, or generating an appropriate HTTP\nresponse (e.g., 400 Bad Request) if the client should not continue to send the\nrequest body.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x51E6;&#x7406;&#x3059;&#x308B;&#x5834;&#x5408;&#x3001;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30DC;&#x30C7;&#x30A3;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x7D9A;&#x3051;&#x308B;&#x3079;&#x304D;&#x306A;&#x3089;\n[response.writeContinue()][] &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3042;&#x308B;&#x3044;&#x306F;&#x3001;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30DC;&#x30C7;&#x30A3;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x7D9A;&#x3051;&#x308B;&#x3079;&#x304D;&#x3067;&#x306A;&#x3044;&#x306A;&#x3089;&#x3001;\n&#x9069;&#x5207;&#x306A; HTTP &#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9; (&#x4F8B;&#x3048;&#x3070; 400 Bad Request) &#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that when this event is emitted and handled, the `request` event will\nnot be emitted.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x3066;&#x51E6;&#x7406;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;<code>request</code>&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;connect&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;connect&quot;,
              &quot;desc&quot;: &quot;<p><code>function (request, socket, head) { }</code>\n\n</p>\n<!--\nEmitted each time a client requests a http CONNECT method. If this event isn't\nlistened for, then clients requesting a CONNECT method will have their\nconnections closed.\n-->\n\n<p>&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C; HTTP &#x306E; CONNECT &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x8981;&#x6C42;&#x3059;&#x308B;&#x5EA6;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x76E3;&#x8996;&#x3055;&#x308C;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;CONNECT &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x8981;&#x6C42;&#x3057;&#x305F;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* `request` is the arguments for the http request, as it is in the request\n  event.\n* `socket` is the network socket between the server and client.\n* `head` is an instance of Buffer, the first packet of the tunneling stream,\n  this may be empty.\n-->\n\n<ul>\n<li><code>request</code> &#x306F;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x5F15;&#x6570;&#x3068;&#x540C;&#x69D8;&#x306B; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3067;&#x3059;&#x3002;</li>\n<li><code>socket</code> &#x306F;&#x30B5;&#x30FC;&#x30D0;&#x3068;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x9593;&#x306E;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x3059;&#x3002;</li>\n<li><code>head</code> &#x306F;&#x30C8;&#x30F3;&#x30CD;&#x30EA;&#x30F3;&#x30B0;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x6700;&#x521D;&#x306E;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x6301;&#x3064; Buffer &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;\n&#x7A7A;&#x306E;&#x5834;&#x5408;&#x3082;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nAfter this event is emitted, the request's socket will not have a `data`\nevent listener, meaning you will need to bind to it in order to handle data\nsent to the server on that socket.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3001;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x5143;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x3082;&#x3046; <code>data</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x6301;&#x3061;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x30B5;&#x30FC;&#x30D0;&#x3078;&#x9001;&#x3089;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6271;&#x3046;&#x305F;&#x3081;&#x306B;&#x305D;&#x308C;&#x3092;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;upgrade&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;upgrade&quot;,
              &quot;desc&quot;: &quot;<p><code>function (request, socket, head) { }</code>\n\n</p>\n<!--\nEmitted each time a client requests a http upgrade. If this event isn't\nlistened for, then clients requesting an upgrade will have their connections\nclosed.\n-->\n\n<p>&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C; HTTP &#x306E;&#x30A2;&#x30C3;&#x30D7;&#x30B0;&#x30EC;&#x30FC;&#x30C9;&#x3092;&#x8981;&#x6C42;&#x3059;&#x308B;&#x5EA6;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x76E3;&#x8996;&#x3055;&#x308C;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;&#x30A2;&#x30C3;&#x30D7;&#x30B0;&#x30EC;&#x30FC;&#x30C9;&#x3092;&#x8981;&#x6C42;&#x3057;&#x305F;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* `request` is the arguments for the http request, as it is in the request\n  event.\n* `socket` is the network socket between the server and client.\n* `head` is an instance of Buffer, the first packet of the upgraded stream,\n  this may be empty.\n-->\n\n<ul>\n<li><code>request</code> &#x306F;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x5F15;&#x6570;&#x3068;&#x540C;&#x69D8;&#x306B; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3067;&#x3059;&#x3002;</li>\n<li><code>socket</code> &#x306F;&#x30B5;&#x30FC;&#x30D0;&#x3068;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E;&#x9593;&#x306E;&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x3059;&#x3002;</li>\n<li><code>head</code> &#x306F;&#x30A2;&#x30C3;&#x30D7;&#x30B0;&#x30EC;&#x30FC;&#x30C9;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x6700;&#x521D;&#x306E;&#x30D1;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x6301;&#x3064; Buffer &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;\n&#x7A7A;&#x306E;&#x5834;&#x5408;&#x3082;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nAfter this event is emitted, the request's socket will not have a `data`\nevent listener, meaning you will need to bind to it in order to handle data\nsent to the server on that socket.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3001;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x5143;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x3082;&#x3046; <code>data</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x6301;&#x3061;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3067;&#x30B5;&#x30FC;&#x30D0;&#x3078;&#x9001;&#x3089;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6271;&#x3046;&#x305F;&#x3081;&#x306B;&#x305D;&#x308C;&#x3092;&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;clientError&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;clientError&quot;,
              &quot;desc&quot;: &quot;<p><code>function (exception, socket) { }</code>\n\n</p>\n<!--\nIf a client connection emits an 'error' event - it will forwarded here.\n-->\n\n<p>&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C; &apos;error&apos; &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x767A;&#x3057;&#x305F;&#x5834;&#x5408; &#xFF0D; &#x3053;&#x3053;&#x306B;&#x8EE2;&#x9001;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`socket` is the `net.Socket` object that the error originated from.\n-->\n\n<p><code>socket</code> &#x306F;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F; <code>net.Socket</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;server.listen(port, [hostname], [backlog], [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;desc&quot;: &quot;<!--\nBegin accepting connections on the specified port and hostname.  If the\nhostname is omitted, the server will accept connections directed to any\nIPv4 address (`INADDR_ANY`).\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30DD;&#x30FC;&#x30C8;&#x3068;&#x30DB;&#x30B9;&#x30C8;&#x540D;&#x3067;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x53D7;&#x3051;&#x5165;&#x308C;&#x3092;&#x958B;&#x59CB;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30DB;&#x30B9;&#x30C8;&#x540D;&#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x3069;&#x3093;&#x306A; IPv4 &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3078;&#x306E;&#x63A5;&#x7D9A;&#x3082;&#x53D7;&#x3051;&#x5165;&#x308C;&#x307E;&#x3059; (<code>INADDR_ANY</code>)&#x3002;\n\n</p>\n<!--\nTo listen to a unix socket, supply a filename instead of port and hostname.\n-->\n\n<p>UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x308B;&#x5834;&#x5408;&#x3001;&#x30DD;&#x30FC;&#x30C8;&#x3068;&#x30DB;&#x30B9;&#x30C8;&#x540D;&#x3067;&#x306F;&#x306A;&#x304F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBacklog is the maximum length of the queue of pending connections.\nThe actual length will be determined by your OS through sysctl settings such as\n`tcp_max_syn_backlog` and `somaxconn` on linux. The default value of this\nparameter is 511 (not 512).\n-->\n\n<p>&#x30D0;&#x30C3;&#x30AF;&#x30ED;&#x30B0;&#x306F;&#x4FDD;&#x7559;&#x3055;&#x308C;&#x305F;&#x63A5;&#x7D9A;&#x306E;&#x30AD;&#x30E5;&#x30FC;&#x306E;&#x6700;&#x5927;&#x9577;&#x3067;&#x3059;&#x3002;\n&#x5B9F;&#x969B;&#x306E;&#x9577;&#x3055;&#x306F; Linux &#x3067;&#x306F; <code>tcp_max_syn_backlog</code> &#x3084; <code>somaxconn</code> &#x306A;&#x3069;&#x3001;\nsysctl &#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x901A;&#x3058;&#x3066; OS &#x306B;&#x3088;&#x3063;&#x3066;&#x6C7A;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30D1;&#x30E9;&#x30E1;&#x30FC;&#x30BF;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x306F; 511 (512 &#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;) &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThis function is asynchronous. The last parameter `callback` will be added as\na listener for the ['listening'][] event.  See also [net.Server.listen(port)][].\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3059;&#x3002;&#x6700;&#x5F8C;&#x306E;&#x5F15;&#x6570;&#x306E; <code>callback</code> &#x306F;\n[&apos;listening&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; [net.Server.listen(port)][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;port&quot;
                    },
                    {
                      &quot;name&quot;: &quot;hostname&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;backlog&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.listen(path, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;desc&quot;: &quot;<!--\nStart a UNIX socket server listening for connections on the given `path`.\n-->\n\n<p><code>path</code> &#x3067;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x5F85;&#x3061;&#x53D7;&#x3051;&#x308B; UNIX &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x3092;&#x958B;&#x59CB;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis function is asynchronous. The last parameter `callback` will be added as\na listener for the ['listening'][] event.  See also [net.Server.listen(path)][].\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3059;&#x3002;&#x6700;&#x5F8C;&#x306E;&#x5F15;&#x6570;&#x306E; <code>callback</code> &#x306F;\n[&apos;listening&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; [net.Server.listen(path)][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;path&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.listen(handle, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`handle` {Object} &quot;,
                      &quot;name&quot;: &quot;handle&quot;,
                      &quot;type&quot;: &quot;Object&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`callback` {Function} &quot;,
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;type&quot;: &quot;Function&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;handle&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nThe `handle` object can be set to either a server or socket (anything\nwith an underlying `_handle` member), or a `{fd: <n>}` object.\n-->\n\n<p><code>handle</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x306F;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x307E;&#x305F;&#x306F;&#x30BD;&#x30B1;&#x30C3;&#x30C8; (&#x4E0B;&#x5C64;&#x306E; <code>_handle</code> &#x30E1;&#x30F3;&#x30D0;&#x306A;&#x3089;\n&#x306A;&#x3093;&#x3067;&#x3082;) &#x307E;&#x305F;&#x306F;&#x3001; <code>{fd: &lt;n&gt;}</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis will cause the server to accept connections on the specified\nhandle, but it is presumed that the file descriptor or handle has\nalready been bound to a port or domain socket.\n-->\n\n<p>&#x3053;&#x308C;&#x306B;&#x3088;&#x308A;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x6307;&#x5B9A;&#x3057;&#x305F;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x3078;&#x306E;&#x63A5;&#x7D9A;&#x3092;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x308B;&#x3053;&#x3068;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x307E;&#x305F;&#x306F;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x306F;&#x65E2;&#x306B;&#x30DD;&#x30FC;&#x30C8;&#x307E;&#x305F;&#x306F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;\n&#x30D0;&#x30A4;&#x30F3;&#x30C9;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x3082;&#x306E;&#x3068;&#x898B;&#x306A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nListening on a file descriptor is not supported on Windows.\n-->\n\n<p>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x3078;&#x306E;&#x30EA;&#x30B9;&#x30CB;&#x30F3;&#x30B0;&#x306F; Windows &#x3067;&#x306F;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThis function is asynchronous. The last parameter `callback` will be added as\na listener for the ['listening'](net.html#event_listening_) event.\nSee also [net.Server.listen()](net.html#net_server_listen_handle_callback).\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x975E;&#x540C;&#x671F;&#x3067;&#x3059;&#x3002;&#x6700;&#x5F8C;&#x306E;&#x5F15;&#x6570;&#x306E; <code>callback</code> &#x306F;\n<a href="\&quot;net.html#event_listening_\&quot;">&apos;listening&apos;</a> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <a href="\&quot;net.html#net_server_listen_handle_callback\&quot;">net.Server.listen()</a>\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;server.close([callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nStops the server from accepting new connections.  See [net.Server.close()][].\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x65B0;&#x3057;&#x3044;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x308B;&#x306E;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n[net.Server.close()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.setTimeout(msecs, callback)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setTimeout&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`msecs` {Number} &quot;,
                      &quot;name&quot;: &quot;msecs&quot;,
                      &quot;type&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`callback` {Function} &quot;,
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;type&quot;: &quot;Function&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;msecs&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nSets the timeout value for sockets, and emits a `'timeout'` event on\nthe Server object, passing the socket as an argument, if a timeout\noccurs.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306B;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x5024;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x4E0A;&#x3067; <code>&apos;timeout&apos;</code>\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x3068;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf there is a `'timeout'` event listener on the Server object, then it\nwill be called with the timed-out socket as an argument.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B; <code>&apos;timeout&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x3068;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3057;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBy default, the Server's timeout value is 2 minutes, and sockets are\ndestroyed automatically if they time out.  However, if you assign a\ncallback to the Server's `'timeout'` event, then you are responsible\nfor handling socket timeouts.\n-->\n\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x5024;&#x306F; 2 &#x5206;&#x3067;&#x3001;\n&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3057;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x7834;&#x68C4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;<code>&apos;timeout&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x5272;&#x308A;&#x5F53;&#x3066;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3057;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30EA;&#x30F3;&#x30B0;&#x306F;&#x3042;&#x306A;&#x305F;&#x306E;&#x8CAC;&#x52D9;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;server.maxHeadersCount&quot;,
              &quot;name&quot;: &quot;maxHeadersCount&quot;,
              &quot;desc&quot;: &quot;<!--\nLimits maximum incoming headers count, equal to 1000 by default. If set to 0 -\nno limit will be applied.\n-->\n\n<p>&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x308B;&#x30D8;&#x30C3;&#x30C0;&#x6570;&#x306E;&#x4E0A;&#x9650;&#x3067;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 1000 &#x3067;&#x3059;&#x3002;\n0 &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x5236;&#x9650;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`timeout` {Number} &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8; = 120000 (2 &#x5206;) &quot;,
              &quot;name&quot;: &quot;timeout&quot;,
              &quot;* {Number} Default&quot;: &quot;120000 (2 minutes)&quot;,
              &quot;desc&quot;: &quot;<!--\nThe number of milliseconds of inactivity before a socket is presumed\nto have timed out.\n-->\n\n<p>&#x4E0D;&#x6D3B;&#x6027;&#x306A;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3057;&#x305F;&#x3068;&#x63A8;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;&#x306E;&#x30DF;&#x30EA;&#x79D2;&#x3092;&#x8868;&#x3059;&#x6570;&#x5024;&#x3002;\n\n</p>\n<!--\nNote that the socket timeout logic is set up on connection, so\nchanging this value only affects *new* connections to the server, not\nany existing connections.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x51E6;&#x7406;&#x306F;&#x63A5;&#x7D9A;&#x306E;&#x30BB;&#x30C3;&#x30C8;&#x30A2;&#x30C3;&#x30D7;&#x6642;&#x306B;&#x884C;&#x308F;&#x308C;&#x308B;&#x305F;&#x3081;&#x3001;\n&#x3053;&#x306E;&#x5024;&#x306E;&#x5909;&#x66F4;&#x306F;&#x65E2;&#x5B58;&#x306E;&#x63A5;&#x7D9A;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x3078;&#x306E; <em>&#x65B0;&#x3057;&#x3044;</em> &#x63A5;&#x7D9A;&#x306B;&#x3060;&#x3051;\n&#x5F71;&#x97FF;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nSet to 0 to disable any kind of automatic timeout behavior on incoming\nconnections.\n-->\n\n<p>0 &#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;&#x5230;&#x7740;&#x3059;&#x308B;&#x63A5;&#x7D9A;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x81EA;&#x52D5;&#x7684;&#x306A;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;\n&#x7121;&#x52B9;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;shortDesc&quot;: &quot;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8; = 120000 (2 &#x5206;)&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: http.ServerResponse&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;http.ServerResponse&quot;,
          &quot;desc&quot;: &quot;<!--\nThis object is created internally by a HTTP server--not by the user. It is\npassed as the second parameter to the `'request'` event.\n\nThe response implements the [Writable Stream][] interface. This is an\n[EventEmitter][] with the following events:\n-->\n\n<p>&#x3053;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; HTTP &#x30B5;&#x30FC;&#x30D0;&#x5185;&#x90E8; &#xFF0D; &#x30E6;&#x30FC;&#x30B6;&#x3067;&#x306F;&#x306A;&#x304F; &#xFF0D; &#x3067;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>&apos;request&apos;</code> &#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x306E;&#x7B2C; 2 &#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x306F; [Writable  Stream][] &#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x6301;&#x3064; [EventEmitter][] &#x3067;&#x3059;:\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<p><code>function () { }</code>\n\n</p>\n<!--\nIndicates that the underlying connection was terminated before\n[response.end()][] was called or able to flush.\n-->\n\n<p>[response.end()][] &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x308A;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x308B;&#x524D;&#x306B;&#x3001;\n&#x4E0B;&#x5C64;&#x306E;&#x63A5;&#x7D9A;&#x304C;&#x5207;&#x65AD;&#x3055;&#x308C;&#x305F;&#x3053;&#x3068;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;finish&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;finish&quot;,
              &quot;desc&quot;: &quot;<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted when the response has been sent. More specifically, this event is\nemitted when the last segment of the response headers and body have been\nhanded off to the operating system for transmission over the network. It\ndoes not imply that the client has received anything yet.\n-->\n\n<p>&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x304C;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x306F;&#x3001;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30D8;&#x30C3;&#x30C0;&#x304A;&#x3088;&#x3073;&#x30DC;&#x30C7;&#x30A3;&#x306E;&#x6700;&#x5F8C;&#x306E;&#x30BB;&#x30B0;&#x30E1;&#x30F3;&#x30C8;&#x304C;\n&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x306B;&#x8EE2;&#x9001;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;OS&#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x4F55;&#x304B;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nAfter this event, no more events will be emitted on the response object.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x5F8C;&#x3001;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x4E0A;&#x3067;&#x306F;&#x3069;&#x3093;&#x306A;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3082;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;response.writeContinue()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeContinue&quot;,
              &quot;desc&quot;: &quot;<!--\nSends a HTTP/1.1 100 Continue message to the client, indicating that\nthe request body should be sent. See the ['checkContinue'][] event on `Server`.\n-->\n\n<p>HTTP/1.1 &#x306E; 100 Continue &#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306B;&#x9001;&#x4FE1;&#x3057;&#x3001;\n&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30DC;&#x30C7;&#x30A3;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x3066;&#x3082;&#x3088;&#x3044;&#x3053;&#x3068;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>Server</code>&#x306E; [&apos;checkContinue&apos;][] &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;response.writeHead(statusCode, [reasonPhrase], [headers])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeHead&quot;,
              &quot;desc&quot;: &quot;<!--\nSends a response header to the request. The status code is a 3-digit HTTP\nstatus code, like `404`. The last argument, `headers`, are the response headers.\nOptionally one can give a human-readable `reasonPhrase` as the second\nargument.\n-->\n\n<p>&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B9;&#x30C6;&#x30FC;&#x30BF;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x306F; <code>404</code> &#x306E;&#x3088;&#x3046;&#x306A; 3 &#x6841;&#x306E;&#x6570;&#x5B57;&#x306B;&#x3088;&#x308B; HTTP &#x30B9;&#x30C6;&#x30FC;&#x30BF;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x3059;&#x3002;\n&#x6700;&#x5F8C;&#x306E;&#x5F15;&#x6570; <code>headers</code> &#x306F;&#x3001;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30D8;&#x30C3;&#x30C0;&#x3067;&#x3059;&#x3002;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x3057;&#x3066;&#x4EBA;&#x306B;&#x8AAD;&#x3081;&#x308B;&#x5F62;&#x5F0F;&#x306E; <code>reasonPhrase</code> &#x3092;&#x7B2C; 2 &#x5F15;&#x6570;&#x3067;&#x4E0E;&#x3048;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var body = &apos;hello world&apos;;\nresponse.writeHead(200, {\n  &apos;Content-Length&apos;: body.length,\n  &apos;Content-Type&apos;: &apos;text/plain&apos; });</code></pre>\n<!--\nThis method must only be called once on a message and it must\nbe called before [response.end()][] is called.\n\nIf you call [response.write()][] or [response.end()][] before calling this, the\nimplicit/mutable headers will be calculated and call this function for you.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3054;&#x3068;&#x306B; 1 &#x56DE;&#x3060;&#x3051;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x306A;&#x304F;&#x3066;&#x306F;&#x306A;&#x3089;&#x305A;&#x3001;\n[response.end()][] &#x306E;&#x524D;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x524D;&#x306B; [response.write()][] &#x307E;&#x305F;&#x306F;\n[response.end()][] &#x304C;&#x547C;&#x3070;&#x308C;&#x308B;&#x3068;&#x3001;&#x6697;&#x9ED9;&#x7684;&#x306B;&#x53EF;&#x5909;&#x306E;&#x30D8;&#x30C3;&#x30C0;&#x304C;&#x7B97;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3001;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote: that Content-Length is given in bytes not characters. The above example\nworks because the string `'hello world'` contains only single byte characters.\nIf the body contains higher coded characters then `Buffer.byteLength()`\nshould be used to determine the number of bytes in a given encoding.\nAnd Node does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.\n-->\n\n<p>&#x6CE8;&#x610F;: <code>Content-Length</code> &#x306F;&#x6587;&#x5B57;&#x6570;&#x3067;&#x306F;&#x306A;&#x304F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3067;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x4E0A;&#x306E;&#x4F8B;&#x304C;&#x52D5;&#x4F5C;&#x3059;&#x308B;&#x306E;&#x306F; <code>&apos;hello world&apos;</code> &#x3068;&#x3044;&#x3046;&#x6587;&#x5B57;&#x5217;&#x304C;&#x5358;&#x4E00;&#x30D0;&#x30A4;&#x30C8;&#x6587;&#x5B57;&#x3060;&#x3051;&#x3092;&#x542B;&#x3080;&#x305F;&#x3081;&#x3067;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30DC;&#x30C7;&#x30A3;&#x304C;&#x3088;&#x308A;&#x4E0A;&#x4F4D;&#x306B;&#x30B3;&#x30FC;&#x30C9;&#x5316;&#x3055;&#x308C;&#x305F;&#x6587;&#x5B57;&#x3092;&#x542B;&#x3080;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x6307;&#x5B9A;&#x3057;&#x305F;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306B;&#x3088;&#x308B;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3092;&#x5F97;&#x308B;&#x305F;&#x3081;&#x306B; <code>Buffer.byteLength()</code> &#x3092;&#x4F7F;&#x3046;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\nNode &#x306F;&#x3001;Content-Length &#x3068;&#x5B9F;&#x969B;&#x306B;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x305F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30DC;&#x30C7;&#x30A3;&#x306E;&#x9577;&#x3055;&#x304C;&#x7B49;&#x3057;&#x3044;&#x304B;&#x3069;&#x3046;&#x304B;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;statusCode&quot;
                    },
                    {
                      &quot;name&quot;: &quot;reasonPhrase&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;headers&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;response.setTimeout(msecs, callback)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setTimeout&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`msecs` {Number} &quot;,
                      &quot;name&quot;: &quot;msecs&quot;,
                      &quot;type&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`callback` {Function} &quot;,
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;type&quot;: &quot;Function&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;msecs&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nSets the Socket's timeout value to `msecs`.  If a callback is\nprovided, then it is added as a listener on the `'timeout'` event on\nthe response object.\n-->\n\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x5024;&#x3092; <code>msec</code> &#x306B;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E; <code>&apos;timeout&apos;</code>\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf no `'timeout'` listener is added to the request, the response, or\nthe server, then sockets are destroyed when they time out.  If you\nassign a handler on the request, the response, or the server's\n`'timeout'` events, then it is your responsibility to handle timed out\nsockets.\n-->\n\n<p>&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3001;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x3001;&#x305D;&#x3057;&#x3066;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x3044;&#x305A;&#x308C;&#x306B;&#x3082; <code>&apos;timeout&apos;</code>\n&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3057;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x7834;&#x68C4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3001;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x306B; <code>&apos;timeout&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x8A2D;&#x5B9A;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x3057;&#x305F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30EA;&#x30F3;&#x30B0;&#x306F;&#x3042;&#x306A;&#x305F;&#x306E;&#x8CAC;&#x52D9;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;response.setHeader(name, value)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setHeader&quot;,
              &quot;desc&quot;: &quot;<!--\nSets a single header value for implicit headers.  If this header already exists\nin the to-be-sent headers, its value will be replaced.  Use an array of strings\nhere if you need to send multiple headers with the same name.\n-->\n\n<p>&#x6697;&#x9ED9;&#x7684;&#x30D8;&#x30C3;&#x30C0;&#x306E;&#x30D8;&#x30C3;&#x30C0;&#x5024;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x9001;&#x4FE1;&#x3055;&#x308C;&#x3088;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30D8;&#x30C3;&#x30C0;&#x306B;&#x3053;&#x306E;&#x30D8;&#x30C3;&#x30C0;&#x304C;&#x65E2;&#x306B;&#x542B;&#x307E;&#x308C;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x3001;\n&#x305D;&#x306E;&#x5024;&#x306F;&#x7F6E;&#x304D;&#x63DB;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x540C;&#x3058;&#x540D;&#x524D;&#x3067;&#x8907;&#x6570;&#x306E;&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x305F;&#x3044;&#x5834;&#x5408;&#x306F;&#x6587;&#x5B57;&#x5217;&#x306E;&#x914D;&#x5217;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>response.setHeader(&quot;Content-Type&quot;, &quot;text/html&quot;);</code></pre>\n<!--\nor\n-->\n\n<p>&#x307E;&#x305F;&#x306F;\n\n</p>\n<pre><code>response.setHeader(&quot;Set-Cookie&quot;, [&quot;type=ninja&quot;, &quot;language=javascript&quot;]);</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;name&quot;
                    },
                    {
                      &quot;name&quot;: &quot;value&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;response.getHeader(name)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;getHeader&quot;,
              &quot;desc&quot;: &quot;<!--\nReads out a header that's already been queued but not sent to the client.  Note\nthat the name is case insensitive.  This can only be called before headers get\nimplicitly flushed.\n-->\n\n<p>&#x3059;&#x3067;&#x306B;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x5165;&#x308C;&#x3089;&#x308C;&#x3066;&#x3044;&#x308B;&#x304C;&#x672A;&#x9001;&#x4FE1;&#x306E;&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x8AAD;&#x307F;&#x4E0A;&#x3052;&#x307E;&#x3059;&#xFF0E;\n&#x540D;&#x524D;&#x306F;&#x5927;&#x6587;&#x5B57;&#x5C0F;&#x6587;&#x5B57;&#x3092;&#x533A;&#x5225;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30D8;&#x30C3;&#x30C0;&#x304C;&#x6697;&#x9ED9;&#x7684;&#x306B;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x308B;&#x524D;&#x3060;&#x3051;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var contentType = response.getHeader(&apos;content-type&apos;);</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;name&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;response.removeHeader(name)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;removeHeader&quot;,
              &quot;desc&quot;: &quot;<!--\nRemoves a header that's queued for implicit sending.\n-->\n\n<p>&#x6697;&#x9ED9;&#x7684;&#x306B;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x305F;&#x3081;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x5165;&#x308C;&#x3089;&#x308C;&#x305F;&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x524A;&#x9664;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>response.removeHeader(&quot;Content-Encoding&quot;);</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;name&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;response.write(chunk, [encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;write&quot;,
              &quot;desc&quot;: &quot;<!--\nIf this method is called and [response.writeHead()][] has not been called,\nit will switch to implicit header mode and flush the implicit headers.\n\nThis sends a chunk of the response body. This method may\nbe called multiple times to provide successive parts of the body.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3001;[response.writeHead()][] &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;\n&#x6697;&#x9ED9;&#x7684;&#x30D8;&#x30C3;&#x30C0;&#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308A;&#x3001;&#x6697;&#x9ED9;&#x7684;&#x30D8;&#x30C3;&#x30C0;&#x306F;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30DC;&#x30C7;&#x30A3;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30DC;&#x30C7;&#x30A3;&#x306E;&#x9023;&#x7D9A;&#x3057;&#x305F;&#x90E8;&#x5206;&#x3092;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x8907;&#x6570;&#x56DE;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\n`chunk` can be a string or a buffer. If `chunk` is a string,\nthe second parameter specifies how to encode it into a byte stream.\nBy default the `encoding` is `'utf8'`.\n-->\n\n<p><code>chunk</code> &#x306F;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>chunk</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306E;&#x5834;&#x5408;&#x3001;&#x3069;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x30D0;&#x30A4;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x3059;&#x308B;&#x304B;&#x3092;&#x7B2C; 2 &#x5F15;&#x6570;&#x3067;&#x6307;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E; <code>encoding</code> &#x306F; <code>&apos;utf8&apos;</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n**Note**: This is the raw HTTP body and has nothing to do with\nhigher-level multi-part body encodings that may be used.\n-->\n\n<p><strong>&#x6CE8;&#x610F;</strong>: &#x3053;&#x308C;&#x306F;&#x751F;&#x306E; HTTP &#x30DC;&#x30C7;&#x30A3;&#x3067;&#x3001;\n&#x9AD8;&#x6C34;&#x6E96;&#x306E;&#x30DE;&#x30EB;&#x30C1;&#x30D1;&#x30FC;&#x30C8;&#x30DC;&#x30C7;&#x30A3;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x3082;&#x306E;&#x3068;&#x306F;&#x7121;&#x95A2;&#x4FC2;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe first time `response.write()` is called, it will send the buffered\nheader information and the first body to the client. The second time\n`response.write()` is called, Node assumes you're going to be streaming\ndata, and sends that separately. That is, the response is buffered up to the\nfirst chunk of body.\n-->\n\n<p>&#x521D;&#x3081;&#x3066; <code>response.write()</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;\n&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x3066;&#x3044;&#x305F;&#x30D8;&#x30C3;&#x30C0;&#x60C5;&#x5831;&#x3068;&#x6700;&#x521D;&#x306E;&#x30DC;&#x30C7;&#x30A3;&#x304C;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306B;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n2 &#x56DE;&#x76EE;&#x306B; <code>response.write()</code> &#x304C;&#x547C;&#x3070;&#x308C;&#x308B;&#x3068;&#x3001;\nNode &#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30DF;&#x30F3;&#x30B0;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5206;&#x5272;&#x3057;&#x3066;&#x9001;&#x4FE1;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x3068;&#x4EEE;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x306F;&#x30DC;&#x30C7;&#x30A3;&#x306E;&#x6700;&#x521D;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x307E;&#x3067;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nReturns `true` if the entire data was flushed successfully to the kernel\nbuffer. Returns `false` if all or part of the data was queued in user memory.\n`'drain'` will be emitted when the buffer is again free.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x5168;&#x4F53;&#x306E;&#x30AB;&#x30FC;&#x30CD;&#x30EB;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3078;&#x306E;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x304C;&#x6210;&#x529F;&#x3059;&#x308B;&#x3068; <code>true</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30FC;&#x30BF;&#x5168;&#x4F53;&#x307E;&#x305F;&#x306F;&#x4E00;&#x90E8;&#x304C;&#x30E6;&#x30FC;&#x30B6;&#x30E1;&#x30E2;&#x30EA;&#x5185;&#x306E;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x5165;&#x308C;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;\n<code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x518D;&#x3073;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x7A7A;&#x3044;&#x305F;&#x5834;&#x5408;&#x306F; <code>&apos;drain&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;chunk&quot;
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;response.addTrailers(headers)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;addTrailers&quot;,
              &quot;desc&quot;: &quot;<!--\nThis method adds HTTP trailing headers (a header but at the end of the\nmessage) to the response.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; HTTP &#x30C8;&#x30EC;&#x30FC;&#x30E9;&#x30D8;&#x30C3;&#x30C0; (&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x306E;&#x6700;&#x5F8C;&#x306B;&#x7F6E;&#x304B;&#x308C;&#x308B;&#x30D8;&#x30C3;&#x30C0;) &#x3092;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nTrailers will **only** be emitted if chunked encoding is used for the\nresponse; if it is not (e.g., if the request was HTTP/1.0), they will\nbe silently discarded.\n-->\n\n<p>&#x30C8;&#x30EC;&#x30FC;&#x30E9;&#x306F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x304C;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x5316;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067;<strong>&#x306E;&#x307F;</strong>&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070; (&#x4F8B;&#x3048;&#x3070;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C; HTTP/1.0)&#x3001;&#x9ED9;&#x3063;&#x3066;&#x7834;&#x68C4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that HTTP requires the `Trailer` header to be sent if you intend to\nemit trailers, with a list of the header fields in its value. E.g.,\n-->\n\n<p>HTTP &#x306F;&#x3001;&#x30C8;&#x30EC;&#x30FC;&#x30E9;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x306A;&#x3089;&#x305D;&#x306E;&#x30D8;&#x30C3;&#x30C0;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x306E;&#x30EA;&#x30B9;&#x30C8;&#x3092;&#x5024;&#x3068;&#x3057;&#x3066;\n<code>Trailer</code> &#x30D8;&#x30C3;&#x30C0;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x8981;&#x6C42;&#x3057;&#x3066;&#x3044;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>response.writeHead(200, { &apos;Content-Type&apos;: &apos;text/plain&apos;,\n                          &apos;Trailer&apos;: &apos;Content-MD5&apos; });\nresponse.write(fileData);\nresponse.addTrailers({&apos;Content-MD5&apos;: &quot;7895bf4b8828b55ceaf47747b4bca667&quot;});\nresponse.end();</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;headers&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;response.end([data], [encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;end&quot;,
              &quot;desc&quot;: &quot;<!--\nThis method signals to the server that all of the response headers and body\nhave been sent; that server should consider this message complete.\nThe method, `response.end()`, MUST be called on each\nresponse.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x306E;&#x5168;&#x3066;&#x306E;&#x30D8;&#x30C3;&#x30C0;&#x3068;&#x30DC;&#x30C7;&#x30A3;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x305F;&#x3053;&#x3068;&#x3092;&#x30B5;&#x30FC;&#x30D0;&#x306B;&#x4F1D;&#x3048;&#x307E;&#x3059;;\n&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x3068;&#x8003;&#x3048;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E; <code>response.end()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x5404;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x3054;&#x3068;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3051;&#x308C;&#x3070;<em>&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;</em>&#x3002;\n\n</p>\n<!--\nIf `data` is specified, it is equivalent to calling `response.write(data, encoding)`\nfollowed by `response.end()`.\n-->\n\n<p><code>data</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;\n<code>response.write(data, encoding)</code> &#x306B;&#x7D9A;&#x3051;&#x3066; <code>response.end()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x306E;&#x3068;&#x7B49;&#x4FA1;&#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;response.statusCode&quot;,
              &quot;name&quot;: &quot;statusCode&quot;,
              &quot;desc&quot;: &quot;<!--\nWhen using implicit headers (not calling [response.writeHead()][] explicitly),\nthis property controls the status code that will be sent to the client when\nthe headers get flushed.\n-->\n\n<p>([response.writeHead()][] &#x304C;&#x660E;&#x793A;&#x7684;&#x306B;&#x547C;&#x3070;&#x308C;&#x306A;&#x3044;&#x305F;&#x3081;&#x306B;) &#x6697;&#x9ED9;&#x7684;&#x306A;&#x30D8;&#x30C3;&#x30C0;&#x304C;\n&#x4F7F;&#x308F;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F;&#x30D8;&#x30C3;&#x30C0;&#x304C;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x308B;&#x6642;&#x306B;\n&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3078;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x30B9;&#x30C6;&#x30FC;&#x30BF;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x5236;&#x5FA1;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>response.statusCode = 404;</code></pre>\n<!--\nAfter response header was sent to the client, this property indicates the\nstatus code which was sent out.\n-->\n\n<p>&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30D8;&#x30C3;&#x30C0;&#x304C;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306B;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3001;\n&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C6;&#x30FC;&#x30BF;&#x30B9;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;response.headersSent&quot;,
              &quot;name&quot;: &quot;headersSent&quot;,
              &quot;desc&quot;: &quot;<!--\nBoolean (read-only). True if headers were sent, false otherwise.\n-->\n\n<p>(&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5C02;&#x7528;&#x306E;) Boolean&#x3002;\n&#x30D8;&#x30C3;&#x30C0;&#x304C;&#x9001;&#x4FE1;&#x6E08;&#x307F;&#x306A;&#x3089; true&#x3001;&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306F; false &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;response.sendDate&quot;,
              &quot;name&quot;: &quot;sendDate&quot;,
              &quot;desc&quot;: &quot;<!--\nWhen true, the Date header will be automatically generated and sent in\nthe response if it is not already present in the headers. Defaults to true.\n\nThis should only be disabled for testing; HTTP requires the Date header\nin responses.\n-->\n\n<p><code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;Date &#x30D8;&#x30C3;&#x30C0;&#x304C;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x3001;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x3068;&#x3057;&#x3066;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x307E;&#x3059;\n(<code>headers</code> &#x306B;&#x3059;&#x3067;&#x306B;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x5834;&#x5408;)&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>true</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x3092;&#x7121;&#x52B9;&#x306B;&#x3059;&#x308B;&#x306E;&#x306F;&#x30C6;&#x30B9;&#x30C8;&#x3067;&#x306E;&#x307F;&#x306B;&#x3059;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\nHTTP &#x306F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x306B; Date &#x30D8;&#x30C3;&#x30C0;&#x3092;&#x8981;&#x6C42;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: http.Agent&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;http.Agent&quot;,
          &quot;desc&quot;: &quot;<!--\nIn node 0.5.3+ there is a new implementation of the HTTP Agent which is used\nfor pooling sockets used in HTTP client requests.\n\nPreviously, a single agent instance helped pool for a single host+port. The\ncurrent implementation now holds sockets for any number of hosts.\n\nThe current HTTP Agent also defaults client requests to using\nConnection:keep-alive. If no pending HTTP requests are waiting on a socket\nto become free the socket is closed. This means that node's pool has the\nbenefit of keep-alive when under load but still does not require developers\nto manually close the HTTP clients using keep-alive.\n\nSockets are removed from the agent's pool when the socket emits either a\n\"close\" event or a special \"agentRemove\" event. This means that if you intend\nto keep one HTTP request open for a long time and don't want it to stay in the\npool you can do something along the lines of:\n-->\n\n<p>Node 0.5.3 &#x4EE5;&#x964D;&#x306B;&#x306F;&#x3001;HTTP &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;\n&#x30D7;&#x30FC;&#x30EA;&#x30F3;&#x30B0;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x65B0;&#x3057;&#x3044; HTTP Agent &#x306E;&#x5B9F;&#x88C5;&#x304C;&#x5B58;&#x5728;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x4EE5;&#x524D;&#x306F;&#x3001;&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8;&#x306E;&#x4E00;&#x3064;&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x304C;&#x4E00;&#x3064;&#x306E;&#x30DB;&#x30B9;&#x30C8; + &#x30DD;&#x30FC;&#x30C8;&#x306E;&#x30D7;&#x30FC;&#x30EB;&#x3092;\n&#x52A9;&#x3051;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x304C;&#x3001;&#x73FE;&#x5728;&#x306E;&#x5B9F;&#x88C5;&#x3067;&#x306F;&#x4EFB;&#x610F;&#x306E;&#x6570;&#x306E;&#x30DB;&#x30B9;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;\n&#x4FDD;&#x6301;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3057;&#x305F;&#x3002;\n\n</p>\n<p>&#x73FE;&#x5728;&#x306E; HTTP Agent &#x3067;&#x306F;&#x3001;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;\nConnection:keep-alive &#x3092;&#x4F7F;&#x3046;&#x3088;&#x3046;&#x306B;&#x3082;&#x306A;&#x308A;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x5F85;&#x3063;&#x3066;&#x30DA;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306B;&#x306A;&#x3063;&#x3066;&#x3044;&#x308B; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;\n&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;node &#x306E;&#x30D7;&#x30FC;&#x30EB;&#x306F;&#x9AD8;&#x8CA0;&#x8377;&#x6642;&#x306B; keep-alive &#x306E;&#x30E1;&#x30EA;&#x30C3;&#x30C8;&#x3092;&#x6301;&#x3061;&#x306A;&#x304C;&#x3089;&#x3001;\nkeep-alive &#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B; HTTP &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3092;&#x958B;&#x767A;&#x8005;&#x304C;&#x624B;&#x52D5;&#x3067;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3059;&#x308B;\n&#x5FC5;&#x8981;&#x304C;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F; <code>&apos;close&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x307E;&#x305F;&#x306F;&#x7279;&#x5225;&#x306A; <code>&apos;agentRemove&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8;&#x306E;&#x30D7;&#x30FC;&#x30EB;&#x304B;&#x3089;&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;&#x4E00;&#x3064;&#x306E; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x9577;&#x6642;&#x9593;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x305F;&#x307E;&#x307E;&#x306B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;\n&#x30D7;&#x30FC;&#x30EB;&#x306B;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x3068;&#x3069;&#x307E;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x610F;&#x56F3;&#x3059;&#x308B;&#x306A;&#x3089;&#x3001;\n&#x4EE5;&#x4E0B;&#x306E;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>http.get(options, function(res) {\n  // Do stuff\n}).on(&quot;socket&quot;, function (socket) {\n  socket.emit(&quot;agentRemove&quot;);\n});</code></pre>\n<!--\nAlternatively, you could just opt out of pooling entirely using `agent:false`:\n-->\n\n<p>&#x5225;&#x306E;&#x65B9;&#x6CD5;&#x3068;&#x3057;&#x3066;&#x3001; <code>agent: false</code> &#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3001;\n&#x30D7;&#x30FC;&#x30EA;&#x30F3;&#x30B0;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;:\n\n</p>\n<pre><code>http.get({hostname:&apos;localhost&apos;, port:80, path:&apos;/&apos;, agent:false}, function (res) {\n  // Do stuff\n})</code></pre>\n&quot;,
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;agent.maxSockets&quot;,
              &quot;name&quot;: &quot;maxSockets&quot;,
              &quot;desc&quot;: &quot;<!--\nBy default set to 5. Determines how many concurrent sockets the agent can have\nopen per origin. Origin is either a 'host:port' or 'host:port:localAddress'\ncombination.\n-->\n\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F; 5 &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8;&#x304C;&#x30AA;&#x30EA;&#x30B8;&#x30F3;&#x6BCE;&#x306B;&#x3044;&#x304F;&#x3064;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x4E26;&#x884C;&#x306B;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3059;&#x308B;&#x304B;&#x3092;&#x6C7A;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30AA;&#x30EA;&#x30B8;&#x30F3;&#x306F; <code>&apos;host:port&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;host:port:localAddress&apos;</code>\n&#x306E;&#x7D44;&#x307F;&#x5408;&#x308F;&#x305B;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;agent.sockets&quot;,
              &quot;name&quot;: &quot;sockets&quot;,
              &quot;desc&quot;: &quot;<!--\nAn object which contains arrays of sockets currently in use by the Agent. Do not\nmodify.\n-->\n\n<p>&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8;&#x304C;&#x73FE;&#x5728;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x308B;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x914D;&#x5217;&#x3067;&#x3059;&#x3002;\n&#x5909;&#x66F4;&#x3057;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;agent.requests&quot;,
              &quot;name&quot;: &quot;requests&quot;,
              &quot;desc&quot;: &quot;<!--\nAn object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify.\n-->\n\n<p>&#x307E;&#x3060;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30AD;&#x30E5;&#x30FC;&#x3092;&#x542B;&#x3080;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n&#x5909;&#x66F4;&#x3057;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: http.ClientRequest&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;http.ClientRequest&quot;,
          &quot;desc&quot;: &quot;<!--\nThis object is created internally and returned from `http.request()`.  It\nrepresents an _in-progress_ request whose header has already been queued.  The\nheader is still mutable using the `setHeader(name, value)`, `getHeader(name)`,\n`removeHeader(name)` API.  The actual header will be sent along with the first\ndata chunk or when closing the connection.\n-->\n\n<p>&#x3053;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; HTTP &#x30B5;&#x30FC;&#x30D0;&#x5185;&#x90E8;&#x3067;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x3001;<code>http.request()</code> &#x304B;&#x3089;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x30D8;&#x30C3;&#x30C0;&#x304C;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x5165;&#x308C;&#x3089;&#x308C;&#x305F; <em>&#x9032;&#x884C;&#x4E2D;</em> &#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x8868;&#x73FE;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30D8;&#x30C3;&#x30C0;&#x306F; <code>setHeader(name, value)</code>, <code>getHeader(name)</code>, <code>removeHeader(name)</code> API &#x306B;&#x3088;&#x3063;&#x3066;&#x307E;&#x3060;&#x53EF;&#x5909;&#x306E;&#x307E;&#x307E;&#x3067;&#x3059;&#x3002;\n&#x5B9F;&#x969B;&#x306B;&#x30D8;&#x30C3;&#x30C0;&#x304C;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x306E;&#x306F;&#x3001;&#x6700;&#x521D;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304C;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x6642;&#x307E;&#x305F;&#x306F;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x308B;&#x6642;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nTo get the response, add a listener for `'response'` to the request object.\n`'response'` will be emitted from the request object when the response\nheaders have been received.  The `'response'` event is executed with one\nargument which is an instance of [http.IncomingMessage][].\n-->\n\n<p>&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x3092;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;<code>&apos;response&apos;</code> &#x7528;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x52A0;&#x3048;&#x307E;&#x3059;&#x3002;\n<code>&apos;response&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x53D7;&#x4FE1;&#x3059;&#x308B;&#x3068;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>&apos;response&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F; [http.IncomingMessage][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;\n&#x552F;&#x4E00;&#x306E;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nDuring the `'response'` event, one can add listeners to the\nresponse object; particularly to listen for the `'data'` event.\n-->\n\n<p><code>&apos;response&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x9593;&#x3001;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3092;&#x52A0;&#x3048;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;;\n&#x3068;&#x308A;&#x308F;&#x3051; <code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x30FC;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIf no `'response'` handler is added, then the response will be\nentirely discarded.  However, if you add a `'response'` event handler,\nthen you **must** consume the data from the response object, either by\ncalling `response.read()` whenever there is a `'readable'` event, or\nby adding a `'data'` handler, or by calling the `.resume()` method.\nUntil the data is consumed, the `'end'` event will not fire.  Also, until\nthe data is read it will consume memory that can eventually lead to a\n'process out of memory' error.\n-->\n\n<p><code>&apos;response&apos;</code> &#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x304C;&#x52A0;&#x3048;&#x3089;&#x308C;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x306F;&#x5B8C;&#x5168;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x3001;<code>&apos;response&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3092;&#x52A0;&#x3048;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x6642;&#x306B; <code>response.read()</code> &#x3092;&#x547C;&#x3076;&#x304B;&#x3001;\n<code>&apos;data&apos;</code> &#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3092;&#x52A0;&#x3048;&#x308B;&#x304B;&#x3001;<code>.resume()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x304B;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x306B;&#x3088;&#x308A;&#x3001;\n&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304B;&#x3089;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6D88;&#x8CBB;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070; <em>&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;</em> &#x3002;\n&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;&#x3001;<code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x307E;&#x305F;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x8AAD;&#x307E;&#x308C;&#x308B;&#x307E;&#x3067;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x6D88;&#x8CBB;&#x3057;&#x3001;&apos;process out of memory&apos;\n&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x3064;&#x306A;&#x304C;&#x308B;&#x3053;&#x3068;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis is a `Writable Stream`.\nNote: Node does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.\n\nNote: Node does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; <code>Writable Stream</code> &#x3067;&#x3059;&#x3002;\n&#x6CE8;&#x610F;: Node &#x306F; Content-Length &#x3068;&#x5B9F;&#x969B;&#x306B;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x305F;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30DC;&#x30C7;&#x30A3;&#x306E;&#x9577;&#x3055;&#x304C;&#x7B49;&#x3057;&#x3044;&#x304B;&#x3069;&#x3046;&#x304B;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<p><code>ServerRequest</code> &#x304C; <code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x305F;&#x6642;&#x306B;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;\n<strong>&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5931;&#x308F;&#x308C;&#x308B;</strong>&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nThe request implements the [Writable Stream][] interface. This is an\n[EventEmitter][] with the following events:\n-->\n\n<p>&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306F; [Writable  Stream][] &#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x6301;&#x3064; [EventEmitter][] &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event &apos;response&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;response&quot;,
              &quot;desc&quot;: &quot;<p><code>function (response) { }</code>\n\n</p>\n<!--\nEmitted when a response is received to this request. This event is emitted only\nonce. The `response` argument will be an instance of [http.IncomingMessage][].\n-->\n\n<p>&#x3053;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x4E00;&#x56DE;&#x3060;&#x3051;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>response</code> &#x5F15;&#x6570;&#x306F; [http.IncomingMessage][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nOptions:\n-->\n\n<p>&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;:\n\n</p>\n<!--\n- `host`: A domain name or IP address of the server to issue the request to.\n- `port`: Port of remote server.\n- `socketPath`: Unix Domain Socket (use one of host:port or socketPath)\n-->\n\n<ul>\n<li><code>host</code>: &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x767A;&#x884C;&#x3059;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x540D;&#x307E;&#x305F;&#x306F; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3002;</li>\n<li><code>port</code>: &#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30DD;&#x30FC;&#x30C8;&#x3002;</li>\n<li><code>soocketPath</code>: Unix &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8; (host:port &#x307E;&#x305F;&#x306F; socketPath &#x306E;&#x3069;&#x3061;&#x3089;&#x304B;)</li>\n</ul>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;socket&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;socket&quot;,
              &quot;desc&quot;: &quot;<p><code>function (socket) { }</code>\n\n</p>\n<!--\nEmitted after a socket is assigned to this request.\n-->\n\n<p>&#x3053;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306B;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x305F;&#x5F8C;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;connect&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;connect&quot;,
              &quot;desc&quot;: &quot;<p><code>function (response, socket, head) { }</code>\n\n</p>\n<!--\nEmitted each time a server responds to a request with a CONNECT method. If this\nevent isn't being listened for, clients receiving a CONNECT method will have\ntheir connections closed.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x304C; CONNECT &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306E;&#x8981;&#x6C42;&#x306B;&#x5FDC;&#x7B54;&#x3059;&#x308B;&#x5EA6;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x76E3;&#x8996;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C; CONNECT &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3078;&#x306E;\n&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x3092;&#x53D7;&#x4FE1;&#x3059;&#x308B;&#x3068;&#x3001;&#x305D;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nA client server pair that show you how to listen for the `connect` event.\n-->\n\n<p>&#x3069;&#x306E;&#x3088;&#x3046;&#x306B; <code>connect</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x304B;&#x3092;&#x793A;&#x3059;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3068;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30DA;&#x30A2;:\n\n\n</p>\n<pre><code>var http = require(&apos;http&apos;);\nvar net = require(&apos;net&apos;);\nvar url = require(&apos;url&apos;);\n\n// Create an HTTP tunneling proxy\nvar proxy = http.createServer(function (req, res) {\n  res.writeHead(200, {&apos;Content-Type&apos;: &apos;text/plain&apos;});\n  res.end(&apos;okay&apos;);\n});\nproxy.on(&apos;connect&apos;, function(req, cltSocket, head) {\n  // connect to an origin server\n  var srvUrl = url.parse(&apos;http://&apos; + req.url);\n  var srvSocket = net.connect(srvUrl.port, srvUrl.hostname, function() {\n    cltSocket.write(&apos;HTTP/1.1 200 Connection Established\\r\\n&apos; +\n                    &apos;Proxy-agent: Node-Proxy\\r\\n&apos; +\n                    &apos;\\r\\n&apos;);\n    srvSocket.write(head);\n    srvSocket.pipe(cltSocket);\n    cltSocket.pipe(srvSocket);\n  });\n});\n\n// now that proxy is running\nproxy.listen(1337, &apos;127.0.0.1&apos;, function() {\n\n  // make a request to a tunneling proxy\n  var options = {\n    port: 1337,\n    hostname: &apos;127.0.0.1&apos;,\n    method: &apos;CONNECT&apos;,\n    path: &apos;www.google.com:80&apos;\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&apos;connect&apos;, function(res, socket, head) {\n    console.log(&apos;got connected!&apos;);\n\n    // make a request over an HTTP tunnel\n    socket.write(&apos;GET / HTTP/1.1\\r\\n&apos; +\n                 &apos;Host: www.google.com:80\\r\\n&apos; +\n                 &apos;Connection: close\\r\\n&apos; +\n                 &apos;\\r\\n&apos;);\n    socket.on(&apos;data&apos;, function(chunk) {\n      console.log(chunk.toString());\n    });\n    socket.on(&apos;end&apos;, function() {\n      proxy.close();\n    });\n  });\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;upgrade&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;upgrade&quot;,
              &quot;desc&quot;: &quot;<p><code>function (response, socket, head) { }</code>\n\n</p>\n<!--\nEmitted each time a server responds to a request with an upgrade. If this\nevent isn't being listened for, clients receiving an upgrade header will have\ntheir connections closed.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30A2;&#x30C3;&#x30D7;&#x30B0;&#x30EC;&#x30FC;&#x30C9;&#x8981;&#x6C42;&#x306B;&#x5FDC;&#x7B54;&#x3059;&#x308B;&#x5EA6;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x76E3;&#x8996;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x30A2;&#x30C3;&#x30D7;&#x30B0;&#x30EC;&#x30FC;&#x30C9;&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x53D7;&#x4FE1;&#x3059;&#x308B;&#x3068;&#x305D;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nA client server pair that show you how to listen for the `upgrade` event.\n-->\n\n<p>&#x3069;&#x306E;&#x3088;&#x3046;&#x306B; <code>upgrade</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x304B;&#x3092;&#x793A;&#x3059;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3068;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30DA;&#x30A2;:\n\n</p>\n<pre><code>var http = require(&apos;http&apos;);\n\n// Create an HTTP server\nvar srv = http.createServer(function (req, res) {\n  res.writeHead(200, {&apos;Content-Type&apos;: &apos;text/plain&apos;});\n  res.end(&apos;okay&apos;);\n});\nsrv.on(&apos;upgrade&apos;, function(req, socket, head) {\n  socket.write(&apos;HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n&apos; +\n               &apos;Upgrade: WebSocket\\r\\n&apos; +\n               &apos;Connection: Upgrade\\r\\n&apos; +\n               &apos;\\r\\n&apos;);\n\n  socket.pipe(socket); // echo back\n});\n\n// now that server is running\nsrv.listen(1337, &apos;127.0.0.1&apos;, function() {\n\n  // make a request\n  var options = {\n    port: 1337,\n    hostname: &apos;127.0.0.1&apos;,\n    headers: {\n      &apos;Connection&apos;: &apos;Upgrade&apos;,\n      &apos;Upgrade&apos;: &apos;websocket&apos;\n    }\n  };\n\n  var req = http.request(options);\n  req.end();\n\n  req.on(&apos;upgrade&apos;, function(res, socket, upgradeHead) {\n    console.log(&apos;got upgraded!&apos;);\n    socket.end();\n    process.exit(0);\n  });\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;continue&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;continue&quot;,
              &quot;desc&quot;: &quot;<p><code>function () { }</code>\n\n</p>\n<!--\nEmitted when the server sends a '100 Continue' HTTP response, usually because\nthe request contained 'Expect: 100-continue'. This is an instruction that\nthe client should send the request body.\n-->\n\n<p>&#x901A;&#x5E38;&#x3001;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C; &apos;Expect: 100-continue&apos; &#x3092;&#x542B;&#x3093;&#x3067;&#x3044;&#x305F;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;\n&#x30B5;&#x30FC;&#x30D0;&#x304C; &apos;100 Continue&apos; HTTP &#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x304C;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30DC;&#x30C7;&#x30A3;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x3079;&#x304D;&#x4E8B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;request.write(chunk, [encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;write&quot;,
              &quot;desc&quot;: &quot;<!--\nSends a chunk of the body.  By calling this method\nmany times, the user can stream a request body to a\nserver--in that case it is suggested to use the\n`['Transfer-Encoding', 'chunked']` header line when\ncreating the request.\n-->\n\n<p>&#x30DC;&#x30C7;&#x30A3;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F55;&#x56DE;&#x3082;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x3078;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30DC;&#x30C7;&#x30A3;&#x3092;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5316;&#x3067;&#x304D;&#x307E;&#x3059; &#xFF0D; \n&#x3053;&#x306E;&#x30B1;&#x30FC;&#x30B9;&#x306F; <code>[&apos;Transfer-Encoding&apos;, &apos;chunked&apos;]</code> &#x30D8;&#x30C3;&#x30C0;&#x3067;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x305F;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `chunk` argument should be a [Buffer][] or a string.\n-->\n\n<p><code>chunk</code> &#x5F15;&#x6570;&#x306F; [Buffer][] &#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `encoding` argument is optional and only applies when `chunk` is a string.\nDefaults to `'utf8'`.\n-->\n\n<p><code>encoding</code> &#x5F15;&#x6570;&#x306F;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3001;<code>chunk</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306E;&#x5834;&#x5408;&#x3060;&#x3051;&#x9069;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;utf8&apos;</code> &#x3067;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;chunk&quot;
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;request.end([data], [encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;end&quot;,
              &quot;desc&quot;: &quot;<!--\nFinishes sending the request. If any parts of the body are\nunsent, it will flush them to the stream. If the request is\nchunked, this will send the terminating `'0\\r\\n\\r\\n'`.\n-->\n\n<p>&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x9001;&#x4FE1;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30DC;&#x30C7;&#x30A3;&#x306E;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x90E8;&#x5206;&#x304C;&#x307E;&#x3060;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;&#x305D;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x5316;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x3001;&#x3053;&#x308C;&#x306F;&#x7D42;&#x7AEF;&#x306E; <code>&apos;0\\r\\n\\r\\n&apos;</code> &#x3092;&#x9001;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf `data` is specified, it is equivalent to calling\n`request.write(data, encoding)` followed by `request.end()`.\n-->\n\n<p><code>data</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n<code>request.write(data, encoding)</code> &#x306B;&#x7D9A;&#x3051;&#x3066; <code>request.end()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x306E;&#x3068;&#x7B49;&#x4FA1;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;request.abort()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;abort&quot;,
              &quot;desc&quot;: &quot;<!--\nAborts a request.  (New since v0.3.8.)\n-->\n\n<p>&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x30A2;&#x30DC;&#x30FC;&#x30C8;&#x3057;&#x307E;&#x3059; (v0.3.8 &#x304B;&#x3089;&#x306E;&#x65B0;&#x6A5F;&#x80FD;)\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;request.setTimeout(timeout, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setTimeout&quot;,
              &quot;desc&quot;: &quot;<!--\nOnce a socket is assigned to this request and is connected\n[socket.setTimeout()][] will be called.\n-->\n\n<p>&#x3053;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306B;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x3066;&#x63A5;&#x7D9A;&#x3057;&#x305F;&#x969B;&#x306B;&#x3001;\n[socket.setTimeout()][] &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;timeout&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;request.setNoDelay([noDelay])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setNoDelay&quot;,
              &quot;desc&quot;: &quot;<!--\nOnce a socket is assigned to this request and is connected\n[socket.setNoDelay()][] will be called.\n-->\n\n<p>&#x3053;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306B;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x3066;&#x63A5;&#x7D9A;&#x3057;&#x305F;&#x969B;&#x306B;&#x3001;\n[socket.setNoDelay()][] &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;noDelay&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;request.setSocketKeepAlive([enable], [initialDelay])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setSocketKeepAlive&quot;,
              &quot;desc&quot;: &quot;<!--\nOnce a socket is assigned to this request and is connected\n[socket.setKeepAlive()][] will be called.\n-->\n\n<p>&#x3053;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306B;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x3066;&#x63A5;&#x7D9A;&#x3057;&#x305F;&#x969B;&#x306B;&#x3001;\n[socket.setKeepAlive()][] &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;enable&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;initialDelay&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;HTTP&quot;
    },
    {
      &quot;textRaw&quot;: &quot;HTTPS&quot;,
      &quot;name&quot;: &quot;https&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nHTTPS is the HTTP protocol over TLS/SSL. In Node this is implemented as a\nseparate module.\n-->\n\n<p>HTTPS &#x306F; TLS/SSL &#x4E0A;&#x306E; HTTP &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x3067;&#x3059;&#x3002;\nNode &#x3067;&#x306F;&#x3053;&#x308C;&#x3089;&#x306F;&#x5225;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3068;&#x3057;&#x3066;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: https.Server&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;https.Server&quot;,
          &quot;desc&quot;: &quot;<!--\nThis class is a subclass of `tls.Server` and emits events same as\n`http.Server`. See `http.Server` for more information.\n-->\n\n<p>&#x3053;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306F; <code>tls.Server</code> &#x306E;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;<code>http.Server</code> &#x3068;&#x540C;&#x69D8;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x306F; <code>http.Server</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: https.Agent&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;https.Agent&quot;,
          &quot;desc&quot;: &quot;<!--\nAn Agent object for HTTPS similar to [http.Agent][].  See [https.request()][]\nfor more information.\n-->\n\n<p>HTTPS &#x7528;&#x306E; Agent &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#xFF0C;[http.Agent][] &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; [https.request()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;https.createServer(options, [requestListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createServer&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new HTTPS web server object. The `options` is similar to\n[tls.createServer()][].  The `requestListener` is a function which is\nautomatically added to the `'request'` event.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044; HTTPS Web &#x30B5;&#x30FC;&#x30D0;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>option</code> &#x306F; [tls.createServer()][] &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n<code>requestListener</code> &#x306F;&#x95A2;&#x6570;&#x3067;&#x3001; <code>&apos;request&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>// curl -k https://localhost:8000/\nvar https = require(&apos;https&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;)\n};\n\nhttps.createServer(options, function (req, res) {\n  res.writeHead(200);\n  res.end(&quot;hello world\\n&quot;);\n}).listen(8000);</code></pre>\n<!--\nOr\n-->\n\n<p>&#x307E;&#x305F;&#x306F;:\n\n</p>\n<pre><code>var https = require(&apos;https&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;server.pfx&apos;)\n};\n\nhttps.createServer(options, function (req, res) {\n  res.writeHead(200);\n  res.end(&quot;hello world\\n&quot;);\n}).listen(8000);</code></pre>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;server.listen(path, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;desc&quot;: &quot;<!--\nSee [http.listen()][] for details.\n-->\n\n<p>&#x8A73;&#x7D30;&#x306F; [http.listen()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;handle&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;path&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.listen(handle, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;desc&quot;: &quot;<!--\nSee [http.listen()][] for details.\n-->\n\n<p>&#x8A73;&#x7D30;&#x306F; [http.listen()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;handle&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.close([callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<p>See [http.close()][] for details.\n\n</p>\n<p>&#x8A73;&#x7D30;&#x306F; [http.close()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ],
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;requestListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;https.request(options, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;request&quot;,
          &quot;desc&quot;: &quot;<!--\nMakes a request to a secure web server.\n-->\n\n<p>&#x30BB;&#x30AD;&#x30E5;&#x30A2;&#x306A; Web &#x30B5;&#x30FC;&#x30D0;&#x3078;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`options` can be an object or a string. If `options` is a string, it is\nautomatically parsed with [url.parse()](url.html#url.parse).\n-->\n\n<p><code>options</code> &#x306F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>options</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B; <a href="\&quot;url.html#url.parse\&quot;">url.parse()</a>\n&#x306B;&#x3088;&#x3063;&#x3066;&#x89E3;&#x6790;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAll options from [http.request()][] are valid.\n-->\n\n<p>[http.request()][] &#x306E;&#x5168;&#x3066;&#x3068;&#x540C;&#x69D8;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x6307;&#x5B9A;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var https = require(&apos;https&apos;);\n\nvar options = {\n  hostname: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;\n};\n\nvar req = https.request(options, function(res) {\n  console.log(&quot;statusCode: &quot;, res.statusCode);\n  console.log(&quot;headers: &quot;, res.headers);\n\n  res.on(&apos;data&apos;, function(d) {\n    process.stdout.write(d);\n  });\n});\nreq.end();\n\nreq.on(&apos;error&apos;, function(e) {\n  console.error(e);\n});</code></pre>\n<!--\nThe options argument has the following options\n-->\n\n<p><code>options</code> &#x5F15;&#x6570;&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n- `host`: A domain name or IP address of the server to issue the request to.\n  Defaults to `'localhost'`.\n- `hostname`: To support `url.parse()` `hostname` is preferred over `host`\n- `port`: Port of remote server. Defaults to 443.\n- `method`: A string specifying the HTTP request method. Defaults to `'GET'`.\n- `path`: Request path. Defaults to `'/'`. Should include query string if any.\n  E.G. `'/index.html?page=12'`\n- `headers`: An object containing request headers.\n- `auth`: Basic authentication i.e. `'user:password'` to compute an\n  Authorization header.\n- `agent`: Controls [Agent][] behavior. When an Agent is used request will\n  default to `Connection: keep-alive`. Possible values:\n - `undefined` (default): use [globalAgent][] for this host and port.\n - `Agent` object: explicitly use the passed in `Agent`.\n - `false`: opts out of connection pooling with an Agent, defaults request to\n   `Connection: close`.\n-->\n\n<ul>\n<li><code>host</code>: &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x767A;&#x884C;&#x3059;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x540D;&#x307E;&#x305F;&#x306F; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3002;</li>\n<li><code>hostname</code>: <code>url.parse()</code> &#x3067;&#x6271;&#x3048;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>hostname</code> &#x306F; <code>host</code> &#x3092;&#x4E0A;&#x66F8;&#x304D;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>port</code>: &#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30DD;&#x30FC;&#x30C8;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 443 &#x3067;&#x3059;&#x3002;</li>\n<li><code>method</code>: HTTPS &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306E;&#x6587;&#x5B57;&#x5217;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;GET&apos;</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>path</code>: &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30D1;&#x30B9;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;/&apos;</code> &#x3067;&#x3059;&#x3002;\n&#x5FC5;&#x8981;&#x306A;&#x3089;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x542B;&#x3081;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#xFF0E;\n&#x4F8B; <code>&apos;/index.html?page=12&apos;</code></li>\n<li><code>headers</code>: &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x542B;&#x3080;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3002;</li>\n<li><code>auth</code>: &#x3079;&#x30FC;&#x3057;&#x304F;&#x8A8D;&#x8A3C;&#x3059;&#x306A;&#x308F;&#x3061; Authorization &#x30D8;&#x30C3;&#x30C0;&#x306E;&#x305F;&#x3081;&#x306E; <code>&apos;user:password&apos;</code>&#x3002;</li>\n<li><code>agent</code>: [Agent][] &#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x3092;&#x5236;&#x5FA1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;<code>Connection:keep-alive</code> &#x304C;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x53EF;&#x80FD;&#x306A;&#x5024;&#x306F;:<ul>\n<li><code>undefined</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;): &#x30DB;&#x30B9;&#x30C8;&#x3068;&#x30DD;&#x30FC;&#x30C8;&#x3067; [globalAgent][] &#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>Agent</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;: &#x660E;&#x793A;&#x7684;&#x306B;&#x6E21;&#x3055;&#x308C;&#x305F; <code>Agent</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>false</code>: Agent &#x306B;&#x3088;&#x308B;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x30D7;&#x30FC;&#x30EA;&#x30F3;&#x30B0;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>Connection:close</code> &#x306E;&#x5834;&#x5408;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x3059;&#x3002;</li>\n</ul>\n</li>\n</ul>\n<!--\nThe following options from [tls.connect()][] can also be specified. However, a\n[globalAgent][] silently ignores these.\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E; [tls.connect()][] &#x7531;&#x6765;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB; [globalAgent][] &#x306F;&#x3053;&#x308C;&#x3089;&#x3092;&#x7121;&#x8996;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n- `pfx`: Certificate, Private key and CA certificates to use for SSL. Default `null`.\n- `key`: Private key to use for SSL. Default `null`.\n- `passphrase`: A string of passphrase for the private key or pfx. Default `null`.\n- `cert`: Public x509 certificate to use. Default `null`.\n- `ca`: An authority certificate or array of authority certificates to check\n  the remote host against.\n- `ciphers`: A string describing the ciphers to use or exclude. Consult\n  <http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT> for\n  details on the format.\n- `rejectUnauthorized`: If `true`, the server certificate is verified against\n  the list of supplied CAs. An `'error'` event is emitted if verification\n  fails. Verification happens at the connection level, *before* the HTTP\n  request is sent. Default `true`.\n- `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force\n  SSL version 3. The possible values depend on your installation of\n  OpenSSL and are defined in the constant [SSL_METHODS][].\n-->\n\n<ul>\n<li><code>pfx</code>: SSL &#x3067;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x3001;&#x79D8;&#x5BC6;&#x9375;&#x3001;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3002;\n &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>null</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>key</code>: SSL &#x3067;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x79D8;&#x5BC6;&#x9375;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>null</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>passphrase</code>: &#x79D8;&#x5BC6;&#x9375;&#x307E;&#x305F;&#x306F; pfx &#x306E;&#x30D1;&#x30B9;&#x30D5;&#x30EC;&#x30FC;&#x30BA;&#x3092;&#x8868;&#x3059;&#x6587;&#x5B57;&#x5217;&#x3002;\n &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>null</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>cert</code>: x509&#x516C;&#x958B;&#x8A3C;&#x660E;&#x66F8;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>null</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>ca</code>: &#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30DB;&#x30B9;&#x30C8;&#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x308B;&#x8A8D;&#x8A3C;&#x5C40;&#x307E;&#x305F;&#x306F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;&#x914D;&#x5217;&#x3002;</li>\n<li><code>ciphers</code>: &#x4F7F;&#x7528;&#x307E;&#x305F;&#x306F;&#x9664;&#x5916;&#x3059;&#x308B;&#x6697;&#x53F7;&#x3092;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <a href="\&quot;http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT\&quot;">http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT</a>\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n<li><code>rejectUnauthorized</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x8A3C;&#x660E;&#x66F8;&#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;\n&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x691C;&#x8A3C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x306F; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B; <em>&#x524D;</em> &#x306B;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x30EC;&#x30D9;&#x30EB;&#x3067;&#x884C;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>true</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>secureProtocol</code>: &#x4F7F;&#x7528;&#x3059;&#x308B; SSL &#x65B9;&#x5F0F;&#x3001;&#x305F;&#x3068;&#x3048;&#x3070; <code>SSLv3_method</code> &#x306F;\nSSL &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 3 &#x3092;&#x5F37;&#x5236;&#x3057;&#x307E;&#x3059;&#x3002;&#x53EF;&#x80FD;&#x306A;&#x5024;&#x306F;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B; OpenSSL &#x3068;&#x3001;\n&#x305D;&#x306E;&#x5B9A;&#x6570; [SSL_METHODS][] &#x306E;&#x5B9A;&#x7FA9;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nIn order to specify these options, use a custom `Agent`.\n-->\n\n<p>&#x3053;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;&#x30AB;&#x30B9;&#x30BF;&#x30E0;&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var options = {\n  hostname: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;,\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;)\n};\noptions.agent = new https.Agent(options);\n\nvar req = https.request(options, function(res) {\n  ...\n}</code></pre>\n<!--\nOr does not use an `Agent`.\n-->\n\n<p>&#x3042;&#x308B;&#x3044;&#x306F;&#x3001;&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var options = {\n  hostname: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;,\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;),\n  agent: false\n};\n\nvar req = https.request(options, function(res) {\n  ...\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;https.get(options, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;get&quot;,
          &quot;desc&quot;: &quot;<!--\nLike `http.get()` but for HTTPS.\n-->\n\n<p><code>http.get()</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C; HTTPS &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n`options` can be an object or a string. If `options` is a string, it is\nautomatically parsed with [url.parse()](url.html#url.parse).\n-->\n\n<p><code>options</code> &#x306F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>options</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B; <a href="\&quot;url.html#url.parse\&quot;">url.parse()</a>\n&#x306B;&#x3088;&#x3063;&#x3066;&#x89E3;&#x6790;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var https = require(&apos;https&apos;);\n\nhttps.get(&apos;https://encrypted.google.com/&apos;, function(res) {\n  console.log(&quot;statusCode: &quot;, res.statusCode);\n  console.log(&quot;headers: &quot;, res.headers);\n\n  res.on(&apos;data&apos;, function(d) {\n    process.stdout.write(d);\n  });\n\n}).on(&apos;error&apos;, function(e) {\n  console.error(e);\n});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;https.globalAgent&quot;,
          &quot;name&quot;: &quot;globalAgent&quot;,
          &quot;desc&quot;: &quot;<!--\nGlobal instance of [https.Agent][] for all HTTPS client requests.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; HTTPS &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3067;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x308B;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;\n[https.Agent][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;HTTPS&quot;
    },
    {
      &quot;textRaw&quot;: &quot;URL&quot;,
      &quot;name&quot;: &quot;url&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nThis module has utilities for URL resolution and parsing.\nCall `require('url')` to use it.\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;URL&#x306E;&#x89E3;&#x6C7A;&#x3084;&#x89E3;&#x6790;&#x306E;&#x70BA;&#x306E;&#x30E6;&#x30FC;&#x30C6;&#x30A3;&#x30EA;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x5229;&#x7528;&#x3059;&#x308B;&#x306B;&#x306F; <code>require(&apos;url&apos;)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nParsed URL objects have some or all of the following fields, depending on\nwhether or not they exist in the URL string. Any parts that are not in the URL\nstring will not be in the parsed object. Examples are shown for the URL\n-->\n\n<p>&#x89E3;&#x6790;&#x3055;&#x308C;&#x305F;URL&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x3001;URL&#x6587;&#x5B57;&#x5217;&#x306E;&#x4E2D;&#x306B;&#x5B58;&#x5728;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x306B;&#x5FDC;&#x3058;&#x3066;\n&#x6B21;&#x306B;&#x793A;&#x3059;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x3092;&#x3044;&#x304F;&#x3064;&#x304B;&#x3082;&#x3057;&#x304F;&#x306F;&#x5168;&#x3066;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\nURL&#x6587;&#x5B57;&#x5217;&#x306B;&#x542B;&#x307E;&#x308C;&#x306A;&#x3044;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x306F;&#x89E3;&#x6790;&#x7D50;&#x679C;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x542B;&#x307E;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x6B21;&#x306E;URL&#x3067;&#x4F8B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>&apos;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&apos;</code>\n\n</p>\n<!--\n* `href`: The full URL that was originally parsed. Both the protocol and host are lowercased.\n\n    Example: `'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'`\n\n* `protocol`: The request protocol, lowercased.\n\n    Example: `'http:'`\n\n* `host`: The full lowercased host portion of the URL, including port\n  information.\n\n    Example: `'host.com:8080'`\n\n* `auth`: The authentication information portion of a URL.\n\n    Example: `'user:pass'`\n\n* `hostname`: Just the lowercased hostname portion of the host.\n\n    Example: `'host.com'`\n\n* `port`: The port number portion of the host.\n\n    Example: `'8080'`\n\n* `pathname`: The path section of the URL, that comes after the host and\n  before the query, including the initial slash if present.\n\n    Example: `'/p/a/t/h'`\n\n* `search`: The 'query string' portion of the URL, including the leading\n  question mark.\n\n    Example: `'?query=string'`\n\n* `path`: Concatenation of `pathname` and `search`.\n\n    Example: `'/p/a/t/h?query=string'`\n\n* `query`: Either the 'params' portion of the query string, or a\n  querystring-parsed object.\n\n    Example: `'query=string'` or `{'query':'string'}`\n\n* `hash`: The 'fragment' portion of the URL including the pound-sign.\n\n    Example: `'#hash'`\n-->\n\n<ul>\n<li><p><code>href</code>: &#x89E3;&#x6790;&#x3059;&#x308B;&#x524D;&#x306E;&#x5B8C;&#x5168;&#x306A; URL&#x3002;protocol &#x3068; host &#x306F;&#x3069;&#x3061;&#x3089;&#x3082;&#x5C0F;&#x6587;&#x5B57;&#x5316;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n<p>  &#x4F8B;: <code>&apos;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&apos;</code></p>\n</li>\n<li><p><code>protocol</code>: &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x3002;&#x5C0F;&#x6587;&#x5B57;&#x5316;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n<p>  &#x4F8B;: <code>&apos;http:&apos;</code></p>\n</li>\n<li><p><code>host</code>: URL &#x306E;&#x5B8C;&#x5168;&#x3067;&#x5C0F;&#x6587;&#x5B57;&#x5316;&#x3055;&#x308C;&#x305F;&#x30DB;&#x30B9;&#x30C8;&#x60C5;&#x5831;&#x3002;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x3092;&#x542B;&#x307F;&#x307E;&#x3059;&#x3002;</p>\n<p>  &#x4F8B;: <code>&apos;host.com:8080&apos;</code></p>\n</li>\n<li><p><code>auth</code>: URL &#x306E;&#x8A8D;&#x8A3C;&#x60C5;&#x5831;&#x3002;</p>\n<p>  &#x4F8B;: <code>&apos;user:pass&apos;</code></p>\n</li>\n<li><p><code>hostname</code>: &#x30DB;&#x30B9;&#x30C8;&#x60C5;&#x5831;&#x306E;&#x4E2D;&#x306E;&#x5C0F;&#x6587;&#x5B57;&#x5316;&#x3055;&#x308C;&#x305F;&#x30DB;&#x30B9;&#x30C8;&#x540D;&#x3002;</p>\n<p>  &#x4F8B;: <code>&apos;host.com&apos;</code></p>\n</li>\n<li><p><code>port</code>: &#x30DB;&#x30B9;&#x30C8;&#x60C5;&#x5831;&#x306E;&#x4E2D;&#x306E;&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x3002;</p>\n<p>  &#x4F8B;: <code>&apos;8080&apos;</code></p>\n</li>\n<li><p><code>pathname</code>: URL &#x306E;&#x30D1;&#x30B9;&#x90E8;&#x5206;&#x3002;&#x30DB;&#x30B9;&#x30C8;&#x60C5;&#x5831;&#x304B;&#x3089;&#x30AF;&#x30A8;&#x30EA;&#x307E;&#x3067;&#x306E;&#x9593;&#x306B;&#x4F4D;&#x7F6E;&#x3057;&#x3001;\n&#x6700;&#x521D;&#x306B;&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x5834;&#x5408;&#x306F;&#x305D;&#x308C;&#x3082;&#x542B;&#x307F;&#x307E;&#x3059;&#x3002;</p>\n<p>  &#x4F8B;: <code>&apos;/p/a/t/h&apos;</code></p>\n</li>\n<li><p><code>search</code>: URL &#x306E;&#x30AF;&#x30A8;&#x30EA;&#x6587;&#x5B57;&#x5217;&#x3002;&#x5148;&#x982D;&#x306E; ? &#x30DE;&#x30FC;&#x30AF;&#x3082;&#x542B;&#x307F;&#x307E;&#x3059;&#x3002;</p>\n<p>  &#x4F8B;: <code>&apos;?query=string&apos;</code></p>\n</li>\n<li><p><code>path</code>: <code>pathname</code> &#x3068; <code>search</code> &#x3092;&#x9023;&#x7D50;&#x3057;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3002;</p>\n<p>  &#x4F8B;: <code>&apos;/p/a/t/h?query=string&apos;</code></p>\n</li>\n<li><p><code>query</code>: &#x30AF;&#x30A8;&#x30EA;&#x306E;&#x5909;&#x6570;&#x90E8;&#x5206;&#x306E;&#x6587;&#x5B57;&#x5217;&#x3001;&#x3082;&#x3057;&#x304F;&#x306F;&#x30AF;&#x30A8;&#x30EA;&#x6587;&#x5B57;&#x5217;&#x3092;&#x89E3;&#x6790;&#x3057;&#x305F;\n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3002;</p>\n<p>  &#x4F8B;: <code>&apos;query=string&apos;</code> or <code>{&apos;query&apos;:&apos;string&apos;}</code></p>\n</li>\n<li><p><code>hash</code>: URL &#x306E; # &#x30DE;&#x30FC;&#x30AF;&#x3092;&#x542B;&#x3080;&#x90E8;&#x5206;&#x3002;</p>\n<p>  &#x4F8B;: <code>&apos;#hash&apos;</code></p>\n</li>\n</ul>\n<!--\nThe following methods are provided by the URL module:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;URL&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x3088;&#x308A;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x307E;&#x3059;:\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;url.parse(urlStr, [parseQueryString], [slashesDenoteHost])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;parse&quot;,
          &quot;desc&quot;: &quot;<!--\nTake a URL string, and return an object.\n\nPass `true` as the second argument to also parse\nthe query string using the `querystring` module.\nDefaults to `false`.\n\nPass `true` as the third argument to treat `//foo/bar` as\n`{ host: 'foo', pathname: '/bar' }` rather than\n`{ pathname: '//foo/bar' }`. Defaults to `false`.\n-->\n\n<p>URL&#x6587;&#x5B57;&#x5217;&#x3092;&#x5F15;&#x6570;&#x306B;&#x53D6;&#x308A;&#x3001;&#x89E3;&#x6790;&#x7D50;&#x679C;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>querystring</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x30AF;&#x30A8;&#x30EA;&#x6587;&#x5B57;&#x5217;&#x3082;&#x89E3;&#x6790;&#x3057;&#x305F;&#x3044;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x7B2C; 2 &#x5F15;&#x6570;&#x306B; <code>true</code> &#x3092;&#x6E21;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>//foo/bar</code> &#x3092; <code>{ pathname: &apos;//foo/bar&apos; }</code> &#x3067;&#x306F;&#x306A;&#x304F;\n<code>{ host: &apos;foo&apos;, pathname: &apos;/bar&apos; }</code> &#x3068;&#x3057;&#x305F;&#x3044;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x7B2C; 3 &#x5F15;&#x6570;&#x306B; <code>true</code> &#x3092;&#x6E21;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;urlStr&quot;
                },
                {
                  &quot;name&quot;: &quot;parseQueryString&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;slashesDenoteHost&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;url.format(urlObj)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;format&quot;,
          &quot;desc&quot;: &quot;<!--\nTake a parsed URL object, and return a formatted URL string.\n-->\n\n<p>URL &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x5F15;&#x6570;&#x306B;&#x53D6;&#x308A;&#x3001;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x3057;&#x305F; URL &#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* `href` will be ignored.\n* `protocol`is treated the same with or without the trailing `:` (colon).\n  * The protocols `http`, `https`, `ftp`, `gopher`, `file` will be\n    postfixed with `://` (colon-slash-slash).\n  * All other protocols `mailto`, `xmpp`, `aim`, `sftp`, `foo`, etc will\n    be postfixed with `:` (colon)\n* `auth` will be used if present.\n* `hostname` will only be used if `host` is absent.\n* `port` will only be used if `host` is absent.\n* `host` will be used in place of `hostname` and `port`\n* `pathname` is treated the same with or without the leading `/` (slash)\n* `search` will be used in place of `query`\n* `query` (object; see `querystring`) will only be used if `search` is absent.\n* `search` is treated the same with or without the leading `?` (question mark)\n* `hash` is treated the same with or without the leading `#` (pound sign, anchor)\n-->\n\n<ul>\n<li><code>href</code> &#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>protocol</code> &#x306E;&#x672B;&#x5C3E;&#x306B; <code>:</code> (&#x30B3;&#x30ED;&#x30F3;) &#x304C;&#x3042;&#x3063;&#x3066;&#x3082;&#x306A;&#x304F;&#x3066;&#x3082;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x6271;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;<ul>\n<li><code>http</code>&#x3001;<code>https</code>&#x3001;<code>ftp</code>&#x3001;<code>gopher</code>&#x3001;<code>file</code> &#x306F;&#x672B;&#x5C3E;&#x306B; <code>://</code>\n(&#x30B3;&#x30ED;&#x30F3;&#x3001;&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x3001;&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;) &#x304C;&#x4ED8;&#x3051;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>mailto</code>&#x3001;<code>xmpp</code>&#x3001;<code>aim</code>&#x3001;<code>sftp</code>&#x3001;<code>foo</code> &#x306A;&#x3069;&#x3001;&#x305D;&#x306E;&#x4ED6;&#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x306F;&#x672B;&#x5C3E;&#x306B; <code>:</code>\n(&#x30B3;&#x30ED;&#x30F3;) &#x304C;&#x4ED8;&#x3051;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n</li>\n<li><code>auth</code> &#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x308B;&#x3068;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>hostname</code> &#x306F; <code>host</code> &#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3060;&#x3051;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>port</code> &#x306F; <code>host</code> &#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3060;&#x3051;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>host</code> &#x306F; <code>hostname</code>&#x3001;<code>port</code> &#x306E;&#x4F4D;&#x7F6E;&#x3067;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>pathname</code> &#x306E;&#x5148;&#x982D;&#x306B; <code>/</code> (&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;) &#x304C;&#x3042;&#x3063;&#x3066;&#x3082;&#x306A;&#x304F;&#x3066;&#x3082;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x6271;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>search</code> &#x306F; <code>query</code> &#x306E;&#x4F4D;&#x7F6E;&#x3067;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>query</code> (&#x6587;&#x5B57;&#x5217;&#x3067;&#x306F;&#x306A;&#x304F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;; <code>querystring</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;) &#x306F; <code>search</code> &#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3060;&#x3051;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>search</code> &#x306E;&#x5148;&#x982D;&#x306B; <code>?</code> (&#x30AF;&#x30A8;&#x30B9;&#x30C1;&#x30E7;&#x30F3;&#x30DE;&#x30FC;&#x30AF;) &#x304C;&#x3042;&#x3063;&#x3066;&#x3082;&#x306A;&#x304F;&#x3066;&#x3082;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x6271;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>hash</code> &#x306E;&#x5148;&#x982D;&#x306B; <code>#</code> (&#x30B7;&#x30E3;&#x30FC;&#x30D7;, &#x30A2;&#x30F3;&#x30AB;&#x30FC;) &#x304C;&#x3042;&#x3063;&#x3066;&#x3082;&#x306A;&#x304F;&#x3066;&#x3082;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x6271;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;urlObj&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;url.resolve(from, to)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolve&quot;,
          &quot;desc&quot;: &quot;<!--\nTake a base URL, and a href URL, and resolve them as a browser would for\nan anchor tag.  Examples:\n-->\n\n<p>&#x30D9;&#x30FC;&#x30B9;&#x3068;&#x306A;&#x308B; URL &#x3068;&#x76F8;&#x5BFE; URL &#x3092;&#x5F15;&#x6570;&#x306B;&#x53D6;&#x308A;&#x3001;&#x30D6;&#x30E9;&#x30A6;&#x30B6;&#x304C;&#x30A2;&#x30F3;&#x30AB;&#x30FC;&#x30BF;&#x30B0;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x884C;&#x3046;&#x306E;&#x3068;&#x540C;&#x69D8;&#x306B; URL &#x3092;&#x89E3;&#x6C7A;&#x3057;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>url.resolve(&apos;/one/two/three&apos;, &apos;four&apos;)         // &apos;/one/two/four&apos;\nurl.resolve(&apos;http://example.com/&apos;, &apos;/one&apos;)    // &apos;http://example.com/one&apos;\nurl.resolve(&apos;http://example.com/one&apos;, &apos;/two&apos;) // &apos;http://example.com/two&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;from&quot;
                },
                {
                  &quot;name&quot;: &quot;to&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;URL&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Query String&quot;,
      &quot;name&quot;: &quot;querystring&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nThis module provides utilities for dealing with query strings.\nIt provides the following methods:\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x30AF;&#x30A8;&#x30EA;&#x6587;&#x5B57;&#x5217;&#x3092;&#x51E6;&#x7406;&#x3059;&#x308B;&#x30E6;&#x30FC;&#x30C6;&#x30A3;&#x30EA;&#x30C6;&#x30A3;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002; &#x4EE5;&#x4E0B;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304B;&#x3089;&#x6210;&#x308A;&#x307E;&#x3059;:\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;querystring.stringify(obj, [sep], [eq])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;stringify&quot;,
          &quot;Serialize an object to a query string.\nOptionally override the default separator (`&apos;&amp;&apos;`) and assignment (`&apos;&quot;: &quot;&apos;`)\ncharacters.&quot;,
          &quot;desc&quot;: &quot;<p>&#x30AF;&#x30A8;&#x30EA;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x6587;&#x5B57;&#x5217;&#x3078;&#x76F4;&#x5217;&#x5316;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x3057;&#x3066;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x533A;&#x5207;&#x308A;&#x6587;&#x5B57; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;&amp;&apos;</code>) &#x3068;&#x4EE3;&#x5165;&#x6587;&#x5B57;\n(&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;=&apos;</code>) &#x3092;&#x4E0A;&#x66F8;&#x304D;&#x6307;&#x5B9A;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>querystring.stringify({ foo: &apos;bar&apos;, baz: [&apos;qux&apos;, &apos;quux&apos;], corge: &apos;&apos; })\n// returns\n&apos;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&apos;\n\nquerystring.stringify({foo: &apos;bar&apos;, baz: &apos;qux&apos;}, &apos;;&apos;, &apos;:&apos;)\n// returns\n&apos;foo:bar;baz:qux&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;obj&quot;
                },
                {
                  &quot;name&quot;: &quot;sep&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;eq&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;querystring.parse(str, [sep], [eq], [options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;parse&quot;,
          &quot;Deserialize a query string to an object.\nOptionally override the default separator (`&apos;&amp;&apos;`) and assignment (`&apos;&quot;: &quot;&apos;`)\ncharacters.\n\nOptions object may contain `maxKeys` property (equal to 1000 by default), it&apos;ll\nbe used to limit processed keys. Set it to 0 to remove key count limitation.&quot;,
          &quot;desc&quot;: &quot;<p>&#x30AF;&#x30A8;&#x30EA;&#x6587;&#x5B57;&#x5217;&#x3092;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x5FA9;&#x5143;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3068;&#x3057;&#x3066;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x533A;&#x5207;&#x308A;&#x6587;&#x5B57; (<code>&apos;&amp;&apos;</code>) &#x3068;&#x4EE3;&#x5165;&#x6587;&#x5B57; (<code>&apos;=&apos;</code>)\n&#x3092;&#x4E0A;&#x66F8;&#x304D;&#x6307;&#x5B9A;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; <code>maxKeys</code> &#x3092;&#x542B;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;\n1000 &#x3067;&#x3059;)&#x3002;&#x305D;&#x308C;&#x306F;&#x30AD;&#x30FC;&#x3092;&#x51E6;&#x7406;&#x3059;&#x308B;&#x4E0A;&#x9650;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n0 &#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x5236;&#x9650;&#x306F;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>querystring.parse(&apos;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge&apos;)\n// returns\n{ foo: &apos;bar&apos;, baz: [&apos;qux&apos;, &apos;quux&apos;], corge: &apos;&apos; }</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;str&quot;
                },
                {
                  &quot;name&quot;: &quot;sep&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;eq&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;querystring.escape&quot;,
          &quot;name&quot;: &quot;escape&quot;,
          &quot;desc&quot;: &quot;<!--\nThe escape function used by `querystring.stringify`,\nprovided so that it could be overridden if necessary.\n-->\n\n<p>escape &#x95A2;&#x6570;&#x306F; <code>querystring.stringify</code> &#x3067;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x3066;&#x3044;&#x3066;&#x3001;&#x5FC5;&#x8981;&#x306A;&#x5834;&#x5408;&#x306B;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;querystring.unescape&quot;,
          &quot;name&quot;: &quot;unescape&quot;,
          &quot;desc&quot;: &quot;<!--\nThe unescape function used by `querystring.parse`,\nprovided so that it could be overridden if necessary.\n-->\n\n<p>unescape&#x95A2;&#x6570;&#x306F; <code>querystring.parse</code> &#x3067;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x3066;&#x3044;&#x3066;&#x3001;&#x5FC5;&#x8981;&#x306A;&#x5834;&#x5408;&#x306B;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;querystring&quot;
    },
    {
      &quot;textRaw&quot;: &quot;punycode&quot;,
      &quot;name&quot;: &quot;punycode&quot;,
      &quot;stability&quot;: 2,
      &quot;stabilityText&quot;: &quot;Unstable&quot;,
      &quot;desc&quot;: &quot;<!--\n[Punycode.js](http://mths.be/punycode) is bundled with Node.js v0.6.2+. Use\n`require('punycode')` to access it. (To use it with other Node.js versions,\nuse npm to install the `punycode` module first.)\n-->\n\n<p><a href="\&quot;http://mths.be/punycode\&quot;">Punycode.js</a> &#x306F; Node.js v0.6.2 &#x4EE5;&#x964D;&#x306B;\n&#x30D0;&#x30F3;&#x30C9;&#x30EB;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x306B;&#x306F; <code>require(&apos;punycode&apos;)</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;\n(&#x4ED6;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E; Node.js &#x3067;&#x3053;&#x308C;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;&#x5148;&#x306B; npm &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066; <code>punycode</code>\n&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;punycode.decode(string)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;decode&quot;,
          &quot;desc&quot;: &quot;<!--\nConverts a Punycode string of ASCII code points to a string of Unicode code\npoints.\n-->\n\n<p>ASCII &#x30B3;&#x30FC;&#x30C9;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x308B; Punycode &#x6587;&#x5B57;&#x5217;&#x3092; Unicode &#x30B3;&#x30FC;&#x30C9;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306B;\n&#x5909;&#x63DB;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>// decode domain name parts\npunycode.decode(&apos;maana-pta&apos;); // &apos;ma&#xF1;ana&apos;\npunycode.decode(&apos;--dqo34k&apos;); // &apos;&#x2603;-&#x2318;&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;string&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;punycode.encode(string)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;encode&quot;,
          &quot;desc&quot;: &quot;<!--\nConverts a string of Unicode code points to a Punycode string of ASCII code\npoints.\n-->\n\n<p>Unicode &#x30B3;&#x30FC;&#x30C9;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x3092; ASCII &#x30B3;&#x30FC;&#x30C9;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x308B; Punycode &#x6587;&#x5B57;&#x5217;&#x306B;\n&#x5909;&#x63DB;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>// encode domain name parts\npunycode.encode(&apos;ma&#xF1;ana&apos;); // &apos;maana-pta&apos;\npunycode.encode(&apos;&#x2603;-&#x2318;&apos;); // &apos;--dqo34k&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;string&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;punycode.toUnicode(domain)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;toUnicode&quot;,
          &quot;desc&quot;: &quot;<!--\nConverts a Punycode string representing a domain name to Unicode. Only the\nPunycoded parts of the domain name will be converted, i.e. it doesn't matter if\nyou call it on a string that has already been converted to Unicode.\n-->\n\n<p>Punycode &#x6587;&#x5B57;&#x5217;&#x3067;&#x8868;&#x73FE;&#x3055;&#x308C;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x540D;&#x3092; Unicode &#x306B;&#x5909;&#x63DB;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x540D;&#x306E;&#x4E2D;&#x306E; Punycode &#x5316;&#x3055;&#x308C;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3060;&#x3051;&#x304C;&#x5909;&#x63DB;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;&#x3059;&#x3067;&#x306B; Unicode &#x306B;&#x5909;&#x63DB;&#x3055;&#x308C;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3082;&#x6C17;&#x306B;&#x305B;&#x305A;&#x306B;&#x6E21;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>// decode domain names\npunycode.toUnicode(&apos;xn--maana-pta.com&apos;); // &apos;ma&#xF1;ana.com&apos;\npunycode.toUnicode(&apos;xn----dqo34k.com&apos;); // &apos;&#x2603;-&#x2318;.com&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;domain&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;punycode.toASCII(domain)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;toASCII&quot;,
          &quot;desc&quot;: &quot;<!--\nConverts a Unicode string representing a domain name to Punycode. Only the\nnon-ASCII parts of the domain name will be converted, i.e. it doesn't matter if\nyou call it with a domain that's already in ASCII.\n-->\n\n<p>Unicode &#x6587;&#x5B57;&#x5217;&#x3067;&#x8868;&#x73FE;&#x3055;&#x308C;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x540D;&#x3092; Punycode &#x306B;&#x5909;&#x63DB;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x540D;&#x306E;&#x4E2D;&#x306E;&#x975E; ASCII &#x6587;&#x5B57;&#x3060;&#x3051;&#x304C;&#x5909;&#x63DB;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x3059;&#x3067;&#x306B; ASCII &#x5316;&#x3055;&#x308C;&#x305F;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x3067;&#x3082;&#x6C17;&#x306B;&#x305B;&#x305A;&#x306B;&#x6E21;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>// encode domain names\npunycode.toASCII(&apos;ma&#xF1;ana.com&apos;); // &apos;xn--maana-pta.com&apos;\npunycode.toASCII(&apos;&#x2603;-&#x2318;.com&apos;); // &apos;xn----dqo34k.com&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;domain&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;punycode.ucs2&quot;,
          &quot;name&quot;: &quot;ucs2&quot;,
          &quot;modules&quot;: [
            {
              &quot;textRaw&quot;: &quot;punycode.ucs2.decode(string)&quot;,
              &quot;name&quot;: &quot;punycode.ucs2.decode(string)&quot;,
              &quot;desc&quot;: &quot;<!--\nCreates an array containing the decimal code points of each Unicode character\nin the string. While [JavaScript uses UCS-2\ninternally](http://mathiasbynens.be/notes/javascript-encoding), this function\nwill convert a pair of surrogate halves (each of which UCS-2 exposes as\nseparate characters) into a single code point, matching UTF-16.\n-->\n\n<p>&#x6587;&#x5B57;&#x5217;&#x4E2D;&#x306E; Unicode &#x6587;&#x5B57;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306B;&#x5BFE;&#x5FDC;&#x3059;&#x308B;&#x6570;&#x5024;&#x3092;&#x542B;&#x3080;&#x914D;&#x5217;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n<a href="\&quot;http://mathiasbynens.be/notes/javascript-encoding\&quot;">JavaScript uses UCS-2 internally</a>\n&#x306E;&#x3088;&#x3046;&#x306B;&#x3001;&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x30B5;&#x30ED;&#x30B2;&#x30FC;&#x30C8;&#x30DA;&#x30A2; (&#x305D;&#x308C;&#x305E;&#x308C;&#x306F; UCS-2 &#x306E;&#x72EC;&#x7ACB;&#x3057;&#x305F;&#x6587;&#x5B57;) &#x3092;\nUTF-16 &#x306B;&#x30DE;&#x30C3;&#x30C1;&#x3059;&#x308B;&#x4E00;&#x3064;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306B;&#x5909;&#x63DB;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>punycode.ucs2.decode(&apos;abc&apos;); // [97, 98, 99]\n// surrogate pair for U+1D306 tetragram for centre:\npunycode.ucs2.decode(&apos;\\uD834\\uDF06&apos;); // [0x1D306]</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;punycode.ucs2.decode(string)&quot;
            },
            {
              &quot;textRaw&quot;: &quot;punycode.ucs2.encode(codePoints)&quot;,
              &quot;name&quot;: &quot;punycode.ucs2.encode(codepoints)&quot;,
              &quot;desc&quot;: &quot;<!--\nCreates a string based on an array of decimal code points.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30C9;&#x30DD;&#x30A4;&#x30F3;&#x30C8;&#x306E;&#x6570;&#x5024;&#x3092;&#x542B;&#x3080;&#x914D;&#x5217;&#x3092;&#x5143;&#x306B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>punycode.ucs2.encode([97, 98, 99]); // &apos;abc&apos;\npunycode.ucs2.encode([0x1D306]); // &apos;\\uD834\\uDF06&apos;</code></pre>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;punycode.ucs2.encode(codePoints)&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;punycode.version&quot;,
          &quot;name&quot;: &quot;version&quot;,
          &quot;desc&quot;: &quot;<!--\nA string representing the current Punycode.js version number.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E; Punycode.js &#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x756A;&#x53F7;&#x3092;&#x8868;&#x3059;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;punycode&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Readline&quot;,
      &quot;name&quot;: &quot;readline&quot;,
      &quot;stability&quot;: 2,
      &quot;stabilityText&quot;: &quot;Unstable&quot;,
      &quot;desc&quot;: &quot;<!--\nTo use this module, do `require('readline')`. Readline allows reading of a\nstream (such as `process.stdin`) on a line-by-line basis.\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;<code>require(&apos;readline&apos;)</code> &#x3092;&#x3057;&#x307E;&#x3059;&#x3002;\nReadline &#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0; (&#x305F;&#x3068;&#x3048;&#x3070; <code>process.stdin</code>)\n&#x3092;&#x884C;&#x3054;&#x3068;&#x306B;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that once you've invoked this module, your node program will not\nterminate until you've closed the interface. Here's how to allow your\nprogram to gracefully exit:\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x4E00;&#x5EA6;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x3068;&#x3001;&#x3053;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;\n&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3059;&#x308B;&#x307E;&#x3067; node &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x7D42;&#x4E86;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x30B9;&#x30E0;&#x30FC;&#x30BA;&#x306B;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x3092;&#x4EE5;&#x4E0B;&#x306B;&#x793A;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>var readline = require(&apos;readline&apos;);\n\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question(&quot;What do you think of node.js? &quot;, function(answer) {\n  // TODO: Log the answer in a database\n  console.log(&quot;Thank you for your valuable feedback:&quot;, answer);\n\n  rl.close();\n});</code></pre>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;readline.createInterface(options)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createInterface&quot;,
          &quot;desc&quot;: &quot;<!--\nCreates a readline `Interface` instance. Accepts an \"options\" Object that takes\nthe following values:\n-->\n\n<p>&#x884C;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080; <code>Interface</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4EE5;&#x4E0B;&#x306E;&#x5024;&#x3092;&#x542B;&#x3080; <code>options</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n - `input` - the readable stream to listen to (Required).\n\n - `output` - the writable stream to write readline data to (Required).\n\n - `completer` - an optional function that is used for Tab autocompletion. See\n   below for an example of using this.\n\n - `terminal` - pass `true` if the `input` and `output` streams should be\n   treated like a TTY, and have ANSI/VT100 escape codes written to it.\n   Defaults to checking `isTTY` on the `output` stream upon instantiation.\n-->\n\n<ul>\n<li><p><code>input</code> - &#x76E3;&#x8996;&#x3059;&#x308B;&#x5165;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0; (&#x5FC5;&#x9808;)&#x3002;</p>\n</li>\n<li><p><code>output</code> - &#x8AAD;&#x307F;&#x8FBC;&#x3093;&#x3060;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304F;&#x305F;&#x3081;&#x306E;&#x51FA;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0; (&#x5FC5;&#x9808;)&#x3002;</p>\n</li>\n<li><p><code>completer</code> - &#x30BF;&#x30D6;&#x306B;&#x3088;&#x308B;&#x81EA;&#x52D5;&#x88DC;&#x5B8C;&#x306E;&#x305F;&#x3081;&#x306E;&#x95A2;&#x6570; (&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;)&#x3002;\n&#x5F8C;&#x8FF0;&#x306E;&#x4F8B;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</p>\n</li>\n<li><p><code>terminal</code> - <code>input</code> &#x304A;&#x3088;&#x3073; <code>output</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; TTY &#x30C7;&#x30D0;&#x30A4;&#x30B9;&#x3067;&#x3001;\nANSI/VT100 &#x30A8;&#x30B9;&#x30B1;&#x30FC;&#x30D7;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x51FA;&#x529B;&#x3059;&#x308B;&#x5834;&#x5408;&#x306F; <code>true</code> &#x3092;&#x6E21;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x751F;&#x6210;&#x6642;&#x306B; <code>output</code> &#x306B;&#x5BFE;&#x3057;&#x3066;\n<code>isTTY</code> &#x3067;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nThe `completer` function is given the current line entered by the user, and\nis supposed to return an Array with 2 entries:\n-->\n\n<p><code>completer</code> &#x95A2;&#x6570;&#x306B;&#x306F;&#x30E6;&#x30FC;&#x30B6;&#x304C;&#x5165;&#x529B;&#x3057;&#x305F;&#x73FE;&#x5728;&#x306E;&#x884C;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x3001;\n2 &#x3064;&#x306E;&#x30A8;&#x30F3;&#x30C8;&#x30EA;&#x3092;&#x542B;&#x3080;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x304C;&#x671F;&#x5F85;&#x3055;&#x308C;&#x307E;&#x3059;:\n\n</p>\n<!--\n 1. An Array with matching entries for the completion.\n\n 2. The substring that was used for the matching.\n-->\n\n<ol>\n<li><p>&#x88DC;&#x5B8C;&#x306B;&#x3088;&#x3063;&#x3066;&#x30DE;&#x30C3;&#x30C1;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30C8;&#x30EA;&#x306E;&#x914D;&#x5217;&#x3002;</p>\n</li>\n<li><p>&#x30DE;&#x30C3;&#x30C1;&#x30F3;&#x30B0;&#x306B;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x305F;&#x90E8;&#x5206;&#x6587;&#x5B57;&#x5217;&#x3002;</p>\n</li>\n</ol>\n<!--\nWhich ends up looking something like:\n`[[substr1, substr2, ...], originalsubstring]`.\n-->\n\n<p>&#x305D;&#x308C;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n<code>[[substr1, substr2, ...], originalsubstring]</code>&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>function completer(line) {\n  var completions = &apos;.help .error .exit .quit .q&apos;.split(&apos; &apos;)\n  var hits = completions.filter(function(c) { return c.indexOf(line) == 0 })\n  // show all completions if none found\n  return [hits.length ? hits : completions, line]\n}</code></pre>\n<!--\nAlso `completer` can be run in async mode if it accepts two arguments:\n-->\n\n<p><code>completer</code> &#x304C;&#x4E8C;&#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x6301;&#x3064;&#x306A;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F;&#x975E;&#x540C;&#x671F;&#x30E2;&#x30FC;&#x30C9;&#x3067;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>function completer(linePartial, callback) {\n  callback(null, [[&apos;123&apos;], linePartial]);\n}</code></pre>\n<!--\n`createInterface` is commonly used with `process.stdin` and\n`process.stdout` in order to accept user input:\n-->\n\n<p><code>createInterface</code> &#x306B;&#x306F;&#x901A;&#x5E38;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x304B;&#x3089;&#x306E;&#x5165;&#x529B;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B;&#x305F;&#x3081;&#x306B; <code>process.stdin</code> &#x3068;\n<code>process.stdout</code> &#x304C;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var readline = require(&apos;readline&apos;);\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});</code></pre>\n<!--\nOnce you have a readline instance, you most commonly listen for the\n`\"line\"` event.\n-->\n\n<p>readline &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x3068;&#x3001;&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x5834;&#x5408; <code>&apos;line&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x76E3;&#x8996;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf `terminal` is `true` for this instance then the `output` stream will get\nthe best compatibility if it defines an `output.columns` property, and fires\na `\"resize\"` event on the `output` if/when the columns ever change\n(`process.stdout` does this automatically when it is a TTY).\n-->\n\n<p>&#x3082;&#x3057;&#x3053;&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306E; <code>terminal</code> &#x304C; <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;\n<code>output</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3082;&#x3057; <code>outout.columns</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x304C;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;\n&#x305D;&#x308C;&#x306B;&#x9069;&#x5408;&#x3057;&#x3001;&#x30AB;&#x30E9;&#x30E0;&#x5E45;&#x304C;&#x5909;&#x66F4;&#x3055;&#x308C;&#x308B;&#x3068; <code>output</code> &#x4E0A;&#x3067;\n<code>&apos;resize&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;\n(<code>process.stdout</code> &#x304C; TTY &#x306E;&#x5834;&#x5408;&#x3001;&#x305D;&#x308C;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x884C;&#x308F;&#x308C;&#x307E;&#x3059;)&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;readline.cursorTo(stream, x, y)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;cursorTo&quot;,
          &quot;desc&quot;: &quot;<!--\nMove cursor to the specified position in a given TTY stream.\n-->\n\n<p>&#x30AB;&#x30FC;&#x30BD;&#x30EB;&#x3092;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; TTY &#x30B9;&#x30AF;&#x30EA;&#x30FC;&#x30F3;&#x306E;&#x6307;&#x5B9A;&#x306E;&#x4F4D;&#x7F6E;&#x306B;&#x79FB;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;stream&quot;
                },
                {
                  &quot;name&quot;: &quot;x&quot;
                },
                {
                  &quot;name&quot;: &quot;y&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;readline.moveCursor(stream, dx, dy)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;moveCursor&quot;,
          &quot;desc&quot;: &quot;<!--\nMove cursor relative to it's current position in a given TTY stream.\n-->\n\n<p>&#x30AB;&#x30FC;&#x30BD;&#x30EB;&#x3092;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; TTY &#x30B9;&#x30AF;&#x30EA;&#x30FC;&#x30F3;&#x306E;&#x73FE;&#x5728;&#x306E;&#x4F4D;&#x7F6E;&#x304B;&#x3089;&#x306E;&#x76F8;&#x5BFE;&#x4F4D;&#x7F6E;&#x306B;&#x79FB;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;stream&quot;
                },
                {
                  &quot;name&quot;: &quot;dx&quot;
                },
                {
                  &quot;name&quot;: &quot;dy&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;readline.clearLine(stream, dir)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;clearLine&quot;,
          &quot;desc&quot;: &quot;<!--\nClears current line of given TTY stream in a specified direction.\n`dir` should have one of following values:\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; TTY &#x30B9;&#x30AF;&#x30EA;&#x30FC;&#x30F3;&#x306E;&#x73FE;&#x5728;&#x306E;&#x884C;&#x3092;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x65B9;&#x5411;&#x306B;&#x6D88;&#x53BB;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>dir</code> &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x5024;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;:\n\n</p>\n<!--\n* `-1` - to the left from cursor\n* `1` - to the right from cursor\n* `0` - the entire line\n-->\n\n<ul>\n<li><code>-1</code> - &#x30AB;&#x30FC;&#x30BD;&#x30EB;&#x304B;&#x3089;&#x5DE6;&#x65B9;&#x5411;</li>\n<li><code>1</code> - &#x30AB;&#x30FC;&#x30BD;&#x30EB;&#x304B;&#x3089;&#x53F3;&#x65B9;&#x5411;</li>\n<li><code>0</code> - &#x884C;&#x5168;&#x4F53;</li>\n</ul>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;stream&quot;
                },
                {
                  &quot;name&quot;: &quot;dir&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;readline.clearScreenDown(stream)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;clearScreenDown&quot;,
          &quot;desc&quot;: &quot;<!--\nClears the screen from the current position of the cursor down.\n-->\n\n<p>&#x30B9;&#x30AF;&#x30EA;&#x30FC;&#x30F3;&#x306E;&#x30AB;&#x30FC;&#x30BD;&#x30EB;&#x3088;&#x308A;&#x4E0B;&#x3092;&#x6D88;&#x53BB;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;stream&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: Interface&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Interface&quot;,
          &quot;desc&quot;: &quot;<!--\nThe class that represents a readline interface with an input and output\nstream.\n-->\n\n<p>&#x5165;&#x529B;&#x3068;&#x51FA;&#x529B;&#x3092;&#x6301;&#x3064; readline &#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;rl.setPrompt(prompt, length)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setPrompt&quot;,
              &quot;desc&quot;: &quot;<!--\nSets the prompt, for example when you run `node` on the command line, you see\n`> `, which is node's prompt.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30F3;&#x30D7;&#x30C8;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30D7;&#x30ED;&#x30F3;&#x30D7;&#x30C8;&#x3067; <code>node</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3068;&#x3001;\n<code>&gt; </code> &#x3092;&#x898B;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;&#x3053;&#x308C;&#x304C; Node &#x306E;&#x30D7;&#x30ED;&#x30F3;&#x30D7;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;prompt&quot;
                    },
                    {
                      &quot;name&quot;: &quot;length&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;rl.prompt([preserveCursor])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;prompt&quot;,
              &quot;desc&quot;: &quot;<!--\nReadies readline for input from the user, putting the current `setPrompt`\noptions on a new line, giving the user a new spot to write. Set `preserveCursor`\nto `true` to prevent the cursor placement being reset to `0`.\n\nThis will also resume the `input` stream used with `createInterface` if it has\nbeen paused.\n-->\n\n<p>&#x30E6;&#x30FC;&#x30B6;&#x304B;&#x3089;&#x306E;&#x5165;&#x529B;&#x3092; 1 &#x884C;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x73FE;&#x5728;&#x306E; <code>setPrompt()</code> &#x306E;&#x5024;&#x3092;&#x65B0;&#x3057;&#x3044;&#x884C;&#x306B;&#x51FA;&#x529B;&#x3057;&#x3001;\n&#x30E6;&#x30FC;&#x30B6;&#x306B;&#x65B0;&#x3057;&#x3044;&#x5165;&#x529B;&#x30A8;&#x30EA;&#x30A2;&#x3092;&#x4E0E;&#x3048;&#x307E;&#x3059;&#x3002;\n<code>preserveCursor</code> &#x3092; <code>true</code> &#x306B;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;&#x30AB;&#x30FC;&#x30BD;&#x30EB;&#x4F4D;&#x7F6E;&#x304C;\n<code>0</code> &#x306B;&#x30EA;&#x30BB;&#x30C3;&#x30C8;&#x3055;&#x308C;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x3001; <code>createInterface()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x4F7F;&#x308F;&#x308C;&#x308B; <code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;\n&#x4E2D;&#x65AD;&#x3055;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;&#x518D;&#x958B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;preserveCursor&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;rl.question(query, callback)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;question&quot;,
              &quot;desc&quot;: &quot;<!--\nPrepends the prompt with `query` and invokes `callback` with the user's\nresponse. Displays the query to the user, and then invokes `callback`\nwith the user's response after it has been typed.\n\nThis will also resume the `input` stream used with `createInterface` if\nit has been paused.\n-->\n\n<p><code>query</code> &#x3092;&#x30D7;&#x30ED;&#x30F3;&#x30D7;&#x30C8;&#x3068;&#x3057;&#x3066;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x304C;&#x5FDC;&#x7B54;&#x3059;&#x308B;&#x3068; <code>callback</code> &#x3092;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30E6;&#x30FC;&#x30B6;&#x306B;&#x8CEA;&#x554F;&#x3092;&#x8868;&#x793A;&#x3057;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x304C;&#x5FDC;&#x7B54;&#x3092;&#x30BF;&#x30A4;&#x30D7;&#x3059;&#x308B;&#x3068;&#x3001;<code>callback</code> &#x304C;&#x8D77;&#x52D5;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x3001; <code>createInterface()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x4F7F;&#x308F;&#x308C;&#x308B; <code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;\n&#x4E2D;&#x65AD;&#x3055;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;&#x518D;&#x958B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample usage:\n-->\n\n<p>&#x4F7F;&#x7528;&#x4F8B;:\n\n</p>\n<pre><code>interface.question(&apos;What is your favorite food?&apos;, function(answer) {\n  console.log(&apos;Oh, so your favorite food is &apos; + answer);\n});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;query&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;rl.pause()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;pause&quot;,
              &quot;desc&quot;: &quot;<!--\nPauses the readline `in` stream, allowing it to be resumed later if needed.\nPauses the readline `input` stream, allowing it to be resumed later if needed.\n-->\n\n<p><code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x306E;&#x5165;&#x529B;&#x3092;&#x4E2D;&#x65AD;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5FC5;&#x8981;&#x306A;&#x3089;&#x5F8C;&#x3067;&#x518D;&#x958B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;rl.resume()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;resume&quot;,
              &quot;desc&quot;: &quot;<!--\nResumes the readline `input` stream.\n-->\n\n<p><code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x306E;&#x5165;&#x529B;&#x3092;&#x518D;&#x958B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;rl.close()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nCloses the `Interface` instance, relinquishing control on the `input` and\n`output` streams. The \"close\" event will also be emitted.\n-->\n\n<p><code>Interface</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x3001;<code>input</code> &#x304A;&#x3088;&#x3073; <code>output</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;\n&#x5236;&#x5FA1;&#x3092;&#x89E3;&#x653E;&#x3057;&#x307E;&#x3059;&#x3002;<code>&apos;close&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3082;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;rl.write(data, [key])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;write&quot;,
              &quot;desc&quot;: &quot;<!--\nWrites `data` to `output` stream. `key` is an object literal to represent a key\nsequence; available if the terminal is a TTY.\n-->\n\n<p><code>data</code> &#x3092; <code>output</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>key</code> &#x306F;&#x30AD;&#x30FC;&#x30B7;&#x30FC;&#x30B1;&#x30F3;&#x30B9;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30EA;&#x30C6;&#x30E9;&#x30EB;&#x3067;&#x3059;;\n&#x30BF;&#x30FC;&#x30DF;&#x30CA;&#x30EB;&#x304C; TTY &#x306E;&#x5834;&#x5408;&#x306B;&#x6709;&#x52B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThis will also resume the `input` stream if it has been paused.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;<code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4E2D;&#x65AD;&#x3055;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;&#x518D;&#x958B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>rl.write(&apos;Delete me!&apos;);\n// Simulate ctrl+u to delete the line written previously\nrl.write(null, {ctrl: true, name: &apos;u&apos;});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;data&quot;
                    },
                    {
                      &quot;name&quot;: &quot;key&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      &quot;modules&quot;: [
        {
          &quot;textRaw&quot;: &quot;Events&quot;,
          &quot;name&quot;: &quot;events&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;line&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;line&quot;,
              &quot;desc&quot;: &quot;<p><code>function (line) {}</code>\n\n</p>\n<!--\nEmitted whenever the `input` stream receives a `\\n`, usually received when the\nuser hits enter, or return. This is a good hook to listen for user input.\n-->\n\n<p><code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089; <code>\\n</code> &#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x3054;&#x3068;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x901A;&#x5E38;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x304C;&#x30A8;&#x30F3;&#x30BF;&#x30FC;&#x307E;&#x305F;&#x306F;&#x30EA;&#x30BF;&#x30FC;&#x30F3;&#x3092;&#x6253;&#x3064;&#x3054;&#x3068;&#x306B;&#x53D7;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30E6;&#x30FC;&#x30B6;&#x5165;&#x529B;&#x306E;&#x3088;&#x3044;&#x30D5;&#x30C3;&#x30AF;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of listening for `line`:\n-->\n\n<p><code>line</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>rl.on(&apos;line&apos;, function (cmd) {\n  console.log(&apos;You just typed: &apos;+cmd);\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;pause&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;pause&quot;,
              &quot;desc&quot;: &quot;<p><code>function () {}</code>\n\n</p>\n<!--\nEmitted whenever the `input` stream is paused.\n-->\n\n<p><code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4E2D;&#x65AD;&#x3055;&#x308C;&#x305F;&#x3068;&#x304D;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAlso emitted whenever the `input` stream is not paused and receives the\n`SIGCONT` event. (See events `SIGTSTP` and `SIGCONT`)\n-->\n\n<p><code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4E2D;&#x65AD;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x6642;&#x306B; <code>SIGCONT</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x969B;&#x306B;&#x3082;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059; (<code>SIGTSTP</code> &#x304A;&#x3088;&#x3073; <code>SIGCONT</code> &#x3082;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<!--\nExample of listening for `pause`:\n-->\n\n<p><code>&apos;pause&apos;</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>rl.on(&apos;pause&apos;, function() {\n  console.log(&apos;Readline paused.&apos;);\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;resume&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;resume&quot;,
              &quot;desc&quot;: &quot;<p><code>function () {}</code>\n\n</p>\n<!--\nEmitted whenever the `input` stream is resumed.\n\nExample of listening for `resume`:\n-->\n\n<p><code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x518D;&#x958B;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>&apos;resume&apos;</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>rl.on(&apos;resume&apos;, function() {\n  console.log(&apos;Readline resumed.&apos;);\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<p><code>function () {}</code>\n\n</p>\n<!--\nEmitted when `close()` is called.\n-->\n\n<p><code>close()</code> &#x304C;&#x547C;&#x3070;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAlso emitted when the `input` stream receives its \"end\" event. The `Interface`\ninstance should be considered \"finished\" once this is emitted. For example, when\nthe `input` stream receives `^D`, respectively known as `EOT`.\n-->\n\n<p><code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x3082;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3001;<code>Interface</code> &#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306F;&#x5B8C;&#x4E86;&#x3057;&#x305F;&#x3068;&#x8003;&#x3048;&#x3089;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;<code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>EOT</code> &#x3068;&#x3057;&#x3066;&#x77E5;&#x3089;&#x308C;&#x308B; <code>^D</code> &#x3092;&#x53D7;&#x3051;&#x53D6;&#x3063;&#x305F;&#x5834;&#x5408;&#x3002;\n\n</p>\n<!--\nThis event is also called if there is no `SIGINT` event listener present when\nthe `input` stream receives a `^C`, respectively known as `SIGINT`.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F; <code>SIGINT</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x5834;&#x5408;&#x306B;&#x3001;\n<code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>SIGINT</code> &#x3068;&#x3057;&#x3066;&#x77E5;&#x3089;&#x308C;&#x308B; <code>^C</code> &#x3092;&#x53D7;&#x3051;&#x53D6;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x3082;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;SIGINT&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;SIGINT&quot;,
              &quot;desc&quot;: &quot;<p><code>function () {}</code>\n\n</p>\n<!--\nEmitted whenever the `input` stream receives a `^C`, respectively known as\n`SIGINT`. If there is no `SIGINT` event listener present when the `input`\nstream receives a `SIGINT`, `pause` will be triggered.\n\nExample of listening for `SIGINT`:\n-->\n\n<p><code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>SIGINT</code> &#x3068;&#x3057;&#x3066;&#x77E5;&#x3089;&#x308C;&#x308B; <code>^C</code> &#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>SIGINT</code> &#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x6642;&#x306B; <code>&apos;SIGINT&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;\n&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;<code>&apos;pause&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x30C8;&#x30EA;&#x30AC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>&apos;SIGINT&apos;</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>rl.on(&apos;SIGINT&apos;, function() {\n  rl.question(&apos;Are you sure you want to exit?&apos;, function(answer) {\n    if (answer.match(/^y(es)?$/i)) rl.pause();\n  });\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;SIGTSTP&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;SIGTSTP&quot;,
              &quot;desc&quot;: &quot;<p><code>function () {}</code>\n\n</p>\n<!--\n**This does not work on Windows.**\n\nEmitted whenever the `input` stream receives a `^Z`, respectively known as\n`SIGTSTP`. If there is no `SIGTSTP` event listener present when the `input`\nstream receives a `SIGTSTP`, the program will be sent to the background.\n\nWhen the program is resumed with `fg`, the `pause` and `SIGCONT` events will be\nemitted. You can use either to resume the stream.\n\nThe `pause` and `SIGCONT` events will not be triggered if the stream was paused\nbefore the program was sent to the background.\n\nExample of listening for `SIGTSTP`:\n-->\n\n<p><strong>&#x3053;&#x308C;&#x306F; Windows &#x3067;&#x306F;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n\n</p>\n<p><code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>SIGTSTP</code> &#x3068;&#x3057;&#x3066;&#x77E5;&#x3089;&#x308C;&#x308B; <code>^Z</code> &#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>SIGTSTP</code> &#x3092;&#x53D7;&#x4FE1;&#x3057;&#x305F;&#x6642;&#x306B; <code>&apos;SIGTSTP&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;\n&#x30EA;&#x30B9;&#x30CA;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x30D0;&#x30C3;&#x30AF;&#x30B0;&#x30E9;&#x30A6;&#x30F3;&#x30C9;&#x306B;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C; <code>fg</code> &#x306B;&#x3088;&#x308A;&#x518D;&#x958B;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;<code>&apos;pause&apos;</code> &#x304A;&#x3088;&#x3073; <code>&apos;SIGCONT&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x3069;&#x3061;&#x3089;&#x3082;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x518D;&#x958B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x30D0;&#x30C3;&#x30AF;&#x30B0;&#x30E9;&#x30A6;&#x30F3;&#x30C9;&#x306B;&#x9001;&#x3089;&#x308C;&#x308B;&#x524D;&#x306B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4E2D;&#x65AD;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x3068;&#x3001;\n<code>&apos;pause&apos;</code> &#x304A;&#x3088;&#x3073; <code>&apos;SIGCONT&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<p><code>&apos;SIGTSTP&apos;</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>rl.on(&apos;SIGTSTP&apos;, function() {\n  // This will override SIGTSTP and prevent the program from going to the\n  // background.\n  console.log(&apos;Caught SIGTSTP.&apos;);\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;SIGCONT&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;SIGCONT&quot;,
              &quot;desc&quot;: &quot;<p><code>function () {}</code>\n\n</p>\n<!--\n**This does not work on Windows.**\n\nEmitted whenever the `input` stream is sent to the background with `^Z`,\nrespectively known as `SIGTSTP`, and then continued with `fg(1)`. This event\nonly emits if the stream was not paused before sending the program to the\nbackground.\n\nExample of listening for `SIGCONT`:\n-->\n\n<p><strong>&#x3053;&#x308C;&#x306F; Windows &#x3067;&#x306F;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n\n</p>\n<p><code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>SIGTSTP</code> &#x3068;&#x3057;&#x3066;&#x77E5;&#x3089;&#x308C;&#x308B; <code>^Z</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x30D0;&#x30C3;&#x30AF;&#x30B0;&#x30E9;&#x30A6;&#x30F3;&#x30C9;&#x306B;\n&#x9001;&#x3089;&#x308C;&#x305F;&#x5F8C;&#x3067;&#x3001;<code>fg(1)</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x518D;&#x958B;&#x3055;&#x308C;&#x308B;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x30D0;&#x30C3;&#x30AF;&#x30B0;&#x30E9;&#x30A6;&#x30F3;&#x30C9;&#x306B;&#x9001;&#x3089;&#x308C;&#x308B;&#x524D;&#x306B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4E2D;&#x65AD;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x306E;&#x307F;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>&apos;SIGCONT&apos;</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>rl.on(&apos;SIGCONT&apos;, function() {\n  // `prompt` will automatically resume the stream\n  rl.prompt();\n});</code></pre>\n<h2>Example: Tiny CLI</h2>\n<!--\nHere's an example of how to use all these together to craft a tiny command\nline interface:\n-->\n\n<p>&#x5168;&#x3066;&#x3092;&#x4E00;&#x7DD2;&#x306B;&#x4F7F;&#x3046;&#x3001;&#x5C0F;&#x3055;&#x306A;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>var readline = require(&apos;readline&apos;),\n    rl = readline.createInterface(process.stdin, process.stdout);\n\nrl.setPrompt(&apos;OHAI&gt; &apos;);\nrl.prompt();\n\nrl.on(&apos;line&apos;, function(line) {\n  switch(line.trim()) {\n    case &apos;hello&apos;:\n      console.log(&apos;world!&apos;);\n      break;\n    default:\n      console.log(&apos;Say what? I might have heard `&apos; + line.trim() + &apos;`&apos;);\n      break;\n  }\n  rl.prompt();\n}).on(&apos;close&apos;, function() {\n  console.log(&apos;Have a great day!&apos;);\n  process.exit(0);\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;type&quot;: &quot;module&quot;,
          &quot;displayName&quot;: &quot;Events&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Readline&quot;
    },
    {
      &quot;textRaw&quot;: &quot;REPL&quot;,
      &quot;name&quot;: &quot;repl&quot;,
      &quot;desc&quot;: &quot;<!--\nA Read-Eval-Print-Loop (REPL) is available both as a standalone program and\neasily includable in other programs. The REPL provides a way to interactively\nrun JavaScript and see the results.  It can be used for debugging, testing, or\njust trying things out.\n-->\n\n<p>Read-Eval-Print-Loop (REPL) &#x306F;&#x5358;&#x72EC;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3068;&#x3057;&#x3066;&#x3082;&#x4ED6;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;&#x624B;&#x8EFD;&#x306B;&#x53D6;&#x308A;&#x8FBC;&#x3080;&#x5F62;&#x3067;&#x3082;&#x5229;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\nREPL &#x306F;&#x5BFE;&#x8A71;&#x7684;&#x306B; JavaScript &#x3092;&#x5B9F;&#x884C;&#x3057;&#x3066;&#x7D50;&#x679C;&#x3092;&#x78BA;&#x8A8D;&#x3059;&#x308B;&#x624B;&#x6BB5;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002; \n&#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x3084;&#x30C6;&#x30B9;&#x30C8;&#x3084;&#x305D;&#x306E;&#x4ED6;&#x306E;&#x69D8;&#x3005;&#x306A;&#x3053;&#x3068;&#x3092;&#x8A66;&#x3059;&#x7528;&#x9014;&#x3067;&#x5229;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBy executing `node` without any arguments from the command-line you will be\ndropped into the REPL. It has simplistic emacs line-editing.\n-->\n\n<p>&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x304B;&#x3089; <code>node</code> &#x3092;&#x5F15;&#x6570;&#x7121;&#x3057;&#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3001;REPL &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;&#x5165;&#x308A;&#x307E;&#x3059;&#x3002;\nREPL &#x306F; Emacs &#x98A8;&#x306E;&#x7C21;&#x6613;&#x306A;&#x884C;&#x7DE8;&#x96C6;&#x6A5F;&#x80FD;&#x3092;&#x5099;&#x3048;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>mjr:~$ node\nType &apos;.help&apos; for options.\n&gt; a = [ 1, 2, 3];\n[ 1, 2, 3 ]\n&gt; a.forEach(function (v) {\n...   console.log(v);\n...   });\n1\n2\n3</code></pre>\n<p>&#x3088;&#x308A;&#x9032;&#x3093;&#x3060;&#x884C;&#x7DE8;&#x96C6;&#x3092;&#x884C;&#x3046;&#x306B;&#x306F;&#x3001;&#x74B0;&#x5883;&#x5909;&#x6570;&#x306B; <code>NODE_NO_READLINE=1</code>\n&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x3066;node&#x3092;&#x8D77;&#x52D5;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x308C;&#x306B;&#x3088;&#x3063;&#x3066; main &#x3068;&#x30C7;&#x30D0;&#x30C3;&#x30AC; REPL &#x3092;&#x6B63;&#x898F;&#x306E;&#x7AEF;&#x672B;&#x8A2D;&#x5B9A;&#x3067;&#x8D77;&#x52D5;&#x3057;&#x3001;\n<code>rlwrap</code> &#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example, you could add this to your bashrc file:\n-->\n\n<p>&#x4F8B;&#x3068;&#x3057;&#x3066;&#x3001;bashrc &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x4EE5;&#x4E0B;&#x306E;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x5B9A;&#x3092;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>alias node=&quot;env NODE_NO_READLINE=1 rlwrap node&quot;</code></pre>\n&quot;,
      &quot;For advanced line-editors, start node with the environmental variable\n`NODE_NO_READLINE&quot;: &quot;1`. This will start the main and debugger REPL in canonical\nterminal settings which will allow you to use with `rlwrap`.&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;repl.start(options)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;start&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns and starts a `REPLServer` instance. Accepts an \"options\" Object that\ntakes the following values:\n-->\n<code>REPLServer</code> &#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4EE5;&#x4E0B;&#x306E;&#x5024;&#x3092;&#x542B;&#x3080; &quot;options&quot; &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308A;&#x307E;&#x3059;&#x3002;\n\n<!--\n - `prompt` - the prompt and `stream` for all I/O. Defaults to `> `.\n\n - `input` - the readable stream to listen to. Defaults to `process.stdin`.\n\n - `output` - the writable stream to write readline data to. Defaults to\n   `process.stdout`.\n\n - `terminal` - pass `true` if the `stream` should be treated like a TTY, and\n   have ANSI/VT100 escape codes written to it. Defaults to checking `isTTY`\n   on the `output` stream upon instantiation.\n\n - `eval` - function that will be used to eval each given line. Defaults to\n   an async wrapper for `eval()`. See below for an example of a custom `eval`.\n\n - `useColors` - a boolean which specifies whether or not the `writer` function\n   should output colors. If a different `writer` function is set then this does\n   nothing. Defaults to the repl's `terminal` value.\n\n - `useGlobal` - if set to `true`, then the repl will use the `global` object,\n   instead of running scripts in a separate context. Defaults to `false`.\n\n - `ignoreUndefined` - if set to `true`, then the repl will not output the\n   return value of command if it's `undefined`. Defaults to `false`.\n\n - `writer` - the function to invoke for each command that gets evaluated which\n   returns the formatting (including coloring) to display. Defaults to\n   `util.inspect`.\n-->\n\n<ul>\n<li><p><code>prompt</code> - &#x30D7;&#x30ED;&#x30F3;&#x30D7;&#x30C8;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&gt; </code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>input</code> - &#x76E3;&#x8996;&#x3059;&#x308B;&#x5165;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>process.stdin</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>output</code> - &#x8AAD;&#x307F;&#x8FBC;&#x3093;&#x3060;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x51FA;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>process.stdout</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>terminal</code> - &#x3082;&#x3057; <code>stream</code> &#x304C; TTY &#x3067;&#x3001;ANSI/VT100 &#x30A8;&#x30B9;&#x30B1;&#x30FC;&#x30D7;&#x30B3;&#x30FC;&#x30C9;&#x3092;\n&#x51FA;&#x529B;&#x3059;&#x308B;&#x306A;&#x3089; <code>true</code>&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x4F5C;&#x6210;&#x6642;&#x306B; <code>output</code>\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; <code>isTTY</code> &#x3067;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>eval</code> - &#x5404;&#x884C;&#x3092;&#x8A55;&#x4FA1;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x95A2;&#x6570;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>eval()</code> &#x3092;\n&#x975E;&#x540C;&#x671F;&#x306B;&#x30E9;&#x30C3;&#x30D7;&#x3057;&#x305F;&#x95A2;&#x6570;&#x3067;&#x3059;&#x3002;\n<code>eval</code> &#x3092;&#x30AB;&#x30B9;&#x30BF;&#x30DE;&#x30A4;&#x30BA;&#x3059;&#x308B;&#x4F8B;&#x306F;&#x4E0B;&#x8A18;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</p>\n</li>\n<li><p><code>useColors</code> - <code>write</code> &#x95A2;&#x6570;&#x304C;&#x8272;&#x3092;&#x4ED8;&#x3051;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x30D6;&#x30FC;&#x30EA;&#x30A2;&#x30F3;&#x5024;&#x3002;\n<code>writer</code> &#x306B;&#x7570;&#x306A;&#x308B;&#x95A2;&#x6570;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x3053;&#x308C;&#x306F;&#x4F55;&#x3082;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; repl &#x306E; <code>terminal</code> &#x306E;&#x5024;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>useGlobal</code> - &#x3082;&#x3057; <code>true</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;repl &#x306F;&#x72EC;&#x7ACB;&#x3057;&#x305F;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3092;\n&#x4F7F;&#x3046;&#x4EE3;&#x308F;&#x308A;&#x306B; <code>global</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>ignoreUndefined</code> - &#x3082;&#x3057; <code>true</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;repl &#x306F;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306E;&#x623B;&#x308A;&#x5024;&#x304C;\n<code>undefined</code> &#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x305D;&#x308C;&#x3092;&#x51FA;&#x529B;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>writer</code> - &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x304C;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x308B;&#x3054;&#x3068;&#x306B;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x95A2;&#x6570;&#x3067;&#x3001;&#x8868;&#x793A;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8; (&#x8272;&#x3065;&#x3051;&#x3082;&#x542B;&#x307F;&#x307E;&#x3059;) &#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>util.inspect</code> &#x3067;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nYou can use your own `eval` function if it has following signature:\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E;&#x30B7;&#x30B0;&#x30CD;&#x30C1;&#x30E3;&#x3092;&#x6301;&#x3064;&#x72EC;&#x81EA;&#x306E; <code>eval()</code> &#x95A2;&#x6570;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>function eval(cmd, context, filename, callback) {\n  callback(null, result);\n}</code></pre>\n<!--\nMultiple REPLs may be started against the same running instance of node.  Each\nwill share the same global object but will have unique I/O.\n-->\n\n<p>&#x8907;&#x6570;&#x306E; REPL &#x3092;&#x8D77;&#x52D5;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;&#x540C;&#x4E00;&#x306E; node &#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x304C;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E; REPL &#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x5171;&#x6709;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;I/O &#x306F;&#x56FA;&#x6709;&#x306E;&#x3082;&#x306E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nHere is an example that starts a REPL on stdin, a Unix socket, and a TCP socket:\n-->\n\n<p>REPL &#x3092;&#x6A19;&#x6E96;&#x5165;&#x529B;&#x3001;Unix &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3001;TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306E;&#x3082;&#x3068;&#x3067;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x4F8B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>var net = require(&quot;net&quot;),\n    repl = require(&quot;repl&quot;);\n\nconnections = 0;\n\nrepl.start({\n  prompt: &quot;node via stdin&gt; &quot;,\n  input: process.stdin,\n  output: process.stdout\n});\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start({\n    prompt: &quot;node via Unix socket&gt; &quot;,\n    input: socket,\n    output: socket\n  }).on(&apos;exit&apos;, function() {\n    socket.end();\n  })\n}).listen(&quot;/tmp/node-repl-sock&quot;);\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start({\n    prompt: &quot;node via TCP socket&gt; &quot;,\n    input: socket,\n    output: socket\n  }).on(&apos;exit&apos;, function() {\n    socket.end();\n  });\n}).listen(5001);</code></pre>\n<!--\nRunning this program from the command line will start a REPL on stdin.  Other\nREPL clients may connect through the Unix socket or TCP socket. `telnet` is useful\nfor connecting to TCP sockets, and `socat` can be used to connect to both Unix and\nTCP sockets.\n-->\n\n<p>&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3092;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x304B;&#x3089;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3068;&#x3001;&#x6A19;&#x6E96;&#x5165;&#x529B;&#x306E;&#x3082;&#x3068;&#x3067; REPL &#x304C;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4ED6;&#x306E; REPL &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306F; Unix &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304B; TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x4ECB;&#x3057;&#x3066;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>telnet</code> &#x304C; TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3078;&#x306E;&#x63A5;&#x7D9A;&#x306B;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;\n<code>socat</code> &#x306F; Unix &#x30C9;&#x30E1;&#x30A4;&#x30F3; /TCP &#x4E21;&#x65B9;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3078;&#x306E;&#x63A5;&#x7D9A;&#x306B;&#x5229;&#x7528;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBy starting a REPL from a Unix socket-based server instead of stdin, you can\nconnect to a long-running node process without restarting it.\n\nFor an example of running a \"full-featured\" (`terminal`) REPL over\na `net.Server` and `net.Socket` instance, see: https://gist.github.com/2209310\n\nFor an example of running a REPL instance over `curl(1)`,\nsee: https://gist.github.com/2053342\n-->\n\n<p>&#x6A19;&#x6E96;&#x5165;&#x529B;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B; Unix &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x30D9;&#x30FC;&#x30B9;&#x3068;&#x3057;&#x305F;&#x30B5;&#x30FC;&#x30D0;&#x304B;&#x3089; REPL &#x3092;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;\n&#x518D;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F; node &#x306E;&#x5E38;&#x99D0;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3078;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><code>net.Server</code> &#x304A;&#x3088;&#x3073; <code>net.Socket</code> &#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x4E0A;&#x306E; &quot;&#x30D5;&#x30EB;&#x6A5F;&#x80FD;&#x306E;&quot; (<code>terminal</code>)\nREPL &#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x4F8B;&#x306F;&#x3001;<a href="\&quot;https://gist.github.com/2209310\&quot;">https://gist.github.com/2209310</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p><code>curl(1)</code> &#x4E0A;&#x3067; REPL &#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x4F8B;&#x306F;&#x3001;\n<a href="\&quot;https://gist.github.com/2053342\&quot;">https://gist.github.com/2053342</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;exit&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;exit&quot;,
              &quot;desc&quot;: &quot;<p><code>function () {}</code>\n\n</p>\n<!--\nEmitted when the user exits the REPL in any of the defined ways. Namely, typing\n`.exit` at the repl, pressing Ctrl+C twice to signal SIGINT, or pressing Ctrl+D\nto signal \"end\" on the `input` stream.\n-->\n\n<p>&#x4F55;&#x3089;&#x304B;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x30E6;&#x30FC;&#x30B6;&#x304C; REPL &#x3092;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;repl &#x3067; <code>.exit</code> &#x3092;&#x30BF;&#x30A4;&#x30D7;&#x3059;&#x308B;&#x3001;Ctrl+C &#x3092; 2 &#x56DE;&#x63A8;&#x3057;&#x3066;\nSIGINT &#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x3001;&#x3042;&#x308B;&#x3044;&#x306F; Ctrl+D &#x3092;&#x63A8;&#x3057;&#x3066; <code>input</code> &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067; <code>&apos;end&apos;</code> &#x3092;\n&#x77E5;&#x3089;&#x305B;&#x308B;&#x306A;&#x3069;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of listening for `exit`:\n-->\n\n<p><code>&apos;exit&apos;</code> &#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>r.on(&apos;exit&apos;, function () {\n  console.log(&apos;Got &quot;exit&quot; event from repl!&apos;);\n  process.exit();\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;REPL Features&quot;,
          &quot;name&quot;: &quot;REPL Features&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nInside the REPL, Control+D will exit.  Multi-line expressions can be input.\nTab completion is supported for both global and local variables.\n-->\n\n<p>REPL &#x306E;&#x4E2D;&#x3067; Control+D &#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3068;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;&#x8907;&#x6570;&#x884C;&#x306B;&#x6E21;&#x308B;&#x5F0F;&#x3092;&#x5165;&#x529B;&#x3068;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe special variable `_` (underscore) contains the result of the last expression.\n-->\n\n<p>&#x7279;&#x5225;&#x306A;&#x5909;&#x6570;&#x3067;&#x3042;&#x308B; <code>_</code> (&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;) &#x306F;&#x4E00;&#x756A;&#x6700;&#x5F8C;&#x306E;&#x5F0F;&#x306E;&#x7D50;&#x679C;&#x3092;&#x4FDD;&#x6301;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>&gt; [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\n[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]\n&gt; _.length\n3\n&gt; _ += 1\n4</code></pre>\n<!--\nThe REPL provides access to any variables in the global scope. You can expose\na variable to the REPL explicitly by assigning it to the `context` object\nassociated with each `REPLServer`.  For example:\n-->\n\n<p>REPL &#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306B;&#x5B58;&#x5728;&#x3059;&#x308B;&#x5168;&#x3066;&#x306E;&#x5909;&#x6570;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E; <code>REPLServer</code> &#x306B;&#x7D10;&#x3065;&#x304F; <code>context</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x5909;&#x6570;&#x3092;&#x4ED8;&#x4E0E;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3001;\n&#x660E;&#x793A;&#x7684;&#x306B;&#x5909;&#x6570;&#x3092;&#x516C;&#x958B;&#x3055;&#x305B;&#x308B;&#x3053;&#x3068;&#x304C;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002; &#x4F8B;:\n\n</p>\n<pre><code>// repl_test.js\nvar repl = require(&quot;repl&quot;),\n    msg = &quot;message&quot;;\n\nrepl.start(&quot;&gt; &quot;).context.m = msg;</code></pre>\n<!--\nThings in the `context` object appear as local within the REPL:\n-->\n\n<p><code>context</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5909;&#x6570;&#x306F;&#x3001;REPL &#x306E;&#x4E2D;&#x3067;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x306A;&#x5909;&#x6570;&#x3068;&#x3057;&#x3066;&#x73FE;&#x308C;&#x307E;&#x3059;:\n\n</p>\n<pre><code>mjr:~$ node repl_test.js\n&gt; m\n&apos;message&apos;</code></pre>\n<!--\nThere are a few special REPL commands:\n-->\n\n<p>&#x7279;&#x5225;&#x306A; REPL &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x304C;&#x3044;&#x304F;&#x3064;&#x304B;&#x3042;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<!--\n  - `.break` - While inputting a multi-line expression, sometimes you get lost\n    or just don't care about completing it. `.break` will start over.\n  - `.clear` - Resets the `context` object to an empty object and clears any\n    multi-line expression.\n  - `.exit` - Close the I/O stream, which will cause the REPL to exit.\n  - `.help` - Show this list of special commands.\n  - `.save` - Save the current REPL session to a file\n    >.save ./file/to/save.js\n  - `.load` - Load a file into the current REPL session.\n    >.load ./file/to/load.js\n-->\n\n<ul>\n<li><code>.break</code> - &#x8907;&#x6570;&#x884C;&#x306B;&#x6E21;&#x3063;&#x3066;&#x5F0F;&#x3092;&#x5165;&#x529B;&#x3057;&#x3066;&#x3044;&#x308B;&#x9593;&#x306B;&#x3001;&#x9014;&#x4E2D;&#x3067;&#x5206;&#x304B;&#x3089;&#x306A;&#x304F;&#x306A;&#x3063;&#x305F;&#x308A;&#x5B8C;&#x4E86;&#x3055;&#x305B;&#x306A;&#x304F;&#x3066;&#x3082;&#x826F;&#x304F;&#x306A;&#x308B;&#x3053;&#x3068;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;<code>.break</code> &#x3067;&#x6700;&#x521D;&#x304B;&#x3089;&#x3084;&#x308A;&#x76F4;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>.clear</code> - <code>context</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x7A7A;&#x306E;&#x72B6;&#x614B;&#x306B;&#x30EA;&#x30BB;&#x30C3;&#x30C8;&#x3057;&#x3001;&#x8907;&#x6570;&#x884C;&#x306B;&#x5165;&#x529B;&#x3057;&#x3066;&#x3044;&#x308B;&#x5F0F;&#x3092;&#x30AF;&#x30EA;&#x30A2;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>.exit</code> - I/O&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x9589;&#x3058;&#x3001;REPL&#x3092;&#x7D42;&#x4E86;&#x3055;&#x305B;&#x307E;&#x3059;&#x3002;</li>\n<li><code>.help</code> - &#x3053;&#x306E;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306E;&#x4E00;&#x89A7;&#x3092;&#x8868;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>.save</code> - &#x73FE;&#x5728;&#x306E; REPL &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x4FDD;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;<blockquote>\n<p>.save ./file/to/save.js</p>\n</blockquote>\n</li>\n<li><code>.load</code> - &#x73FE;&#x5728;&#x306E; REPL &#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x30ED;&#x30FC;&#x30C9;&#x3057;&#x307E;&#x3059;&#x3002;<blockquote>\n<p>.load ./file/to/load.js</p>\n</blockquote>\n</li>\n</ul>\n<!--\nThe following key combinations in the REPL have these special effects:\n-->\n\n<p>REPL &#x3067;&#x306F;&#x3001;&#x4EE5;&#x4E0B;&#x306E;&#x30AD;&#x30FC;&#x30B3;&#x30F3;&#x30D3;&#x30CD;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x7279;&#x5225;&#x306A;&#x52B9;&#x679C;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;\n\n</p>\n<!--\n  - `<ctrl>C` - Similar to the `.break` keyword.  Terminates the current\n    command.  Press twice on a blank line to forcibly exit.\n  - `<ctrl>D` - Similar to the `.exit` keyword.\n-->\n\n<ul>\n<li><code>&lt;ctrl&gt;C</code> - <code>.break</code> &#x30AD;&#x30FC;&#x30EF;&#x30FC;&#x30C9;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;\n&#x73FE;&#x5728;&#x306E;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5F37;&#x5236;&#x7684;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x3051;&#x308C;&#x3070;&#x7A7A;&#x306E;&#x884C;&#x3067; 2 &#x56DE;&#x62BC;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n<li><code>&lt;ctrl&gt;D</code> - <code>.exit</code> &#x30AD;&#x30FC;&#x30EF;&#x30FC;&#x30C9;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;</li>\n</ul>\n&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;REPL&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Executing JavaScript&quot;,
      &quot;name&quot;: &quot;vm&quot;,
      &quot;stability&quot;: 2,
      &quot;stabilityText&quot;: &quot;Unstable. See Caveats, below.&quot;,
      &quot;desc&quot;: &quot;<!--\nYou can access this module with:\n-->\n\n<p>&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3001;&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;:\n\n</p>\n<pre><code>var vm = require(&apos;vm&apos;);</code></pre>\n<!--\nJavaScript code can be compiled and run immediately or compiled, saved, and run later.\n-->\n\n<p>JavaScript &#x30B3;&#x30FC;&#x30C9;&#x306F;&#x3001;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3055;&#x308C;&#x3066;&#x3059;&#x3050;&#x306B;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x304B;&#x3001;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x304A;&#x3088;&#x3073;&#x4FDD;&#x5B58;&#x3055;&#x308C;&#x3066;&#x5F8C;&#x304B;&#x3089;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;modules&quot;: [
        {
          &quot;textRaw&quot;: &quot;Caveats&quot;,
          &quot;name&quot;: &quot;caveats&quot;,
          &quot;The `vm` module has many known issues and edge cases. If you run into\nissues or unexpected behavior, please consult [the open issues on\nGitHub](https://github.com/joyent/node/issues?labels&quot;: &quot;vm&amp;state=open).\nSome of the biggest problems are described below.&quot;,
          &quot;desc&quot;: &quot;<p><code>vm</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x306F;&#x65E2;&#x77E5;&#x306E;&#x8AB2;&#x984C;&#x3084;&#x7279;&#x6B8A;&#x30B1;&#x30FC;&#x30B9;&#x304C;&#x305F;&#x304F;&#x3055;&#x3093;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x554F;&#x984C;&#x3084;&#x671F;&#x5F85;&#x3068;&#x7570;&#x306A;&#x308B;&#x632F;&#x308B;&#x821E;&#x3044;&#x3092;&#x898B;&#x3064;&#x3051;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n<a href="\&quot;https://github.com/joyent/node/issues?labels=vm&amp;state=open\&quot;">GitHub &#x4E0A;&#x306E;&#x8AB2;&#x984C;</a>\n&#x306B;&#x76F8;&#x8AC7;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;&#x5927;&#x304D;&#x306A;&#x554F;&#x984C;&#x306E;&#x3044;&#x304F;&#x3064;&#x304B;&#x306F;&#x4EE5;&#x4E0B;&#x306B;&#x793A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;modules&quot;: [
            {
              &quot;textRaw&quot;: &quot;Sandboxes&quot;,
              &quot;name&quot;: &quot;sandboxes&quot;,
              &quot;desc&quot;: &quot;<!--\nThe `sandbox` argument to `vm.runInNewContext` and `vm.createContext`,\nalong with the `initSandbox` argument to `vm.createContext`, do not\nbehave as one might normally expect and their behavior varies\nbetween different versions of Node.\n-->\n\n<p><code>vm.runInNewContext</code> &#x3068;&#x3001;<code>vm.createContext</code> &#x306B; <code>initSandbox</code> &#x3068;&#x5171;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;\n<code>sandbox</code> &#x5F15;&#x6570;&#x306F;&#x3001;&#x901A;&#x5E38;&#x671F;&#x5F85;&#x3055;&#x308C;&#x308B;&#x632F;&#x308B;&#x821E;&#x3044;&#x3092;&#x305B;&#x305A;&#x3001;&#x305D;&#x308C;&#x306F; Node &#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x9593;&#x3067;\n&#x7570;&#x306A;&#x3063;&#x305F;&#x632F;&#x308B;&#x821E;&#x3044;&#x3092;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe key issue to be aware of is that V8 provides no way to directly\ncontrol the global object used within a context. As a result, while\nproperties of your `sandbox` object will be available in the context,\nany properties from the `prototype`s of the `sandbox` may not be\navailable. Furthermore, the `this` expression within the global scope\nof the context evaluates to the empty object (`{}`) instead of to\nyour sandbox.\n-->\n\n<p>&#x77E5;&#x3089;&#x308C;&#x3066;&#x3044;&#x308B;&#x91CD;&#x8981;&#x554F;&#x984C;&#x306F;&#x3001;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x5185;&#x3067;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x308B;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;\n&#x76F4;&#x63A5;&#x5236;&#x5FA1;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x3092; V8 &#x304C;&#x63D0;&#x4F9B;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x7D50;&#x679C;&#x3001;<code>sandbox</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x304C;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x304B;&#x3089;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x9593;&#x3001;<code>sandbox</code> &#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30BF;&#x30A4;&#x30D7;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n&#x3067;&#x304D;&#x306A;&#x3044;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3055;&#x3089;&#x306B;&#x306F;&#x3001;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x5185;&#x306E;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306B;&#x304A;&#x3051;&#x308B; <code>this</code> &#x304C;\n&#x30B5;&#x30F3;&#x30C9;&#x30DC;&#x30C3;&#x30AF;&#x30B9;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x7A7A;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8; (<code>{}</code>) &#x306B;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nYour sandbox's properties are also not shared directly with the script.\nInstead, the properties of the sandbox are copied into the context at\nthe beginning of execution, and then after execution, the properties\nare copied back out in an attempt to propagate any changes.\n-->\n\n<p>&#x30B5;&#x30F3;&#x30C9;&#x30DC;&#x30C3;&#x30AF;&#x30B9;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F;&#x307E;&#x305F;&#x3001;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x306B;&#x76F4;&#x63A5;&#x5171;&#x6709;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;&#x30B5;&#x30F3;&#x30C9;&#x30DC;&#x30C3;&#x30AF;&#x30B9;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F;&#x5B9F;&#x884C;&#x524D;&#x306B;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306B;&#x30B3;&#x30D4;&#x30FC;&#x3055;&#x308C;&#x3001;\n&#x5B9F;&#x884C;&#x5F8C;&#x3001;&#x5909;&#x66F4;&#x3092;&#x4F1D;&#x64AD;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F;&#x30B5;&#x30F3;&#x30C9;&#x30DC;&#x30C3;&#x30AF;&#x30B9;&#x306B;&#x30B3;&#x30D4;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Sandboxes&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Globals&quot;,
              &quot;name&quot;: &quot;globals&quot;,
              &quot;Properties of the global object, like `Array` and `String`, have\ndifferent values inside of a context. This means that common\nexpressions like `[] instanceof Array` or\n`Object.getPrototypeOf([])&quot;: &quot;== Array.prototype` may not produce\nexpected results when used inside of scripts evaluated via the `vm` module.&quot;,
              &quot;desc&quot;: &quot;<p><code>Array</code> &#x3084; <code>String</code> &#x306A;&#x3069;&#x306E;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F;&#x3001;\n&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306E;&#x4E2D;&#x3067;&#x306F;&#x7570;&#x306A;&#x308B;&#x5024;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;  <code>[] instanceof Array</code> &#x3084;\n<code>Object.getPrototypeOf([]) === Array.prototype</code> &#x306A;&#x3069;&#x306E;&#x3088;&#x304F;&#x3042;&#x308B;&#x5F0F;&#x306F;&#x3001;\n<code>vm</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x3088;&#x3063;&#x3066;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x308B;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x306E;&#x4E2D;&#x3067;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x3068;&#x3001;\n&#x671F;&#x5F85;&#x3057;&#x305F;&#x7D50;&#x679C;&#x306B;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nSome of these problems have known workarounds listed in the issues for\n`vm` on GitHub. for example, `Array.isArray` works around\nthe example problem with `Array`.\n-->\n\n<p>GitHub &#x4E0A;&#x306E; <code>vm</code> &#x306B;&#x95A2;&#x3059;&#x308B;&#x8AB2;&#x984C;&#x306B;&#x306F;&#x3001;&#x3053;&#x308C;&#x3089;&#x306E;&#x554F;&#x984C;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x56DE;&#x907F;&#x7B56;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;<code>Array.isArray</code> &#x306F; <code>Array</code> &#x306B;&#x95A2;&#x3059;&#x308B;&#x554F;&#x984C;&#x306E;&#x4F8B;&#x3067;&#x3082;&#x3046;&#x307E;&#x304F;&#x52D5;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;type&quot;: &quot;module&quot;,
              &quot;displayName&quot;: &quot;Globals&quot;
            }
          ],
          &quot;type&quot;: &quot;module&quot;,
          &quot;displayName&quot;: &quot;Caveats&quot;
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;vm.runInThisContext(code, [filename])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;runInThisContext&quot;,
          &quot;desc&quot;: &quot;<!--\n`vm.runInThisContext()` compiles `code`, runs it and returns the result. Running\ncode does not have access to local scope. `filename` is optional, it's used only\nin stack traces.\n-->\n\n<p><code>vm.runInThisContext()</code> &#x306F; <code>code</code> &#x3092;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x3066;&#x5B9F;&#x884C;&#x3057;&#x3001;&#x7D50;&#x679C;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x30B3;&#x30FC;&#x30C9;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>filename</code> &#x306F;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3001;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3067;&#x306E;&#x307F;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of using `vm.runInThisContext` and `eval` to run the same code:\n-->\n\n<p><code>vm.runInThisContext</code> &#x3068; <code>eval</code> &#x3067;&#x540C;&#x3058;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>var localVar = 123,\n    usingscript, evaled,\n    vm = require(&apos;vm&apos;);\n\nusingscript = vm.runInThisContext(&apos;localVar = 1;&apos;,\n  &apos;myfile.vm&apos;);\nconsole.log(&apos;localVar: &apos; + localVar + &apos;, usingscript: &apos; +\n  usingscript);\nevaled = eval(&apos;localVar = 1;&apos;);\nconsole.log(&apos;localVar: &apos; + localVar + &apos;, evaled: &apos; +\n  evaled);\n\n// localVar: 123, usingscript: 1\n// localVar: 1, evaled: 1</code></pre>\n<!--\n`vm.runInThisContext` does not have access to the local scope, so `localVar` is unchanged.\n`eval` does have access to the local scope, so `localVar` is changed.\n-->\n\n<p><code>vm.runInThisContext</code> &#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3057;&#x306A;&#x3044;&#x306E;&#x3067;&#x3001;<code>localVar</code> &#x306F;&#x5909;&#x66F4;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>eval</code> &#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3059;&#x308B;&#x306E;&#x3067;&#x3001;<code>localVar</code> &#x306F;&#x5909;&#x66F4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn case of syntax error in `code`, `vm.runInThisContext` emits the syntax error to stderr\nand throws an exception.\n-->\n\n<p><code>code</code> &#x304C;&#x6587;&#x6CD5;&#x30A8;&#x30E9;&#x30FC;&#x3068;&#x306A;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;<code>vm.runInThisContext</code> &#x306F;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x6587;&#x6CD5;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x51FA;&#x529B;&#x3057;&#x3001;\n&#x4F8B;&#x5916;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;code&quot;
                },
                {
                  &quot;name&quot;: &quot;filename&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;vm.runInNewContext(code, [sandbox], [filename])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;runInNewContext&quot;,
          &quot;desc&quot;: &quot;<!--\n`vm.runInNewContext` compiles `code`, then runs it in `sandbox` and returns the\nresult. Running code does not have access to local scope. The object `sandbox`\nwill be used as the global object for `code`.\n`sandbox` and `filename` are optional, `filename` is only used in stack traces.\n-->\n\n<p><code>vm.runInNewContext</code> &#x306F; <code>code</code> &#x3092;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x3001;&#x305D;&#x308C;&#x3092; <code>sandbox</code> &#x306E;&#x4E2D;&#x3067;&#x5B9F;&#x884C;&#x3057;&#x3066;\n&#x7D50;&#x679C;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x30B3;&#x30FC;&#x30C9;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>sandbox</code> &#x304C; <code>code</code> &#x306B;&#x3068;&#x3063;&#x3066;&#x306E;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>sandbox</code> &#x304A;&#x3088;&#x3073; <code>filename</code> &#x306F;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3001;<code>filename</code> \n&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3067;&#x306E;&#x307F;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: compile and execute code that increments a global variable and sets a new one.\nThese globals are contained in the sandbox.\n-->\n\n<p>&#x4F8B;: &#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x5909;&#x6570;&#x3092;&#x30A4;&#x30F3;&#x30AF;&#x30EA;&#x30E1;&#x30F3;&#x30C8;&#x3057;&#x3066;&#x65B0;&#x3057;&#x3044;&#x5024;&#x3092;&#x30BB;&#x30C3;&#x30C8;&#x3059;&#x308B;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x304A;&#x3088;&#x3073;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x5909;&#x6570;&#x306F;&#x30B5;&#x30F3;&#x30C9;&#x30DC;&#x30C3;&#x30AF;&#x30B9;&#x306B;&#x542B;&#x307E;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&apos;util&apos;),\n    vm = require(&apos;vm&apos;),\n    sandbox = {\n      animal: &apos;cat&apos;,\n      count: 2\n    };\n\nvm.runInNewContext(&apos;count += 1; name = &quot;kitty&quot;&apos;, sandbox, &apos;myfile.vm&apos;);\nconsole.log(util.inspect(sandbox));\n\n// { animal: &apos;cat&apos;, count: 3, name: &apos;kitty&apos; }</code></pre>\n<!--\nNote that running untrusted code is a tricky business requiring great care.  To prevent accidental\nglobal variable leakage, `vm.runInNewContext` is quite useful, but safely running untrusted code\nrequires a separate process.\n-->\n\n<p>&#x614E;&#x91CD;&#x3092;&#x8981;&#x3059;&#x308B;&#x30D3;&#x30B8;&#x30CD;&#x30B9;&#x3067;&#x306F;&#x3001;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x306A;&#x3044;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x5B9F;&#x884C;&#x306F;&#x7D30;&#x5FC3;&#x306E;&#x6CE8;&#x610F;&#x304C;&#x6C42;&#x3081;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x5076;&#x7136;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x5909;&#x6570;&#x304C;&#x6F0F;&#x308C;&#x3066;&#x3057;&#x307E;&#x3046;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;&#x306B;&#x3001;<code>vm.runInNewContext</code> &#x306F;&#x3068;&#x3066;&#x3082;&#x5F79;&#x7ACB;&#x3061;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x4FE1;&#x983C;&#x3067;&#x304D;&#x306A;&#x3044;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x5B89;&#x5168;&#x306B;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x5225;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8981;&#x6C42;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn case of syntax error in `code`, `vm.runInNewContext` emits the syntax error to stderr\nand throws an exception.\n-->\n\n<p><code>code</code> &#x304C;&#x6587;&#x6CD5;&#x30A8;&#x30E9;&#x30FC;&#x3068;&#x306A;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;\n<code>vm.runInNewContext</code> &#x306F;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x6587;&#x6CD5;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x51FA;&#x529B;&#x3057;&#x3001;&#x4F8B;&#x5916;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;code&quot;
                },
                {
                  &quot;name&quot;: &quot;sandbox&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;filename&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;vm.runInContext(code, context, [filename])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;runInContext&quot;,
          &quot;desc&quot;: &quot;<!--\n`vm.runInContext` compiles `code`, then runs it in `context` and returns the\nresult. A (V8) context comprises a global object, together with a set of\nbuilt-in objects and functions. Running code does not have access to local scope\nand the global object held within `context` will be used as the global object\nfor `code`.\n`filename` is optional, it's used only in stack traces.\n\nExample: compile and execute code in a existing context.\n-->\n\n<p><code>vm.runInContext</code> &#x306F; <code>code</code> &#x3092;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x3066;&#x3001;\n<code>context</code> &#x3092;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3068;&#x3057;&#x3066;&#x5B9F;&#x884C;&#x3057;&#x3001;&#x305D;&#x306E;&#x7D50;&#x679C;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n(V8 &#x306E;) &#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306F;&#x7D44;&#x307F;&#x8FBC;&#x307F;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x95A2;&#x6570;&#x3068;&#x5171;&#x306B;&#x3001;\n&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x542B;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x30B3;&#x30FC;&#x30C9;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x305B;&#x305A;&#x3001;\n<code>context</code> &#x304C; <code>code</code> &#x306B;&#x3068;&#x3063;&#x3066;&#x306E;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>filename</code> &#x306F;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3001;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3067;&#x306E;&#x307F;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x4F8B;: &#x30B3;&#x30FC;&#x30C9;&#x3092;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x3066;&#x65E2;&#x5B58;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&apos;util&apos;),\n    vm = require(&apos;vm&apos;),\n    initSandbox = {\n      animal: &apos;cat&apos;,\n      count: 2\n    },\n    context = vm.createContext(initSandbox);\n\nvm.runInContext(&apos;count += 1; name = &quot;CATT&quot;&apos;, context, &apos;myfile.vm&apos;);\nconsole.log(util.inspect(context));\n\n// { animal: &apos;cat&apos;, count: 3, name: &apos;CATT&apos; }</code></pre>\n<!--\nNote that `createContext` will perform a shallow clone of the supplied sandbox object in order to\ninitialize the global object of the freshly constructed context.\n\nNote that running untrusted code is a tricky business requiring great care.  To prevent accidental\nglobal variable leakage, `vm.runInContext` is quite useful, but safely running untrusted code\nrequires a separate process.\n\nIn case of syntax error in `code`, `vm.runInContext` emits the syntax error to stderr\nand throws an exception.\n-->\n\n<p><code>createContext</code> &#x306F;&#x3001;&#x65B0;&#x305F;&#x306B;&#x69CB;&#x7BC9;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306E;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;\n&#x521D;&#x671F;&#x5316;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>context</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x6D45;&#x3044;&#x30AF;&#x30ED;&#x30FC;&#x30F3;&#x3092;\n&#x4F5C;&#x6210;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x614E;&#x91CD;&#x3092;&#x8981;&#x3059;&#x308B;&#x30D3;&#x30B8;&#x30CD;&#x30B9;&#x3067;&#x306F;&#x3001;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x306A;&#x3044;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x5B9F;&#x884C;&#x306F;&#x7D30;&#x5FC3;&#x306E;&#x6CE8;&#x610F;&#x304C;&#x6C42;&#x3081;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x5076;&#x7136;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x5909;&#x6570;&#x304C;&#x6F0F;&#x308C;&#x3066;&#x3057;&#x307E;&#x3046;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;&#x306B;&#x3001;<code>vm.runInContext</code> &#x306F;&#x3068;&#x3066;&#x3082;&#x5F79;&#x7ACB;&#x3061;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x4FE1;&#x983C;&#x3067;&#x304D;&#x306A;&#x3044;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x5B89;&#x5168;&#x306B;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x5225;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8981;&#x6C42;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;code&quot;
                },
                {
                  &quot;name&quot;: &quot;context&quot;
                },
                {
                  &quot;name&quot;: &quot;filename&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;vm.createContext([initSandbox])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createContext&quot;,
          &quot;desc&quot;: &quot;<!--\n`vm.createContext` creates a new context which is suitable for use as the 2nd argument of a subsequent\ncall to `vm.runInContext`. A (V8) context comprises a global object together with a set of\nbuild-in objects and functions. The optional argument `initSandbox` will be shallow-copied\nto seed the initial contents of the global object used by the context.\n-->\n\n<p><code>vm.createContext</code> &#x306F;&#x3001;&#x7D9A;&#x3051;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B; <code>vm.runInContext</code> &#x306E;&#x7B2C; 2 &#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;\n&#x4F7F;&#x7528;&#x3059;&#x308B;&#x306E;&#x306B;&#x9069;&#x3057;&#x305F;&#x65B0;&#x3057;&#x3044;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n(V8 &#x306E;) &#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306F;&#x7D44;&#x307F;&#x8FBC;&#x307F;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x95A2;&#x6570;&#x3068;&#x5171;&#x306B;&#x3001;\n&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x542B;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x5F15;&#x6570; <code>initSandbox</code> &#x306F;&#x3001;&#x3053;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x308B;\n&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x521D;&#x671F;&#x5024;&#x3068;&#x3057;&#x3066;&#x30B7;&#x30E3;&#x30ED;&#x30FC;&#x30B3;&#x30D4;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;initSandbox&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;vm.createScript(code, [filename])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createScript&quot;,
          &quot;desc&quot;: &quot;<!--\n`createScript` compiles `code` but does not run it. Instead, it returns a\n`vm.Script` object representing this compiled code. This script can be run\nlater many times using methods below. The returned script is not bound to any\nglobal object. It is bound before each run, just for that run. `filename` is\noptional, it's only used in stack traces.\n-->\n\n<p><code>createScript</code> &#x306F; <code>code</code> &#x3092;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;&#x5B9F;&#x884C;&#x306F;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3055;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x8868;&#x73FE;&#x3059;&#x308B; <code>vm.Script</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x306F;&#x5F8C;&#x8FF0;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x5F8C;&#x304B;&#x3089;&#x4F55;&#x5EA6;&#x3067;&#x3082;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x306F;&#x3069;&#x306E;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x3082;&#x7D50;&#x3073;&#x3064;&#x3051;&#x3089;&#x308C;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x5B9F;&#x884C;&#x524D;&#x306B;&#x7D50;&#x3073;&#x3064;&#x3051;&#x308B;&#x3053;&#x3068;&#x3067;&#x3001;&#x305D;&#x306E;&#x3068;&#x304A;&#x308A;&#x306B;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>filename</code> &#x306F;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3001;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3067;&#x306E;&#x307F;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn case of syntax error in `code`, `createScript` prints the syntax error to stderr\nand throws an exception.\n-->\n\n<p><code>code</code> &#x304C;&#x6587;&#x6CD5;&#x30A8;&#x30E9;&#x30FC;&#x3068;&#x306A;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;\n<code>createScript</code> &#x306F;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x6587;&#x6CD5;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x51FA;&#x529B;&#x3057;&#x3066;&#x4F8B;&#x5916;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;code&quot;
                },
                {
                  &quot;name&quot;: &quot;filename&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: Script&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Script&quot;,
          &quot;desc&quot;: &quot;<!--\nA class for running scripts.  Returned by vm.createScript.\n-->\n\n<p>&#x30B9;&#x30AF;&#x30EA;&#x30D7;&#x30C8;&#x3092;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3059;&#x3002;<code>vm.createScript()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;script.runInThisContext()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;runInThisContext&quot;,
              &quot;desc&quot;: &quot;<!--\nSimilar to `vm.runInThisContext` but a method of a precompiled `Script` object.\n`script.runInThisContext` runs the code of `script` and returns the result.\nRunning code does not have access to local scope, but does have access to the `global` object\n(v8: in actual context).\n-->\n\n<p><code>vm.runInThisContext</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;\n&#x3053;&#x3061;&#x3089;&#x306F;&#x30D7;&#x30EA;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x6E08;&#x307F;&#x306E; <code>Script</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3067;&#x3059;&#x3002;\n<code>script.runInThisContext</code> &#x306F; <code>script</code> &#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x5B9F;&#x884C;&#x3057;&#x3066;&#x305D;&#x306E;&#x7D50;&#x679C;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x30B3;&#x30FC;&#x30C9;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3057;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;\n<code>global</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8; (v8: &#x5B9F;&#x969B;&#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;) &#x306B;&#x306F;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of using `script.runInThisContext` to compile code once and run it multiple times:\n-->\n\n<p><code>script.runInThisContext</code> &#x3092;&#x4F7F;&#x3063;&#x3066;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x4E00;&#x5EA6;&#x3060;&#x3051;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x3001;&#x8907;&#x6570;&#x56DE;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>var vm = require(&apos;vm&apos;);\n\nglobalVar = 0;\n\nvar script = vm.createScript(&apos;globalVar += 1&apos;, &apos;myfile.vm&apos;);\n\nfor (var i = 0; i &lt; 1000 ; i += 1) {\n  script.runInThisContext();\n}\n\nconsole.log(globalVar);\n\n// 1000</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;script.runInNewContext([sandbox])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;runInNewContext&quot;,
              &quot;desc&quot;: &quot;<!--\nSimilar to `vm.runInNewContext` a method of a precompiled `Script` object.\n`script.runInNewContext` runs the code of `script` with `sandbox` as the global object and returns the result.\nRunning code does not have access to local scope. `sandbox` is optional.\n-->\n\n<p><code>vm.runInNewContext</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;\n&#x3053;&#x3061;&#x3089;&#x306F;&#x30D7;&#x30EA;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x6E08;&#x307F;&#x306E; <code>Script</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3067;&#x3059;&#x3002;\n<code>script.runInNewContext</code> &#x306F; <code>sandbox</code> &#x304C;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3042;&#x308B;&#x304B;&#x306E;&#x3088;&#x3046;&#x306B;\n<code>script</code> &#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x5B9F;&#x884C;&#x3057;&#x3066;&#x305D;&#x306E;&#x7D50;&#x679C;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x30B3;&#x30FC;&#x30C9;&#x306F;&#x30ED;&#x30FC;&#x30AB;&#x30EB;&#x30B9;&#x30B3;&#x30FC;&#x30D7;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>sandbox</code> &#x306F;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: compile code that increments a global variable and sets one, then execute this code multiple times.\nThese globals are contained in the sandbox.\n-->\n\n<p>&#x4F8B;: &#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x5909;&#x6570;&#x3092;&#x30A4;&#x30F3;&#x30AF;&#x30EA;&#x30E1;&#x30F3;&#x30C8;&#x3057;&#x3066;&#x30BB;&#x30C3;&#x30C8;&#x3059;&#x308B;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x3057;&#x3066;&#x3001;&#x3053;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x8907;&#x6570;&#x56DE;&#x5B9F;&#x884C;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x5909;&#x6570;&#x306F;&#x30B5;&#x30F3;&#x30C9;&#x30DC;&#x30C3;&#x30AF;&#x30B9;&#x306B;&#x542B;&#x307E;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var util = require(&apos;util&apos;),\n    vm = require(&apos;vm&apos;),\n    sandbox = {\n      animal: &apos;cat&apos;,\n      count: 2\n    };\n\nvar script = vm.createScript(&apos;count += 1; name = &quot;kitty&quot;&apos;, &apos;myfile.vm&apos;);\n\nfor (var i = 0; i &lt; 10 ; i += 1) {\n  script.runInNewContext(sandbox);\n}\n\nconsole.log(util.inspect(sandbox));\n\n// { animal: &apos;cat&apos;, count: 12, name: &apos;kitty&apos; }</code></pre>\n<!--\nNote that running untrusted code is a tricky business requiring great care.  To prevent accidental\nglobal variable leakage, `script.runInNewContext` is quite useful, but safely running untrusted code\nrequires a separate process.\n-->\n\n<p>&#x614E;&#x91CD;&#x3092;&#x8981;&#x3059;&#x308B;&#x30D3;&#x30B8;&#x30CD;&#x30B9;&#x3067;&#x306F;&#x3001;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x306A;&#x3044;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x5B9F;&#x884C;&#x306F;&#x7D30;&#x5FC3;&#x306E;&#x6CE8;&#x610F;&#x304C;&#x6C42;&#x3081;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x5076;&#x7136;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x5909;&#x6570;&#x304C;&#x6F0F;&#x308C;&#x3066;&#x3057;&#x307E;&#x3046;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;&#x306B;&#x3001;<code>script.runInNewContext</code> &#x306F;&#x3068;&#x3066;&#x3082;&#x5F79;&#x7ACB;&#x3061;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x4FE1;&#x983C;&#x3067;&#x304D;&#x306A;&#x3044;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x5B89;&#x5168;&#x306B;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x5225;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8981;&#x6C42;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;sandbox&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;vm&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Child Process&quot;,
      &quot;name&quot;: &quot;child_process&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nNode provides a tri-directional `popen(3)` facility through the\n`child_process` module.\n-->\n\n<p>Node&#x306F; <code>child_process</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x901A;&#x3058;&#x3066;&#x3001;3 &#x65B9;&#x5411;&#x306E; <code>popen(3)</code>\n&#x6A5F;&#x80FD;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIt is possible to stream data through a child's `stdin`, `stdout`, and\n`stderr` in a fully non-blocking way.  (Note that some programs use\nline-buffered I/O internally.  That doesn't affect node.js but it means\ndata you send to the child process is not immediately consumed.)\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x5B8C;&#x5168;&#x306B;&#x30CE;&#x30F3;&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x306A;&#x65B9;&#x6CD5;&#x3067;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; <code>stdin</code>&#x3001;<code>stdout</code>&#x3001;\n&#x305D;&#x3057;&#x3066; <code>stderr</code> &#x3092;&#x901A;&#x3058;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5B9F;&#x73FE;&#x3057;&#x307E;&#x3059;&#x3002;\n(&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x5185;&#x90E8;&#x7684;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x305F; I/O &#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;&#x305D;&#x308C;&#x306F; node.js &#x306B;&#x306F;&#x5F71;&#x97FF;&#x3057;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x3063;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x3059;&#x3050;&#x306B;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x3068;&#x306F;&#x9650;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;)&#x3002;\n\n</p>\n<!--\nTo create a child process use `require('child_process').spawn()`.\nTo create a child process use `require('child_process').spawn()` or\n`require('child_process').fork()`.  The semantics of each are slightly\ndifferent, and explained below.\n-->\n\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x751F;&#x6210;&#x306F; <code>require(&apos;child_process&apos;).spawn()</code> &#x307E;&#x305F;&#x306F;\n<code>require(&apos;child_process&apos;).fork()</code> &#x3092;&#x4F7F;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x610F;&#x5473;&#x8AD6;&#x306F;&#x4EE5;&#x4E0B;&#x3067;&#x8AAC;&#x660E;&#x3059;&#x308B;&#x3088;&#x3046;&#x306B;&#x308F;&#x305A;&#x304B;&#x306B;&#x7570;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: ChildProcess&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;ChildProcess&quot;,
          &quot;desc&quot;: &quot;<!--\n`ChildProcess` is an [EventEmitter][].\n-->\n\n<p><code>ChildProcess</code> &#x306F; [EventEmitter][] &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nChild processes always have three streams associated with them. `child.stdin`,\n`child.stdout`, and `child.stderr`.  These may be shared with the stdio\nstreams of the parent process, or they may be separate stream objects\nwhich can be piped to and from.\n\nThe ChildProcess class is not intended to be used directly.  Use the\n`spawn()` or `fork()` methods to create a Child Process instance.\n-->\n\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x5E38;&#x306B; 3 &#x672C;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x95A2;&#x9023;&#x3065;&#x3051;&#x3089;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n<code>child.stdin</code>&#x3001;<code>child.stdout</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>child.stderr</code> &#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306F;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x6A19;&#x6E96;&#x5165;&#x51FA;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5171;&#x6709;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3057;&#x3001;\n&#x72EC;&#x7ACB;&#x3057;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x30D1;&#x30A4;&#x30D7;&#x3067;&#x3064;&#x306A;&#x304C;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event:  &apos;error&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;desc&quot;: &quot;<!--\n* `err` {Error Object} the error.\n-->\n\n<ul>\n<li><code>err</code> {Error Object} &#x30A8;&#x30E9;&#x30FC;&#x3002;</li>\n</ul>\n<!--\nEmitted when:\n-->\n\n<p>&#x6B21;&#x306E;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;:\n\n</p>\n<!--\n1. The process could not be spawned, or\n2. The process could not be killed, or\n3. Sending a message to the child process failed for whatever reason.\n-->\n\n<ol>\n<li>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8D77;&#x52D5;&#x3067;&#x304D;&#x306A;&#x304B;&#x3063;&#x305F;&#x3001;&#x307E;&#x305F;&#x306F;</li>\n<li>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x6BBA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x306A;&#x304B;&#x3063;&#x305F;&#x3001;&#x307E;&#x305F;&#x306F;</li>\n<li>&#x4F55;&#x3089;&#x304B;&#x306E;&#x7406;&#x7531;&#x3067;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x5931;&#x6557;&#x3057;&#x305F;&#x3002;</li>\n</ol>\n<!--\nNote that the `exit`-event may or may not fire after an error has occured. If\nyou are listening on both events to fire a function, remember to guard against\ncalling your function twice.\n-->\n\n<p><code>exit</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x5F8C;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3057;&#x3001;\n&#x3055;&#x308C;&#x306A;&#x3044;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3082;&#x3057;&#x4E21;&#x65B9;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x540C;&#x3058;&#x95A2;&#x6570;&#x3067;&#x76E3;&#x8996;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;&#x305D;&#x306E;&#x95A2;&#x6570;&#x306F;2&#x56DE;&#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306B;\n&#x5BFE;&#x51E6;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x5FD8;&#x308C;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nSee also [`ChildProcess#kill()`](#child_process_child_kill_signal) and\n[`ChildProcess#send()`](#child_process_child_send_message_sendhandle).\n-->\n\n<p><a href="\&quot;#child_process_child_kill_signal\&quot;"><code>ChildProcess#kill()</code></a> &#x304A;&#x3088;&#x3073;\n<a href="\&quot;#child_process_child_send_message_sendhandle\&quot;"><code>ChildProcess#send()</code></a>\n&#x3082;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event:  &apos;exit&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;exit&quot;,
              &quot;desc&quot;: &quot;<!--\n* `code` {Number} the exit code, if it exited normally.\n* `signal` {String} the signal passed to kill the child process, if it\n  was killed by the parent.\n-->\n\n<ul>\n<li><code>code</code> {Number} &#x901A;&#x5E38;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x3002;</li>\n<li><code>signal</code> {String} &#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x3088;&#x3063;&#x3066;&#x7D42;&#x4E86;&#x3055;&#x305B;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x9001;&#x3089;&#x308C;&#x305F;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3002;</li>\n</ul>\n<!--\nThis event is emitted after the child process ends. If the process terminated\nnormally, `code` is the final exit code of the process, otherwise `null`. If\nthe process terminated due to receipt of a signal, `signal` is the string name\nof the signal, otherwise `null`.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5F8C;&#x3067;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x666E;&#x901A;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;<code>code</code> &#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306E;&#x5834;&#x5408;&#x306F; <code>null</code> &#x3067;&#x3059;&#x3002;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x3063;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;<code>signal</code> &#x306F;&#x6587;&#x5B57;&#x5217;&#x306B;&#x3088;&#x308B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x540D;&#x524D;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306E;&#x5834;&#x5408;&#x306F; <code>null</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that the child process stdio streams might still be open.\n-->\n\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x6A19;&#x6E96;&#x5165;&#x51FA;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x305F;&#x307E;&#x307E;&#x306B;&#x306A;&#x3063;&#x3066;&#x3044;&#x308B;&#x304B;&#x3082;\n&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nAlso, note that node establishes signal handlers for `'SIGINT'` and `'SIGTERM`',\nso it will not terminate due to receipt of those signals, it will exit.\n-->\n\n<p>&#x307E;&#x305F;&#x3001;Node &#x304C; &apos;SIGINT&apos;<code> &#x304A;&#x3088;&#x3073; </code>&apos;SIGTERM<code>&apos; &#x306B;&#x5BFE;&#x3059;&#x308B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x3092;\n&#x78BA;&#x7ACB;&#x3059;&#x308B;&#x305F;&#x3081;&#x3001;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x305D;&#x308C;&#x3089;&#x306E;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x53D7;&#x3051;&#x3068;&#x3063;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x3066;&#x3082;&#x3001;\n</code>signal` &#x306B;&#x306F;&#x305D;&#x308C;&#x3089;&#x306E;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x540D;&#x524D;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nSee `waitpid(2)`.\n-->\n\n<p><code>waitpid(2)</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\n* `code` {Number} the exit code, if it exited normally.\n* `signal` {String} the signal passed to kill the child process, if it\n  was killed by the parent.\n-->\n\n<ul>\n<li><code>code</code> {Number} &#x666E;&#x901A;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x305D;&#x306E;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x3002;</li>\n<li><code>signal</code> {String} &#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x3088;&#x3063;&#x3066;&#x6BBA;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x6BBA;&#x3059;&#x305F;&#x3081;&#x306B;&#x6E21;&#x3055;&#x308C;&#x305F;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3002;</li>\n</ul>\n<!--\nThis event is emitted when the stdio streams of a child process have all\nterminated.  This is distinct from 'exit', since multiple processes\nmight share the same stdio streams.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x3001;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x6A19;&#x6E96;&#x5165;&#x51FA;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x5168;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8907;&#x6570;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x540C;&#x3058;&#x6A19;&#x6E96;&#x5165;&#x51FA;&#x529B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5171;&#x6709;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x306E;&#x3067;&#x3001;\n&#x3053;&#x308C;&#x306F; <code>&apos;exit&apos;</code> &#x3068;&#x306F;&#x660E;&#x78BA;&#x306B;&#x7570;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;disconnect&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;disconnect&quot;,
              &quot;desc&quot;: &quot;<!--\nThis event is emitted after calling the `.disconnect()` method in the parent\nor in the child. After disconnecting it is no longer possible to send messages,\nand the `.connected` property is false.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x3001;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x307E;&#x305F;&#x306F;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3067; <code>.disconnect()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5207;&#x65AD;&#x306E;&#x5F8C;&#x3067;&#x306F;&#x3001;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x9593;&#x3067;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x305A;&#x3001;\n<code>.connected</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F; <code>false</code> &#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;message&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;message&quot;,
              &quot;desc&quot;: &quot;<!--\n* `message` {Object} a parsed JSON object or primitive value\n* `sendHandle` {Handle object} a Socket or Server object\n-->\n\n<ul>\n<li><code>message</code> {Object} &#x89E3;&#x6790;&#x6E08;&#x307F;&#x306E; JSON &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x307E;&#x305F;&#x306F;&#x30D7;&#x30EA;&#x30DF;&#x30C6;&#x30A3;&#x30D6;&#x5024;</li>\n<li><code>sendHandle</code> {Handle object} &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x307E;&#x305F;&#x306F;&#x30B5;&#x30FC;&#x30D0;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;</li>\n</ul>\n<!--\nMessages send by `.send(message, [sendHandle])` are obtained using the\n`message` event.\n-->\n\n<p><code>.send(message, [sendHandle])</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x305F;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x306F; <code>&apos;message&apos;</code>\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x53D6;&#x5F97;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;`stdin` {Stream object} &quot;,
              &quot;name&quot;: &quot;stdin&quot;,
              &quot;desc&quot;: &quot;<!--\nA `Writable Stream` that represents the child process's `stdin`.\nClosing this stream via `end()` often causes the child process to terminate.\n\nIf the child stdio streams are shared with the parent, then this will\nnot be set.\n-->\n\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; <code>stdin</code> &#x3092;&#x8868;&#x73FE;&#x3059;&#x308B; <code>Writable Stream</code> &#x3067;&#x3059;&#x3002;\n&#x591A;&#x304F;&#x306E;&#x5834;&#x5408;&#x3001;<code>end()</code> &#x3092;&#x901A;&#x3058;&#x3066;&#x3053;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x9589;&#x3058;&#x308B;&#x3068;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x6A19;&#x6E96;&#x5165;&#x51FA;&#x529B;&#x304C;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x5171;&#x6709;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x306F;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`stdout` {Stream object} &quot;,
              &quot;name&quot;: &quot;stdout&quot;,
              &quot;desc&quot;: &quot;<!--\nA `Readable Stream` that represents the child process's `stdout`.\n\nIf the child stdio streams are shared with the parent, then this will\nnot be set.\n-->\n\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; <code>stdout</code> &#x3092;&#x8868;&#x73FE;&#x3059;&#x308B; <code>Readable Stream</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x6A19;&#x6E96;&#x5165;&#x51FA;&#x529B;&#x304C;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x5171;&#x6709;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x306F;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`stderr` {Stream object} &quot;,
              &quot;name&quot;: &quot;stderr&quot;,
              &quot;desc&quot;: &quot;<!--\nA `Readable Stream` that represents the child process's `stderr`.\n\nIf the child stdio streams are shared with the parent, then this will\nnot be set.\n-->\n\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; <code>stderr</code> &#x3092;&#x8868;&#x73FE;&#x3059;&#x308B; <code>Readable Stream</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x6A19;&#x6E96;&#x5165;&#x51FA;&#x529B;&#x304C;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x5171;&#x6709;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x306F;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`pid` {Integer} &quot;,
              &quot;name&quot;: &quot;pid&quot;,
              &quot;desc&quot;: &quot;<!--\nThe PID of the child process.\n-->\n\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; PID &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var spawn = require(&apos;child_process&apos;).spawn,\n    grep  = spawn(&apos;grep&apos;, [&apos;ssh&apos;]);\n\nconsole.log(&apos;Spawned child pid: &apos; + grep.pid);\ngrep.stdin.end();</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;child.connected&quot;,
              &quot;name&quot;: &quot;connected&quot;,
              &quot;desc&quot;: &quot;<!--\n* {Boolean} Set to false after `.disconnect' is called\n-->\n\n<ul>\n<li>{Boolean} <code>.disconnect&apos; &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068; </code>false` &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;</li>\n</ul>\n<!--\nIf `.connected` is false, it is no longer possible to send messages.\n-->\n\n<p><code>.connected</code> &#x304C; <code>false</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;child.kill([signal])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;kill&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`signal` {String} &quot;,
                      &quot;name&quot;: &quot;signal&quot;,
                      &quot;type&quot;: &quot;String&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;signal&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nSend a signal to the child process. If no argument is given, the process will\nbe sent `'SIGTERM'`. See `signal(7)` for a list of available signals.\n-->\n\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x5F15;&#x6570;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x306F; <code>&apos;SIGTERM&apos;</code> &#x304C;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x4E00;&#x89A7;&#x306F; <code>signal(7)</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n<pre><code>var spawn = require(&apos;child_process&apos;).spawn,\n    grep  = spawn(&apos;grep&apos;, [&apos;ssh&apos;]);\n\ngrep.on(&apos;close&apos;, function (code, signal) {\n  console.log(&apos;child process terminated due to receipt of signal &apos;+signal);\n});\n\n// send SIGHUP to process\ngrep.kill(&apos;SIGHUP&apos;);</code></pre>\n<!--\nMay emit an `'error'` event when the signal cannot be delivered. Sending a\nsignal to a child process that has already exited is not an error but may\nhave unforeseen consequences: if the PID (the process ID) has been reassigned\nto another process, the signal will be delivered to that process instead.\nWhat happens next is anyone's guess.\n-->\n\n<p>&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x65E2;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3078;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x3066;&#x3082;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x306F;&#x306A;&#x3089;&#x305A;&#x3001;\n&#x4E88;&#x60F3;&#x3057;&#x306A;&#x3044;&#x7D50;&#x679C;&#x306B;&#x306A;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;:\nPID (&#x30D7;&#x30ED;&#x30BB;&#x30B9; ID) &#x304C;&#x4ED6;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x518D;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;\n&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306F;&#x305D;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x3066;&#x3057;&#x307E;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x3067;&#x4F55;&#x304C;&#x8D77;&#x3053;&#x308B;&#x304B;&#x306F;&#x8AB0;&#x306B;&#x3082;&#x4E88;&#x60F3;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nNote that while the function is called `kill`, the signal delivered to the\nchild process may not actually kill it.  `kill` really just sends a signal\nto a process.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; <code>kill</code> &#x3068;&#x547C;&#x3070;&#x308C;&#x308B;&#x3082;&#x306E;&#x306E;&#x3001;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x5C4A;&#x3051;&#x3089;&#x308C;&#x308B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x304C;&#x5B9F;&#x969B;&#x306B;&#x306F;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x6BBA;&#x3055;&#x306A;&#x3044;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n<code>kill</code> &#x306F;&#x305F;&#x3060;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3092;&#x9001;&#x308B;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nSee `kill(2)`\n-->\n\n<p><code>kill(2)</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;child.send(message, [sendHandle])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;send&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`message` {Object} &quot;,
                      &quot;name&quot;: &quot;message&quot;,
                      &quot;type&quot;: &quot;Object&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`sendHandle` {Handle object} &quot;,
                      &quot;name&quot;: &quot;sendHandle&quot;,
                      &quot;type&quot;: &quot;Handle object&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;message&quot;
                    },
                    {
                      &quot;name&quot;: &quot;sendHandle&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWhen using `child_process.fork()` you can write to the child using\n`child.send(message, [sendHandle])` and messages are received by\na `'message'` event on the child.\n-->\n\n<p><code>child_process.fork()</code> &#x3092;&#x4F7F;&#x3046;&#x3068;&#x3001;<code>child.send(message, [sendHandle])</code> &#x3092;\n&#x4F7F;&#x3063;&#x3066;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x9001;&#x4FE1;&#x3057;&#x3001;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3067;&#x306F;&#x305D;&#x308C;&#x3092; <code>&apos;message&apos;</code>\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x53D7;&#x3051;&#x53D6;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var cp = require(&apos;child_process&apos;);\n\nvar n = cp.fork(__dirname + &apos;/sub.js&apos;);\n\nn.on(&apos;message&apos;, function(m) {\n  console.log(&apos;PARENT got message:&apos;, m);\n});\n\nn.send({ hello: &apos;world&apos; });</code></pre>\n<!--\nAnd then the child script, `'sub.js'` might look like this:\n-->\n\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; <code>&apos;sub.js&apos;</code> &#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<pre><code>process.on(&apos;message&apos;, function(m) {\n  console.log(&apos;CHILD got message:&apos;, m);\n});\n\nprocess.send({ foo: &apos;bar&apos; });</code></pre>\n<!--\nIn the child the `process` object will have a `send()` method, and `process`\nwill emit objects each time it receives a message on its channel.\n-->\n\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3067;&#x306F; <code>process</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F; <code>send()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x6301;&#x3061;&#x3001;\n&#x305D;&#x306E;&#x30C1;&#x30E3;&#x30CD;&#x30EB;&#x4E0A;&#x3067;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x53D7;&#x4FE1;&#x3059;&#x308B;&#x305F;&#x3073;&#x306B;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nPlease note that the `send()` method on both the parent and child are\nsynchronous - sending large chunks of data is not advised (pipes can be used\ninstead, see\n[`child_process.spawn`](#child_process_child_process_spawn_command_args_options)).\n-->\n\n<p>&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x3044;&#x305A;&#x308C;&#x306B;&#x304A;&#x3044;&#x3066;&#x3082;&#x3001;<code>send()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x540C;&#x671F;&#x7684;&#x3067;&#x3059; -\n&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x5927;&#x304D;&#x306A;&#x584A;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x63A8;&#x5968;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;\n(&#x4EE3;&#x308F;&#x308A;&#x306B;&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x51FA;&#x6765;&#x307E;&#x3059;&#x3001;\n<a href="\&quot;#child_process_child_process_spawn_command_args_options\&quot;"><code>child_process.spawn</code></a>\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<!--\nThere is a special case when sending a `{cmd: 'NODE_foo'}` message. All messages\ncontaining a `NODE_` prefix in its `cmd` property will not be emitted in\nthe `message` event, since they are internal messages used by node core.\nMessages containing the prefix are emitted in the `internalMessage` event, you\nshould by all means avoid using this feature, it is subject to change without notice.\n-->\n\n<p>&#x7279;&#x5225;&#x306A;&#x30B1;&#x30FC;&#x30B9;&#x3068;&#x3057;&#x3066;&#x3001;<code>{cmd: &apos;NODE_foo&apos;}</code> &#x306E;&#x3088;&#x3046;&#x306A;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;\n&#x9001;&#x4FE1;&#x3059;&#x308B;&#x5834;&#x5408;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>cmd</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x304C;&#x63A5;&#x982D;&#x8F9E; <code>NODE_</code> &#x3092;&#x542B;&#x3080;&#x5168;&#x3066;&#x306E;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x306F; node &#x306E;&#x30B3;&#x30A2;&#x3067;\n&#x4F7F;&#x308F;&#x308C;&#x308B;&#x5185;&#x90E8;&#x7684;&#x306A;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3067;&#x3042;&#x308B;&#x305F;&#x3081;&#x3001;<code>&apos;message&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x63A5;&#x982D;&#x8F9E;&#x3092;&#x542B;&#x3080;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x306F; <code>&apos;internalMessage&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x305D;&#x308C;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;&#x305D;&#x308C;&#x306F;&#x4FDD;&#x8A3C;&#x306A;&#x3057;&#x306B;&#x5909;&#x66F4;&#x3055;&#x308C;&#x308B;&#x53EF;&#x80FD;&#x6027;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `sendHandle` option to `child.send()` is for sending a TCP server or\nsocket object to another process. The child will receive the object as its\nsecond argument to the `message` event.\n-->\n\n<p><code>child.send()</code> &#x306E; <code>sendHandle</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F; TCP &#x30B5;&#x30FC;&#x30D0;&#x307E;&#x305F;&#x306F;\n&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4ED6;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x305D;&#x308C;&#x3092; <code>&apos;message&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x7B2C; 2 &#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x53D7;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nEmits an `'error'` event if the message cannot be sent, for example because\nthe child process has already exited.\n-->\n\n<p>&#x305F;&#x3068;&#x3048;&#x3070;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x65E2;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306A;&#x3069;&#x3001;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x9001;&#x4FE1;&#x3067;&#x304D;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;\n<code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<h4>Example: sending server object</h4>\n<!--\nHere is an example of sending a server:\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>var child = require(&apos;child_process&apos;).fork(&apos;child.js&apos;);\n\n// Open up the server object and send the handle.\nvar server = require(&apos;net&apos;).createServer();\nserver.on(&apos;connection&apos;, function (socket) {\n  socket.end(&apos;handled by parent&apos;);\n});\nserver.listen(1337, function() {\n  child.send(&apos;server&apos;, server);\n});</code></pre>\n<!--\nAnd the child would the receive the server object as:\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x53D7;&#x4FE1;&#x3059;&#x308B;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;:\n\n</p>\n<pre><code>process.on(&apos;message&apos;, function(m, server) {\n  if (m === &apos;server&apos;) {\n    server.on(&apos;connection&apos;, function (socket) {\n      socket.end(&apos;handled by child&apos;);\n    });\n  }\n});</code></pre>\n<!--\nNote that the server is now shared between the parent and child, this means\nthat some connections will be handled by the parent and some by the child.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3067;&#x5171;&#x6709;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x6642;&#x306B;&#x306F;&#x89AA;&#x3042;&#x308B;&#x3044;&#x306F;&#x5B50;&#x3067;&#x51E6;&#x7406;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor `dgram` servers the workflow is exactly the same.  Here you listen on\na `message` event instead of `connection` and use `server.bind` instead of\n`server.listen`.  (Currently only supported on UNIX platforms.)\n-->\n\n<p><code>dgram</code> &#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30EF;&#x30FC;&#x30AF;&#x30D5;&#x30ED;&#x30FC;&#x3082;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n<code>connection</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B; <code>message</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3057;&#x3001;\n<code>server.listen</code> &#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B; <code>server.bind</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;\n(&#x73FE;&#x6642;&#x70B9;&#x3067;&#x306F; UNIX &#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x3067;&#x306E;&#x307F;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;)&#x3002;\n\n</p>\n<h4>Example: sending socket object</h4>\n<!--\nHere is an example of sending a socket. It will spawn two children and handle\nconnections with the remote address `74.125.127.100` as VIP by sending the\nsocket to a \"special\" child process. Other sockets will go to a \"normal\" process.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x4F8B;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x4E8C;&#x3064;&#x306E;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8D77;&#x52D5;&#x3057;&#x3001;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x304C; VIP\n(<code>74.125.127.100</code>) &#x306A;&#x3089;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3092; &quot;special&quot; &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x4ED6;&#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F; &quot;normal&quot; &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var normal = require(&apos;child_process&apos;).fork(&apos;child.js&apos;, [&apos;normal&apos;]);\nvar special = require(&apos;child_process&apos;).fork(&apos;child.js&apos;, [&apos;special&apos;]);\n\n// Open up the server and send sockets to child\nvar server = require(&apos;net&apos;).createServer();\nserver.on(&apos;connection&apos;, function (socket) {\n\n  // if this is a VIP\n  if (socket.remoteAddress === &apos;74.125.127.100&apos;) {\n    special.send(&apos;socket&apos;, socket);\n    return;\n  }\n  // just the usual dudes\n  normal.send(&apos;socket&apos;, socket);\n});\nserver.listen(1337);</code></pre>\n<!--\nThe `child.js` could look like this:\n-->\n\n<p><code>chold.js</code> &#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;:\n\n</p>\n<pre><code>process.on(&apos;message&apos;, function(m, socket) {\n  if (m === &apos;socket&apos;) {\n    socket.end(&apos;You were handled as a &apos; + process.argv[2] + &apos; person&apos;);\n  }\n});</code></pre>\n<!--\nNote that once a single socket has been sent to a child the parent can no\nlonger keep track of when the socket is destroyed. To indicate this condition\nthe `.connections` property becomes `null`.\nIt is also recommended not to use `.maxConnections` in this condition.\n-->\n\n<p>&#x4E00;&#x5EA6;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x3082;&#x3046;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x304C;&#x3044;&#x3064;\n&#x7834;&#x68C4;&#x3055;&#x308C;&#x308B;&#x304B;&#x77E5;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x306E;&#x72B6;&#x614B;&#x3092;&#x793A;&#x3059;&#x305F;&#x3081;&#x306B;&#xFF0C;<code>.connections</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F; <code>null</code> &#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x72B6;&#x614B;&#x3067;&#x306F;&#x3001;<code>.maxConnections</code> &#x3082;&#x4F7F;&#x308F;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x63A8;&#x5968;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;child.disconnect()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;disconnect&quot;,
              &quot;desc&quot;: &quot;<!--\nClose the IPC channel between parent and child, allowing the child to exit\ngracefully once there are no other connections keeping it alive. After calling\nthis method the `.connected` flag will be set to `false` in both the parent and\nchild, and it is no longer possible to send messages.\n-->\n\n<p>&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x9593;&#x306E; IPC &#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x3001;\n&#x4ED6;&#x306E;&#x63A5;&#x7D9A;&#x3092;&#x6301;&#x305F;&#x306A;&#x3044;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x81EA;&#x7136;&#x306B;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x3001;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x4E21;&#x65B9;&#x3067; <code>.connected</code> &#x306F;\n<code>false</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x3001;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe 'disconnect' event will be emitted when there are no messages in the process\nof being received, most likely immediately.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x53D7;&#x4FE1;&#x3059;&#x308B;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x304C;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x304A;&#x305D;&#x3089;&#x304F;&#x306F;&#x3059;&#x3050;&#x306B; <code>&apos;disconnect&apos;</code>\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that you can also call `process.disconnect()` in the child process.\n-->\n\n<p>&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3067;&#x3082; <code>process.disconnect()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x305B;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ]
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;child_process.spawn(command, [args], [options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;spawn&quot;,
          &quot;desc&quot;: &quot;<!--\n* `command` {String} The command to run\n* `args` {Array} List of string arguments\n* `options` {Object}\n  * `cwd` {String} Current working directory of the child process\n  * `stdio` {Array|String} Child's stdio configuration. (See below)\n  * `customFds` {Array} **Deprecated** File descriptors for the child to use\n    for stdio.  (See below)\n  * `env` {Object} Environment key-value pairs\n  * `detached` {Boolean} The child will be a process group leader.  (See below)\n  * `uid` {Number} Sets the user identity of the process. (See setuid(2).)\n  * `gid` {Number} Sets the group identity of the process. (See setgid(2).)\n* return: {ChildProcess object}\n-->\n\n<ul>\n<li><code>command</code> {String} &#x5B9F;&#x884C;&#x3059;&#x308B;&#x30B3;&#x30DE;&#x30F3;&#x30C9;</li>\n<li><code>args</code> {Array} &#x6587;&#x5B57;&#x5217;&#x306B;&#x3088;&#x308B;&#x5F15;&#x6570;&#x306E;&#x914D;&#x5217;</li>\n<li><code>options</code> {Object}<ul>\n<li><code>cwd</code> {String} &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;</li>\n<li><code>stdio</code> {Array|String} &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x6A19;&#x6E96;&#x5165;&#x51FA;&#x529B;&#x306E;&#x8A2D;&#x5B9A; (&#x5F8C;&#x8FF0;)&#x3002;</li>\n<li><code>customFds</code> {Array} <strong>Deprecated</strong> &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x6A19;&#x6E96;&#x5165;&#x51FA;&#x529B;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x7528;&#x3059;&#x308B;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x306E;&#x914D;&#x5217; (&#x5F8C;&#x8FF0;)</li>\n<li><code>env</code> {Object} &#x74B0;&#x5883;&#x5909;&#x6570;&#x3068;&#x3057;&#x3066;&#x4E0E;&#x3048;&#x308B;&#x30AD;&#x30FC;&#x30FB;&#x5024;&#x306E;&#x30DA;&#x30A2;</li>\n<li><code>detached</code> {Boolean} &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x306E;&#x30EA;&#x30FC;&#x30C0;&#x306B;&#x306A;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;\n(&#x5F8C;&#x8FF0;)&#x3002;</li>\n<li><code>uid</code> {Number} &#x3053;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30E6;&#x30FC;&#x30B6;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;\n (setuid(2) &#x3092;&#x53C2;&#x7167;)&#x3002;</li>\n<li><code>gid</code> {Number} &#x3053;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x8B58;&#x5225;&#x5B50;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;\n(setgid(2) &#x3092;&#x53C2;&#x7167;)&#x3002;</li>\n</ul>\n</li>\n<li>return: {ChildProcess object}</li>\n</ul>\n<!--\nLaunches a new process with the given `command`, with  command line arguments in `args`.\nIf omitted, `args` defaults to an empty Array.\n-->\n\n<p><code>args</code> &#x3092;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30E9;&#x30A4;&#x30F3;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x3001;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>command</code> &#x3067;&#x65B0;&#x3057;&#x3044;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>args</code> &#x304C;&#x7701;&#x7565;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x7A7A;&#x306E;&#x914D;&#x5217;&#x304C;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe third argument is used to specify additional options, which defaults to:\n-->\n\n<p>&#x7B2C; 3 &#x5F15;&#x6570;&#x306F;&#x8FFD;&#x52A0;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x3001;&#x305D;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;:\n\n</p>\n<pre><code>{ cwd: undefined,\n  env: process.env\n}</code></pre>\n<!--\n`cwd` allows you to specify the working directory from which the process is spawned.\nUse `env` to specify environment variables that will be visible to the new process.\n-->\n\n<p><code>cwd</code> &#x3067;&#x8D77;&#x52D5;&#x3055;&#x308C;&#x305F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>env</code> &#x306F;&#x65B0;&#x3057;&#x3044;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x898B;&#x3048;&#x308B;&#x74B0;&#x5883;&#x5909;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of running `ls -lh /usr`, capturing `stdout`, `stderr`, and the exit code:\n-->\n\n<p>ls -lh /usr<code> &#x3092;&#x5B9F;&#x884C;&#x3057;&#x3066; </code>stdout<code>&#x3001;</code>stderr`&#x3001;&#x304A;&#x3088;&#x3073;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>var spawn = require(&apos;child_process&apos;).spawn,\n    ls    = spawn(&apos;ls&apos;, [&apos;-lh&apos;, &apos;/usr&apos;]);\n\nls.stdout.on(&apos;data&apos;, function (data) {\n  console.log(&apos;stdout: &apos; + data);\n});\n\nls.stderr.on(&apos;data&apos;, function (data) {\n  console.log(&apos;stderr: &apos; + data);\n});\n\nls.on(&apos;close&apos;, function (code) {\n  console.log(&apos;child process exited with code &apos; + code);\n});</code></pre>\n<!--\nExample: A very elaborate way to run 'ps ax | grep ssh'\n-->\n\n<p>&#x3068;&#x3066;&#x3082;&#x624B;&#x306E;&#x8FBC;&#x3093;&#x3060;&#x65B9;&#x6CD5;&#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B; &apos;ps ax | grep ssh&apos; &#x306E;&#x4F8B;:\n\n</p>\n<pre><code>var spawn = require(&apos;child_process&apos;).spawn,\n    ps    = spawn(&apos;ps&apos;, [&apos;ax&apos;]),\n    grep  = spawn(&apos;grep&apos;, [&apos;ssh&apos;]);\n\nps.stdout.on(&apos;data&apos;, function (data) {\n  grep.stdin.write(data);\n});\n\nps.stderr.on(&apos;data&apos;, function (data) {\n  console.log(&apos;ps stderr: &apos; + data);\n});\n\nps.on(&apos;close&apos;, function (code) {\n  if (code !== 0) {\n    console.log(&apos;ps process exited with code &apos; + code);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on(&apos;data&apos;, function (data) {\n  console.log(&apos;&apos; + data);\n});\n\ngrep.stderr.on(&apos;data&apos;, function (data) {\n  console.log(&apos;grep stderr: &apos; + data);\n});\n\ngrep.on(&apos;close&apos;, function (code) {\n  if (code !== 0) {\n    console.log(&apos;grep process exited with code &apos; + code);\n  }\n});</code></pre>\n<!--\nExample of checking for failed exec:\n-->\n\n<p>exec &#x306E;&#x5931;&#x6557;&#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code>var spawn = require(&apos;child_process&apos;).spawn,\n    child = spawn(&apos;bad_command&apos;);\n\nchild.stderr.setEncoding(&apos;utf8&apos;);\nchild.stderr.on(&apos;data&apos;, function (data) {\n  if (/^execvp\\(\\)/.test(data)) {\n    console.log(&apos;Failed to start child process.&apos;);\n  }\n});</code></pre>\n<!--\nNote that if spawn receives an empty options object, it will result in\nspawning the process with an empty environment rather than using\n`process.env`. This due to backwards compatibility issues with a deprecated\nAPI.\n-->\n\n<p><code>spawn()</code> &#x306F;&#x7A7A;&#x306E; <code>options</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B;&#x3068;&#x3001;\n<code>process.env</code> &#x3092;&#x4F7F;&#x3046;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#xFF0C;&#x7A7A;&#x306E;&#x74B0;&#x5883;&#x5909;&#x6570;&#x3067;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x5EC3;&#x6B62;&#x3055;&#x308C;&#x305F; API &#x3068;&#x306E;&#x4E92;&#x63DB;&#x6027;&#x306E;&#x305F;&#x3081;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe 'stdio' option to `child_process.spawn()` is an array where each\nindex corresponds to a fd in the child.  The value is one of the following:\n-->\n\n<p><code>child_process.spawn()</code> &#x306E; <code>stdio</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x914D;&#x5217;&#x3067;&#x3001;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x30A4;&#x30F3;&#x30C7;&#x30C3;&#x30AF;&#x30B9;&#x306F;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; fd &#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8981;&#x7D20;&#x306E;&#x5024;&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;:\n\n</p>\n<!--\n1. `'pipe'` - Create a pipe between the child process and the parent process.\n   The parent end of the pipe is exposed to the parent as a property on the\n   `child_process` object as `ChildProcess.stdio[fd]`. Pipes created for\n   fds 0 - 2 are also available as ChildProcess.stdin, ChildProcess.stdout\n   and ChildProcess.stderr, respectively.\n2. `'ipc'` - Create an IPC channel for passing messages/file descriptors\n   between parent and child. A ChildProcess may have at most *one* IPC stdio\n   file descriptor. Setting this option enables the ChildProcess.send() method.\n   If the child writes JSON messages to this file descriptor, then this will\n   trigger ChildProcess.on('message').  If the child is a Node.js program, then\n   the presence of an IPC channel will enable process.send() and\n   process.on('message').\n3. `'ignore'` - Do not set this file descriptor in the child. Note that Node\n   will always open fd 0 - 2 for the processes it spawns. When any of these is\n   ignored node will open `/dev/null` and attach it to the child's fd.\n4. `Stream` object - Share a readable or writable stream that refers to a tty,\n   file, socket, or a pipe with the child process. The stream's underlying\n   file descriptor is duplicated in the child process to the fd that \n   corresponds to the index in the `stdio` array. Note that the stream must\n   have an underlying descriptor (file streams do not until the `'open'`\n   event has occurred).\n5. Positive integer - The integer value is interpreted as a file descriptor \n   that is is currently open in the parent process. It is shared with the child\n   process, similar to how `Stream` objects can be shared.\n6. `null`, `undefined` - Use default value. For stdio fds 0, 1 and 2 (in other\n   words, stdin, stdout, and stderr) a pipe is created. For fd 3 and up, the\n   default is `'ignore'`.\n-->\n\n<ol>\n<li><code>&apos;pipe&apos;</code> - &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x9593;&#x3067;&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30D1;&#x30A4;&#x30D7;&#x306E;&#x89AA;&#x5074;&#x306E;&#x7AEF;&#x70B9;&#x306F; <code>child_process</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;\n<code>ChildProcess.stdio[fd]</code> &#x3068;&#x3057;&#x3066;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x516C;&#x958B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\nfd 0&#xFF5E;2 &#x306F;&#x305D;&#x308C;&#x305E;&#x308C;&#x3001;<code>ChildProcess.stdin</code>&#x3001;<code>ChildProcess.stdout</code>&#x3001;\n<code>ChildProcess.stderr</code> &#x3068;&#x3057;&#x3066;&#x3082;&#x53C2;&#x7167;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;</li>\n<li><code>&apos;ipc&apos;</code> - &#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x9593;&#x3067;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x30D1;&#x30C3;&#x30B7;&#x30F3;&#x30B0;&#x306E;&#x305F;&#x3081;&#x306E;\nIPC &#x30C1;&#x30E3;&#x30CD;&#x30EB;&#xFF0F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>ChildProcess</code> &#x306F;&#x6A19;&#x6E96;&#x5165;&#x51FA;&#x529B;&#x306B;&#x9AD8;&#x3005;&#x4E00;&#x3064;&#x306E; IPC &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;<code>ChildProcess.send()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x6709;&#x52B9;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x3053;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x306B; JSON &#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3068;&#x3001;\n&#x305D;&#x308C;&#x306F; <code>ChildProcess.on(&apos;message&apos;)</code> &#x3092;&#x5F15;&#x304D;&#x8D77;&#x3053;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C; Node.js &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306A;&#x3089;&#x3001;IPC &#x30C1;&#x30E3;&#x30CD;&#x30EB;&#x306E;&#x5B58;&#x5728;&#x306F; <code>process.send()</code>\n&#x304A;&#x3088;&#x3073; <code>process.on(&apos;message&apos;)</code> &#x3092;&#x6709;&#x52B9;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>&apos;ignore&apos;</code> - &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\nNode &#x306F;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8D77;&#x52D5;&#x3059;&#x308B;&#x969B;&#x3001;&#x5E38;&#x306B; fd 0&#xFF5E;2 &#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;&#x3053;&#x308C;&#x3089;&#x306E;&#x3046;&#x3061;&#x306E;&#x3069;&#x308C;&#x304B;&#x304C; <code>&apos;ignore&apos;</code> &#x306E;&#x5834;&#x5408;&#x3001;node &#x306F;\n<code>/dev/null</code> &#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x3066;&#x3001;&#x305D;&#x308C;&#x3092;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; fd &#x306B;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;</li>\n<li><code>Stream</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8; - tty&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x3001;&#x307E;&#x305F;&#x306F;&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x53C2;&#x7167;&#x3059;&#x308B;\n&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x305F;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x306A;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068;&#x5171;&#x6709;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x4E0B;&#x5C64;&#x306B;&#x3042;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x306F;&#x3001;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; <code>stdio</code> &#x914D;&#x5217;&#x306E;\n&#x5BFE;&#x5FDC;&#x3059;&#x308B;&#x4F4D;&#x7F6E;&#x306B;&#x30B3;&#x30D4;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x4E0B;&#x5C64;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044; (&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; <code>&apos;open&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3059;&#x308B;&#x307E;&#x3067;\n&#x305D;&#x308C;&#x3092;&#x6301;&#x3061;&#x307E;&#x305B;&#x3093;)&#x3002;</li>\n<li>&#x975E;&#x8CA0;&#x6574;&#x6570; - &#x6574;&#x6570;&#x306E;&#x5024;&#x3092;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x73FE;&#x5728;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x3066;&#x3044;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x3068;&#x3057;&#x3066;\n&#x89E3;&#x91C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; <code>Stream</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x5834;&#x5408;&#x3068;&#x540C;&#x69D8;&#x306B;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x5171;&#x6709;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>null</code>&#x3001;<code>undefined</code> - &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>stdio</code> &#x306E; <code>fd</code> &#x304C; 0&#x3001;1&#x3001;&#x307E;&#x305F;&#x306F; 2 (&#x8A00;&#x3044;&#x63DB;&#x3048;&#x308B;&#x3068; stdin&#x3001;stdout&#x3001;&#x307E;&#x305F;&#x306F;\nstderr) &#x306E;&#x5834;&#x5408;&#x306F;&#x30D1;&#x30A4;&#x30D7;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;fd &#x304C; 3 &#x4EE5;&#x4E0A;&#x306E;&#x5834;&#x5408;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;\n<code>&apos;ignore&apos;</code> &#x3067;&#x3059;&#x3002;</li>\n</ol>\n<!--\nAs a shorthand, the `stdio` argument may also be one of the following\nstrings, rather than an array:\n-->\n\n<p>&#x7C21;&#x6613;&#x306A;&#x8A18;&#x6CD5;&#x3068;&#x3057;&#x3066;&#x3001;<code>stdio</code> &#x306B;&#x914D;&#x5217;&#x3067;&#x306F;&#x306A;&#x304F;&#x4EE5;&#x4E0B;&#x306E;&#x6587;&#x5B57;&#x5217;&#x306E;&#x4E00;&#x3064;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;\n&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* `ignore` - `['ignore', 'ignore', 'ignore']`\n* `pipe` - `['pipe', 'pipe', 'pipe']`\n* `inherit` - `[process.stdin, process.stdout, process.stderr]` or `[0,1,2]`\n-->\n\n<ul>\n<li><code>ignore</code> - <code>[&apos;ignore&apos;, &apos;ignore&apos;, &apos;ignore&apos;]</code></li>\n<li><code>pipe</code> - <code>[&apos;pipe&apos;, &apos;pipe&apos;, &apos;pipe&apos;]</code></li>\n<li><code>inherit</code> - <code>[process.stdin, process.stdout, process.stderr]</code> &#x307E;&#x305F;&#x306F; <code>[0,1,2]</code></li>\n</ul>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var spawn = require(&apos;child_process&apos;).spawn;\n\n// Child will use parent&apos;s stdios\nspawn(&apos;prg&apos;, [], { stdio: &apos;inherit&apos; });\n\n// Spawn child sharing only stderr\nspawn(&apos;prg&apos;, [], { stdio: [&apos;pipe&apos;, &apos;pipe&apos;, process.stderr] });\n\n// Open an extra fd=4, to interact with programs present a\n// startd-style interface.\nspawn(&apos;prg&apos;, [], { stdio: [&apos;pipe&apos;, null, null, null, &apos;pipe&apos;] });</code></pre>\n<!--\nIf the `detached` option is set, the child process will be made the leader of a\nnew process group.  This makes it possible for the child to continue running \nafter the parent exits.\n-->\n\n<p><code>detached</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x65B0;&#x3057;&#x3044;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x30B0;&#x30EB;&#x30FC;&#x30D7;&#x306E;\n&#x30EA;&#x30FC;&#x30C0;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x3066;&#x3082;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x5B9F;&#x884C;&#x304C;&#x7D99;&#x7D9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBy default, the parent will wait for the detached child to exit.  To prevent\nthe parent from waiting for a given `child`, use the `child.unref()` method,\nand the parent's event loop will not include the child in its reference count.\n-->\n\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x3001;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x5207;&#x308A;&#x96E2;&#x3055;&#x308C;&#x305F;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x7D42;&#x4E86;&#x3092;&#x5F85;&#x6A5F;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C; <code>child</code> &#x3092;&#x5F85;&#x6A5F;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x306B;&#x306F;&#x3001;<code>child.unref()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;\n&#x4F7F;&#x7528;&#x3057;&#x3001;&#x89AA;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30EB;&#x30FC;&#x30D7;&#x306B;&#x5B50;&#x306E;&#x30EA;&#x30D5;&#x30A1;&#x30EC;&#x30F3;&#x30B9;&#x30AB;&#x30A6;&#x30F3;&#x30C8;&#x304C;&#x542B;&#x307E;&#x308C;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample of detaching a long-running process and redirecting its output to a\nfile:\n-->\n\n<p>&#x9577;&#x6642;&#x9593;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x5207;&#x308A;&#x96E2;&#x3057;&#x3001;&#x51FA;&#x529B;&#x3092;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x30EA;&#x30C0;&#x30A4;&#x30EC;&#x30AF;&#x30C8;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code> var fs = require(&apos;fs&apos;),\n     spawn = require(&apos;child_process&apos;).spawn,\n     out = fs.openSync(&apos;./out.log&apos;, &apos;a&apos;),\n     err = fs.openSync(&apos;./out.log&apos;, &apos;a&apos;);\n\n var child = spawn(&apos;prg&apos;, [], {\n   detached: true,\n   stdio: [ &apos;ignore&apos;, out, err ]\n });\n\n child.unref();</code></pre>\n<!--\nWhen using the `detached` option to start a long-running process, the process\nwill not stay running in the background unless it is provided with a `stdio`\nconfiguration that is not connected to the parent.  If the parent's `stdio` is\ninherited, the child will remain attached to the controlling terminal.\n-->\n\n<p>&#x9577;&#x6642;&#x9593;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x308B;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x958B;&#x59CB;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B; <code>detached</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x5834;&#x5408;&#x3001;\n&#x305D;&#x306E; <code>stdio</code> &#x304C;&#x89AA;&#x3068;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x3088;&#x3046;&#x306A;&#x69CB;&#x6210;&#x3092;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x305D;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;\n&#x30D0;&#x30C3;&#x30AF;&#x30B0;&#x30E9;&#x30A6;&#x30F3;&#x30C9;&#x306B;&#x3068;&#x3069;&#x307E;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x89AA;&#x306E; <code>stdio</code> &#x304C;&#x7D99;&#x627F;&#x3055;&#x308C;&#x308B;&#x306A;&#x3089;&#x3001;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x5236;&#x5FA1;&#x3057;&#x3066;&#x3044;&#x308B;&#x30BF;&#x30FC;&#x30DF;&#x30CA;&#x30EB;&#x306B;\n&#x63A5;&#x7D9A;&#x3055;&#x308C;&#x305F;&#x307E;&#x307E;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThere is a deprecated option called `customFds` which allows one to specify\nspecific file descriptors for the stdio of the child process. This API was\nnot portable to all platforms and therefore removed.\nWith `customFds` it was possible to hook up the new process' `[stdin, stdout,\nstderr]` to existing streams; `-1` meant that a new stream should be created.\nUse at your own risk.\n\nSee also: `child_process.exec()` and `child_process.fork()`\n-->\n\n<p>&#x6307;&#x5B9A;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x3092;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x6A19;&#x6E96;&#x5165;&#x51FA;&#x529B;&#x306B;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x53EF;&#x80FD;&#x306B;&#x3059;&#x308B;&#x3001;\n<code>customFds</code> &#x3068;&#x547C;&#x3070;&#x308C;&#x308B;&#x5EC3;&#x6B62;&#x3055;&#x308C;&#x305F;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x3042;&#x308A;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x3053;&#x306E; API &#x306F;&#x5168;&#x3066;&#x306E;&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x306B;&#x79FB;&#x690D;&#x53EF;&#x80FD;&#x3067;&#x306F;&#x306A;&#x3044;&#x305F;&#x3081;&#x306B;&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3057;&#x305F;&#x3002;\n<code>customFds</code> &#x306F;&#x65B0;&#x3057;&#x3044;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E; <code>[stdin, stdout, stderr]</code> &#x3092;&#x65E2;&#x5B58;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x63A5;&#x7D9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3057;&#x305F;;\n<code>-1</code> &#x306F;&#x65B0;&#x3057;&#x3044;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4F5C;&#x3089;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x4F7F;&#x7528;&#x3059;&#x308B;&#x5834;&#x5408;&#x306F;&#x81EA;&#x5DF1;&#x8CAC;&#x4EFB;&#x3067;&#x3002;\n\n</p>\n<p>&#x95A2;&#x9023;&#x9805;&#x76EE;: <code>child_process.exec()</code> &#x304A;&#x3088;&#x3073; <code>child_process.fork()</code>\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;command&quot;
                },
                {
                  &quot;name&quot;: &quot;args&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;child_process.exec(command, [options], callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;exec&quot;,
          &quot;desc&quot;: &quot;<!--\n* `command` {String} The command to run, with space-separated arguments\n* `options` {Object}\n  * `cwd` {String} Current working directory of the child process\n  * `env` {Object} Environment key-value pairs\n  * `encoding` {String} (Default: 'utf8')\n  * `timeout` {Number} (Default: 0)\n  * `maxBuffer` {Number} (Default: `200*1024`)\n  * `killSignal` {String} (Default: 'SIGTERM')\n* `callback` {Function} called with the output when process terminates\n  * `error` {Error}\n  * `stdout` {Buffer}\n  * `stderr` {Buffer}\n* Return: ChildProcess object\n-->\n\n<ul>\n<li><code>command</code> {String} &#x5B9F;&#x884C;&#x3059;&#x308B;&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3001;&#x7A7A;&#x767D;&#x3067;&#x533A;&#x5207;&#x3089;&#x308C;&#x305F;&#x5F15;&#x6570;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;</li>\n<li><code>options</code> {Object}<ul>\n<li><code>cwd</code> {String} &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;</li>\n<li><code>env</code> {Object} &#x74B0;&#x5883;&#x5909;&#x6570;&#x3068;&#x3057;&#x3066;&#x4E0E;&#x3048;&#x308B;&#x30AD;&#x30FC;&#x30FB;&#x5024;&#x306E;&#x30DA;&#x30A2;</li>\n<li><code>encoding</code> {String} (Default: &apos;utf8&apos;)</li>\n<li><code>timeout</code> {Number} (Default: 0)</li>\n<li><code>maxBuffer</code> {Number} (Default: 200*1024)</li>\n<li><code>killSignal</code> {String} (Default: &apos;SIGTERM&apos;)</li>\n</ul>\n</li>\n<li><code>callback</code> {Function} &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x305D;&#x306E;&#x51FA;&#x529B;&#x3092;&#x4F34;&#x3063;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;<ul>\n<li><code>error</code> {Error}</li>\n<li><code>stdout</code> {Buffer}</li>\n<li><code>stderr</code> {Buffer}</li>\n</ul>\n</li>\n<li>Return: <code>ChildProcess</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;</li>\n</ul>\n<!--\nRuns a command in a shell and buffers the output.\n-->\n\n<p>&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x30B7;&#x30A7;&#x30EB;&#x3067;&#x5B9F;&#x884C;&#x3057;&#x3001;&#x305D;&#x306E;&#x51FA;&#x529B;&#x3092;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x683C;&#x7D0D;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var exec = require(&apos;child_process&apos;).exec,\n    child;\n\nchild = exec(&apos;cat *.js bad_file | wc -l&apos;,\n  function (error, stdout, stderr) {\n    console.log(&apos;stdout: &apos; + stdout);\n    console.log(&apos;stderr: &apos; + stderr);\n    if (error !== null) {\n      console.log(&apos;exec error: &apos; + error);\n    }\n});</code></pre>\n<!--\nThe callback gets the arguments `(error, stdout, stderr)`. On success, `error`\nwill be `null`.  On error, `error` will be an instance of `Error` and `error.code`\nwill be the exit code of the child process, and `error.signal` will be set to the\nsignal that terminated the process.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x5F15;&#x6570; <code>(error, stdout, stderr)</code> &#x3092;&#x5F97;&#x307E;&#x3059;&#x3002;\n&#x6210;&#x529F;&#x3059;&#x308B;&#x3068;&#x3001;<code>error</code> &#x306F; <code>null</code> &#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30E9;&#x30FC;&#x3060;&#x3068;&#x3001;<code>error</code> &#x306F; <code>Error</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3068;&#x306A;&#x308A;&#x3001;\n<code>error.code</code> &#x306F;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x3001;\n<code>error.signal</code> &#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7D42;&#x4E86;&#x3055;&#x305B;&#x305F;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThere is a second optional argument to specify several options. The\ndefault options are\n-->\n\n<p>&#x4EFB;&#x610F;&#x306E;&#x7B2C; 2 &#x5F15;&#x6570;&#x3067;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;\n\n</p>\n<pre><code>{ encoding: &apos;utf8&apos;,\n  timeout: 0,\n  maxBuffer: 200*1024,\n  killSignal: &apos;SIGTERM&apos;,\n  cwd: null,\n  env: null }</code></pre>\n<!--\nIf `timeout` is greater than 0, then it will kill the child process\nif it runs longer than `timeout` milliseconds. The child process is killed with\n`killSignal` (default: `'SIGTERM'`). `maxBuffer` specifies the largest\namount of data allowed on stdout or stderr - if this value is exceeded then\nthe child process is killed.\n-->\n\n<p>&#x3082;&#x3057; <code>timeout</code> &#x304C; 0 &#x3088;&#x308A;&#x5927;&#x304D;&#x3044;&#x3068;&#x3001;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x5B9F;&#x884C;&#x6642;&#x9593;&#x304C; <code>timeout</code> &#x30DF;&#x30EA;&#x79D2;&#x3088;&#x308A;&#x3082;&#x9577;&#x304F;&#x306A;&#x308B;&#x3068; kill &#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F; <code>killSignal</code> &#x3067; kill &#x3055;&#x308C;&#x307E;&#x3059; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;: <code>&apos;SIGTERM&apos;</code>)&#x3002;\n<code>maxBuffer</code> &#x306F;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3068;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x306E;&#x6700;&#x5927;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x91CF;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x307E;&#x3059; &#xFF0D; &#x3053;&#x306E;&#x5024;&#x3092;&#x8D85;&#x3048;&#x308B;&#x3068;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F; kill &#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;command&quot;
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;child_process.execFile(file, [args], [options], [callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;execFile&quot;,
          &quot;desc&quot;: &quot;<!--\n* `file` {String} The filename of the program to run\n* `args` {Array} List of string arguments\n* `options` {Object}\n  * `cwd` {String} Current working directory of the child process\n  * `env` {Object} Environment key-value pairs\n  * `encoding` {String} (Default: 'utf8')\n  * `timeout` {Number} (Default: 0)\n  * `maxBuffer` {Number} (Default: 200\\*1024)\n  * `killSignal` {String} (Default: 'SIGTERM')\n* `callback` {Function} called with the output when process terminates\n  * `error` {Error}\n  * `stdout` {Buffer}\n  * `stderr` {Buffer}\n* Return: ChildProcess object\n-->\n\n<ul>\n<li><code>file</code> {String} &#x5B9F;&#x884C;&#x3059;&#x308B;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x540D;</li>\n<li><code>args</code> {Array} &#x6587;&#x5B57;&#x5217;&#x306B;&#x3088;&#x308B;&#x5F15;&#x6570;&#x306E;&#x914D;&#x5217;</li>\n<li><code>options</code> {Object}<ul>\n<li><code>cwd</code> {String} &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;</li>\n<li><code>env</code> {Object} &#x74B0;&#x5883;&#x5909;&#x6570;&#x3068;&#x3057;&#x3066;&#x4E0E;&#x3048;&#x308B;&#x30AD;&#x30FC;&#x30FB;&#x5024;&#x306E;&#x30DA;&#x30A2;</li>\n<li><code>encoding</code> {String} (Default: &apos;utf8&apos;)</li>\n<li><code>timeout</code> {Number} (Default: 0)</li>\n<li><code>maxBuffer</code> {Number} (Default: 200*1024)</li>\n<li><code>killSignal</code> {String} (Default: &apos;SIGTERM&apos;)</li>\n</ul>\n</li>\n<li><code>callback</code> {Function} &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x305D;&#x306E;&#x51FA;&#x529B;&#x3092;&#x4F34;&#x3063;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;<ul>\n<li><code>error</code> {Error}</li>\n<li><code>stdout</code> {Buffer}</li>\n<li><code>stderr</code> {Buffer}</li>\n</ul>\n</li>\n<li>Return: <code>ChildProcess</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;</li>\n</ul>\n<!--\nThis is similar to `child_process.exec()` except it does not execute a\nsubshell but rather the specified file directly. This makes it slightly\nleaner than `child_process.exec`. It has the same options.\n-->\n\n<p>&#x5B50;&#x30B7;&#x30A7;&#x30EB;&#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x76F4;&#x63A5;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x9664;&#x3044;&#x3066;\n<code>child_process.exec()</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>child_process.exec</code> &#x3088;&#x308A;&#x82E5;&#x5E72;&#x52B9;&#x7387;&#x7684;&#x3067;&#x3001;&#x540C;&#x3058;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;file&quot;
                },
                {
                  &quot;name&quot;: &quot;args&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;child_process.fork(modulePath, [args], [options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;fork&quot;,
          &quot;desc&quot;: &quot;<!--\n* `modulePath` {String} The module to run in the child\n* `args` {Array} List of string arguments\n* `options` {Object}\n  * `cwd` {String} Current working directory of the child process\n  * `env` {Object} Environment key-value pairs\n  * `encoding` {String} (Default: 'utf8')\n  * `execPath` {String} Executable used to create the child process\n  * `execArgv` {Array} List of string arguments passed to the executable\n    (Default: `process.execArgv`)\n  * `silent` {Boolean} If true, stdin, stdout, and stderr of the child will be\n    piped to the parent, otherwise they will be inherited from the parent, see\n    the \"pipe\" and \"inherit\" options for `spawn()`'s `stdio` for more details\n    (default is false)\n* Return: ChildProcess object\n-->\n\n<ul>\n<li><code>modulePath</code> {String} &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;</li>\n<li><code>args</code> {Array} &#x6587;&#x5B57;&#x5217;&#x306B;&#x3088;&#x308B;&#x5F15;&#x6570;&#x306E;&#x914D;&#x5217;</li>\n<li><code>options</code> {Object}<ul>\n<li><code>cwd</code> {String} &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;</li>\n<li><code>env</code> {Object} &#x74B0;&#x5883;&#x5909;&#x6570;&#x3068;&#x3057;&#x3066;&#x4E0E;&#x3048;&#x308B;&#x30AD;&#x30FC;&#x30FB;&#x5024;&#x306E;&#x30DA;&#x30A2;</li>\n<li><code>encoding</code> {String} (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;: &apos;utf8&apos;)</li>\n<li><code>execPath</code> {String} &#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x4F5C;&#x6210;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x5B9F;&#x884C;&#x30D5;&#x30A1;&#x30A4;&#x30EB;</li>\n<li><code>execArgv</code> {Array} node &#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x6587;&#x5B57;&#x5217;&#x5F15;&#x6570;&#x306E;&#x914D;&#x5217;&#x3002;\n(&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>process.execArgv</code>)</li>\n<li><code>silent</code> {Boolean} <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x6A19;&#x6E96;&#x5165;&#x529B;&#x3001;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3001;\n&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306F;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x30D1;&#x30A4;&#x30D7;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304B;&#x3089;&#x7D99;&#x627F;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F; <code>spawn()</code> &#x306E; <code>pipe</code> &#x304A;&#x3088;&#x3073; <code>inherit</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;\n(&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code>)&#x3002;</li>\n</ul>\n</li>\n<li>Return: <code>ChildProcess</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;</li>\n</ul>\n<!--\nThis is a special case of the `spawn()` functionality for spawning Node\nprocesses. In addition to having all the methods in a normal ChildProcess\ninstance, the returned object has a communication channel built-in. See\n`child.send(message, [sendHandle])` for details.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; <code>spawn()</code> &#x306E;&#x7279;&#x5225;&#x7248;&#x3067;&#x3001;Node &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8FD4;&#x3055;&#x308C;&#x308B;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x901A;&#x5E38;&#x306E; ChildProcess &#x306E;&#x5168;&#x3066;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306B;&#x52A0;&#x3048;&#x3066;&#x3001;\n&#x7D44;&#x307F;&#x8FBC;&#x307F;&#x306E;&#x901A;&#x4FE1;&#x30C1;&#x30E3;&#x30CD;&#x30EB;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <code>child.send(message, [sendHandle])</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nThese child Nodes are still whole new instances of V8. Assume at least 30ms\nstartup and 10mb memory for each new Node. That is, you cannot create many\nthousands of them.\n-->\n\n<p>&#x3053;&#x308C;&#x3089;&#x306E;&#x5B50; Node &#x306F;&#x3001;&#x3084;&#x306F;&#x308A; V8 &#x306E;&#x65B0;&#x3057;&#x3044;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n&#x65B0;&#x3057;&#x3044; Node &#x3054;&#x3068;&#x306B;&#x5C11;&#x306A;&#x304F;&#x3068;&#x3082; 30 &#x30DF;&#x30EA;&#x79D2;&#x306E;&#x8D77;&#x52D5;&#x6642;&#x9593;&#x3068; \n10MB &#x306E;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x524D;&#x63D0;&#x3068;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3064;&#x307E;&#x308A;&#x3001;&#x6570;&#x5343;&#x306E;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x4F5C;&#x308B;&#x3053;&#x3068;&#x306F;&#x51FA;&#x6765;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThe `execPath` property in the `options` object allows for a process to be\ncreated for the child rather than the current `node` executable. This should be\ndone with care and by default will talk over the fd represented an\nenvironmental variable `NODE_CHANNEL_FD` on the child process. The input and\noutput on this fd is expected to be line delimited JSON objects.\n-->\n\n<p><code>options</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x4E2D;&#x306E; <code>execPath</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F;&#x3001;\n&#x73FE;&#x5728;&#x306E; <code>node</code> &#x5B9F;&#x884C;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3067;&#x306F;&#x306A;&#x3044;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x4F5C;&#x6210;&#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x3001;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x74B0;&#x5883;&#x5909;&#x6570; <code>NODE_CHANNEL_FD</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x793A;&#x3055;&#x308C;&#x308B;\n&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x3092;&#x901A;&#x3058;&#x3066;&#x5BFE;&#x8A71;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;&#x306B;&#x304A;&#x3051;&#x308B;&#x5165;&#x529B;&#x3068;&#x51FA;&#x529B;&#x306F;&#x3001;&#x6539;&#x884C;&#x3067;&#x533A;&#x5207;&#x3089;&#x308C;&#x305F; JSON &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;modulePath&quot;
                },
                {
                  &quot;name&quot;: &quot;args&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Child Process&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Assert&quot;,
      &quot;name&quot;: &quot;assert&quot;,
      &quot;stability&quot;: 5,
      &quot;stabilityText&quot;: &quot;Locked&quot;,
      &quot;desc&quot;: &quot;<!--\nThis module is used for writing unit tests for your applications, you can\naccess it with `require('assert')`.\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x5358;&#x4F53;&#x30C6;&#x30B9;&#x30C8;&#x3092;&#x8A18;&#x8FF0;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x3001;\n<code>require(&apos;assert&apos;)</code> &#x3067;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;assert.fail(actual, expected, message, operator)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;fail&quot;,
          &quot;desc&quot;: &quot;<!--\nThrows an exception that displays the values for `actual` and `expected` separated by the provided operator.\n-->\n\n<p><code>actual</code> &#x3068; <code>expected</code> &#x3092; <code>operator</code> &#x3067;&#x533A;&#x5207;&#x3063;&#x305F;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x6301;&#x3064;&#x4F8B;&#x5916;&#x3092;\n&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;actual&quot;
                },
                {
                  &quot;name&quot;: &quot;expected&quot;
                },
                {
                  &quot;name&quot;: &quot;message&quot;
                },
                {
                  &quot;name&quot;: &quot;operator&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;assert(value, message), assert.ok(value, [message])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;ok&quot;,
          &quot;desc&quot;: &quot;<!--\nTests if value is truthy, it is equivalent to `assert.equal(true, !!value, message);`\n-->\n\n<p><code>value</code> &#x304C; truthy &#x304B;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3001;\n&#x3053;&#x308C;&#x306F; <code>assert.equal(true, !!value, message);</code> &#x3068;&#x7B49;&#x4FA1;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;value&quot;
                },
                {
                  &quot;name&quot;: &quot;message)&quot;
                },
                {
                  &quot;name&quot;: &quot;assert.ok(value&quot;
                },
                {
                  &quot;name&quot;: &quot;message&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;assert.equal(actual, expected, [message])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;equal&quot;,
          &quot;Tests shallow, coercive equality with the equal comparison operator ( `&quot;: &quot;=` ).&quot;,
          &quot;desc&quot;: &quot;<p><code>==</code> &#x6F14;&#x7B97;&#x5B50;&#x3092;&#x5F37;&#x5236;&#x3057;&#x3066;&#x6D45;&#x3044;&#x540C;&#x5024;&#x6027;&#x3092;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;actual&quot;
                },
                {
                  &quot;name&quot;: &quot;expected&quot;
                },
                {
                  &quot;name&quot;: &quot;message&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;assert.notEqual(actual, expected, [message])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;notEqual&quot;,
          &quot;Tests shallow, coercive non-equality with the not equal comparison operator ( `!&quot;: &quot;` ).&quot;,
          &quot;desc&quot;: &quot;<p><code>!=</code> &#x6F14;&#x7B97;&#x5B50;&#x3092;&#x5F37;&#x5236;&#x3057;&#x3066;&#x6D45;&#x3044;&#x975E;&#x540C;&#x5024;&#x6027;&#x3092;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;actual&quot;
                },
                {
                  &quot;name&quot;: &quot;expected&quot;
                },
                {
                  &quot;name&quot;: &quot;message&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;assert.deepEqual(actual, expected, [message])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;deepEqual&quot;,
          &quot;desc&quot;: &quot;<!--\nTests for deep equality.\n-->\n\n<p>&#x6DF1;&#x3044;&#x540C;&#x5024;&#x6027;&#x3092;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;actual&quot;
                },
                {
                  &quot;name&quot;: &quot;expected&quot;
                },
                {
                  &quot;name&quot;: &quot;message&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;assert.notDeepEqual(actual, expected, [message])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;notDeepEqual&quot;,
          &quot;desc&quot;: &quot;<!--\nTests for any deep inequality.\n-->\n\n<p>&#x6DF1;&#x3044;&#x975E;&#x540C;&#x5024;&#x6027;&#x3092;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;actual&quot;
                },
                {
                  &quot;name&quot;: &quot;expected&quot;
                },
                {
                  &quot;name&quot;: &quot;message&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;assert.strictEqual(actual, expected, [message])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;strictEqual&quot;,
          &quot;Tests strict equality, as determined by the strict equality operator ( `&quot;: &quot;==` )&quot;,
          &quot;desc&quot;: &quot;<p><code>===</code> &#x6F14;&#x7B97;&#x5B50;&#x3067;&#x53B3;&#x5BC6;&#x306A;&#x540C;&#x5024;&#x6027;&#x3092;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;actual&quot;
                },
                {
                  &quot;name&quot;: &quot;expected&quot;
                },
                {
                  &quot;name&quot;: &quot;message&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;assert.notStrictEqual(actual, expected, [message])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;notStrictEqual&quot;,
          &quot;Tests strict non-equality, as determined by the strict not equal operator ( `!&quot;: &quot;=` )&quot;,
          &quot;desc&quot;: &quot;<p><code>!==</code> &#x6F14;&#x7B97;&#x5B50;&#x3067;&#x53B3;&#x5BC6;&#x306A;&#x975E;&#x540C;&#x5024;&#x6027;&#x3092;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;actual&quot;
                },
                {
                  &quot;name&quot;: &quot;expected&quot;
                },
                {
                  &quot;name&quot;: &quot;message&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;assert.throws(block, [error], [message])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;throws&quot;,
          &quot;desc&quot;: &quot;<!--\nExpects `block` to throw an error. `error` can be constructor, regexp or \nvalidation function.\n-->\n\n<p><code>block</code> &#x304C;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x671F;&#x5F85;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>error</code> &#x306F;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3001;&#x6B63;&#x898F;&#x8868;&#x73FE;&#x3001;&#x307E;&#x305F;&#x306F;&#x691C;&#x8A3C;&#x95A2;&#x6570;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nValidate instanceof using constructor:\n-->\n\n<p>&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x4F7F;&#x3063;&#x3066; instanceof &#x3067;&#x691C;&#x8A3C;:\n\n</p>\n<pre><code>assert.throws(\n  function() {\n    throw new Error(&quot;Wrong value&quot;);\n  },\n  Error\n);</code></pre>\n<!--\nValidate error message using RegExp:\n-->\n\n<p>&#x6B63;&#x898F;&#x8868;&#x73FE;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x30A8;&#x30E9;&#x30FC;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x691C;&#x8A3C;:\n\n</p>\n<pre><code>assert.throws(\n  function() {\n    throw new Error(&quot;Wrong value&quot;);\n  },\n  /value/\n);</code></pre>\n<!--\nCustom error validation:\n-->\n\n<p>&#x72EC;&#x81EA;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x691C;&#x8A3C;:\n\n</p>\n<pre><code>assert.throws(\n  function() {\n    throw new Error(&quot;Wrong value&quot;);\n  },\n  function(err) {\n    if ( (err instanceof Error) &amp;&amp; /value/.test(err) ) {\n      return true;\n    }\n  },\n  &quot;unexpected error&quot;\n);</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;block&quot;
                },
                {
                  &quot;name&quot;: &quot;error&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;message&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;assert.doesNotThrow(block, [message])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;doesNotThrow&quot;,
          &quot;desc&quot;: &quot;<!--\nExpects `block` not to throw an error, see assert.throws for details.\n-->\n\n<p><code>block</code> &#x304C;&#x30A8;&#x30E9;&#x30FC;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x671F;&#x5F85;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; assert.throws &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;block&quot;
                },
                {
                  &quot;name&quot;: &quot;message&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;assert.ifError(value)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;ifError&quot;,
          &quot;desc&quot;: &quot;<!--\nTests if value is not a false value, throws if it is a true value. Useful when\ntesting the first argument, `error` in callbacks.\n-->\n\n<p><code>value</code> &#x304C; false &#x3067;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x3001;true &#x3060;&#x3063;&#x305F;&#x3089;&#x305D;&#x308C;&#x3092;&#x30B9;&#x30ED;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306E;&#x7B2C; 1 &#x5F15;&#x6570;&#x3067;&#x3042;&#x308B; <code>error</code> &#x3092;&#x30C6;&#x30B9;&#x30C8;&#x3059;&#x308B;&#x306E;&#x306B;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;value&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Assert&quot;
    },
    {
      &quot;textRaw&quot;: &quot;TTY&quot;,
      &quot;name&quot;: &quot;tty&quot;,
      &quot;stability&quot;: 2,
      &quot;stabilityText&quot;: &quot;Unstable&quot;,
      &quot;desc&quot;: &quot;<!--\nThe `tty` module houses the `tty.ReadStream` and `tty.WriteStream` classes. In\nmost cases, you will not need to use this module directly.\n-->\n\n<p><code>tty</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F; <code>tty.ReadStream</code> &#x3068; <code>tty.WriteStream</code> &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x591A;&#x304F;&#x306E;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x76F4;&#x63A5;&#x4F7F;&#x3046;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nWhen node detects that it is being run inside a TTY context, then `process.stdin`\nwill be a `tty.ReadStream` instance and `process.stdout` will be\na `tty.WriteStream` instance. The preferred way to check if node is being run in\na TTY context is to check `process.stdout.isTTY`:\n-->\n\n<p>node &#x306F; TTY &#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x306E;&#x4E2D;&#x306B;&#x3044;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x691C;&#x51FA;&#x3057;&#x3001;\n<code>process.stdin</code> &#x306F; <code>tty.ReadStream</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306B;&#x3001;\n<code>process.stdout</code> &#x306F; <code>tty.WriteStream</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; node &#x304C; TTY &#x306E;&#x30B3;&#x30F3;&#x30C6;&#x30AD;&#x30B9;&#x30C8;&#x3067;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3057;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;\n<code>process.stdout.isTTY</code> &#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;:\n\n</p>\n<pre><code>$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse</code></pre>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;tty.isatty(fd)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;isatty&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns `true` or `false` depending on if the `fd` is associated with a\nterminal.\n-->\n\n<p><code>fd</code> &#x304C;&#x7AEF;&#x672B;&#x306B;&#x95A2;&#x9023;&#x3065;&#x3051;&#x3089;&#x308C;&#x3066;&#x3044;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092; <code>true</code> &#x307E;&#x305F;&#x306F; <code>false</code> &#x3067;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;fd&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;tty.setRawMode(mode)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setRawMode&quot;,
          &quot;desc&quot;: &quot;<!--\nDeprecated. Use `tty.ReadStream#setRawMode()`\n(i.e. `process.stdin.setRawMode()`) instead.\n-->\n\n<p>Deprecated.\n&#x4EE3;&#x308F;&#x308A;&#x306B; <code>tty.ReadStream#setRawMode()</code> (&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;<code>process.stdin.setRawMode()</code>)\n&#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;mode&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: ReadStream&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;ReadStream&quot;,
          &quot;desc&quot;: &quot;<!--\nA `net.Socket` subclass that represents the readable portion of a tty. In normal\ncircumstances, `process.stdin` will be the only `tty.ReadStream` instance in any\nnode program (only when `isatty(0)` is true).\n-->\n\n<p><code>net.Socket</code> &#x306E;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;tty &#x306E;&#x5165;&#x529B;&#x5074;&#x3092;&#x8868;&#x73FE;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x822C;&#x7684;&#x306A;&#x72B6;&#x6CC1;&#x3067;&#x306F;&#x3001;&#x3069;&#x3093;&#x306A;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067;&#x3082; (<code>isatty(0)</code> &#x304C; true &#x306E;&#x5834;&#x5408;&#x306B;&#x9650;&#x308A;)\n<code>process.stdin</code> &#x304C;&#x552F;&#x4E00;&#x306E; <code>tty.ReadStream</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;rs.isRaw&quot;,
              &quot;name&quot;: &quot;isRaw&quot;,
              &quot;desc&quot;: &quot;<!--\nA `Boolean` that is initialized to `false`. It represents the current \"raw\" state\nof the `tty.ReadStream` instance.\n-->\n\n<p><code>Boolean</code> &#x5024;&#x3067; <code>false</code> &#x306B;&#x521D;&#x671F;&#x5316;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>tty.ReadStream</code> &#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306E;&#x73FE;&#x5728;&#x306E; &quot;raw&quot; &#x72B6;&#x614B;&#x3092;&#x8868;&#x73FE;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;rs.setRawMode(mode)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setRawMode&quot;,
              &quot;desc&quot;: &quot;<!--\n`mode` should be `true` or `false`. This sets the properties of the\n`tty.ReadStream` to act either as a raw device or default. `isRaw` will be set\nto the resulting mode.\n-->\n\n<p><code>mode</code> &#x306F; <code>true</code> &#x307E;&#x305F;&#x306F; <code>false</code> &#x306E;&#x3069;&#x3061;&#x3089;&#x304B;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>tty.ReadStream</code> &#x304C;&#x30ED;&#x30FC;&#x30C7;&#x30D0;&#x30A4;&#x30B9;&#x304B;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x3069;&#x3061;&#x3089;&#x3067;&#x632F;&#x308B;&#x821E;&#x3046;&#x304B;&#x3092;\n&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x7D50;&#x679C;&#x306E;&#x30E2;&#x30FC;&#x30C9;&#x306F; <code>isRaw</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;mode&quot;
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: WriteStream&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;WriteStream&quot;,
          &quot;desc&quot;: &quot;<!--\nA `net.Socket` subclass that represents the writable portion of a tty. In normal\ncircumstances, `process.stdout` will be the only `tty.WriteStream` instance\never created (and only when `isatty(1)` is true).\n-->\n\n<p><code>net.Socket</code> &#x306E;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;tty &#x306E;&#x51FA;&#x529B;&#x5074;&#x3092;&#x8868;&#x73FE;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x822C;&#x7684;&#x306A;&#x72B6;&#x6CC1;&#x3067;&#x306F;&#x3001;&#x3069;&#x3093;&#x306A;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067;&#x3082; (<code>isatty(1)</code> &#x304C; true &#x306E;&#x5834;&#x5408;&#x306B;&#x9650;&#x308A;)\n<code>process.stdout</code> &#x304C;&#x552F;&#x4E00;&#x306E; <code>tty.WriteStream</code> &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;ws.columns&quot;,
              &quot;name&quot;: &quot;columns&quot;,
              &quot;desc&quot;: &quot;<!--\nA `Number` that gives the number of columns the TTY currently has. This property\ngets updated on \"resize\" events.\n-->\n\n<p>TTY &#x306E;&#x73FE;&#x5728;&#x306E;&#x30AB;&#x30E9;&#x30E0;&#x6570;&#x3092;&#x4FDD;&#x6301;&#x3059;&#x308B; <code>Number</code> &#x5024;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F; <code>&apos;resize&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3067;&#x66F4;&#x65B0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;ws.rows&quot;,
              &quot;name&quot;: &quot;rows&quot;,
              &quot;desc&quot;: &quot;<!--\nA `Number` that gives the number of rows the TTY currently has. This property\ngets updated on \"resize\" events.\n-->\n\n<p>TTY &#x306E;&#x73FE;&#x5728;&#x306E;&#x884C;&#x6570;&#x3092;&#x4FDD;&#x6301;&#x3059;&#x308B; <code>Number</code> &#x5024;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x306F; <code>&apos;resize&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3067;&#x66F4;&#x65B0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ],
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;resize&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;resize&quot;,
              &quot;desc&quot;: &quot;<p><code>function () {}</code>\n\n</p>\n<!--\nEmitted by `refreshSize()` when either of the `columns` or `rows` properties\nhas changed.\n-->\n\n<p><code>columns</code> &#x307E;&#x305F;&#x306F; <code>rows</code> &#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x304C;&#x5909;&#x66F4;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;\n<code>refreshSize()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>process.stdout.on(&apos;resize&apos;, function() {\n  console.log(&apos;screen size has changed!&apos;);\n  console.log(process.stdout.columns + &apos;x&apos; + process.stdout.rows);\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;TTY&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Zlib&quot;,
      &quot;name&quot;: &quot;zlib&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nYou can access this module with:\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x6B21;&#x306E;&#x3088;&#x3046;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var zlib = require(&apos;zlib&apos;);</code></pre>\n<!--\nThis provides bindings to Gzip/Gunzip, Deflate/Inflate, and\nDeflateRaw/InflateRaw classes.  Each class takes the same options, and\nis a readable/writable Stream.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; Gzip/Gunzip&#x3001;Deflate/Inflate&#x3001;&#x305D;&#x3057;&#x3066; DeflateRaw/InflateRaw\n&#x3078;&#x30D0;&#x30A4;&#x30F3;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3069;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x3082;&#x540C;&#x3058;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6301;&#x3064;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x304C;&#x53EF;&#x80FD;&#x306A;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n\n</p>\n<h2>Examples</h2>\n<!--\nCompressing or decompressing a file can be done by piping an\nfs.ReadStream into a zlib stream, then into an fs.WriteStream.\n-->\n\n<p>&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3092;&#x5727;&#x7E2E;&#x304A;&#x3088;&#x3073;&#x89E3;&#x51CD;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;fs.ReadStream &#x304B;&#x3089; zlib &#x3078;&#x3001;\n&#x305D;&#x3057;&#x3066; fs.WriteStream &#x3078;&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x3064;&#x306A;&#x3050;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>var gzip = zlib.createGzip();\nvar fs = require(&apos;fs&apos;);\nvar inp = fs.createReadStream(&apos;input.txt&apos;);\nvar out = fs.createWriteStream(&apos;input.txt.gz&apos;);\n\ninp.pipe(gzip).pipe(out);</code></pre>\n<!--\nCompressing or decompressing data in one step can be done by using\nthe convenience methods.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x5727;&#x7E2E;&#x307E;&#x305F;&#x306F;&#x89E3;&#x51CD;&#x306F; <a href="\&quot;#convenience_Methods\&quot;">&#x7C21;&#x6613;&#x30E1;&#x30BD;&#x30C3;&#x30C9;</a>\n&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x30EF;&#x30F3;&#x30B9;&#x30C6;&#x30C3;&#x30D7;&#x3067;&#x884C;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var input = &apos;.................................&apos;;\nzlib.deflate(input, function(err, buffer) {\n  if (!err) {\n    console.log(buffer.toString(&apos;base64&apos;));\n  }\n});\n\nvar buffer = new Buffer(&apos;eJzT0yMAAGTvBe8=&apos;, &apos;base64&apos;);\nzlib.unzip(buffer, function(err, buffer) {\n  if (!err) {\n    console.log(buffer.toString());\n  }\n});</code></pre>\n<!--\nTo use this module in an HTTP client or server, use the\n[accept-encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3)\non requests, and the\n[content-encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11)\nheader on responses.\n\n**Note: these examples are drastically simplified to show\nthe basic concept.**  Zlib encoding can be expensive, and the results\nought to be cached.  See [Memory Usage Tuning](#zlib_memory_usage_tuning)\nbelow for more information on the speed/memory/compression\ntradeoffs involved in zlib usage.\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092; HTTP &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3068;&#x30B5;&#x30FC;&#x30D0;&#x3067;&#x4F7F;&#x3046;&#x306B;&#x306F;&#x3001;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306B;\n<a href="\&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\&quot;">accept-encoding</a>\n&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x3001;&#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;&#x306B;\n<a href="\&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\&quot;">content-encoding</a>\n&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p><strong>&#x6CE8;&#x610F;:\n&#x3053;&#x308C;&#x3089;&#x306E;&#x30B5;&#x30F3;&#x30D7;&#x30EB;&#x306F;&#x57FA;&#x672C;&#x30B3;&#x30F3;&#x30BB;&#x30D7;&#x30C8;&#x3092;&#x898B;&#x305B;&#x308B;&#x305F;&#x3081;&#x306B;&#x3068;&#x3066;&#x3082;&#x5358;&#x7D14;&#x5316;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;</strong>\nZlib &#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F;&#x9AD8;&#x4FA1;&#x306A;&#x306E;&#x3067;&#x3001;&#x7D50;&#x679C;&#x306F;&#x30AD;&#x30E3;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\nzlib&#x306E;&#x4F7F;&#x3044;&#x65B9;&#x306B;&#x95A2;&#x3059;&#x308B;&#x901F;&#x5EA6;&#xFF0F;&#x30E1;&#x30E2;&#x30EA;&#xFF0F;&#x5727;&#x7E2E;&#x7387;&#x306E;&#x30C8;&#x30EC;&#x30FC;&#x30C9;&#x30AA;&#x30D5;&#x306B;&#x3064;&#x3044;&#x3066;&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x306F;&#x3001;\n&#x5F8C;&#x8FF0;&#x306E; <a href="\&quot;#zlib_memory_usage_tuning\&quot;">Memory Usage Tuning</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code>// client request example\nvar zlib = require(&apos;zlib&apos;);\nvar http = require(&apos;http&apos;);\nvar fs = require(&apos;fs&apos;);\nvar request = http.get({ host: &apos;izs.me&apos;,\n                         path: &apos;/&apos;,\n                         port: 80,\n                         headers: { &apos;accept-encoding&apos;: &apos;gzip,deflate&apos; } });\nrequest.on(&apos;response&apos;, function(response) {\n  var output = fs.createWriteStream(&apos;izs.me_index.html&apos;);\n\n  switch (response.headers[&apos;content-encoding&apos;]) {\n    // or, just use zlib.createUnzip() to handle both cases\n    case &apos;gzip&apos;:\n      response.pipe(zlib.createGunzip()).pipe(output);\n      break;\n    case &apos;deflate&apos;:\n      response.pipe(zlib.createInflate()).pipe(output);\n      break;\n    default:\n      response.pipe(output);\n      break;\n  }\n});\n\n// server example\n// Running a gzip operation on every request is quite expensive.\n// It would be much more efficient to cache the compressed buffer.\nvar zlib = require(&apos;zlib&apos;);\nvar http = require(&apos;http&apos;);\nvar fs = require(&apos;fs&apos;);\nhttp.createServer(function(request, response) {\n  var raw = fs.createReadStream(&apos;index.html&apos;);\n  var acceptEncoding = request.headers[&apos;accept-encoding&apos;];\n  if (!acceptEncoding) {\n    acceptEncoding = &apos;&apos;;\n  }\n\n  // Note: this is not a conformant accept-encoding parser.\n  // See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n  if (acceptEncoding.match(/\\bdeflate\\b/)) {\n    response.writeHead(200, { &apos;content-encoding&apos;: &apos;deflate&apos; });\n    raw.pipe(zlib.createDeflate()).pipe(response);\n  } else if (acceptEncoding.match(/\\bgzip\\b/)) {\n    response.writeHead(200, { &apos;content-encoding&apos;: &apos;gzip&apos; });\n    raw.pipe(zlib.createGzip()).pipe(response);\n  } else {\n    response.writeHead(200, {});\n    raw.pipe(response);\n  }\n}).listen(1337);</code></pre>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;zlib.createGzip([options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createGzip&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new [Gzip](#zlib_class_zlib_gzip) object with an\n[options](#zlib_options).\n-->\n\n<p><a href="\&quot;#zlib_options\&quot;">options</a> &#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x3089;&#x308C;&#x305F;&#x65B0;&#x3057;&#x3044;\n<a href="\&quot;#zlib_class_zlib_gzip\&quot;">Gzip</a> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.createGunzip([options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createGunzip&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new [Gunzip](#zlib_class_zlib_gunzip) object with an\n[options](#zlib_options).\n-->\n\n<p><a href="\&quot;#zlib_options\&quot;">options</a> &#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x3089;&#x308C;&#x305F;&#x65B0;&#x3057;&#x3044;\n<a href="\&quot;#zlib_class_zlib_gunzip\&quot;">Gunzip</a> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.createDeflate([options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createDeflate&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new [Deflate](#zlib_class_zlib_deflate) object with an\n[options](#zlib_options).\n-->\n\n<p><a href="\&quot;#zlib_options\&quot;">options</a> &#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x3089;&#x308C;&#x305F;&#x65B0;&#x3057;&#x3044;\n<a href="\&quot;#zlib_class_zlib_deflate\&quot;">Deflate</a> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.createInflate([options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createInflate&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new [Inflate](#zlib_class_zlib_inflate) object with an\n[options](#zlib_options).\n-->\n\n<p><a href="\&quot;#zlib_options\&quot;">options</a> &#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x3089;&#x308C;&#x305F;&#x65B0;&#x3057;&#x3044;\n<a href="\&quot;#zlib_class_zlib_inflate\&quot;">Inflate</a> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.createDeflateRaw([options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createDeflateRaw&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new [DeflateRaw](#zlib_class_zlib_deflateraw) object with an\n[options](#zlib_options).\n\n-->\n\n<p><a href="\&quot;#zlib_options\&quot;">options</a> &#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x3089;&#x308C;&#x305F;&#x65B0;&#x3057;&#x3044;\n<a href="\&quot;#zlib_class_zlib_deflateraw\&quot;">DeflateRaw</a> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.createInflateRaw([options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createInflateRaw&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new [InflateRaw](#zlib_class_zlib_inflateraw) object with an\n[options](#zlib_options).\n\n-->\n\n<p><a href="\&quot;#zlib_options\&quot;">options</a> &#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x3089;&#x308C;&#x305F;&#x65B0;&#x3057;&#x3044;\n<a href="\&quot;#zlib_class_zlib_inflateraw\&quot;">InflateRaw</a> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.createUnzip([options])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createUnzip&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new [Unzip](#zlib_class_zlib_unzip) object with an\n[options](#zlib_options).\n-->\n\n<p><a href="\&quot;#zlib_options\&quot;">options</a> &#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x3089;&#x308C;&#x305F;&#x65B0;&#x3057;&#x3044;\n<a href="\&quot;#zlib_class_zlib_unzip\&quot;">Unzip</a> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.deflate(buf, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;deflate&quot;,
          &quot;desc&quot;: &quot;<!--\nCompress a string with Deflate.\n-->\n\n<p>Deflate &#x3067;&#x6587;&#x5B57;&#x5217;&#x3092;&#x5727;&#x7E2E;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;buf&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.deflateRaw(buf, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;deflateRaw&quot;,
          &quot;desc&quot;: &quot;<!--\nCompress a string with DeflateRaw.\n-->\n\n<p>DeflateRaw &#x3067;&#x6587;&#x5B57;&#x5217;&#x3092;&#x5727;&#x7E2E;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;buf&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.gzip(buf, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;gzip&quot;,
          &quot;desc&quot;: &quot;<!--\nCompress a string with Gzip.\n-->\n\n<p>Gzip &#x3067;&#x6587;&#x5B57;&#x5217;&#x3092;&#x5727;&#x7E2E;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;buf&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.gunzip(buf, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;gunzip&quot;,
          &quot;desc&quot;: &quot;<!--\nDecompress a raw Buffer with Gunzip.\n-->\n\n<p>Gunzip &#x3067;&#x751F;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x89E3;&#x51CD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;buf&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.inflate(buf, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;inflate&quot;,
          &quot;desc&quot;: &quot;<!--\nDecompress a raw Buffer with Inflate.\n-->\n\n<p>Infrate &#x3067;&#x751F;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x89E3;&#x51CD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;buf&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.inflateRaw(buf, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;inflateRaw&quot;,
          &quot;desc&quot;: &quot;<!--\nDecompress a raw Buffer with InflateRaw.\n-->\n\n<p>InflateRaw &#x3067;&#x751F;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x89E3;&#x51CD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;buf&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;zlib.unzip(buf, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;unzip&quot;,
          &quot;desc&quot;: &quot;<!--\nDecompress a raw Buffer with Unzip.\n-->\n\n<p>Unzip &#x3067;&#x751F;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x89E3;&#x51CD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;buf&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: zlib.Zlib&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;zlib.Zlib&quot;,
          &quot;desc&quot;: &quot;<!--\nNot exported by the `zlib` module. It is documented here because it is the base\nclass of the compressor/decompressor classes.\n-->\n\n<p><code>zlib</code> &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x3088;&#x3063;&#x3066;&#x516C;&#x958B;&#x3055;&#x308C;&#x3066;&#x306F;&#x3044;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x3053;&#x3067;&#x6587;&#x66F8;&#x5316;&#x3059;&#x308B;&#x306E;&#x306F;&#x5727;&#x7E2E;&#xFF0F;&#x89E3;&#x51CD;&#x30AF;&#x30E9;&#x30B9;&#x306E;&#x30D9;&#x30FC;&#x30B9;&#x30AF;&#x30E9;&#x30B9;&#x3060;&#x304B;&#x3089;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;zlib.flush(callback)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;flush&quot;,
              &quot;desc&quot;: &quot;<!--\nFlush pending data. Don't call this frivolously, premature flushes negatively\nimpact the effectiveness of the compression algorithm.\n-->\n\n<p>&#x4FDD;&#x7559;&#x4E2D;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3092;&#x6C17;&#x8EFD;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3001;&#x6027;&#x6025;&#x306A;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x306F;&#x5727;&#x7E2E;&#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x306B;\n&#x30CD;&#x30AC;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x5F71;&#x97FF;&#x3092;&#x4E0E;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;callback&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;zlib.reset()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;reset&quot;,
              &quot;desc&quot;: &quot;<!--\nReset the compressor/decompressor to factory defaults. Only applicable to\nthe inflate and deflate algorithms.\n-->\n\n<p>&#x5727;&#x7E2E;&#xFF0F;&#x89E3;&#x51CD;&#x3092;&#x30D5;&#x30A1;&#x30AF;&#x30C8;&#x30EA;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306B;&#x30EA;&#x30BB;&#x30C3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\ninfrate &#x304A;&#x3088;&#x3073; defrate &#x30A2;&#x30EB;&#x30B4;&#x30EA;&#x30BA;&#x30E0;&#x306B;&#x306E;&#x307F;&#x52B9;&#x679C;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: zlib.Gzip&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;zlib.Gzip&quot;,
          &quot;desc&quot;: &quot;<!--\nCompress data using gzip.\n-->\n\n<p>gzip &#x3092;&#x4F7F;&#x3063;&#x3066;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5727;&#x7E2E;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: zlib.Gunzip&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;zlib.Gunzip&quot;,
          &quot;desc&quot;: &quot;<!--\nDecompress a gzip stream.\n-->\n\n<p>gzip &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x89E3;&#x51CD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: zlib.Deflate&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;zlib.Deflate&quot;,
          &quot;desc&quot;: &quot;<!--\nCompress data using deflate.\n-->\n\n<p>deflate &#x3092;&#x4F7F;&#x3063;&#x3066;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5727;&#x7E2E;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: zlib.Inflate&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;zlib.Inflate&quot;,
          &quot;desc&quot;: &quot;<!--\nDecompress a deflate stream.\n-->\n\n<p>deflate &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x89E3;&#x51CD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: zlib.DeflateRaw&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;zlib.DeflateRaw&quot;,
          &quot;desc&quot;: &quot;<!--\nCompress data using deflate, and do not append a zlib header.\n-->\n\n<p>deflate &#x3092;&#x4F7F;&#x3063;&#x3066;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5727;&#x7E2E;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;zlib &#x30D8;&#x30C3;&#x30C0;&#x3092;&#x4ED8;&#x52A0;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: zlib.InflateRaw&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;zlib.InflateRaw&quot;,
          &quot;desc&quot;: &quot;<!--\nDecompress a raw deflate stream.\n-->\n\n<p>&#x751F;&#x306E; deflate &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x89E3;&#x51CD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: zlib.Unzip&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;zlib.Unzip&quot;,
          &quot;desc&quot;: &quot;<!--\nDecompress either a Gzip- or Deflate-compressed stream by auto-detecting\nthe header.\n-->\n\n<p>Gzip &#x307E;&#x305F;&#x306F; Deflate &#x3067;&#x5727;&#x7E2E;&#x3055;&#x308C;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x30D8;&#x30C3;&#x30C0;&#x3067;&#x81EA;&#x52D5;&#x5224;&#x5225;&#x3057;&#x3066;&#x89E3;&#x51CD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;Convenience Methods&quot;,
          &quot;name&quot;: &quot;Convenience Methods&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nAll of these take a string or buffer as the first argument, and call the\nsupplied callback with `callback(error, result)`.  The\ncompression/decompression engine is created using the default settings\nin all convenience methods.  To supply different options, use the\nzlib classes directly.\n-->\n\n<p>&#x3053;&#x308C;&#x3089;&#x306F;&#x5168;&#x3066;&#x7B2C; 1 &#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308A;&#x3001;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF; <code>callback(error, result)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x7C21;&#x6613;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3067;&#x3001;&#x5727;&#x7E2E;&#x30FB;&#x89E3;&#x51CD;&#x30A8;&#x30F3;&#x30B8;&#x30F3;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;&#x8A2D;&#x5B9A;&#x3067;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x7570;&#x306A;&#x3063;&#x305F;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x4E0E;&#x3048;&#x308B;&#x306B;&#x306F;&#x3001;zlib &#x306E;&#x30AF;&#x30E9;&#x30B9;&#x3092;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Options&quot;,
          &quot;name&quot;: &quot;Options&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nEach class takes an options object.  All options are optional.  (The\nconvenience methods use the default settings for all options.)\n-->\n\n<p>&#x3069;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x3082;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x4EFB;&#x610F;&#x3067;&#x3059;\n(&#x7C21;&#x6613;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x5168;&#x3066;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;)&#x3002;\n\n</p>\n<!--\nNote that some options are only relevant when compressing, and are\nignored by the decompression classes.\n-->\n\n<p>&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x5727;&#x7E2E;&#x306B;&#x3060;&#x3051;&#x95A2;&#x9023;&#x3057;&#x3001;\n&#x89E3;&#x51CD;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\n* flush (default: `zlib.Z_NO_FLUSH`)\n* chunkSize (default: 16*1024)\n* windowBits\n* level (compression only)\n* memLevel (compression only)\n* strategy (compression only)\n* dictionary (deflate/inflate only, empty dictionary by default)\n-->\n\n<ul>\n<li>flush (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;: <code>zlib.Z_NO_FLUSH</code>)</li>\n<li>chunkSize (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;: 16*1024)</li>\n<li>windowBits</li>\n<li>level (&#x5727;&#x7E2E;&#x306E;&#x307F;)</li>\n<li>memLevel (&#x5727;&#x7E2E;&#x306E;&#x307F;)</li>\n<li>strategy (&#x5727;&#x7E2E;&#x306E;&#x307F;)</li>\n<li>dictionary (deflate/inflate &#x306E;&#x307F;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F;&#x7A7A;&#x306E;&#x8F9E;&#x66F8;&#x3067;&#x3059;)</li>\n</ul>\n<!--\nSee the description of `deflateInit2` and `inflateInit2` at\n<http://zlib.net/manual.html#Advanced> for more information on these.\n-->\n\n<p>&#x3053;&#x308C;&#x3089;&#x306E;&#x8A73;&#x7D30;&#x306F; <a href="\&quot;http://zlib.net/manual.html#Advanced\&quot;">http://zlib.net/manual.html#Advanced</a> &#x306E;\n<code>deflateInit2</code> &#x304A;&#x3088;&#x3073; <code>inflateInit2</code> &#x306E;&#x8AAC;&#x660E;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Memory Usage Tuning&quot;,
          &quot;name&quot;: &quot;Memory Usage Tuning&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nFrom `zlib/zconf.h`, modified to node's usage:\n\nThe memory requirements for deflate are (in bytes):\n-->\n\n<p>node &#x306F; <code>zlib/zconf.h</code> &#x3092;&#x5909;&#x66F4;&#x3057;&#x3066;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;:\n\n</p>\n<pre><code>(1 &lt;&lt; (windowBits+2)) +  (1 &lt;&lt; (memLevel+9))</code></pre>\n<p>&#x3059;&#x306A;&#x308F;&#x3061;: windowBits = 15 &#x306E;&#x5834;&#x5408; 128K + \nmemLevel = 8 &#x306E;&#x5834;&#x5408; 128K (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;) &#x306B;&#x52A0;&#x3048;&#x3066;&#x6570;&#x30AD;&#x30ED;&#x30D0;&#x30A4;&#x30C8;&#x304C;\n&#x5C0F;&#x3055;&#x306A;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x8981;&#x6C42;&#x3055;&#x308C;&#x308B;&#x30E1;&#x30E2;&#x30EA;&#x3092; 256K &#x304B;&#x3089; 128K &#x3078;&#x7E2E;&#x5C0F;&#x3057;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;\n&#x6B21;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>{ windowBits: 14, memLevel: 7 }</code></pre>\n<!--\nOf course this will generally degrade compression (there's no free lunch).\n\nThe memory requirements for inflate are (in bytes)\n-->\n\n<p>&#x3082;&#x3061;&#x308D;&#x3093;&#x3001;&#x3053;&#x308C;&#x306F;&#x5727;&#x7E2E;&#x7387;&#x3092;&#x60AA;&#x5316;&#x3057;&#x307E;&#x3059; (&#x305F;&#x3060;&#x98EF;&#x306F;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;)&#x3002;\n\n\n</p>\n<pre><code>1 &lt;&lt; windowBits</code></pre>\n<p>&#x3053;&#x306E;&#x5834;&#x5408;&#x3001;windowBits=15 (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;) &#x306E;&#x5834;&#x5408; 32K &#x306B;&#x52A0;&#x3048;&#x3066;&#x6570;&#x30AD;&#x30ED;&#x30D0;&#x30A4;&#x30C8;&#x304C;\n&#x5C0F;&#x3055;&#x306A;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024; 16K &#x306E; <code>chunkSize</code> &#x3067;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30B5;&#x30A4;&#x30BA;&#x306E;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x52A0;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>zlib &#x306E;&#x5727;&#x7E2E;&#x901F;&#x5EA6;&#x306F; <code>level</code> &#x306E;&#x8A2D;&#x5B9A;&#x3067;&#x5287;&#x7684;&#x306B;&#x5909;&#x5316;&#x3057;&#x307E;&#x3059;\n&#x9AD8;&#x30EC;&#x30D9;&#x30EB;&#x306B;&#x3059;&#x308B;&#x3068;&#x3088;&#x308A;&#x5727;&#x7E2E;&#x3067;&#x304D;&#x307E;&#x3059;&#x304C;&#x3001;&#x5B8C;&#x4E86;&#x307E;&#x3067;&#x306E;&#x6642;&#x9593;&#x304C;&#x9577;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x4F4E;&#x30EC;&#x30D9;&#x30EB;&#x306B;&#x3059;&#x308B;&#x3068;&#x3042;&#x307E;&#x308A;&#x5727;&#x7E2E;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;&#x9AD8;&#x901F;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x4E00;&#x822C;&#x7684;&#x306B;&#x3001;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x3088;&#x308A;&#x591A;&#x304F;&#x4F7F;&#x3046;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x3059;&#x308B;&#x3068; node &#x304C; zlib &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x56DE;&#x6570;&#x304C;\n&#x5C11;&#x306A;&#x304F;&#x306A;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x3001;\n&#x4E00;&#x56DE;&#x306E; <code>write</code> &#x64CD;&#x4F5C;&#x3067;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x51E6;&#x7406;&#x3067;&#x304D;&#x308B;&#x3053;&#x3068;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3042;&#x30B9;&#x30D4;&#x30FC;&#x30C9;&#x306B;&#x5F71;&#x97FF;&#x3059;&#x308B;&#x3082;&#x3046;&#x4E00;&#x3064;&#x306E;&#x30D5;&#x30A1;&#x30AF;&#x30BF;&#x3067;&#x3001;&#x30E1;&#x30E2;&#x30EA;&#x4F7F;&#x7528;&#x91CF;&#x3092;&#x72A0;&#x7272;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;that is: 128K for windowBits&quot;: &quot;15  +  128K for memLevel = 8\n(default values) plus a few kilobytes for small objects.\n\nFor example, if you want to reduce\nthe default memory requirements from 256K to 128K, set the options to:&quot;,
          &quot;that is, 32K for windowBits&quot;: &quot;15 (default value) plus a few kilobytes\nfor small objects.\n\nThis is in addition to a single internal output slab buffer of size\n`chunkSize`, which defaults to 16K.\n\nThe speed of zlib compression is affected most dramatically by the\n`level` setting.  A higher level will result in better compression, but\nwill take longer to complete.  A lower level will result in less\ncompression, but will be much faster.\n\nIn general, greater memory usage options will mean that node has to make\nfewer calls to zlib, since it&apos;ll be able to process more data in a\nsingle `write` operation.  So, this is another factor that affects the\nspeed, at the cost of memory usage.&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Constants&quot;,
          &quot;name&quot;: &quot;Constants&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nAll of the constants defined in zlib.h are also defined on\n`require('zlib')`.\nIn the normal course of operations, you will not need to ever set any of\nthese.  They are documented here so that their presence is not\nsurprising.  This section is taken almost directly from the [zlib\ndocumentation](http://zlib.net/manual.html#Constants).  See\n<http://zlib.net/manual.html#Constants> for more details.\n-->\n\n<p>zlib.h &#x306B;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x305F;&#x5B9A;&#x6570;&#x306F; <code>require(&apos;zlib&apos;)</code> &#x3067;&#x3082;&#x5B9A;&#x7FA9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x901A;&#x5E38;&#x306E;&#x4F7F;&#x3044;&#x65B9;&#x3067;&#x306F;&#x3053;&#x308C;&#x3089;&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x304C;&#x5B58;&#x5728;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x9A5A;&#x304B;&#x308C;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3001;&#x3053;&#x308C;&#x3089;&#x306F;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x5316;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x307B;&#x3068;&#x3093;&#x3069;&#x306F;\n<a href="\&quot;http://zlib.net/manual.html#Constants\&quot;">zlib documentation</a>\n&#x304B;&#x3089;&#x76F4;&#x63A5;&#x5F97;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F; <a href="\&quot;http://zlib.net/manual.html#Constants\&quot;">http://zlib.net/manual.html#Constants</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nAllowed flush values.\n-->\n\n<p>&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x5024;&#x3002;\n\n</p>\n<ul>\n<li><code>zlib.Z_NO_FLUSH</code></li>\n<li><code>zlib.Z_PARTIAL_FLUSH</code></li>\n<li><code>zlib.Z_SYNC_FLUSH</code></li>\n<li><code>zlib.Z_FULL_FLUSH</code></li>\n<li><code>zlib.Z_FINISH</code></li>\n<li><code>zlib.Z_BLOCK</code></li>\n<li><code>zlib.Z_TREES</code></li>\n</ul>\n<!--\nReturn codes for the compression/decompression functions. Negative\nvalues are errors, positive values are used for special but normal\nevents.\n-->\n\n<p>&#x5727;&#x7E2E;&#xFF0F;&#x89E3;&#x51CD;&#x95A2;&#x6570;&#x306E;&#x30EA;&#x30BF;&#x30FC;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3002;\n&#x8CA0;&#x6570;&#x306F;&#x30A8;&#x30E9;&#x30FC;&#x3001;&#x6B63;&#x6570;&#x306F;&#x6B63;&#x5E38;&#x306A;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x7279;&#x5225;&#x306A;&#x5834;&#x5408;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<ul>\n<li><code>zlib.Z_OK</code></li>\n<li><code>zlib.Z_STREAM_END</code></li>\n<li><code>zlib.Z_NEED_DICT</code></li>\n<li><code>zlib.Z_ERRNO</code></li>\n<li><code>zlib.Z_STREAM_ERROR</code></li>\n<li><code>zlib.Z_DATA_ERROR</code></li>\n<li><code>zlib.Z_MEM_ERROR</code></li>\n<li><code>zlib.Z_BUF_ERROR</code></li>\n<li><code>zlib.Z_VERSION_ERROR</code></li>\n</ul>\n<!--\nCompression levels.\n-->\n\n<p>&#x5727;&#x7E2E;&#x30EC;&#x30D9;&#x30EB;&#x3002;\n\n</p>\n<ul>\n<li><code>zlib.Z_NO_COMPRESSION</code></li>\n<li><code>zlib.Z_BEST_SPEED</code></li>\n<li><code>zlib.Z_BEST_COMPRESSION</code></li>\n<li><code>zlib.Z_DEFAULT_COMPRESSION</code></li>\n</ul>\n<!--\nCompression strategy.\n-->\n\n<p>&#x5727;&#x7E2E;&#x30B9;&#x30C8;&#x30E9;&#x30C6;&#x30B8;&#x3002;\n\n</p>\n<ul>\n<li><code>zlib.Z_FILTERED</code></li>\n<li><code>zlib.Z_HUFFMAN_ONLY</code></li>\n<li><code>zlib.Z_RLE</code></li>\n<li><code>zlib.Z_FIXED</code></li>\n<li><code>zlib.Z_DEFAULT_STRATEGY</code></li>\n</ul>\n<!--\nPossible values of the data_type field.\n-->\n\n<p>data_type &#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x3067;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x5024;&#x3002;\n\n</p>\n<ul>\n<li><code>zlib.Z_BINARY</code></li>\n<li><code>zlib.Z_TEXT</code></li>\n<li><code>zlib.Z_ASCII</code></li>\n<li><code>zlib.Z_UNKNOWN</code></li>\n</ul>\n<!--\nThe deflate compression method (the only one supported in this version).\n-->\n\n<p>deflate &#x306E;&#x5727;&#x7E2E;&#x65B9;&#x6CD5; (&#x3053;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x306F;&#x4E00;&#x3064;&#x3060;&#x3051;&#x304C;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x3059;)&#x3002;\n\n</p>\n<ul>\n<li><code>zlib.Z_DEFLATED</code></li>\n</ul>\n<!--\nFor initializing zalloc, zfree, opaque.\n-->\n\n<p>zalloc&#x3001;zfree&#x3001;opaque &#x306E;&#x521D;&#x671F;&#x5316;&#x7528;&#x3002;\n\n</p>\n<ul>\n<li><code>zlib.Z_NULL</code></li>\n</ul>\n&quot;
        }
      ],
      &quot;that is: 128K for windowBits&quot;: &quot;15  +  128K for memLevel = 8\n(default values) plus a few kilobytes for small objects.\n\nFor example, if you want to reduce\nthe default memory requirements from 256K to 128K, set the options to:&quot;,
      &quot;that is, 32K for windowBits&quot;: &quot;15 (default value) plus a few kilobytes\nfor small objects.\n\nThis is in addition to a single internal output slab buffer of size\n`chunkSize`, which defaults to 16K.\n\nThe speed of zlib compression is affected most dramatically by the\n`level` setting.  A higher level will result in better compression, but\nwill take longer to complete.  A lower level will result in less\ncompression, but will be much faster.\n\nIn general, greater memory usage options will mean that node has to make\nfewer calls to zlib, since it&apos;ll be able to process more data in a\nsingle `write` operation.  So, this is another factor that affects the\nspeed, at the cost of memory usage.&quot;,
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Zlib&quot;
    },
    {
      &quot;textRaw&quot;: &quot;os&quot;,
      &quot;name&quot;: &quot;os&quot;,
      &quot;stability&quot;: 4,
      &quot;stabilityText&quot;: &quot;API Frozen&quot;,
      &quot;desc&quot;: &quot;<!--\nProvides a few basic operating-system related utility functions.\n-->\n&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x95A2;&#x9023;&#x3059;&#x308B;&#x57FA;&#x672C;&#x7684;&#x306A;&#x30E6;&#x30FC;&#x30C6;&#x30A3;&#x30EA;&#x30C6;&#x30A3;&#x95A2;&#x6570;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n<!--\nUse `require('os')` to access this module.\n-->\n\n<p><code>require(&apos;os&apos;)</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x30A2;&#x30AF;&#x30BB;&#x30B9;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;os.tmpdir()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;tmpdir&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the operating system's default directory for temp files.\n-->\n\n<p>&#x4E00;&#x6642;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x305F;&#x3081;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.endianness()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;endianness&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the endianness of the CPU. Possible values are `\"BE\"` or `\"LE\"`.\n-->\n\n<p>CPU &#x306E;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3; (&#x30D0;&#x30A4;&#x30C8;&#x30AA;&#x30FC;&#x30C0;&#x30FC;) &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3042;&#x308A;&#x5F97;&#x308B;&#x5024;&#x306F; <code>&quot;BE&quot;</code> &#x307E;&#x305F;&#x306F; <code>&quot;LE&quot;</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.hostname()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;hostname&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the hostname of the operating system.\n-->\n\n<p>&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x30DB;&#x30B9;&#x30C8;&#x540D;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.type()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;type&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the operating system name.\n-->\n\n<p>&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x540D;&#x524D;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.platform()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;platform&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the operating system platform.\n-->\n\n<p>&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x306E;&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.arch()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;arch&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the operating system CPU architecture.\n-->\n\n<p>&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E; CPU &#x30A2;&#x30FC;&#x30AD;&#x30C6;&#x30AF;&#x30C1;&#x30E3;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.release()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;release&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the operating system release.\n-->\n\n<p>&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x30EA;&#x30EA;&#x30FC;&#x30B9;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.uptime()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;uptime&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the system uptime in seconds.\n-->\n\n<p>&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304C;&#x8D77;&#x52D5;&#x3057;&#x3066;&#x304B;&#x3089;&#x306E;&#x79D2;&#x6570;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.loadavg()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;loadavg&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns an array containing the 1, 5, and 15 minute load averages.\n-->\n\n<p>1 &#x5206;&#x3001;5 &#x5206;&#x3001;15 &#x5206;&#x9593;&#x306E;&#x30ED;&#x30FC;&#x30C9;&#x30A2;&#x30D9;&#x30EC;&#x30FC;&#x30B8;&#x3092;&#x542B;&#x3093;&#x3060;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe load average is a measure of system activity, calculated by the operating\nsystem and expressed as a fractional number.  As a rule of thumb, the load\naverage should ideally be less than the number of logical CPUs in the system.\n-->\n\n<p>&#x30ED;&#x30FC;&#x30C9;&#x30A2;&#x30D9;&#x30EC;&#x30FC;&#x30B8;&#x306F;&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x3088;&#x3063;&#x3066;&#x6E2C;&#x5B9A;&#x3055;&#x308C;&#x3066;&#x5C0F;&#x6570;&#x3067;&#x8868;&#x3055;&#x308C;&#x308B;\n&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x6D3B;&#x52D5;&#x306E;&#x6E2C;&#x5B9A;&#x5024;&#x3067;&#x3059;&#x3002;&#x7D4C;&#x9A13;&#x5247;&#x3068;&#x3057;&#x3066;&#x3001;&#x30ED;&#x30FC;&#x30C9;&#x30A2;&#x30D9;&#x30EC;&#x30FC;&#x30B8;&#x306F;&#x7406;&#x60F3;&#x7684;&#x306B;&#x306F;\n&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x8AD6;&#x7406; CPU &#x6570;&#x3088;&#x308A;&#x3082;&#x5C0F;&#x3055;&#x304F;&#x3042;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe load average is a very UNIX-y concept; there is no real equivalent on\nWindows platforms.  That is why this function always returns `[0, 0, 0]` on\nWindows.\n-->\n\n<p>&#x30ED;&#x30FC;&#x30C9;&#x30A2;&#x30D9;&#x30EC;&#x30FC;&#x30B8;&#x306F;&#x3068;&#x3066;&#x3082; Unix &#x7684;&#x306A;&#x6982;&#x5FF5;&#x3067;&#x3059;; &#x305D;&#x308C;&#x3068;&#x5B8C;&#x5168;&#x306B;&#x5BFE;&#x5FDC;&#x3059;&#x308B;&#x3082;&#x306E;&#x306F;\nWindows &#x306B;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;Windows &#x3067;&#x306F;&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x5E38;&#x306B; <code>[0, 0, 0]</code>\n&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.totalmem()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;totalmem&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the total amount of system memory in bytes.\n-->\n\n<p>&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x5168;&#x4F53;&#x304C;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3044;&#x308B;&#x30E1;&#x30E2;&#x30EA;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.freemem()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;freemem&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns the amount of free system memory in bytes.\n-->\n\n<p>&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x5168;&#x4F53;&#x3067;&#x7A7A;&#x3044;&#x3066;&#x3044;&#x308B;&#x30E1;&#x30E2;&#x30EA;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.cpus()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;cpus&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns an array of objects containing information about each CPU/core\ninstalled: model, speed (in MHz), and times (an object containing the number of\nmilliseconds the CPU/core spent in: user, nice, sys, idle, and irq).\n-->\n\n<p>&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B; CPU/ &#x30B3;&#x30A2;&#x3054;&#x3068;&#x306E;&#x60C5;&#x5831;&#x3092;&#x542B;&#x3093;&#x3060;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x914D;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x60C5;&#x5831;&#x306F;&#x30E2;&#x30C7;&#x30EB;&#x3001;&#x30B9;&#x30D4;&#x30FC;&#x30C9; (MHz)&#x3001;&#x305D;&#x3057;&#x3066;&#x6642;&#x9593; (CPU/&#x30B3;&#x30A2; &#x304C;&#x4F7F;&#x7528;&#x3057;&#x305F; user, nice, sys, idle, irq &#x306E;&#x30DF;&#x30EA;&#x79D2;&#x3092;&#x542B;&#x3093;&#x3060;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;) &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample inspection of os.cpus:\n-->\n\n<p>os.cpus &#x306E;&#x4F8B;:\n\n</p>\n<pre><code>[ { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 252020,\n       nice: 0,\n       sys: 30340,\n       idle: 1070356870,\n       irq: 0 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 306960,\n       nice: 0,\n       sys: 26980,\n       idle: 1071569080,\n       irq: 0 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 248450,\n       nice: 0,\n       sys: 21750,\n       idle: 1070919370,\n       irq: 0 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 256880,\n       nice: 0,\n       sys: 19430,\n       idle: 1070905480,\n       irq: 20 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 511580,\n       nice: 20,\n       sys: 40900,\n       idle: 1070842510,\n       irq: 0 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 291660,\n       nice: 0,\n       sys: 34360,\n       idle: 1070888000,\n       irq: 10 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 308260,\n       nice: 0,\n       sys: 55410,\n       idle: 1071129970,\n       irq: 880 } },\n  { model: &apos;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&apos;,\n    speed: 2926,\n    times:\n     { user: 266450,\n       nice: 1480,\n       sys: 34920,\n       idle: 1072572010,\n       irq: 30 } } ]</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;os.networkInterfaces()&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;networkInterfaces&quot;,
          &quot;desc&quot;: &quot;<!--\nGet a list of network interfaces:\n-->\n\n<p>&#x30CD;&#x30C3;&#x30C8;&#x30EF;&#x30FC;&#x30AF;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306E;&#x4E00;&#x89A7;&#x3092;&#x53D6;&#x5F97;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>{ lo0: \n   [ { address: &apos;::1&apos;, family: &apos;IPv6&apos;, internal: true },\n     { address: &apos;fe80::1&apos;, family: &apos;IPv6&apos;, internal: true },\n     { address: &apos;127.0.0.1&apos;, family: &apos;IPv4&apos;, internal: true } ],\n  en1: \n   [ { address: &apos;fe80::cabc:c8ff:feef:f996&apos;, family: &apos;IPv6&apos;,\n       internal: false },\n     { address: &apos;10.0.1.123&apos;, family: &apos;IPv4&apos;, internal: false } ],\n  vmnet1: [ { address: &apos;10.99.99.254&apos;, family: &apos;IPv4&apos;, internal: false } ],\n  vmnet8: [ { address: &apos;10.88.88.1&apos;, family: &apos;IPv4&apos;, internal: false } ],\n  ppp0: [ { address: &apos;10.2.0.231&apos;, family: &apos;IPv4&apos;, internal: false } ] }</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: []
            }
          ]
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;os.EOL&quot;,
          &quot;name&quot;: &quot;EOL&quot;,
          &quot;desc&quot;: &quot;<!--\nA constant defining the appropriate End-of-line marker for the operating system.\n-->\n\n<p>&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x9069;&#x3057;&#x305F;&#x884C;&#x533A;&#x5207;&#x308A;&#x6587;&#x5B57;&#x3092;&#x5B9A;&#x7FA9;&#x3057;&#x305F;&#x5B9A;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;os&quot;
    },
    {
      &quot;textRaw&quot;: &quot;Cluster&quot;,
      &quot;name&quot;: &quot;cluster&quot;,
      &quot;stability&quot;: 1,
      &quot;stabilityText&quot;: &quot;Experimental&quot;,
      &quot;desc&quot;: &quot;<!--\nA single instance of Node runs in a single thread. To take advantage of\nmulti-core systems the user will sometimes want to launch a cluster of Node\nprocesses to handle the load.\n-->\n\n<p>&#x4E00;&#x3064;&#x306E; Node &#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306F;&#x4E00;&#x3064;&#x306E;&#x30B9;&#x30EC;&#x30C3;&#x30C9;&#x3067;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30DE;&#x30EB;&#x30C1;&#x30B3;&#x30A2;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x30E1;&#x30EA;&#x30C3;&#x30C8;&#x3092;&#x751F;&#x304B;&#x3059;&#x305F;&#x3081;&#x306B;&#x3001;\n&#x30E6;&#x30FC;&#x30B6;&#x306F;&#x6642;&#x3005; Node &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x3092;&#x8D77;&#x52D5;&#x3057;&#x3066;&#x8CA0;&#x8377;&#x3092;&#x5206;&#x6563;&#x3057;&#x305F;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe cluster module allows you to easily create child processes that\nall share server ports.\n-->\n\n<p>&#x30AF;&#x30E9;&#x30B9;&#x30BF;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x5171;&#x6709;&#x3059;&#x308B;&#x8907;&#x6570;&#x306E;&#x5B50;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7C21;&#x5358;&#x306B;\n&#x69CB;&#x7BC9;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x53EF;&#x80FD;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var cluster = require(&apos;cluster&apos;);\nvar http = require(&apos;http&apos;);\nvar numCPUs = require(&apos;os&apos;).cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(&apos;exit&apos;, function(worker, code, signal) {\n    console.log(&apos;worker &apos; + worker.process.pid + &apos; died&apos;);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case its a HTTP server\n  http.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(&quot;hello world\\n&quot;);\n  }).listen(8000);\n}</code></pre>\n<!--\nRunning node will now share port 8000 between the workers:\n-->\n\n<p>node &#x306F; 8000 &#x756A;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x30EF;&#x30FC;&#x30AB;&#x9593;&#x3067;&#x5171;&#x6709;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>% NODE_DEBUG=cluster node server.js\n23521,Master Worker 23524 online\n23521,Master Worker 23526 online\n23521,Master Worker 23523 online\n23521,Master Worker 23528 online</code></pre>\n<!--\nThis feature was introduced recently, and may change in future versions.\nPlease try it out and provide feedback.\n-->\n\n<p>&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x306F;&#x6700;&#x8FD1;&#x5C0E;&#x5165;&#x3055;&#x308C;&#x305F;&#x3070;&#x304B;&#x308A;&#x3067;&#x3042;&#x308A;&#x3001;\n&#x5C06;&#x6765;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x5909;&#x66F4;&#x3055;&#x308C;&#x308B;&#x53EF;&#x80FD;&#x6027;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x3092;&#x8A66;&#x3057;&#x3066;&#x3001;&#x30D5;&#x30A3;&#x30FC;&#x30C9;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x884C;&#x3063;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nAlso note that, on Windows, it is not yet possible to set up a named pipe\nserver in a worker.\n-->\n\n<p>Windows &#x3067;&#x306F;&#x3001;&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x540D;&#x524D;&#x4ED8;&#x304D;&#x30D1;&#x30A4;&#x30D7;&#x306B;&#x3088;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x3092;&#x30BB;&#x30C3;&#x30C8;&#x30A2;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;\n&#x307E;&#x3060;&#x3067;&#x304D;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x3082;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;How It Works&quot;,
          &quot;name&quot;: &quot;How It Works&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nThe worker processes are spawned using the `child_process.fork` method,\nso that they can communicate with the parent via IPC and pass server\nhandles back and forth.\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F; <code>child_process.fork</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x8D77;&#x52D5;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;&#x3001;\n&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3068; IPC &#x3067;&#x901A;&#x4FE1;&#x3057;&#x305F;&#x308A;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x3092;&#x3084;&#x308A;&#x53D6;&#x308A;&#x3057;&#x305F;&#x308A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nWhen you call `server.listen(...)` in a worker, it serializes the\narguments and passes the request to the master process.  If the master\nprocess already has a listening server matching the worker's\nrequirements, then it passes the handle to the worker.  If it does not\nalready have a listening server matching that requirement, then it will\ncreate one, and pass the handle to the worker.\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x304C; <code>server.listen(...)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x3001;&#x5F15;&#x6570;&#x304C;&#x30B7;&#x30EA;&#x30A2;&#x30E9;&#x30A4;&#x30BA;&#x3055;&#x308C;&#x3066;\n&#x30DE;&#x30B9;&#x30BF;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30DE;&#x30B9;&#x30BF;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x3001;&#x30EF;&#x30FC;&#x30AB;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306B;&#x30DE;&#x30C3;&#x30C1;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CB;&#x30F3;&#x30B0;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x65E2;&#x306B;\n&#x5B58;&#x5728;&#x3059;&#x308C;&#x3070;&#x305D;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x3092;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x6E21;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306B;&#x30DE;&#x30C3;&#x30C1;&#x3059;&#x308B;&#x30EA;&#x30B9;&#x30CB;&#x30F3;&#x30B0;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x5B58;&#x5728;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x305D;&#x308C;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x3066;\n&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis causes potentially surprising behavior in three edge cases:\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x4E09;&#x3064;&#x306E;&#x6975;&#x7AEF;&#x306A;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x9A5A;&#x304F;&#x3088;&#x3046;&#x306A;&#x632F;&#x308B;&#x821E;&#x3044;&#x3092;&#x5F15;&#x304D;&#x8D77;&#x3053;&#x3059;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\n1. `server.listen({fd: 7})` Because the message is passed to the master,\n   file descriptor 7 **in the parent** will be listened on, and the\n   handle passed to the worker, rather than listening to the worker's\n   idea of what the number 7 file descriptor references.\n2. `server.listen(handle)` Listening on handles explicitly will cause\n   the worker to use the supplied handle, rather than talk to the master\n   process.  If the worker already has the handle, then it's presumed\n   that you know what you are doing.\n3. `server.listen(0)` Normally, this will cause servers to listen on a\n   random port.  However, in a cluster, each worker will receive the\n   same \"random\" port each time they do `listen(0)`.  In essence, the\n   port is random the first time, but predictable thereafter.  If you\n   want to listen on a unique port, generate a port number based on the\n   cluster worker ID.\n-->\n\n<ol>\n<li><code>server.listen({fd: 7})</code> &#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x306F;&#x30DE;&#x30B9;&#x30BF;&#x306B;&#x6E21;&#x3055;&#x308C;&#x3066;&#x308B;&#x305F;&#x3081;&#x3001;\n&#x30EF;&#x30FC;&#x30AB;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50; 7 &#x304C;&#x53C2;&#x7167;&#x3059;&#x308B;&#x3082;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;\n<strong>&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;</strong> &#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50; 7 &#x304C;&#x30EA;&#x30B9;&#x30CB;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x3066;&#x305D;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x304C;&#x30EF;&#x30FC;&#x30AB;&#x306B;\n&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li><code>server.listen(handle)</code> &#x660E;&#x793A;&#x7684;&#x306A;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x3092;&#x30EA;&#x30B9;&#x30CB;&#x30F3;&#x30B0;&#x3059;&#x308B;&#x3068;&#x30DE;&#x30B9;&#x30BF;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;\n&#x95A2;&#x4E0E;&#x3059;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F;&#x3001;&#x30EF;&#x30FC;&#x30AB;&#x306F;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x3059;&#x3067;&#x306B;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x308B;&#x306A;&#x3089;&#x3001;&#x4F55;&#x3092;&#x3057;&#x3088;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x304B;\n&#x3042;&#x306A;&#x305F;&#x306F;&#x5206;&#x304B;&#x3063;&#x3066;&#x3044;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;</li>\n<li><code>&apos;server.listen(0)</code> &#x901A;&#x5E38;&#x3001;&#x3053;&#x308C;&#x306F;&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30E9;&#x30F3;&#x30C0;&#x30E0;&#x306A;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x30EA;&#x30C3;&#x30B9;&#x30F3;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;\n&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x30AF;&#x30E9;&#x30B9;&#x30BF;&#x3067;&#x306F;&#x3001;&#x5404;&#x30EF;&#x30FC;&#x30AB;&#x306F; <code>listen(0)</code> &#x306B;&#x3088;&#x3063;&#x3066;\n&#x540C;&#x3058; &quot;&#x30E9;&#x30F3;&#x30C0;&#x30E0;&#x306A;&quot; &#x30DD;&#x30FC;&#x30C8;&#x3092;&#x53D7;&#x4FE1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x521D;&#x56DE;&#x306F;&#x30DD;&#x30FC;&#x30C8;&#x306F;&#x30E9;&#x30F3;&#x30C0;&#x30E0;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x304C;&#x3001;&#x305D;&#x306E;&#x5F8C;&#x306F;&#x305D;&#x3046;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3082;&#x3057;&#x30E6;&#x30CB;&#x30FC;&#x30AF;&#x306A;&#x30DD;&#x30FC;&#x30C8;&#x3092;&#x30EA;&#x30C3;&#x30B9;&#x30F3;&#x3057;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;&#x30AF;&#x30E9;&#x30B9;&#x30BF;&#x306E;&#x30EF;&#x30FC;&#x30AB; ID &#x306B;&#x57FA;&#x3065;&#x3044;&#x3066;\n&#x30DD;&#x30FC;&#x30C8;&#x756A;&#x53F7;&#x3092;&#x751F;&#x6210;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n</ol>\n<!--\nWhen multiple processes are all `accept()`ing on the same underlying\nresource, the operating system load-balances across them very\nefficiently.  There is no routing logic in Node.js, or in your program,\nand no shared state between the workers.  Therefore, it is important to\ndesign your program such that it does not rely too heavily on in-memory\ndata objects for things like sessions and login.\n-->\n\n<p>&#x8907;&#x6570;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x540C;&#x3058;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x3092; <code>accept()</code> &#x3059;&#x308B;&#x6642;&#x3001;&#x30AA;&#x30DA;&#x30EC;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306F;\n&#x3068;&#x3066;&#x3082;&#x52B9;&#x7387;&#x7684;&#x306B;&#x305D;&#x308C;&#x3089;&#x5168;&#x4F53;&#x3092;&#x30ED;&#x30FC;&#x30C9;&#x30D0;&#x30E9;&#x30F3;&#x30B9;&#x3057;&#x307E;&#x3059;&#x3002;\nNode.js &#x306B;&#x3082;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;&#x3082;&#x3001;&#x30EB;&#x30FC;&#x30C6;&#x30A3;&#x30F3;&#x30B0;&#x306E;&#x305F;&#x3081;&#x306E;&#x30ED;&#x30B8;&#x30C3;&#x30AF;&#x3084;\n&#x30EF;&#x30FC;&#x30AB;&#x9593;&#x3067;&#x5171;&#x6709;&#x3055;&#x308C;&#x308B;&#x72B6;&#x614B;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3057;&#x305F;&#x304C;&#x3063;&#x3066;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304C;&#x30BB;&#x30C3;&#x30B7;&#x30E7;&#x30F3;&#x3084;&#x30ED;&#x30B0;&#x30A4;&#x30F3;&#x306E;&#x305F;&#x3081;&#x306B;&#x30E1;&#x30E2;&#x30EA;&#x5185;&#x306E;\n&#x30C7;&#x30FC;&#x30BF;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x904E;&#x5EA6;&#x306B;&#x983C;&#x3089;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x8A08;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x91CD;&#x8981;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nBecause workers are all separate processes, they can be killed or\nre-spawned depending on your program's needs, without affecting other\nworkers.  As long as there are some workers still alive, the server will\ncontinue to accept connections.  Node does not automatically manage the\nnumber of workers for you, however.  It is your responsibility to manage\nthe worker pool for your application's needs.\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x306F;&#x72EC;&#x7ACB;&#x3057;&#x305F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306A;&#x306E;&#x3067;&#x3001;&#x4ED6;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x5F71;&#x97FF;&#x3092;&#x4E0E;&#x3048;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F;\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x30CB;&#x30FC;&#x30BA;&#x306B;&#x5FDC;&#x3058;&#x3066;&#x305D;&#x308C;&#x3089;&#x3092;&#x6BBA;&#x3057;&#x305F;&#x308A;&#x518D;&#x8D77;&#x52D5;&#x3057;&#x305F;&#x308A;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x751F;&#x304D;&#x3066;&#x3044;&#x308B;&#x9650;&#x308A;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x306F;&#x63A5;&#x7D9A;&#x3092;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x7D9A;&#x3051;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;Node &#x306F;&#x30EF;&#x30FC;&#x30AB;&#x306E;&#x6570;&#x3092;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x7BA1;&#x7406;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30CB;&#x30FC;&#x30BA;&#x306B;&#x5FDC;&#x3058;&#x3066;&#x30EF;&#x30FC;&#x30AB;&#x306E;&#x30D7;&#x30FC;&#x30EB;&#x3092;&#x7BA1;&#x7406;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3001;\n&#x3042;&#x306A;&#x305F;&#x306E;&#x8CAC;&#x52D9;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;`settings` {Object} &quot;,
          &quot;name&quot;: &quot;settings&quot;,
          &quot;* {Object}\n  * `execArgv` {Array} list of string arguments passed to the node executable. \n    (Default&quot;: &quot;`process.execArgv`)\n  * `exec` {String} file path to worker file.  (Default=`process.argv[1]`)\n  * `args` {Array} string arguments passed to worker.\n    (Default=`process.argv.slice(2)`)\n  * `silent` {Boolean} whether or not to send output to parent&apos;s stdio.\n    (Default=`false`)&quot;,
          &quot;options&quot;: [
            {
              &quot;textRaw&quot;: &quot;`execArgv` {Array} node &#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x6587;&#x5B57;&#x5217;&#x5F15;&#x6570;&#x306E;&#x914D;&#x5217;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `process.execArgv`) &quot;,
              &quot;name&quot;: &quot;execArgv&quot;,
              &quot;type&quot;: &quot;Array&quot;,
              &quot;desc&quot;: &quot;node &#x5B9F;&#x884C;&#x53EF;&#x80FD;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x6587;&#x5B57;&#x5217;&#x5F15;&#x6570;&#x306E;&#x914D;&#x5217;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `process.execArgv`)&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`exec` {String} &#x30EF;&#x30FC;&#x30AB;&#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3078;&#x306E;&#x30D1;&#x30B9;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `process.argv[1]`) &quot;,
              &quot;name&quot;: &quot;exec&quot;,
              &quot;type&quot;: &quot;String&quot;,
              &quot;desc&quot;: &quot;&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3078;&#x306E;&#x30D1;&#x30B9;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `process.argv[1]`)&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`args` {Array} &#x30EF;&#x30FC;&#x30AB;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x5F15;&#x6570;&#x3068;&#x306A;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `process.argv.slice(2)`) &quot;,
              &quot;name&quot;: &quot;args&quot;,
              &quot;type&quot;: &quot;Array&quot;,
              &quot;desc&quot;: &quot;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x5F15;&#x6570;&#x3068;&#x306A;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `process.argv.slice(2)`)&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`silent` {Boolean} &#x51FA;&#x529B;&#x3092;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false`) &quot;,
              &quot;name&quot;: &quot;silent&quot;,
              &quot;type&quot;: &quot;Boolean&quot;,
              &quot;desc&quot;: &quot;&#x51FA;&#x529B;&#x3092;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false`)&quot;
            }
          ],
          &quot;desc&quot;: &quot;<!--\nAfter calling `.setupMaster()` (or `.fork()`) this settings object will contain\nthe settings, including the default values.\n-->\n\n<p><code>.setupMaster()</code> (&#x307E;&#x305F;&#x306F; <code>.fork()</code>) &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3001;&#x3053;&#x306E; <code>settings</code>\n&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x3092;&#x542B;&#x3080;&#x8A2D;&#x5B9A;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIt is effectively frozen after being set, because `.setupMaster()` can\nonly be called once.\n-->\n\n<p><code>.setupMaster()</code> &#x306F;&#x4E00;&#x5EA6;&#x3057;&#x304B;&#x547C;&#x3073;&#x51FA;&#x305B;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;&#x305D;&#x308C;&#x306F;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3067;&#x4E8B;&#x5B9F;&#x4E0A;\n&#x51CD;&#x7D50;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis object is not supposed to be changed or set manually, by you.\n-->\n\n<p>&#x3053;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x3042;&#x306A;&#x305F;&#x306B;&#x3088;&#x3063;&#x3066;&#x5909;&#x66F4;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x60F3;&#x5B9A;&#x3057;&#x3066;&#x3044;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;`isMaster` {Boolean} &quot;,
          &quot;name&quot;: &quot;isMaster&quot;,
          &quot;desc&quot;: &quot;<!--\nTrue if the process is a master. This is determined\nby the `process.env.NODE_UNIQUE_ID`. If `process.env.NODE_UNIQUE_ID` is\nundefined, then `isMaster` is `true`.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x30DE;&#x30B9;&#x30BF;&#x306E;&#x5834;&#x5408;&#x306F; <code>true</code> &#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>process.env.NODE_UNIQUE_ID</code> &#x304B;&#x3089;&#x6C7A;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>process.env.NODE_UNIQUE_ID</code> &#x304C;&#x672A;&#x5B9A;&#x7FA9;&#x3060;&#x3068; <code>isMaster</code> &#x306F; <code>true</code> &#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;`isWorker` {Boolean} &quot;,
          &quot;name&quot;: &quot;isWorker&quot;,
          &quot;desc&quot;: &quot;<!--\nTrue if the process is not a master (it is the negation of `cluster.isMaster`).\n-->\n\n<p>&#x3053;&#x306E;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x30DE;&#x30B9;&#x30BF;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070; <code>true</code> (&#x3053;&#x308C;&#x306F; <code>cluster.isMaster</code> &#x306E;&#x5426;&#x5B9A;&#x3067;&#x3059;)&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;`worker` {Object} &quot;,
          &quot;name&quot;: &quot;worker&quot;,
          &quot;desc&quot;: &quot;<!--\nA reference to the current worker object. Not available in the master process.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3078;&#x306E;&#x53C2;&#x7167;&#x3067;&#x3059;&#x3002;\n&#x30DE;&#x30B9;&#x30BF;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3067;&#x306F;&#x5229;&#x7528;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code>var cluster = require(&apos;cluster&apos;);\n\nif (cluster.isMaster) {\n  console.log(&apos;I am master&apos;);\n  cluster.fork();\n  cluster.fork();\n} else if (cluster.isWorker) {\n  console.log(&apos;I am worker #&apos; + cluster.worker.id);\n}</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;`workers` {Object} &quot;,
          &quot;name&quot;: &quot;workers&quot;,
          &quot;desc&quot;: &quot;<!--\nA hash that stores the active worker objects, keyed by `id` field. Makes it\neasy to loop through all the workers. It is only available in the master\nprocess.\n-->\n\n<p><code>id</code> &#x3092;&#x30AD;&#x30FC;&#x3068;&#x3057;&#x3066;&#x30A2;&#x30AF;&#x30C6;&#x30A3;&#x30D6;&#x306A;&#x30EF;&#x30FC;&#x30AB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x4FDD;&#x5B58;&#x3057;&#x3066;&#x3044;&#x308B;&#x30CF;&#x30C3;&#x30B7;&#x30E5;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x5168;&#x3066;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x5BFE;&#x3057;&#x3066;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x3092;&#x884C;&#x3046;&#x3053;&#x3068;&#x3092;&#x5BB9;&#x6613;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30DE;&#x30B9;&#x30BF;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3067;&#x306E;&#x307F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nA worker is removed from cluster.workers just before the `'disconnect'` or\n`'exit'` event is emitted.\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x306F; <code>&apos;disconnect&apos;</code> &#x3084; <code>&apos;exit&apos;</code> &#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x308B;&#x524D;&#x306B; <code>cluster.worker</code> &#x304B;&#x3089;\n&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>// Go through all workers\nfunction eachWorker(callback) {\n  for (var id in cluster.workers) {\n    callback(cluster.workers[id]);\n  }\n}\neachWorker(function(worker) {\n  worker.send(&apos;big announcement to all workers&apos;);\n});</code></pre>\n<!--\nShould you wish to reference a worker over a communication channel, using\nthe worker's unique id is the easiest way to find the worker.\n-->\n\n<p>&#x901A;&#x4FE1;&#x30C1;&#x30E3;&#x30CD;&#x30EB;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x30EF;&#x30FC;&#x30AB;&#x306E;&#x53C2;&#x7167;&#x3092;&#x6E21;&#x3059;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x30EF;&#x30FC;&#x30AB;&#x306E;&#x30E6;&#x30CB;&#x30FC;&#x30AF;&#x306A; ID &#x3092;&#x4F7F;&#x3063;&#x3066;&#x30EF;&#x30FC;&#x30AB;&#x3092;&#x63A2;&#x3059;&#x306E;&#x304C;&#x7C21;&#x5358;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>socket.on(&apos;data&apos;, function(id) {\n  var worker = cluster.workers[id];\n});</code></pre>\n&quot;
        }
      ],
      &quot;events&quot;: [
        {
          &quot;textRaw&quot;: &quot;Event: &apos;fork&apos;&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;name&quot;: &quot;fork&quot;,
          &quot;params&quot;: [],
          &quot;desc&quot;: &quot;<!--\nWhen a new worker is forked the cluster module will emit a 'fork' event.\nThis can be used to log worker activity, and create your own timeout.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x30D5;&#x30A9;&#x30FC;&#x30AF;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x30AF;&#x30E9;&#x30B9;&#x30BF;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F; <code>&apos;fork&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30EF;&#x30FC;&#x30AB;&#x306E;&#x6D3B;&#x52D5;&#x3092;&#x30ED;&#x30AE;&#x30F3;&#x30B0;&#x3057;&#x305F;&#x308A;&#x3001;&#x30BF;&#x30A4;&#x30E0;&#x30A2;&#x30A6;&#x30C8;&#x306E;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var timeouts = [];\nfunction errorMsg() {\n  console.error(&quot;Something must be wrong with the connection ...&quot;);\n}\n\ncluster.on(&apos;fork&apos;, function(worker) {\n  timeouts[worker.id] = setTimeout(errorMsg, 2000);\n});\ncluster.on(&apos;listening&apos;, function(worker, address) {\n  clearTimeout(timeouts[worker.id]);\n});\ncluster.on(&apos;exit&apos;, function(worker, code, signal) {\n  clearTimeout(timeouts[worker.id]);\n  errorMsg();\n});</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Event: &apos;online&apos;&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;name&quot;: &quot;online&quot;,
          &quot;params&quot;: [],
          &quot;desc&quot;: &quot;<!--\nAfter forking a new worker, the worker should respond with an online message.\nWhen the master receives an online message it will emit this event.\nThe difference between 'fork' and 'online' is that fork is emitted when the\nmaster forks a worker, and 'online' is emitted when the worker is running.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30EF;&#x30FC;&#x30AB;&#x3092;&#x30D5;&#x30A9;&#x30FC;&#x30AF;&#x3057;&#x305F;&#x5F8C;&#x3001;&#x30EF;&#x30FC;&#x30AB;&#x306F;&#x30AA;&#x30F3;&#x30E9;&#x30A4;&#x30F3;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x5FDC;&#x7B54;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30DE;&#x30B9;&#x30BF;&#x304C;&#x30AA;&#x30F3;&#x30E9;&#x30A4;&#x30F3;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x53D7;&#x4FE1;&#x3059;&#x308B;&#x3068;&#x3001;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>&apos;fork&apos;</code> &#x3068; <code>&apos;online&apos;</code> &#x306E;&#x9055;&#x3044;&#x306F;&#x3001;<code>&apos;fork&apos;</code> &#x306F;&#x30DE;&#x30B9;&#x30BF;&#x304C;&#x30EF;&#x30FC;&#x30AB;&#x3092;&#x30D5;&#x30A9;&#x30FC;&#x30AF;&#x3057;&#x305F;&#x6642;&#x70B9;&#x3067;\n&#x751F;&#x6210;&#x3055;&#x308C;&#x308B;&#x306E;&#x306B;&#x5BFE;&#x3057;&#x3001;<code>&apos;online&apos;</code> &#x306F;&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x3066;&#x304B;&#x3089;&#x751F;&#x6210;&#x3055;&#x308C;&#x308B;&#x70B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>cluster.on(&apos;online&apos;, function(worker) {\n  console.log(&quot;Yay, the worker responded after it was forked&quot;);\n});</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Event: &apos;listening&apos;&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;name&quot;: &quot;listening&quot;,
          &quot;params&quot;: [],
          &quot;desc&quot;: &quot;<!--\nAfter calling `listen()` from a worker, when the 'listening' event is emitted on\nthe server, a listening event will also be emitted on `cluster` in the master.\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x304C; <code>net.Server.listen()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x5F8C;&#x3001;(net &#x3084; http &#x306A;&#x3069;&#x306E;) &#x30B5;&#x30FC;&#x30D0;&#x3067;&#x306F;\n<code>&apos;listening&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x3001;&#x30DE;&#x30B9;&#x30BF;&#x306E; <code>cluster</code> &#x3067;&#x3082; <code>&apos;listening&apos;</code>\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe event handler is executed with two arguments, the `worker` contains the worker\nobject and the `address` object contains the following connection properties:\n`address`, `port` and `addressType`. This is very useful if the worker is listening\non more than one address.\n-->\n\n<p>&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x306F;&#x4E8C;&#x3064;&#x306E;&#x5F15;&#x6570;&#x3092;&#x4F34;&#x3063;&#x3066;&#x5B9F;&#x884C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>worker</code> &#x306F;&#x30EF;&#x30FC;&#x30AB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x3001;<code>address</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;\n&#x4EE5;&#x4E0B;&#x306E;&#x63A5;&#x7D9A;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x542B;&#x307F;&#x307E;&#x3059;:\n<code>address</code>&#x3001;<code>prot</code>&#x3001;&#x305D;&#x3057;&#x3066; <code>addressType</code> &#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x8907;&#x6570;&#x306E;&#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3092;&#x30EA;&#x30C3;&#x30B9;&#x30F3;&#x3057;&#x3066;&#x3044;&#x308B;&#x5834;&#x5408;&#x306B;&#x3068;&#x3066;&#x3082;&#x4FBF;&#x5229;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>cluster.on(&apos;listening&apos;, function(worker, address) {\n  console.log(&quot;A worker is now connected to &quot; + address.address + &quot;:&quot; + address.port);\n});</code></pre>\n<!--\nThe `addressType` is one of:\n-->\n\n<p><code>addressType</code> &#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x3067;&#x3059;:\n\n</p>\n<!--\n* `4` (TCPv4)\n* `6` (TCPv6)\n* `-1` (unix domain socket)\n* `\"udp4\"` or `\"udp6\"` (UDP v4 or v6)\n-->\n\n<ul>\n<li><code>4</code> (TCPv4)</li>\n<li><code>6</code> (TCPv6)</li>\n<li><code>-1</code> (unix &#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x30BD;&#x30B1;&#x30C3;&#x30C8;)</li>\n<li><code>&quot;udp4&quot;</code> &#x307E;&#x305F;&#x306F; <code>&quot;udp6&quot;</code> (UDP v4 &#x307E;&#x305F;&#x306F; v6)</li>\n</ul>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Event: &apos;disconnect&apos;&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;name&quot;: &quot;disconnect&quot;,
          &quot;params&quot;: [],
          &quot;desc&quot;: &quot;<!--\nEmitted after the worker IPC channel has disconnected. This can occur when a\nworker exits gracefully, is killed, or is disconnected manually (such as with\nworker.disconnect()).\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x3068;&#x306E; IPC &#x30C1;&#x30E3;&#x30CD;&#x30EB;&#x304C;&#x5207;&#x65AD;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3067;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x81EA;&#x7136;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x308A;&#x3001;&#x6BBA;&#x3055;&#x308C;&#x305F;&#x308A;&#x3001;&#x3042;&#x308B;&#x3044;&#x306F; (<code>worker.disconnect()</code>\n&#x306B;&#x3088;&#x308A;) &#x624B;&#x52D5;&#x3067;&#x5207;&#x65AD;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x767A;&#x751F;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThere may be a delay between the `disconnect` and `exit` events.  These events\ncan be used to detect if the process is stuck in a cleanup or if there are\nlong-living connections.\n-->\n\n<p><code>&apos;disconnect&apos;</code> &#x3068; <code>&apos;exit&apos;</code> &#x306E;&#x9593;&#x306B;&#x306F;&#x9045;&#x5EF6;&#x304C;&#x3042;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x30AF;&#x30EA;&#x30FC;&#x30F3;&#x30CA;&#x30C3;&#x30D7;&#x3067;&#x884C;&#x304D;&#x8A70;&#x307E;&#x3063;&#x305F;&#x308A;&#x3001;&#x9577;&#x6642;&#x9593;&#x751F;&#x304D;&#x3066;&#x3044;&#x308B;&#x63A5;&#x7D9A;&#x304C;\n&#x306A;&#x3044;&#x304B;&#x3092;&#x691C;&#x51FA;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x4F7F;&#x7528;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>cluster.on(&apos;disconnect&apos;, function(worker) {\n  console.log(&apos;The worker #&apos; + worker.id + &apos; has disconnected&apos;);\n});</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Event: &apos;exit&apos;&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;name&quot;: &quot;exit&quot;,
          &quot;desc&quot;: &quot;<!--\n* `worker` {Worker object}\n* `code` {Number} the exit code, if it exited normally.\n* `signal` {String} the name of the signal (eg. `'SIGHUP'`) that caused\n  the process to be killed.\n-->\n\n<ul>\n<li><code>worker</code> {Worker object}</li>\n<li><code>code</code> {Number} &#x6B63;&#x5E38;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x3002;</li>\n<li><code>signal</code> {String} &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x6BBA;&#x3055;&#x308C;&#x308B;&#x539F;&#x56E0;&#x3068;&#x306A;&#x3063;&#x305F;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x540D;&#x524D;\n(&#x4F8B;: <code>&apos;SIGHUP&apos;</code>)&#x3002;</li>\n</ul>\n<!--\nWhen any of the workers die the cluster module will emit the 'exit' event.\n-->\n\n<p>&#x3069;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x6B7B;&#x3093;&#x3060;&#x5834;&#x5408;&#x3067;&#x3082;&#x3001;&#x30AF;&#x30E9;&#x30B9;&#x30BF;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F; <code>&apos;exit&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis can be used to restart the worker by calling `.fork()` again.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; <code>.fork()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x30EF;&#x30FC;&#x30AB;&#x3092;&#x518D;&#x958B;&#x3059;&#x308B;&#x5834;&#x5408;&#x306B;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>cluster.on(&apos;exit&apos;, function(worker, code, signal) {\n  console.log(&apos;worker %d died (%s). restarting...&apos;,\n    worker.process.pid, signal || code);\n  cluster.fork();\n});</code></pre>\n<p>See <a href="\&quot;child_process.html#child_process_event_exit\&quot;">child_process event: &apos;exit&apos;</a>.\n\n</p>\n&quot;,
          &quot;params&quot;: []
        },
        {
          &quot;textRaw&quot;: &quot;Event: &apos;setup&apos;&quot;,
          &quot;type&quot;: &quot;event&quot;,
          &quot;name&quot;: &quot;setup&quot;,
          &quot;desc&quot;: &quot;<!--\nEmitted the first time that `.setupMaster()` is called.\n-->\n\n<p><code>setupMaster()</code> &#x304C;&#x6700;&#x521D;&#x306B;&#x547C;&#x3070;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;params&quot;: []
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;cluster.setupMaster([settings])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;setupMaster&quot;,
          &quot;* `settings` {Object}\n  * `exec` {String} file path to worker file.  (Default&quot;: &quot;`process.argv[1]`)\n  * `args` {Array} string arguments passed to worker.\n    (Default=`process.argv.slice(2)`)\n  * `silent` {Boolean} whether or not to send output to parent&apos;s stdio.\n    (Default=`false`)&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;textRaw&quot;: &quot;`settings` {Object} &quot;,
                  &quot;options&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`exec` {String} &#x30EF;&#x30FC;&#x30AB;&#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3078;&#x306E;&#x30D1;&#x30B9;. (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `process.argv[1]`) &quot;,
                      &quot;name&quot;: &quot;exec&quot;,
                      &quot;type&quot;: &quot;String&quot;,
                      &quot;desc&quot;: &quot;&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x5B9F;&#x884C;&#x3059;&#x308B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3078;&#x306E;&#x30D1;&#x30B9;. (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `process.argv[1]`)&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`args` {Array} &#x30EF;&#x30FC;&#x30AB;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x5F15;&#x6570;&#x3068;&#x306A;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `process.argv.slice(2)`) &quot;,
                      &quot;name&quot;: &quot;args&quot;,
                      &quot;type&quot;: &quot;Array&quot;,
                      &quot;desc&quot;: &quot;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x5F15;&#x6570;&#x3068;&#x306A;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `process.argv.slice(2)`)&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`silent` {Boolean} &#x51FA;&#x529B;&#x3092;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false`) &quot;,
                      &quot;name&quot;: &quot;silent&quot;,
                      &quot;type&quot;: &quot;Boolean&quot;,
                      &quot;desc&quot;: &quot;&#x51FA;&#x529B;&#x3092;&#x89AA;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002; (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false`)&quot;
                    }
                  ],
                  &quot;name&quot;: &quot;settings&quot;,
                  &quot;type&quot;: &quot;Object&quot;,
                  &quot;optional&quot;: true
                }
              ]
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;settings&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ],
          &quot;desc&quot;: &quot;<!--\n`setupMaster` is used to change the default 'fork' behavior. Once called,\nthe settings will be present in `cluster.settings`.\n-->\n\n<p><code>setupMaster()</code> &#x306F; &apos;fork&apos; &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x52D5;&#x4F5C;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x5EA6;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x305D;&#x306E;&#x8A2D;&#x5B9A;&#x306F; <code>cluster.settings</code> &#x306B;&#x53CD;&#x6620;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that:\n-->\n\n<p>&#x6CE8;&#x610F;&#x4E8B;&#x9805;:\n\n</p>\n<!--\n* Only the first call to `.setupMaster()` has any effect, subsequent calls are\n  ignored\n* That because of the above, the *only* attribute of a worker that may be\n  customized per-worker is the `env` passed to `.fork()`\n* `.fork()` calls `.setupMaster()` internally to establish the defaults, so to\n  have any effect, `.setupMaster()` must be called *before* any calls to\n  `.fork()`\n-->\n\n<ul>\n<li><code>.setupMaster()</code> &#x306E;&#x6700;&#x521D;&#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3060;&#x3051;&#x52B9;&#x679C;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x5F8C;&#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n<li>&#x4E0A;&#x8A18;&#x306E;&#x305F;&#x3081;&#x3001;&#x30EF;&#x30FC;&#x30AB;&#x3054;&#x3068;&#x306B;&#x30AB;&#x30B9;&#x30BF;&#x30DE;&#x30A4;&#x30BA;&#x3067;&#x304D;&#x308B;&#x5C5E;&#x6027;&#x306F; <code>.fork()</code> &#x306B;&#x6E21;&#x3059;&#x3053;&#x3068;&#x306E;&#x3067;&#x304D;&#x308B;\n<code>env</code> <em>&#x3060;&#x3051;</em> &#x3067;&#x3059;&#x3002;</li>\n<li><code>.fork()</code> &#x306F;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x5024;&#x3092;&#x53CD;&#x6620;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x5185;&#x90E8;&#x3067; <code>.setupMaster()</code>\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x305F;&#x3081;&#x3001;<code>.setupMaster()</code> &#x304C;&#x52B9;&#x679C;&#x3092;&#x6301;&#x3064;&#x306B;&#x306F; <code>.fork()</code> &#x3088;&#x308A;&#x3082;&#x524D;&#x306B;\n&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var cluster = require(&quot;cluster&quot;);\ncluster.setupMaster({\n  exec : &quot;worker.js&quot;,\n  args : [&quot;--use&quot;, &quot;https&quot;],\n  silent : true\n});\ncluster.fork();</code></pre>\n<!--\nThis can only be called from the master process.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30DE;&#x30B9;&#x30BF;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304B;&#x3089;&#x306E;&#x307F;&#x3001;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;cluster.fork([env])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;fork&quot;,
          &quot;desc&quot;: &quot;<!--\n* `env` {Object} Key/value pairs to add to worker process environment.\n* return {Worker object}\n-->\n\n<ul>\n<li><code>env</code> {Object} &#x30EF;&#x30FC;&#x30AB;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306E;&#x74B0;&#x5883;&#x306B;&#x52A0;&#x3048;&#x3089;&#x308C;&#x308B;&#x30AD;&#x30FC;&#x3068;&#x5024;&#x306E;&#x30DA;&#x30A2;&#x3002;</li>\n<li>return {Worker object}</li>\n</ul>\n<!--\nSpawn a new worker process.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30EF;&#x30FC;&#x30AB;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x8D77;&#x52D5;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis can only be called from the master process.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30DE;&#x30B9;&#x30BF;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304B;&#x3089;&#x306E;&#x307F;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;env&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;cluster.disconnect([callback])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;disconnect&quot;,
          &quot;desc&quot;: &quot;<!--\n* `callback` {Function} called when all workers are disconnected and handles are\n  closed\n-->\n\n<ul>\n<li><code>callback</code> {Function} &#x5168;&#x3066;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x5207;&#x65AD;&#x3057;&#x3001;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x308B;&#x3068;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nCalls `.disconnect()` on each worker in `cluster.workers`.\n-->\n\n<p><code>cluster.workers</code> &#x5185;&#x306E;&#x5404;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x5BFE;&#x3057;&#x3066; <code>.disconnect()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nWhen they are disconnected all internal handles will be closed, allowing the\nmaster process to die gracefully if no other event is waiting.\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x3068;&#x306E;&#x63A5;&#x7D9A;&#x304C;&#x5207;&#x65AD;&#x3057;&#x3066;&#x5185;&#x90E8;&#x7684;&#x306A;&#x30CF;&#x30F3;&#x30C9;&#x30EB;&#x304C;&#x5168;&#x3066;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;\n&#x4ED6;&#x306B;&#x5F85;&#x6A5F;&#x3057;&#x3066;&#x3044;&#x308B;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x30DE;&#x30B9;&#x30BF;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306F;&#x81EA;&#x7136;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe method takes an optional callback argument which will be called when finished.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x5F15;&#x6570;&#x3068;&#x3057;&#x3066;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis can only be called from the master process.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30DE;&#x30B9;&#x30BF;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304B;&#x3089;&#x306E;&#x307F;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;callback&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ],
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: Worker&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Worker&quot;,
          &quot;desc&quot;: &quot;<!--\nA Worker object contains all public information and method about a worker.\nIn the master it can be obtained using `cluster.workers`. In a worker\nit can be obtained using `cluster.worker`.\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x95A2;&#x3059;&#x308B;&#x5168;&#x3066;&#x306E;&#x516C;&#x958B;&#x3055;&#x308C;&#x305F;&#x60C5;&#x5831;&#x3084;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x6301;&#x3064;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x3059;&#x3002;\n&#x30DE;&#x30B9;&#x30BF;&#x3067;&#x306F; <code>cluster.wrokers</code> &#x304B;&#x3089;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x306F; <code>cluster.worker</code> &#x304B;&#x3089;&#x53D6;&#x5F97;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;`id` {String} &quot;,
              &quot;name&quot;: &quot;id&quot;,
              &quot;desc&quot;: &quot;<!--\nEach new worker is given its own unique id, this id is stored in the\n`id`.\n\nWhile a worker is alive, this is the key that indexes it in\ncluster.workers\n-->\n\n<p>&#x65B0;&#x3057;&#x3044;&#x30EF;&#x30FC;&#x30AB;&#x306F;&#x3044;&#x305A;&#x308C;&#x3082;&#x30E6;&#x30CB;&#x30FC;&#x30AF;&#x306A; ID &#x3092;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E; ID &#x306F; <code>id</code> &#x306B;&#x4FDD;&#x5B58;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x751F;&#x304D;&#x3066;&#x3044;&#x308B;&#x9593;&#x3001;&#x3053;&#x308C;&#x306F; <code>cluseter.workers</code> &#x306E;&#x30AD;&#x30FC;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`process` {ChildProcess object} &quot;,
              &quot;name&quot;: &quot;process&quot;,
              &quot;desc&quot;: &quot;<!--\nAll workers are created using `child_process.fork()`, the returned object\nfrom this function is stored as `.process`. In a worker, the global `process`\nis stored.\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x306F; <code>child_process.fork()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x623B;&#x308A;&#x5024;&#x306F; <code>.process</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x306F;&#x3001;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x306E; <code>process</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nSee: [Child Process module](\nchild_process.html#child_process_child_process_fork_modulepath_args_options)\n-->\n\n<p>&#x53C2;&#x7167;: <a href="\&quot;child_process.html#child_process_child_process_fork_modulepath_args_options\&quot;">Child Process module</a>\n\n</p>\n<!--\nNote that workers will call `process.exit(0)` if the `'disconnect'` event occurs\non `process` and `.suicide` is not `true`. This protects against accidental\ndisconnection.\n-->\n\n<p><code>process</code> &#x3067; <code>&apos;disconnect&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x308B;&#x3068;&#x30EF;&#x30FC;&#x30AB;&#x304C; <code>process.exit(0)</code>\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3001;<code>.suicide</code> &#x304C; <code>true</code> &#x306B;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x5076;&#x767A;&#x7684;&#x306A;&#x5207;&#x65AD;&#x3092;&#x9632;&#x304E;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`suicide` {Boolean} &quot;,
              &quot;name&quot;: &quot;suicide&quot;,
              &quot;desc&quot;: &quot;<!--\nSet by calling `.kill()` or `.disconnect()`, until then it is `undefined`.\n-->\n\n<p><code>.kill()</code> &#x307E;&#x305F;&#x306F; <code>.disconnect()</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x307E;&#x3067;&#x306F; <code>undefined</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe boolean `worker.suicide` lets you distinguish between voluntary and accidental\nexit, the master may choose not to respawn a worker based on this value.\n-->\n\n<p>&#x771F;&#x507D;&#x5024;&#x306E; <code>worker.suicide</code> &#x306F;&#x3001;&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x81EA;&#x767A;&#x7684;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x306E;&#x304B;&#x5076;&#x767A;&#x7684;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x306E;&#x304B;&#x3092;\n&#x533A;&#x5225;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30DE;&#x30B9;&#x30BF;&#x306F;&#x3053;&#x306E;&#x5024;&#x306B;&#x57FA;&#x3065;&#x3044;&#x3066;&#x3001;&#x30EF;&#x30FC;&#x30AB;&#x3092;&#x518D;&#x8D77;&#x52D5;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x3092;&#x9078;&#x3076;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>cluster.on(&apos;exit&apos;, function(worker, code, signal) {\n  if (worker.suicide === true) {\n    console.log(&apos;Oh, it was just suicide\\&apos; &#x2013; no need to worry&apos;).\n  }\n});\n\n// kill worker\nworker.kill();</code></pre>\n&quot;
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;worker.send(message, [sendHandle])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;send&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`message` {Object} &quot;,
                      &quot;name&quot;: &quot;message&quot;,
                      &quot;type&quot;: &quot;Object&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`sendHandle` {Handle object} &quot;,
                      &quot;name&quot;: &quot;sendHandle&quot;,
                      &quot;type&quot;: &quot;Handle object&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;message&quot;
                    },
                    {
                      &quot;name&quot;: &quot;sendHandle&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nThis function is equal to the send methods provided by\n`child_process.fork()`.  In the master you should use this function to\nsend a message to a specific worker.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; <code>child_process.fork()</code> &#x304C;&#x8FD4;&#x3059;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E; <code>send()</code>\n&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n&#x30DE;&#x30B9;&#x30BF;&#x306F;&#x7279;&#x5B9A;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x9001;&#x4FE1;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;\n&#x4F7F;&#x7528;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn a worker you can also use `process.send(message)`, it is the same function.\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x306F; <code>process.send(message)</code> &#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x540C;&#x3058;&#x95A2;&#x6570;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThis example will echo back all messages from the master:\n-->\n\n<p>&#x3053;&#x306E;&#x4F8B;&#x306F;&#x30DE;&#x30B9;&#x30BF;&#x304B;&#x3089;&#x306E;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x30A8;&#x30B3;&#x30FC;&#x30D0;&#x30C3;&#x30AF;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>if (cluster.isMaster) {\n  var worker = cluster.fork();\n  worker.send(&apos;hi there&apos;);\n\n} else if (cluster.isWorker) {\n  process.on(&apos;message&apos;, function(msg) {\n    process.send(msg);\n  });\n}</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;worker.kill([signal=&apos;SIGTERM&apos;])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;kill&quot;,
              &quot;desc&quot;: &quot;<!--\n* `signal` {String} Name of the kill signal to send to the worker\n  process.\n-->\n\n<ul>\n<li><code>signal</code> {String} &#x30EF;&#x30FC;&#x30AB;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x306B;&#x9001;&#x3089;&#x308C;&#x308B;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x540D;&#x524D;&#x3067;&#x3059;&#x3002;</li>\n</ul>\n<!--\nThis function will kill the worker. In the master, it does this by disconnecting\nthe `worker.process`, and once disconnected, killing with `signal`. In the\nworker, it does it by disconnecting the channel, and then exiting with code `0`.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x30EF;&#x30FC;&#x30AB;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30DE;&#x30B9;&#x30BF;&#x3067;&#x306F;&#x3001;&#x3053;&#x308C;&#x306F; <code>worker.process</code> &#x3068;&#x5207;&#x65AD;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x884C;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3057;&#x3066;&#x5207;&#x65AD;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;<code>signal</code> &#x306B;&#x3088;&#x3063;&#x3066;&#x30EF;&#x30FC;&#x30AB;&#x3092;&#x6BBA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x306F;&#x3001;&#x3053;&#x308C;&#x306F;&#x30C1;&#x30E3;&#x30CD;&#x30EB;&#x306E;&#x5207;&#x65AD;&#x306B;&#x3088;&#x3063;&#x3066;&#x884C;&#x308F;&#x308C;&#x3001;&#x30B3;&#x30FC;&#x30C9; <code>0</code> &#x3067;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCauses `.suicide` to be set.\n-->\n\n<p><code>.suicide</code> &#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method is aliased as `worker.destroy()` for backwards compatibility.\n-->\n\n<p>&#x5F8C;&#x65B9;&#x4E92;&#x63DB;&#x6027;&#x306E;&#x305F;&#x3081;&#x3001;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306B;&#x306F; <code>worker.destroy()</code> &#x3068;&#x3044;&#x3046;&#x5225;&#x540D;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that in a worker, `process.kill()` exists, but it is not this function,\nit is [kill](process.html#process_process_kill_pid_signal).\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x306F;&#x3001;<code>process.kill()</code> &#x306F;&#x5B58;&#x5728;&#x3059;&#x308B;&#x3082;&#x306E;&#x306E;&#x3001;&#x305D;&#x308C;&#x306F;&#x95A2;&#x6570;&#x3067;&#x306F;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n<a href="\&quot;process.html#process_process_kill_pid_signal\&quot;">kill</a> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;signal&quot;,
                      &quot;optional&quot;: true,
                      &quot;default&quot;: &quot;&apos;SIGTERM&apos;&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;worker.disconnect()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;disconnect&quot;,
              &quot;desc&quot;: &quot;<!--\nIn a worker, this function will close all servers, wait for the 'close' event on\nthose servers, and then disconnect the IPC channel.\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x306F;&#x3001;&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x5168;&#x3066;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x3092;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x3001;&#x305D;&#x308C;&#x3089;&#x306E;&#x30B5;&#x30FC;&#x30D0;&#x306E; <code>&apos;close&apos;</code>\n&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x5F85;&#x6A5F;&#x3057;&#x3001;&#x305D;&#x3057;&#x3066; IPC &#x30C1;&#x30E3;&#x30CD;&#x30EB;&#x3092;&#x5207;&#x65AD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn the master, an internal message is sent to the worker causing it to call\n`.disconnect()` on itself.\n-->\n\n<p>&#x30DE;&#x30B9;&#x30BF;&#x3067;&#x306F;&#x3001;&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x81EA;&#x5206;&#x306E; <code>.disconnect()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306B;&#x306A;&#x308B;&#x5185;&#x90E8;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;\n&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x9001;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCauses `.suicide` to be set.\n-->\n\n<p><code>.suicide</code> &#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that after a server is closed, it will no longer accept new connections,\nbut connections may be accepted by any other listening worker. Existing\nconnections will be allowed to close as usual. When no more connections exist,\nsee [server.close()](net.html#net_event_close), the IPC channel to the worker\nwill close allowing it to die gracefully.\n-->\n\n<p>&#x30B5;&#x30FC;&#x30D0;&#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3057;&#x305F;&#x5F8C;&#x3001;&#x305D;&#x308C;&#x306F;&#x3082;&#x3046;&#x65B0;&#x305F;&#x306A;&#x63A5;&#x7D9A;&#x3092;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x4ED6;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x3088;&#x3063;&#x3066;&#x63A5;&#x7D9A;&#x306F;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x65E2;&#x5B58;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x901A;&#x5E38;&#x901A;&#x308A;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x7121;&#x304F;&#x306A;&#x308B;&#x3068; (<a href="\&quot;net.html#net_event_close\&quot;">server.close()</a> &#x53C2;&#x7167;)&#x3001;\n&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x81EA;&#x7136;&#x306B;&#x7D42;&#x4E86;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B; IPC &#x30C1;&#x30E3;&#x30CD;&#x30EB;&#x306F;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe above applies *only* to server connections, client connections are not\nautomatically closed by workers, and disconnect does not wait for them to close\nbefore exiting.\n-->\n\n<p>&#x4E0A;&#x8A18;&#x306F;&#x30B5;&#x30FC;&#x30D0;&#x5074;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x306E;&#x307F;&#x9069;&#x7528;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x5074;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x3088;&#x3063;&#x3066;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x306A;&#x304F;&#x3001;\n&#x7D42;&#x4E86;&#x3059;&#x308B;&#x524D;&#x306B;&#x305D;&#x308C;&#x3089;&#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x5F85;&#x3064;&#x3053;&#x3068;&#x3082;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nNote that in a worker, `process.disconnect` exists, but it is not this function,\nit is [disconnect](child_process.html#child_process_child_disconnect).\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x306F;&#x3001;<code>process.disconnect</code> &#x306F;&#x5B58;&#x5728;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;&#x305D;&#x308C;&#x306F;&#x3053;&#x3053;&#x3067;&#x8AAC;&#x660E;&#x3057;&#x305F;&#x95A2;&#x6570;&#x3067;&#x306F;\n&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;&#x305D;&#x308C;&#x306F;\n<a href="\&quot;child_process.html#child_process_child_disconnect\&quot;">disconnect</a> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nBecause long living server connections may block workers from disconnecting, it\nmay be useful to send a message, so application specific actions may be taken to\nclose them. It also may be useful to implement a timeout, killing a worker if\nthe `disconnect` event has not been emitted after some time.\n-->\n\n<p>&#x9577;&#x6642;&#x9593;&#x751F;&#x304D;&#x3066;&#x3044;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x5074;&#x306E;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x30EF;&#x30FC;&#x30AB;&#x304C;&#x5207;&#x65AD;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x59A8;&#x3052;&#x308B;&#x305F;&#x3081;&#x3001;\n&#x305D;&#x308C;&#x3089;&#x3092;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x56FA;&#x6709;&#x306E;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x3092;&#x9001;&#x308B;&#x3053;&#x3068;&#x306F;&#x6709;&#x7528;&#x3067;&#x3059;&#x3002;\n&#x52A0;&#x3048;&#x3066;&#x3001;&#x4E00;&#x5B9A;&#x306E;&#x6642;&#x9593;&#x304C;&#x7D4C;&#x904E;&#x3057;&#x3066;&#x3082; <code>&apos;disconnect&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x767A;&#x751F;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;\n&#x30EF;&#x30FC;&#x30AB;&#x3092;&#x5F37;&#x5236;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x5B9F;&#x88C5;&#x3082;&#x6709;&#x7528;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>if (cluster.isMaster) {\n  var worker = cluster.fork();\n  var timeout;\n\n  worker.on(&apos;listening&apos;, function(address) {\n    worker.send(&apos;shutdown&apos;);\n    worker.disconnect();\n    timeout = setTimeout(function() {\n      worker.kill();\n    }, 2000);\n  });\n\n  worker.on(&apos;disconnect&apos;, function() {\n    clearTimeout(timeout);\n  });\n\n} else if (cluster.isWorker) {\n  var net = require(&apos;net&apos;);\n  var server = net.createServer(function(socket) {\n    // connections never end\n  });\n\n  server.listen(8000);\n\n  process.on(&apos;message&apos;, function(msg) {\n    if(msg === &apos;shutdown&apos;) {\n      // initiate graceful close of any connections to server\n    }\n  });\n}</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            }
          ],
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;message&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;message&quot;,
              &quot;params&quot;: [],
              &quot;desc&quot;: &quot;<!--\nThis event is the same as the one provided by `child_process.fork()`.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F; <code>child_process.fork()</code> &#x304C;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x3082;&#x306E;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIn a worker you can also use `process.on('message')`.\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x306F;&#x3001;<code>process.on(&apos;message&apos;)</code> &#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAs an example, here is a cluster that keeps count of the number of requests\nin the master process using the message system:\n-->\n\n<p>&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x30AF;&#x30E9;&#x30B9;&#x30BF;&#x5168;&#x4F53;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x6570;&#x3092;\n&#x30DE;&#x30B9;&#x30BF;&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3067;&#x4FDD;&#x6301;&#x3059;&#x308B;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code>var cluster = require(&apos;cluster&apos;);\nvar http = require(&apos;http&apos;);\n\nif (cluster.isMaster) {\n\n  // Keep track of http requests\n  var numReqs = 0;\n  setInterval(function() {\n    console.log(&quot;numReqs =&quot;, numReqs);\n  }, 1000);\n\n  // Count requestes\n  function messageHandler(msg) {\n    if (msg.cmd &amp;&amp; msg.cmd == &apos;notifyRequest&apos;) {\n      numReqs += 1;\n    }\n  }\n\n  // Start workers and listen for messages containing notifyRequest\n  var numCPUs = require(&apos;os&apos;).cpus().length;\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  Object.keys(cluster.workers).forEach(function(id) {\n    cluster.workers[id].on(&apos;message&apos;, messageHandler);\n  });\n\n} else {\n\n  // Worker processes have a http server.\n  http.Server(function(req, res) {\n    res.writeHead(200);\n    res.end(&quot;hello world\\n&quot;);\n\n    // notify master about the request\n    process.send({ cmd: &apos;notifyRequest&apos; });\n  }).listen(8000);\n}</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;online&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;online&quot;,
              &quot;desc&quot;: &quot;<!--\nSimilar to the `cluster.on('online')` event, but specific to this worker.\n-->\n\n<p><code>cluster.on(&apos;online&apos;)</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;&#x3053;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x7279;&#x5316;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>cluster.fork().on(&apos;online&apos;, function() {\n  // Worker is online\n});</code></pre>\n<!--\nIt is not emitted in the worker.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;listening&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;listening&quot;,
              &quot;params&quot;: [],
              &quot;desc&quot;: &quot;<!--\nSimilar to the `cluster.on('listening')` event, but specific to this worker.\n-->\n\n<p><code>cluster.on(&apos;listening&apos;)</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;&#x3053;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x7279;&#x5316;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>cluster.fork().on(&apos;listening&apos;, function(address) {\n  // Worker is listening\n});</code></pre>\n<!--\nIt is not emitted in the worker.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x306F;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;disconnect&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;disconnect&quot;,
              &quot;desc&quot;: &quot;<!--\nSimilar to the `cluster.on('disconnect')` event, but specfic to this worker.\n-->\n\n<p><code>cluster.on(&apos;disconnect&apos;)</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;&#x3053;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x7279;&#x5316;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>cluster.fork().on(&apos;disconnect&apos;, function() {\n  // Worker has disconnected\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;exit&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;exit&quot;,
              &quot;desc&quot;: &quot;<!--\n* `code` {Number} the exit code, if it exited normally.\n* `signal` {String} the name of the signal (eg. `'SIGHUP'`) that caused\n  the process to be killed.\n-->\n\n<ul>\n<li><code>code</code> {Number} &#x6B63;&#x5E38;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x7D42;&#x4E86;&#x30B3;&#x30FC;&#x30C9;&#x3002;</li>\n<li><code>signal</code> {String} &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x6BBA;&#x3055;&#x308C;&#x308B;&#x539F;&#x56E0;&#x3068;&#x306A;&#x3063;&#x305F;&#x30B7;&#x30B0;&#x30CA;&#x30EB;&#x306E;&#x540D;&#x524D;\n(&#x4F8B;: <code>&apos;SIGHUP&apos;</code>)&#x3002;</li>\n</ul>\n<!--\nSimilar to the `cluster.on('exit')` event, but specific to this worker.\n-->\n\n<p><code>cluster.on(&apos;exit&apos;)</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;&#x3053;&#x306E;&#x30EF;&#x30FC;&#x30AB;&#x306B;&#x7279;&#x5316;&#x3057;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var worker = cluster.fork();\nworker.on(&apos;exit&apos;, function(code, signal) {\n  if( signal ) {\n    console.log(&quot;worker was killed by signal: &quot;+signal);\n  } else if( code !== 0 ) {\n    console.log(&quot;worker exited with error code: &quot;+code);\n  } else {\n    console.log(&quot;worker success!&quot;);\n  }\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;desc&quot;: &quot;<!--\nThis event is the same as the one provided by `child_process.fork()`.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F; <code>child_process.fork()</code> &#x304C;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x3082;&#x306E;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIn a worker you can also use `process.on('error')`.\n-->\n\n<p>&#x30EF;&#x30FC;&#x30AB;&#x3067;&#x306F; <code>process.on(&apos;error&apos;)</code> &#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Cluster&quot;
    }
  ],
  &quot;stability&quot;: 3,
  &quot;stabilityText&quot;: &quot;Stable&quot;
}
