{
  &quot;source&quot;: &quot;doc/api/buffer.markdown&quot;,
  &quot;modules&quot;: [
    {
      &quot;textRaw&quot;: &quot;Buffer&quot;,
      &quot;name&quot;: &quot;buffer&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nPure JavaScript is Unicode friendly but not nice to binary data.  When\ndealing with TCP streams or the file system, it's necessary to handle octet\nstreams. Node has several strategies for manipulating, creating, and\nconsuming octet streams.\n-->\n\n<p>&#x7D14;&#x7C8B;&#x306A; JavaScript &#x306F; Unicode &#x3068;&#x76F8;&#x6027;&#x304C;&#x3044;&#x3044;&#x3082;&#x306E;&#x306E;&#x3001;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x6271;&#x3044;&#x306F;&#x3046;&#x307E;&#x304F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\nTCP &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3084;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x3092;&#x6271;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x51E6;&#x7406;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\nNode &#x306B;&#x306F;&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x64CD;&#x4F5C;&#x3001;&#x4F5C;&#x6210;&#x3001;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x6226;&#x7565;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nRaw data is stored in instances of the `Buffer` class. A `Buffer` is similar\nto an array of integers but corresponds to a raw memory allocation outside\nthe V8 heap. A `Buffer` cannot be resized.\n-->\n\n<p>&#x751F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x306F; <code>Buffer</code> &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306B;&#x4FDD;&#x5B58;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>Buffer</code> &#x306F;&#x6574;&#x6570;&#x306E;&#x914D;&#x5217;&#x3068;&#x4F3C;&#x3066;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;\nV8 &#x30D2;&#x30FC;&#x30D7;&#x306E;&#x5916;&#x90E8;&#x306B;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x305F;&#x751F;&#x306E;&#x30E1;&#x30E2;&#x30EA;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>Buffer</code> &#x306E;&#x30B5;&#x30A4;&#x30BA;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThe `Buffer` class is a global, making it very rare that one would need\nto ever `require('buffer')`.\n-->\n\n<p><code>Buffer</code> &#x30AF;&#x30E9;&#x30B9;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x306A;&#x306E;&#x3067;&#x3001;<code>require(&apos;buffer&apos;)</code> &#x304C;&#x5FC5;&#x8981;&#x306B;&#x306A;&#x308B;&#x3053;&#x3068;&#x306F;\n&#x307B;&#x3068;&#x3093;&#x3069;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nConverting between Buffers and JavaScript string objects requires an explicit\nencoding method.  Here are the different string encodings.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092; JavaScript &#x6587;&#x5B57;&#x5217;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x306E;&#x9593;&#x3067;&#x5909;&#x63DB;&#x3059;&#x308B;&#x306B;&#x306F;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x3092;&#x660E;&#x793A;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* `'ascii'` - for 7 bit ASCII data only.  This encoding method is very fast, and\n  will strip the high bit if set.\n\n  Note that when converting from string to buffer, this encoding converts a null\n  character (`'\\0'` or `'\\u0000'`) into `0x20` (character code of a space). If\n  you want to convert a null character into `0x00`, you should use `'utf8'`.\n\n* `'utf8'` - Multibyte encoded Unicode characters. Many web pages and other\n  document formats use UTF-8.\n\n* `'utf16le'` - 2 or 4 bytes, little endian encoded Unicode characters.\n  Surrogate pairs (U+10000 to U+10FFFF) are supported.\n\n* `'ucs2'` - Alias of `'utf16le'`.\n\n* `'base64'` - Base64 string encoding.\n\n* `'binary'` - A way of encoding raw binary data into strings by using only\n  the first 8 bits of each character. This encoding method is deprecated and\n  should be avoided in favor of `Buffer` objects where possible. This encoding\n  will be removed in future versions of Node.\n\n* `'hex'` - Encode each byte as two hexadecimal characters.\n-->\n\n<ul>\n<li><p><code>&apos;ascii&apos;</code> - 7bit &#x306E; ASCII &#x30C7;&#x30FC;&#x30BF;&#x5C02;&#x7528;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x306F;&#x3068;&#x3066;&#x3082;&#x9AD8;&#x901F;&#x3067;&#x3001;\n&#x3082;&#x3057;&#x4E0A;&#x4F4D;&#x30D3;&#x30C3;&#x30C8;&#x304C;&#x30BB;&#x30C3;&#x30C8;&#x3055;&#x308C;&#x3066;&#x3044;&#x308C;&#x3070;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6587;&#x5B57;&#x5217;&#x304B;&#x3089;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3078;&#x306E;&#x5909;&#x63DB;&#x6642;&#x3001;&#x3053;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F; null &#x6587;&#x5B57;\n(<code>&apos;\\0&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;\\u0000&apos;</code>) &#x3092; <code>0x20</code> (&#x30B9;&#x30DA;&#x30FC;&#x30B9;&#x306E;&#x6587;&#x5B57;&#x30B3;&#x30FC;&#x30C9;)\n&#x306B;&#x5909;&#x63DB;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\nnull &#x6587;&#x5B57;&#x3092; 0x00 &#x306B;&#x5909;&#x63DB;&#x3057;&#x305F;&#x3044;&#x5834;&#x5408;&#x306F; <code>&apos;utf8&apos;</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</p>\n</li>\n<li><p><code>&apos;utf8&apos;</code> - &#x53EF;&#x5909;&#x9577;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x5358;&#x4F4D;&#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;Unicode&#x6587;&#x5B57;&#x3002;\n&#x591A;&#x304F;&#x306E;Web&#x30DA;&#x30FC;&#x30B8;&#x3084;&#x305D;&#x306E;&#x4ED6;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x306F; UTF-8 &#x3092;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>&apos;utf16le&apos;</code> - 2 &#x307E;&#x305F;&#x306F; 4 &#x30D0;&#x30A4;&#x30C8;&#x306E;&#x30EA;&#x30C8;&#x30EB;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;\nUnicode &#x6587;&#x5B57;&#x3002;\n&#x30B5;&#x30ED;&#x30B2;&#x30FC;&#x30C8;&#x30DA;&#x30A2; (U+10000&#xFF5E;U+10FFFF) &#x3082;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>&apos;ucs2&apos;</code> - <code>&apos;utf16le&apos;</code> &#x306E;&#x5225;&#x540D;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>&apos;base64&apos;</code> - Base64 &#x6587;&#x5B57;&#x5217;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;.</p>\n</li>\n<li><p><code>&apos;binary&apos;</code> - &#x751F;&#x306E;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5404;&#x6587;&#x5B57;&#x306E;&#x6700;&#x521D;&#x306E; 8bit &#x3068;&#x3057;&#x3066;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x3002;\n&#x3053;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x306F;&#x3082;&#x306F;&#x3084;&#x4FA1;&#x5024;&#x304C;&#x306A;&#x304F;&#x3001;<code>Buffer</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x306F;&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306F;&#x3001;Node &#x306E;&#x5C06;&#x6765;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x3067;&#x524A;&#x9664;&#x3055;&#x308C;&#x308B;&#x4E88;&#x5B9A;&#x3067;&#x3059;&#x3002;</p>\n</li>\n<li><p><code>&apos;hex&apos;</code> - &#x5404;&#x30D0;&#x30A4;&#x30C8;&#x3092; 2 &#x6841;&#x306E;16&#x9032;&#x6570;&#x6587;&#x5B57;&#x5217;&#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3057;&#x307E;&#x3059;&#x3002;</p>\n</li>\n</ul>\n<!--\nA `Buffer` object can also be used with typed arrays.  The buffer object is\ncloned to an `ArrayBuffer` that is used as the backing store for the typed\narray.  The memory of the buffer and the `ArrayBuffer` is not shared.\n-->\n\n<p><code>Buffer</code> &#x306F; Typed Array &#x3068;&#x3057;&#x3066;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x3001;Typed Array &#x306E;&#x30D0;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x30B9;&#x30C8;&#x30A2;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x308F;&#x308C;&#x308B;\n<code>ArrayBuffer</code> &#x304B;&#x3089;&#x8907;&#x88FD;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3068; <code>Typed Array</code> &#x306F;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x5171;&#x6709;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nNOTE: Node.js v0.8 simply retained a reference to the buffer in `array.buffer`\ninstead of cloning it.\n-->\n\n<p>Node.js &#x306E; v0.8 &#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x8907;&#x88FD;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;&#x5358;&#x7D14;&#x306B; <code>array.buffer</code>\n&#x306B;&#x53C2;&#x7167;&#x3092;&#x7DAD;&#x6301;&#x3057;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n\n</p>\n<!--\nWhile more efficient, it introduces subtle incompatibilities with the typed\narrays specification.  `ArrayBuffer#slice()` makes a copy of the slice while\n`Buffer#slice()` creates a view.\n-->\n\n<p>&#x305D;&#x308C;&#x306F;&#x52B9;&#x7387;&#x7684;&#x3067;&#x306F;&#x3042;&#x3063;&#x305F;&#x3082;&#x306E;&#x306E;&#x3001;Typed Array &#x3068;&#x306E;&#x5FAE;&#x5999;&#x306A;&#x975E;&#x4E92;&#x63DB;&#x6027;&#x3092;&#x3082;&#x305F;&#x3089;&#x3057;&#x307E;&#x3057;&#x305F;&#x3002;\n<code>ArrayBuffer#slice()</code> &#x306F;&#x30B9;&#x30E9;&#x30A4;&#x30B9;&#x306E;&#x30B3;&#x30D4;&#x30FC;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;&#x4E00;&#x65B9;&#x3001;\n<code>Buffer#slice()</code> &#x306F;&#x30D3;&#x30E5;&#x30FC;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: Buffer&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;Buffer&quot;,
          &quot;desc&quot;: &quot;<!--\nThe Buffer class is a global type for dealing with binary data directly.\nIt can be constructed in a variety of ways.\n-->\n\n<p>Buffer &#x30AF;&#x30E9;&#x30B9;&#x306F;&#x30D0;&#x30A4;&#x30CA;&#x30EA;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x76F4;&#x63A5;&#x6271;&#x3046;&#x305F;&#x3081;&#x306E;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x306A;&#x578B;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x69D8;&#x3005;&#x306A;&#x65B9;&#x6CD5;&#x3067;&#x69CB;&#x7BC9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;classMethods&quot;: [
            {
              &quot;textRaw&quot;: &quot;Class Method: Buffer.isEncoding(encoding)&quot;,
              &quot;type&quot;: &quot;classMethod&quot;,
              &quot;name&quot;: &quot;isEncoding&quot;,
              &quot;desc&quot;: &quot;<!--\n* `encoding` {String} The encoding string to test\n-->\n\n<ul>\n<li><code>encoding</code> {String} &#x691C;&#x8A3C;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x540D;</li>\n</ul>\n<!--\nReturns true if the `encoding` is a valid encoding argument, or false\notherwise.\n-->\n\n<p><code>encoding</code> &#x304C;&#x6B63;&#x3057;&#x3051;&#x308C;&#x3070; <code>true</code>&#x3001;&#x305D;&#x308C;&#x4EE5;&#x5916;&#x306F; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class Method: Buffer.isBuffer(obj)&quot;,
              &quot;type&quot;: &quot;classMethod&quot;,
              &quot;name&quot;: &quot;isBuffer&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Boolean &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Boolean&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`obj` Object &quot;,
                      &quot;name&quot;: &quot;obj&quot;,
                      &quot;desc&quot;: &quot;Object&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;obj&quot;
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nTests if `obj` is a `Buffer`.\n-->\n\n<p><code>obj</code> &#x304C; <code>Buffer</code> &#x304B;&#x3069;&#x3046;&#x304B;&#x30C6;&#x30B9;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Class Method: Buffer.byteLength(string, [encoding])&quot;,
              &quot;type&quot;: &quot;classMethod&quot;,
              &quot;name&quot;: &quot;byteLength&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`string` String &quot;,
                      &quot;name&quot;: &quot;string&quot;,
                      &quot;desc&quot;: &quot;String&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`encoding` String, Optional, Default: &apos;utf8&apos; &quot;,
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;desc&quot;: &quot;String, Optional, Default: &apos;utf8&apos;&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;string&quot;
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nGives the actual byte length of a string. `encoding` defaults to `'utf8'`.\nThis is not the same as `String.prototype.length` since that returns the\nnumber of *characters* in a string.\n-->\n\n<p>&#x6587;&#x5B57;&#x5217;&#x306E;&#x5B9F;&#x969B;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;<code>encoding</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;utf8&apos;</code> &#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x6587;&#x5B57;&#x5217;&#x306E;<em>&#x6587;&#x5B57;</em>&#x6570;&#x3092;&#x8FD4;&#x3059; <code>String.prototype.length</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>str = &apos;\\u00bd + \\u00bc = \\u00be&apos;;\n\nconsole.log(str + &quot;: &quot; + str.length + &quot; characters, &quot; +\n  Buffer.byteLength(str, &apos;utf8&apos;) + &quot; bytes&quot;);\n\n// &#xBD; + &#xBC; = &#xBE;: 9 characters, 12 bytes</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Class Method: Buffer.concat(list, [totalLength])&quot;,
              &quot;type&quot;: &quot;classMethod&quot;,
              &quot;name&quot;: &quot;concat&quot;,
              &quot;desc&quot;: &quot;<!--\n* `list` {Array} List of Buffer objects to concat\n* `totalLength` {Number} Total length of the buffers when concatenated\n-->\n\n<ul>\n<li><code>list</code> {Array} &#x7D50;&#x5408;&#x3059;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x30EA;&#x30B9;&#x30C8;</li>\n<li><code>totalLength</code> {Number} &#x7D50;&#x5408;&#x3055;&#x308C;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x5168;&#x4F53;&#x306E;&#x9577;&#x3055;</li>\n</ul>\n<!--\nReturns a buffer which is the result of concatenating all the buffers in\nthe list together.\n-->\n\n<p>&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x542B;&#x307E;&#x308C;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x5168;&#x4F53;&#x3092;&#x7D50;&#x5408;&#x3057;&#x305F;&#x7D50;&#x679C;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the list has no items, or if the totalLength is 0, then it returns a\nzero-length buffer.\n-->\n\n<p>&#x30EA;&#x30B9;&#x30C8;&#x304C;&#x7A7A;&#x306E;&#x5834;&#x5408;&#x3001;&#x307E;&#x305F;&#x306F; <code>totalLength</code> &#x304C; 0 &#x306E;&#x5834;&#x5408;&#x306F;&#x9577;&#x3055;&#x304C;\n0 &#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the list has exactly one item, then the first item of the list is\nreturned.\n-->\n\n<p>&#x30EA;&#x30B9;&#x30C8;&#x304C;&#x4E00;&#x3064;&#x3060;&#x3051;&#x306E;&#x8981;&#x7D20;&#x3092;&#x6301;&#x3064;&#x5834;&#x5408;&#x3001;&#x30EA;&#x30B9;&#x30C8;&#x306E;&#x5148;&#x982D;&#x8981;&#x7D20;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the list has more than one item, then a new Buffer is created.\n-->\n\n<p>&#x30EA;&#x30B9;&#x30C8;&#x304C;&#x8907;&#x6570;&#x306E;&#x8981;&#x7D20;&#x3092;&#x6301;&#x3064;&#x5834;&#x5408;&#x3001;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x4F5C;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf totalLength is not provided, it is read from the buffers in the list.\nHowever, this adds an additional loop to the function, so it is faster\nto provide the length explicitly.\n-->\n\n<p><code>totalLength</code> &#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F;&#x30EA;&#x30B9;&#x30C8;&#x4E2D;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304B;&#x3089;&#x6C42;&#x3081;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x3001;&#x3053;&#x308C;&#x306F;&#x4F59;&#x8A08;&#x306A;&#x30EB;&#x30FC;&#x30D7;&#x304C;&#x5FC5;&#x8981;&#x306B;&#x306A;&#x308B;&#x305F;&#x3081;&#x3001;&#x660E;&#x793A;&#x7684;&#x306B;&#x9577;&#x3055;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x65B9;&#x304C;\n&#x9AD8;&#x901F;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;list&quot;
                    },
                    {
                      &quot;name&quot;: &quot;totalLength&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;buf.write(string, [offset], [length], [encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;write&quot;,
              &quot;desc&quot;: &quot;<!--\n* `string` String - data to be written to buffer\n* `offset` Number, Optional, Default: 0\n* `length` Number, Optional, Default: `buffer.length - offset`\n* `encoding` String, Optional, Default: 'utf8'\n-->\n\n<ul>\n<li><code>string</code> String - &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;</li>\n<li><code>offset</code> Number, Optional, Default: 0</li>\n<li><code>length</code> Number, Optional</li>\n<li><code>encoding</code> String, Optional, Default: &apos;utf8&apos;</li>\n</ul>\n<!--\nWrites `string` to the buffer at `offset` using the given encoding.\n`offset` defaults to `0`, `encoding` defaults to `'utf8'`. `length` is\nthe number of bytes to write. Returns number of octets written. If `buffer` did\nnot contain enough space to fit the entire string, it will write a partial\namount of the string. `length` defaults to `buffer.length - offset`.\nThe method will not write partial characters.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3001;<code>string</code> &#x3092;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E; <code>offset</code> &#x304B;&#x3089;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>offset</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0</code>&#x3001;<code>encoding</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;utf8&apos;</code> &#x3067;&#x3059;&#x3002;\n<code>length</code> &#x306F;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3067;&#x3059;&#x3002;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x6570;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>buffer</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x5168;&#x4F53;&#x3092;&#x633F;&#x5165;&#x3059;&#x308B;&#x306E;&#x306B;&#x5341;&#x5206;&#x306A;&#x30B9;&#x30DA;&#x30FC;&#x30B9;&#x3092;&#x542B;&#x3093;&#x3067;&#x3044;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x6587;&#x5B57;&#x5217;&#x306E;&#x4E00;&#x90E8;&#x3060;&#x3051;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>length</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>buffer.length - offset</code> &#x3067;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x6587;&#x5B57;&#x306E;&#x4E00;&#x90E8;&#x3060;&#x3051;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nExample: write a utf8 string into a buffer, then print it\n-->\n\n<p>&#x4F8B;: utf8 &#x306E;&#x6587;&#x5B57;&#x5217;&#x3092;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3001;&#x305D;&#x308C;&#x3092;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;\n\n</p>\n<pre><code>buf = new Buffer(256);\nlen = buf.write(&apos;\\u00bd + \\u00bc = \\u00be&apos;, 0);\nconsole.log(len + &quot; bytes: &quot; + buf.toString(&apos;utf8&apos;, 0, len));</code></pre>\n<!--\nThe number of characters written (which may be different than the number of\nbytes written) is set in `Buffer._charsWritten` and will be overwritten the\nnext time `buf.write()` is called.\n-->\n\n<p>&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x6587;&#x5B57;&#x6570; (&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3068;&#x306F;&#x7570;&#x306A;&#x308B;&#x5834;&#x5408;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;) &#x306F;&#x3001;\n&#x6B21;&#x306B; <code>buf.write()</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x4E0A;&#x66F8;&#x304D;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;\n<code>Buffer._charsWritten</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;string&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;length&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;buf.toString([encoding], [start], [end])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;toString&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`encoding` String, Optional, Default: &apos;utf8&apos; &quot;,
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;desc&quot;: &quot;String, Optional, Default: &apos;utf8&apos;&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;textRaw&quot;: &quot;`start` Number, Optional, Default: 0 &quot;,
                      &quot;name&quot;: &quot;start&quot;,
                      &quot;desc&quot;: &quot;Number, Optional, Default: 0&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;textRaw&quot;: &quot;`end` Number, Optional, Default: `buffer.length` &quot;,
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;desc&quot;: &quot;Number, Optional, Default: `buffer.length`&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;start&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nDecodes and returns a string from buffer data encoded with `encoding`\n(defaults to `'utf8'`) beginning at `start` (defaults to `0`) and ending at\n`end` (defaults to `buffer.length`).\n-->\n\n<p><code>encoding</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;utf8&apos;</code>) &#x3067;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x305F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30C7;&#x30FC;&#x30BF;&#x306E;\n<code>start</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0</code>) &#x304B;&#x3089; <code>end</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>buffer.length</code>)\n&#x307E;&#x3067;&#x3092;&#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3057;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nSee `buffer.write()` example, above.\n-->\n\n<p>&#x4E0A;&#x306E; <code>buffer.write()</code> &#x306E;&#x4F8B;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.toJSON()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;toJSON&quot;,
              &quot;desc&quot;: &quot;<!--\nReturns a JSON-representation of the Buffer instance, which is identical to the\noutput for JSON Arrays. `JSON.stringify` implicitly calls this function when\nstringifying a Buffer instance.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x306E; JSON &#x8868;&#x73FE;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x914D;&#x5217;&#x306E; JSON &#x51FA;&#x529B;&#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n<code>JSON.stringify()</code> &#x306F; Buffer &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3092;&#x6587;&#x5B57;&#x5217;&#x5316;&#x3059;&#x308B;&#x969B;&#x306B;&#x3001;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x6697;&#x9ED9;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(&apos;test&apos;);\nvar json = JSON.stringify(buf);\n\nconsole.log(json);\n// &apos;[116,101,115,116]&apos;\n\nvar copy = new Buffer(JSON.parse(json));\n\nconsole.log(copy);\n// &lt;Buffer 74 65 73 74&gt;</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;buf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;copy&quot;,
              &quot;desc&quot;: &quot;<!--\n* `targetBuffer` Buffer object - Buffer to copy into\n* `targetStart` Number, Optional, Default: 0\n* `sourceStart` Number, Optional, Default: 0\n* `sourceEnd` Number, Optional, Default: `buffer.length`\n-->\n\n<ul>\n<li><code>targetBuffer</code> Buffer object - &#x30B3;&#x30D4;&#x30FC;&#x5148;&#x306E; Buffer</li>\n<li><code>targetStart</code> Number, Optional, Default: 0</li>\n<li><code>sourceStart</code> Number, Optional, Default: 0</li>\n<li><code>sourceEnd</code> Number, Optional, Default: <code>buffer.length</code></li>\n</ul>\n<!--\nDoes copy between buffers. The source and target regions can be overlapped.\n`targetStart` and `sourceStart` default to `0`.\n`sourceEnd` defaults to `buffer.length`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x9593;&#x3067;&#x30B3;&#x30D4;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30BD;&#x30FC;&#x30B9;&#x3068;&#x30BF;&#x30FC;&#x30B2;&#x30C3;&#x30C8;&#x306E;&#x9818;&#x57DF;&#x306F;&#x91CD;&#x306A;&#x3063;&#x3066;&#x3044;&#x3066;&#x3082;&#x69CB;&#x3044;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>targetStart</code> &#x3068; <code>sourceStart</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0</code> &#x3067;&#x3059;&#x3002;\n<code>sourceEnd</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>buffer.length</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nAll values passed that are `undefined`/`NaN` or are out of bounds are set equal\nto their respective defaults.\n-->\n\n<p><code>undefined</code>/<code>NaN</code> &#x307E;&#x305F;&#x306F;&#x305D;&#x306E;&#x4ED6;&#x306E;&#x4E0D;&#x6B63;&#x306A;&#x5024;&#x304C;&#x6E21;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x304C;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: build two Buffers, then copy `buf1` from byte 16 through byte 19\ninto `buf2`, starting at the 8th byte in `buf2`.\n-->\n\n<p>&#x4F8B;: &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;2&#x500B;&#x4F5C;&#x6210;&#x3057;&#x3001;<code>buf1</code> &#x306E; 16 &#x30D0;&#x30A4;&#x30C8;&#x76EE;&#x304B;&#x3089; 19 &#x30D0;&#x30A4;&#x30C8;&#x76EE;&#x3092;&#x3001;\n<code>buf2</code> &#x306E; 8 &#x30D0;&#x30A4;&#x30C8;&#x76EE;&#x304B;&#x3089;&#x59CB;&#x307E;&#x308B;&#x4F4D;&#x7F6E;&#x3078;&#x30B3;&#x30D4;&#x30FC;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>buf1 = new Buffer(26);\nbuf2 = new Buffer(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  buf1[i] = i + 97; // 97 is ASCII a\n  buf2[i] = 33; // ASCII !\n}\n\nbuf1.copy(buf2, 8, 16, 20);\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, 25));\n\n// !!!!!!!!qrst!!!!!!!!!!!!!</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;targetBuffer&quot;
                    },
                    {
                      &quot;name&quot;: &quot;targetStart&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;sourceStart&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;sourceEnd&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;buf.slice([start], [end])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;slice&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`start` Number, Optional, Default: 0 &quot;,
                      &quot;name&quot;: &quot;start&quot;,
                      &quot;desc&quot;: &quot;Number, Optional, Default: 0&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;textRaw&quot;: &quot;`end` Number, Optional, Default: `buffer.length` &quot;,
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;desc&quot;: &quot;Number, Optional, Default: `buffer.length`&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;start&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReturns a new buffer which references the same memory as the old, but offset\nand cropped by the `start` (defaults to `0`) and `end` (defaults to\n`buffer.length`) indexes.  Negative indexes start from the end of the buffer.\n-->\n\n<p>&#x5143;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3068;&#x540C;&#x3058;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x304C;&#x3001;<code>start</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0</code>) &#x3068;\n<code>end</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>buffer.length</code>) &#x3067;&#x793A;&#x3055;&#x308C;&#x308B;&#x30AA;&#x30D5;&#x30BB;&#x30C3;&#x30C8;&#x3068;&#x9577;&#x3055;&#x3092;&#x6301;&#x3064;\n&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x8CA0;&#x306E;&#x30A4;&#x30F3;&#x30C7;&#x30C3;&#x30AF;&#x30B9;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x672B;&#x5C3E;&#x304B;&#x3089;&#x958B;&#x59CB;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n**Modifying the new buffer slice will modify memory in the original buffer!**\n-->\n\n<p><strong>&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30B9;&#x30E9;&#x30A4;&#x30B9;&#x306E;&#x5909;&#x66F4;&#x306F;&#x3001;&#x30AA;&#x30EA;&#x30B8;&#x30CA;&#x30EB;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#xFF01;</strong>\n\n</p>\n<!--\nExample: build a Buffer with the ASCII alphabet, take a slice, then modify one\nbyte from the original Buffer.\n-->\n\n<p>&#x4F8B;: ASCII &#x306E;&#x30A2;&#x30EB;&#x30D5;&#x30A1;&#x30D9;&#x30C3;&#x30C8;&#x3067;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x69CB;&#x7BC9;&#x3057;&#x3066;&#x30B9;&#x30E9;&#x30A4;&#x30B9;&#x3057;&#x3001;&#x5143;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067; 1 &#x30D0;&#x30A4;&#x30C8;&#x3092;&#x5909;&#x66F4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var buf1 = new Buffer(26);\n\nfor (var i = 0 ; i &lt; 26 ; i++) {\n  buf1[i] = i + 97; // 97 is ASCII a\n}\n\nvar buf2 = buf1.slice(0, 3);\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, buf2.length));\nbuf1[0] = 33;\nconsole.log(buf2.toString(&apos;ascii&apos;, 0, buf2.length));\n\n// abc\n// !bc</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readUInt8(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readUInt8&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads an unsigned 8 bit integer from the buffer at the specified offset.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 8bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nfor (ii = 0; ii &lt; buf.length; ii++) {\n  console.log(buf.readUInt8(ii));\n}\n\n// 0x3\n// 0x4\n// 0x23\n// 0x42</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readUInt16LE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readUInt16LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads an unsigned 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt16BE(0));\nconsole.log(buf.readUInt16LE(0));\nconsole.log(buf.readUInt16BE(1));\nconsole.log(buf.readUInt16LE(1));\nconsole.log(buf.readUInt16BE(2));\nconsole.log(buf.readUInt16LE(2));\n\n// 0x0304\n// 0x0403\n// 0x0423\n// 0x2304\n// 0x2342\n// 0x4223</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readUInt16BE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readUInt16BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads an unsigned 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt16BE(0));\nconsole.log(buf.readUInt16LE(0));\nconsole.log(buf.readUInt16BE(1));\nconsole.log(buf.readUInt16LE(1));\nconsole.log(buf.readUInt16BE(2));\nconsole.log(buf.readUInt16LE(2));\n\n// 0x0304\n// 0x0403\n// 0x0423\n// 0x2304\n// 0x2342\n// 0x4223</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readUInt32LE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readUInt32LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads an unsigned 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt32BE(0));\nconsole.log(buf.readUInt32LE(0));\n\n// 0x03042342\n// 0x42230403</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readUInt32BE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readUInt32BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads an unsigned 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x3;\nbuf[1] = 0x4;\nbuf[2] = 0x23;\nbuf[3] = 0x42;\n\nconsole.log(buf.readUInt32BE(0));\nconsole.log(buf.readUInt32LE(0));\n\n// 0x03042342\n// 0x42230403</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readInt8(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readInt8&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a signed 8 bit integer from the buffer at the specified offset.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt8`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 8bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5185;&#x5BB9;&#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F;\n<code>buffer.readUInt8</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readInt16LE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readInt16LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a signed 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt16*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5185;&#x5BB9;&#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F;\n<code>buffer.readUInt16</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readInt16BE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readInt16BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a signed 16 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt16*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5185;&#x5BB9;&#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F;\n<code>buffer.readUInt16</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readInt32LE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readInt32LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a signed 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt32*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5185;&#x5BB9;&#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F;\n<code>buffer.readUInt32</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readInt32BE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readInt32BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a signed 32 bit integer from the buffer at the specified offset with\nspecified endian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n\nWorks as `buffer.readUInt32*`, except buffer contents are treated as two's\ncomplement signed values.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5185;&#x5BB9;&#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x6271;&#x3046;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F;\n<code>buffer.readUInt32</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readFloatLE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readFloatLE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a 32 bit float from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x00;\nbuf[1] = 0x00;\nbuf[2] = 0x80;\nbuf[3] = 0x3f;\n\nconsole.log(buf.readFloatLE(0));\n\n// 0x01</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readFloatBE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readFloatBE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a 32 bit float from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\n\nbuf[0] = 0x00;\nbuf[1] = 0x00;\nbuf[2] = 0x80;\nbuf[3] = 0x3f;\n\nconsole.log(buf.readFloatLE(0));\n\n// 0x01</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readDoubleLE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readDoubleLE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a 64 bit double from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(8);\n\nbuf[0] = 0x55;\nbuf[1] = 0x55;\nbuf[2] = 0x55;\nbuf[3] = 0x55;\nbuf[4] = 0x55;\nbuf[5] = 0x55;\nbuf[6] = 0xd5;\nbuf[7] = 0x3f;\n\nconsole.log(buf.readDoubleLE(0));\n\n// 0.3333333333333333</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.readDoubleBE(offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;readDoubleBE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;return&quot;: {
                    &quot;textRaw&quot;: &quot;Return: Number &quot;,
                    &quot;name&quot;: &quot;return&quot;,
                    &quot;desc&quot;: &quot;Number&quot;
                  },
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nReads a 64 bit double from the buffer at the specified offset with specified\nendian format.\n\nSet `noAssert` to true to skip validation of `offset`. This means that `offset`\nmay be beyond the end of the buffer. Defaults to `false`.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x3092; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F; <code>offset</code> &#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x304C;&#x3042;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(8);\n\nbuf[0] = 0x55;\nbuf[1] = 0x55;\nbuf[2] = 0x55;\nbuf[3] = 0x55;\nbuf[4] = 0x55;\nbuf[5] = 0x55;\nbuf[6] = 0xd5;\nbuf[7] = 0x3f;\n\nconsole.log(buf.readDoubleLE(0));\n\n// 0.3333333333333333</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeUInt8(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeUInt8&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset. Note, `value` must be a\nvalid unsigned 8 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 8bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 8bit &#x7B26;&#x53F7;&#x7121;&#x3057;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\nconsole.log(buf);\n\n// &lt;Buffer 03 04 23 42&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeUInt16LE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeUInt16LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 16bit &#x7B26;&#x53F7;&#x7121;&#x3057;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\nconsole.log(buf);\n\n// &lt;Buffer de ad be ef&gt;\n// &lt;Buffer ad de ef be&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeUInt16BE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeUInt16BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 16bit &#x7B26;&#x53F7;&#x7121;&#x3057;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\nconsole.log(buf);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\nconsole.log(buf);\n\n// &lt;Buffer de ad be ef&gt;\n// &lt;Buffer ad de ef be&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeUInt32LE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeUInt32LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 32bit &#x7B26;&#x53F7;&#x7121;&#x3057;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt32BE(0xfeedface, 0);\n\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer fe ed fa ce&gt;\n// &lt;Buffer ce fa ed fe&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeUInt32BE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeUInt32BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid unsigned 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x7121;&#x3057; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 32bit &#x7B26;&#x53F7;&#x7121;&#x3057;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeUInt32BE(0xfeedface, 0);\n\nconsole.log(buf);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer fe ed fa ce&gt;\n// &lt;Buffer ce fa ed fe&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeInt8(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeInt8&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset. Note, `value` must be a\nvalid signed 8 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt8`, except value is written out as a two's complement\nsigned integer into `buffer`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 8bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 8bit &#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>value</code> &#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F; \n<code>buffer.writeUInt8</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeInt16LE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeInt16LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt16*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 16bit &#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>value</code> &#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F; \n<code>buffer.writeUInt16</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeInt16BE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeInt16BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 16 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt16*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 16bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 16bit &#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>value</code> &#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F; \n<code>buffer.writeUInt16</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeInt32LE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeInt32LE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt32*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 32bit &#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>value</code> &#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F; \n<code>buffer.writeUInt32</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeInt32BE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeInt32BE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid signed 32 bit integer.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n\nWorks as `buffer.writeUInt32*`, except value is written out as a two's\ncomplement signed integer into `buffer`.\n-->\n\n<p><code>value</code> &#x3092;&#x7B26;&#x53F7;&#x4ED8;&#x304D; 32bit &#x6574;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 32bit &#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x6574;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<p><code>value</code> &#x3092; 2 &#x306E;&#x88DC;&#x6570;&#x306B;&#x3088;&#x308B;&#x7B26;&#x53F7;&#x4ED8;&#x304D;&#x5024;&#x3068;&#x3057;&#x3066;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x4EE5;&#x5916;&#x306F; \n<code>buffer.writeUInt32</code> &#x3068;&#x540C;&#x3058;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeFloatLE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeFloatLE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, behavior is unspecified if `value` is not a 32 bit float.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x304C; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3067;&#x306A;&#x3044;&#x5834;&#x5408;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;&#x672A;&#x5B9A;&#x7FA9;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeFloatBE(0xcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 4f 4a fe bb&gt;\n// &lt;Buffer bb fe 4a 4f&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeFloatBE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeFloatBE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, behavior is unspecified if `value` is not a 32 bit float.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x304C; 32bit &#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3067;&#x306A;&#x3044;&#x5834;&#x5408;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x306F;&#x672A;&#x5B9A;&#x7FA9;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x306B;\n&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(4);\nbuf.writeFloatBE(0xcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 4f 4a fe bb&gt;\n// &lt;Buffer bb fe 4a 4f&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeDoubleLE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeDoubleLE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid 64 bit double.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(8);\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\n// &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.writeDoubleBE(value, offset, [noAssert])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;writeDoubleBE&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` Number &quot;,
                      &quot;name&quot;: &quot;value&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`noAssert` Boolean, Optional, Default: false &quot;,
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;desc&quot;: &quot;Boolean, Optional, Default: false&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;
                    },
                    {
                      &quot;name&quot;: &quot;noAssert&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nWrites `value` to the buffer at the specified offset with specified endian\nformat. Note, `value` must be a valid 64 bit double.\n\nSet `noAssert` to true to skip validation of `value` and `offset`. This means\nthat `value` may be too large for the specific function and `offset` may be\nbeyond the end of the buffer leading to the values being silently dropped. This\nshould not be used unless you are certain of correctness. Defaults to `false`.\n-->\n\n<p><code>value</code> &#x3092; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3068;&#x3057;&#x3066;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x4F4D;&#x7F6E;&#x306B;&#x3001;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30C7;&#x30A3;&#x30A2;&#x30F3;&#x3067;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n<code>value</code> &#x306F;&#x59A5;&#x5F53;&#x306A; 64bit &#x500D;&#x7CBE;&#x5EA6;&#x6D6E;&#x52D5;&#x5C0F;&#x6570;&#x70B9;&#x6570;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<p>&#x3082;&#x3057; <code>noAssert</code> &#x304C; <code>true</code> &#x306A;&#x3089;&#xFF0C;<code>value</code> &#x3068; <code>offset</code> &#x306E;&#x691C;&#x8A3C;&#x3092;&#x30B9;&#x30AD;&#x30C3;&#x30D7;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;<code>value</code> &#x304C;&#x3053;&#x306E;&#x95A2;&#x6570;&#x3067;&#x6271;&#x3048;&#x308B;&#x3088;&#x308A;&#x5927;&#x304D;&#x306A;&#x5834;&#x5408;&#x3084;&#x3001;<code>offset</code> \n&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x8D8A;&#x3048;&#x3066;&#x3057;&#x307E;&#x3046;&#x5834;&#x5408;&#x306F;&#x3001;&#x9759;&#x304B;&#x306B;&#x6368;&#x3066;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6B63;&#x78BA;&#x6027;&#x306B;&#x78BA;&#x4FE1;&#x304C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;&#x3053;&#x308C;&#x3089;&#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>false</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var buf = new Buffer(8);\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n\n// &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\n// &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;buf.fill(value, [offset], [end])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;fill&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`value` &quot;,
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`offset` Number, Optional &quot;,
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;optional&quot;: true,
                      &quot;desc&quot;: &quot;Number&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`end` Number, Optional &quot;,
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;optional&quot;: true,
                      &quot;desc&quot;: &quot;Number&quot;
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;value&quot;
                    },
                    {
                      &quot;name&quot;: &quot;offset&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;end&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nFills the buffer with the specified value. If the `offset` (defaults to `0`)\nand `end` (defaults to `buffer.length`) are not given it will fill the entire\nbuffer.\n-->\n\n<p>&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5024;&#x3067;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x57CB;&#x3081;&#x307E;&#x3059;&#x3002;\n<code>offset</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>0</code>) &#x3068; <code>end</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>buffer.length</code>)\nF&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x5168;&#x4F53;&#x3092;&#x57CB;&#x3081;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>var b = new Buffer(50);\nb.fill(&quot;h&quot;);</code></pre>\n&quot;
            }
          ],
          &quot;properties&quot;: [
            {
              &quot;textRaw&quot;: &quot;buf[index]&quot;,
              &quot;name&quot;: &quot;[index]&quot;,
              &quot;desc&quot;: &quot;<!--\nGet and set the octet at `index`. The values refer to individual bytes,\nso the legal range is between `0x00` and `0xFF` hex or `0` and `255`.\n-->\n\n<p><code>index</code> &#x306E;&#x4F4D;&#x7F6E;&#x306E;&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x3092;&#x53D6;&#x5F97;&#x304A;&#x3088;&#x3073;&#x8A2D;&#x5B9A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x5024;&#x306F;&#x500B;&#x3005;&#x306E;&#x30D0;&#x30A4;&#x30C8;&#x3092;&#x53C2;&#x7167;&#x3059;&#x308B;&#x306E;&#x3067;&#x3001;&#x59A5;&#x5F53;&#x306A;&#x7BC4;&#x56F2;&#x306F; 16 &#x9032;&#x306E; <code>0x00</code> &#x304B;&#x3089; <code>0xFF</code>\n&#x307E;&#x305F;&#x306F; <code>0</code> &#x304B;&#x3089;<code>255</code>&#x307E;&#x3067;&#x306E;&#x9593;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample: copy an ASCII string into a buffer, one byte at a time:\n-->\n\n<p>&#x4F8B;: ASCII &#x6587;&#x5B57;&#x5217;&#x3092; 1 &#x30D0;&#x30A4;&#x30C8;&#x305A;&#x3064;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x30B3;&#x30D4;&#x30FC;&#x3057;&#x307E;&#x3059;\n\n</p>\n<pre><code>str = &quot;node.js&quot;;\nbuf = new Buffer(str.length);\n\nfor (var i = 0; i &lt; str.length ; i++) {\n  buf[i] = str.charCodeAt(i);\n}\n\nconsole.log(buf);\n\n// node.js</code></pre>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`length` Number &quot;,
              &quot;name&quot;: &quot;length&quot;,
              &quot;desc&quot;: &quot;<!--\nThe size of the buffer in bytes.  Note that this is not necessarily the size\nof the contents. `length` refers to the amount of memory allocated for the\nbuffer object.  It does not change when the contents of the buffer are changed.\n-->\n\n<p>&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x306B;&#x3088;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x5B9F;&#x969B;&#x306E;&#x5185;&#x5BB9;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x3067;&#x306F;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n<code>length</code> &#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x305F;&#x30E1;&#x30E2;&#x30EA;&#x5168;&#x4F53;&#x3092;&#x53C2;&#x7167;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>buf = new Buffer(1234);\n\nconsole.log(buf.length);\nbuf.write(&quot;some string&quot;, 0, &quot;ascii&quot;);\nconsole.log(buf.length);\n\n// 1234\n// 1234</code></pre>\n&quot;,
              &quot;shortDesc&quot;: &quot;Number&quot;
            }
          ],
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;textRaw&quot;: &quot;`size` Number &quot;,
                  &quot;name&quot;: &quot;size&quot;,
                  &quot;desc&quot;: &quot;Number&quot;
                }
              ],
              &quot;desc&quot;: &quot;<!--\nAllocates a new buffer of `size` octets.\n-->\n\n<p><code>size</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x306E;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;size&quot;
                }
              ],
              &quot;desc&quot;: &quot;<!--\nAllocates a new buffer of `size` octets.\n-->\n\n<p><code>size</code> &#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x306E;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;params&quot;: [
                {
                  &quot;textRaw&quot;: &quot;`array` Array &quot;,
                  &quot;name&quot;: &quot;array&quot;,
                  &quot;desc&quot;: &quot;Array&quot;
                }
              ],
              &quot;desc&quot;: &quot;<!--\nAllocates a new buffer using an `array` of octets.\n-->\n\n<p>&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x306E; <code>array</code> &#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;array&quot;
                }
              ],
              &quot;desc&quot;: &quot;<!--\nAllocates a new buffer using an `array` of octets.\n-->\n\n<p>&#x30AA;&#x30AF;&#x30C6;&#x30C3;&#x30C8;&#x306E; <code>array</code> &#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;str&quot;
                },
                {
                  &quot;name&quot;: &quot;encoding&quot;,
                  &quot;optional&quot;: true
                }
              ],
              &quot;desc&quot;: &quot;<!--\n* `str` String - string to encode.\n* `encoding` String - encoding to use, Optional.\n-->\n\n<ul>\n<li><code>str</code> String - &#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x308B;&#x6587;&#x5B57;&#x5217;</li>\n<li><code>encoding</code> String - &#x4F7F;&#x7528;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3001;Optional&#x3001;Default: &apos;utf8&apos;</li>\n</ul>\n<!--\nAllocates a new buffer containing the given `str`.\n`encoding` defaults to `'utf8'`.\n-->\n\n<p>&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F; <code>str</code> &#x3092;&#x5185;&#x5BB9;&#x3068;&#x3059;&#x308B;&#x65B0;&#x3057;&#x3044;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n<code>encoding</code> &#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;utf8&apos;</code> &#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: SlowBuffer&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;SlowBuffer&quot;,
          &quot;desc&quot;: &quot;<!--\nThis class is primarily for internal use.  JavaScript programs should\nuse Buffer instead of using SlowBuffer.\n\nIn order to avoid the overhead of allocating many C++ Buffer objects for\nsmall blocks of memory in the lifetime of a server, Node allocates memory\nin 8Kb (8192 byte) chunks.  If a buffer is smaller than this size, then it\nwill be backed by a parent SlowBuffer object.  If it is larger than this,\nthen Node will allocate a SlowBuffer slab for it directly.\n-->\n\n<p>&#x3053;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306F;&#x4E3B;&#x306B;&#x5185;&#x90E8;&#x5229;&#x7528;&#x306E;&#x305F;&#x3081;&#x306E;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;JavaScsript &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F; SlowBuffer\n&#x3088;&#x308A;&#x3082; Buffer &#x3092;&#x4F7F;&#x7528;&#x3059;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<p>&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x52D5;&#x4F5C;&#x4E2D;&#x306B;&#x3001;&#x5C0F;&#x3055;&#x306A;&#x30E1;&#x30E2;&#x30EA;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x306E;&#x305F;&#x3081;&#x306B;&#x591A;&#x304F;&#x306E; C++ &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x304C;\n&#x5272;&#x308A;&#x5F53;&#x3066;&#x3089;&#x308C;&#x308B;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30D8;&#x30C3;&#x30C9;&#x3092;&#x907F;&#x3051;&#x308B;&#x305F;&#x3081;&#x3001;Node &#x306F;&#x30E1;&#x30E2;&#x30EA;&#x3092; 8Kb (8192 &#x30D0;&#x30A4;&#x30C8;) &#x306E;\n&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x5185;&#x306B;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;&#x3082;&#x3057;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x3053;&#x306E;&#x30B5;&#x30A4;&#x30BA;&#x3088;&#x308A;&#x5C0F;&#x3055;&#x3051;&#x308C;&#x3070;&#x3001;&#x305D;&#x308C;&#x306F;\n&#x89AA;&#x306E; SlowBuffer &#x306B;&#x652F;&#x3048;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;&#x305D;&#x308C;&#x3088;&#x308A;&#x5927;&#x304D;&#x3051;&#x308C;&#x3070;&#x3001;Node &#x306F; SlowBuffer &#x3092;\n&#x76F4;&#x63A5;&#x5272;&#x308A;&#x5F53;&#x3066;&#x307E;&#x3059;&#x3002;\n</p>\n&quot;
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;`INSPECT_MAX_BYTES` Number, Default: 50 &quot;,
          &quot;name&quot;: &quot;INSPECT_MAX_BYTES&quot;,
          &quot;desc&quot;: &quot;<!--\nHow many bytes will be returned when `buffer.inspect()` is called. This can\nbe overridden by user modules.\n\nNote that this is a property on the buffer module returned by\n`require('buffer')`, not on the Buffer global, or a buffer instance.\n-->\n\n<p><code>buffer.inspect()</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306B;&#x8FD4;&#x3059;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30E6;&#x30FC;&#x30B6;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306B;&#x3088;&#x3063;&#x3066;&#x4E0A;&#x66F8;&#x304D;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<p>&#x3053;&#x308C;&#x306F;&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB;&#x306E; Buffer &#x3084;&#x305D;&#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001; <code>requrie(&apos;buffer&apos;)</code>\n&#x306B;&#x3088;&#x3063;&#x3066;&#x8FD4;&#x3055;&#x308C;&#x308B; buffer &#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306E;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;shortDesc&quot;: &quot;Number, Default: 50&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Buffer&quot;
    }
  ]
}
