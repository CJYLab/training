{
  &quot;source&quot;: &quot;doc/api/path.markdown&quot;,
  &quot;modules&quot;: [
    {
      &quot;textRaw&quot;: &quot;Path&quot;,
      &quot;name&quot;: &quot;path&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nThis module contains utilities for handling and transforming file\npaths.  Almost all these methods perform only string transformations.\nThe file system is not consulted to check whether paths are valid.\n\nUse `require('path')` to use this module.  The following methods are provided:\n-->\n\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x30D1;&#x30B9;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x51E6;&#x7406;&#x3084;&#x5909;&#x63DB;&#x3092;&#x884C;&#x3046;&#x30E6;&#x30FC;&#x30C6;&#x30A3;&#x30EA;&#x30C6;&#x30A3;&#x3092;&#x542B;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x6587;&#x5B57;&#x5217;&#x306E;&#x5909;&#x63DB;&#x3060;&#x3051;&#x3092;&#x884C;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30D1;&#x30B9;&#x304C;&#x6B63;&#x3057;&#x3044;&#x304B;&#x691C;&#x8A3C;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x5C0B;&#x306D;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<p>&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x306B;&#x306F;<code>require(&apos;path&apos;)</code>&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;path.normalize(p)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;normalize&quot;,
          &quot;desc&quot;: &quot;<!--\nNormalize a string path, taking care of `'..'` and `'.'` parts.\n->\n\n文字列によるパスを正規化します。`'..'` と `'.'` の要素には注意してください。\n\n<!--\nWhen multiple slashes are found, they're replaced by a single one;\nwhen the path contains a trailing slash, it is preserved.\nOn Windows backslashes are used.\n-->\n\n<p>&#x8907;&#x6570;&#x306E;&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x304C;&#x898B;&#x3064;&#x304B;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x3089;&#x306F;&#x4E00;&#x3064;&#x306B;&#x7F6E;&#x63DB;&#x3055;&#x308C;&#x307E;&#x3059;;\n&#x30D1;&#x30B9;&#x306E;&#x6700;&#x5F8C;&#x306B;&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x304C;&#x542B;&#x307E;&#x308C;&#x3066;&#x3044;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F;&#x7DAD;&#x6301;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\nWindows &#x3067;&#x306F;&#x30D0;&#x30C3;&#x30AF;&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.normalize(&apos;/foo/bar//baz/asdf/quux/..&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;p&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.join([path1], [path2], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;join&quot;,
          &quot;desc&quot;: &quot;<!--\nJoin all arguments together and normalize the resulting path.\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x5F15;&#x6570;&#x3092;&#x4E00;&#x3064;&#x306B;&#x7D50;&#x5408;&#x3057;&#x3001;&#x7D50;&#x679C;&#x3068;&#x3057;&#x3066;&#x5F97;&#x3089;&#x308C;&#x308B;&#x30D1;&#x30B9;&#x3092;&#x6B63;&#x898F;&#x5316;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nArguments must be strings.  In v0.8, non-string arguments were\nsilently ignored.  In v0.10 and up, an exception is thrown.\n-->\n\n<p>&#x5F15;&#x6570;&#x306F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x306A;&#x304F;&#x3066;&#x306F;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\nv0.8 &#x3067;&#x306F;&#x3001;&#x975E;&#x6587;&#x5B57;&#x5217;&#x306E;&#x5F15;&#x6570;&#x306F;&#x9759;&#x304B;&#x306B;&#x7121;&#x8996;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\nv0.10 &#x4EE5;&#x964D;&#x3067;&#x306F;&#x3001;&#x4F8B;&#x5916;&#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.join(&apos;/foo&apos;, &apos;bar&apos;, &apos;baz/asdf&apos;, &apos;quux&apos;, &apos;..&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;\n\npath.join(&apos;foo&apos;, {}, &apos;bar&apos;)\n// throws exception\nTypeError: Arguments to path.join must be strings</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;path1&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;path2&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.resolve([from ...], to)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;resolve&quot;,
          &quot;desc&quot;: &quot;<!--\nResolves `to` to an absolute path.\n-->\n\n<p><code>to</code> &#x306E;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x89E3;&#x6C7A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf `to` isn't already absolute `from` arguments are prepended in right to left\norder, until an absolute path is found. If after using all `from` paths still\nno absolute path is found, the current working directory is used as well. The\nresulting path is normalized, and trailing slashes are removed unless the path\ngets resolved to the root directory. Non-string arguments are ignored.\n-->\n\n<p>&#x3082;&#x3057; <code>to</code> &#x304C;&#x65E2;&#x306B;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x304C;&#x898B;&#x3064;&#x304B;&#x308B;&#x307E;&#x3067; <code>from</code> &#x5F15;&#x6570;&#x3092;&#x53F3;&#x304B;&#x3089;&#x5DE6;&#x306E;&#x9806;&#x3067;&#x5148;&#x982D;&#x306B;&#x52A0;&#x3048;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E; <code>from</code> &#x3092;&#x52A0;&#x3048;&#x305F;&#x5F8C;&#x3001;&#x30D1;&#x30B9;&#x304C;&#x307E;&#x3060;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x30AB;&#x30EC;&#x30F3;&#x30C8;&#x30EF;&#x30FC;&#x30AD;&#x30F3;&#x30B0;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x304C;&#x540C;&#x69D8;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x7D50;&#x679C;&#x306E;&#x30D1;&#x30B9;&#x306F;&#x6B63;&#x898F;&#x5316;&#x3055;&#x308C;&#x3001;&#x89E3;&#x6C7A;&#x3055;&#x308C;&#x305F;&#x30D1;&#x30B9;&#x304C;&#x30EB;&#x30FC;&#x30C8;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x3067;&#x306A;&#x3044;&#x9650;&#x308A;&#x672B;&#x5C3E;&#x306E;&#x30B9;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x306F;&#x524A;&#x9664;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x6587;&#x5B57;&#x5217;&#x3067;&#x306A;&#x3044;&#x5F15;&#x6570;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAnother way to think of it is as a sequence of `cd` commands in a shell.\n-->\n\n<p>&#x305D;&#x308C;&#x306F;&#x30B7;&#x30A7;&#x30EB;&#x306B;&#x304A;&#x3051;&#x308B; <code>cd</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x306E;&#x5217;&#x3060;&#x3068;&#x8003;&#x3048;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.resolve(&apos;foo/bar&apos;, &apos;/tmp/file/&apos;, &apos;..&apos;, &apos;a/../subfile&apos;)</code></pre>\n<!--\nIs similar to:\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x4EE5;&#x4E0B;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code>cd foo/bar\ncd /tmp/file/\ncd ..\ncd a/../subfile\npwd</code></pre>\n<!--\nThe difference is that the different paths don't need to exist and may also be\nfiles.\n-->\n\n<p>&#x3044;&#x306F;&#x3001;&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x30D1;&#x30B9;&#x304C;&#x5FC5;&#x305A;&#x3057;&#x3082;&#x5B58;&#x5728;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x306A;&#x3044;&#x3053;&#x3068;&#x3068;&#x3001;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x3067;&#x3082;&#x69CB;&#x308F;&#x306A;&#x3044;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.resolve(&apos;/foo/bar&apos;, &apos;./baz&apos;)\n// returns\n&apos;/foo/bar/baz&apos;\n\npath.resolve(&apos;/foo/bar&apos;, &apos;/tmp/file/&apos;)\n// returns\n&apos;/tmp/file&apos;\n\npath.resolve(&apos;wwwroot&apos;, &apos;static_files/png/&apos;, &apos;../gif/image.gif&apos;)\n// if currently in /home/myself/node, it returns\n&apos;/home/myself/node/wwwroot/static_files/gif/image.gif&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;from ...&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;to&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.relative(from, to)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;relative&quot;,
          &quot;desc&quot;: &quot;<!--\nSolve the relative path from `from` to `to`.\n-->\n\n<p><code>from</code> &#x304B;&#x3089; <code>to</code> &#x3078;&#x306E;&#x76F8;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x89E3;&#x6C7A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAt times we have two absolute paths, and we need to derive the relative\npath from one to the other.  This is actually the reverse transform of\n`path.resolve`, which means we see that:\n-->\n\n<p>&#x4E8C;&#x3064;&#x306E;&#x7D76;&#x5BFE;&#x30D1;&#x30B9;&#x304C;&#x3042;&#x308A;&#x3001;&#x4E00;&#x65B9;&#x304B;&#x3089;&#x4ED6;&#x65B9;&#x3078;&#x306E;&#x76F8;&#x5BFE;&#x30D1;&#x30B9;&#x3092;&#x5F97;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x5834;&#x5408;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x5B9F;&#x969B;&#x306E;&#x3068;&#x3053;&#x308D;&#x3001;<code>path.resolve()</code> &#x3068;&#x306F;&#x9006;&#x306E;&#x5909;&#x63DB;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x4EE5;&#x4E0B;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;:\n\n</p>\n<pre><code>path.resolve(from, path.relative(from, to)) == path.resolve(to)</code></pre>\n<!--\nExamples:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.relative(&apos;C:\\\\orandea\\\\test\\\\aaa&apos;, &apos;C:\\\\orandea\\\\impl\\\\bbb&apos;)\n// returns\n&apos;..\\\\..\\\\impl\\\\bbb&apos;\n\npath.relative(&apos;/data/orandea/test/aaa&apos;, &apos;/data/orandea/impl/bbb&apos;)\n// returns\n&apos;../../impl/bbb&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;from&quot;
                },
                {
                  &quot;name&quot;: &quot;to&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.dirname(p)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;dirname&quot;,
          &quot;desc&quot;: &quot;<!--\nReturn the directory name of a path.  Similar to the Unix `dirname` command.\n-->\n\n<p>&#x30D1;&#x30B9;&#x306B;&#x542B;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30A3;&#x30EC;&#x30AF;&#x30C8;&#x30EA;&#x540D;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;Unix&#x306E; <code>dirname</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.dirname(&apos;/foo/bar/baz/asdf/quux&apos;)\n// returns\n&apos;/foo/bar/baz/asdf&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;p&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.basename(p, [ext])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;basename&quot;,
          &quot;desc&quot;: &quot;<!--\nReturn the last portion of a path.  Similar to the Unix `basename` command.\n-->\n\n<p>&#x30D1;&#x30B9;&#x306E;&#x6700;&#x5F8C;&#x306E;&#x8981;&#x7D20;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;Unix&#x306E; <code>basename</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>path.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;)\n// returns\n&apos;quux.html&apos;\n\npath.basename(&apos;/foo/bar/baz/asdf/quux.html&apos;, &apos;.html&apos;)\n// returns\n&apos;quux&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;p&quot;
                },
                {
                  &quot;name&quot;: &quot;ext&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;path.extname(p)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;extname&quot;,
          &quot;desc&quot;: &quot;<!--\nReturn the extension of the path, from the last '.' to end of string\nin the last portion of the path.  If there is no '.' in the last portion\nof the path or the first character of it is '.', then it returns\nan empty string.  Examples:\n-->\n\n<p>&#x30D1;&#x30B9;&#x306E;&#x6700;&#x5F8C;&#x306E;&#x8981;&#x7D20;&#x306B;&#x3064;&#x3044;&#x3066;&#x3001;&#x6700;&#x5F8C;&#x306E; &apos;.&apos; &#x304B;&#x3089;&#x6587;&#x5B57;&#x5217;&#x306E;&#x6700;&#x5F8C;&#x307E;&#x3067;&#x306E;&#x30D1;&#x30B9;&#x306E;&#x62E1;&#x5F35;&#x5B50;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x6700;&#x5F8C;&#x306E;&#x8981;&#x7D20;&#x306B; &apos;.&apos; &#x304C;&#x542B;&#x307E;&#x308C;&#x3066;&#x3044;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3001;&#x3082;&#x3057;&#x304F;&#x306F; &apos;.&apos; &#x304C;&#x6700;&#x521D;&#x306E;&#x6587;&#x5B57;&#x3060;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x7A7A;&#x306E;&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F8B;:\n\n</p>\n<pre><code>path.extname(&apos;index.html&apos;)\n// returns\n&apos;.html&apos;\n\npath.extname(&apos;index.coffee.md&apos;)\n// returns\n&apos;.md&apos;\n\npath.extname(&apos;index.&apos;)\n// returns\n&apos;.&apos;\n\npath.extname(&apos;index&apos;)\n// returns\n&apos;&apos;</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;p&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;path.sep&quot;,
          &quot;name&quot;: &quot;sep&quot;,
          &quot;desc&quot;: &quot;<!--\nThe platform-specific file separator. `'\\\\'` or `'/'`.\n-->\n\n<p>&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x56FA;&#x6709;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x30BB;&#x30D1;&#x30EC;&#x30FC;&#x30BF;&#x3002; <code>&apos;\\\\&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;/&apos;</code>&#x3002;\n\n</p>\n<!--\nAn example on *nix:\n-->\n\n<p>*nix &#x3067;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>&apos;foo/bar/baz&apos;.split(path.sep)\n// returns\n[&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]</code></pre>\n<!--\nAn example on Windows:\n-->\n\n<p>Windows &#x3067;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>&apos;foo\\\\bar\\\\baz&apos;.split(path.sep)\n// returns\n[&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]</code></pre>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;path.delimiter&quot;,
          &quot;name&quot;: &quot;delimiter&quot;,
          &quot;desc&quot;: &quot;<!--\nThe platform-specific path delimiter, `;` or `':'`.\n-->\n\n<p>&#x30D7;&#x30E9;&#x30C3;&#x30C8;&#x30D5;&#x30A9;&#x30FC;&#x30E0;&#x56FA;&#x6709;&#x306E;&#x30D1;&#x30B9;&#x533A;&#x5207;&#x308A;&#x6587;&#x5B57;&#x3001;<code>&apos;;&apos;</code> &#x307E;&#x305F;&#x306F; <code>&apos;:&apos;</code>&#x3002;\n\n</p>\n<!--\nAn example on *nix:\n-->\n\n<p>*nix &#x3067;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>console.log(process.env.PATH)\n// &apos;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&apos;\n\nprocess.env.PATH.split(path.delimiter)\n// returns\n[&apos;/usr/bin&apos;, &apos;/bin&apos;, &apos;/usr/sbin&apos;, &apos;/sbin&apos;, &apos;/usr/local/bin&apos;]</code></pre>\n<!--\nAn example on Windows:\n-->\n\n<p>Windows &#x3067;&#x306E;&#x4F8B;:\n\n</p>\n<pre><code>console.log(process.env.PATH)\n// &apos;C:\\Windows\\system32;C:\\Windows;C:\\Program Files\\nodejs\\&apos;\n\nprocess.env.PATH.split(path.delimiter)\n// returns\n[&apos;C:\\Windows\\system32&apos;, &apos;C:\\Windows&apos;, &apos;C:\\Program Files\\nodejs\\&apos;]</code></pre>\n&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Path&quot;
    }
  ]
}
