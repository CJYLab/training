{
  &quot;source&quot;: &quot;doc/api/https.markdown&quot;,
  &quot;modules&quot;: [
    {
      &quot;textRaw&quot;: &quot;HTTPS&quot;,
      &quot;name&quot;: &quot;https&quot;,
      &quot;stability&quot;: 3,
      &quot;stabilityText&quot;: &quot;Stable&quot;,
      &quot;desc&quot;: &quot;<!--\nHTTPS is the HTTP protocol over TLS/SSL. In Node this is implemented as a\nseparate module.\n-->\n\n<p>HTTPS &#x306F; TLS/SSL &#x4E0A;&#x306E; HTTP &#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x3067;&#x3059;&#x3002;\nNode &#x3067;&#x306F;&#x3053;&#x308C;&#x3089;&#x306F;&#x5225;&#x306E;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x3068;&#x3057;&#x3066;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: https.Server&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;https.Server&quot;,
          &quot;desc&quot;: &quot;<!--\nThis class is a subclass of `tls.Server` and emits events same as\n`http.Server`. See `http.Server` for more information.\n-->\n\n<p>&#x3053;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306F; <code>tls.Server</code> &#x306E;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;<code>http.Server</code> &#x3068;&#x540C;&#x69D8;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x306F; <code>http.Server</code> &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: https.Agent&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;https.Agent&quot;,
          &quot;desc&quot;: &quot;<!--\nAn Agent object for HTTPS similar to [http.Agent][].  See [https.request()][]\nfor more information.\n-->\n\n<p>HTTPS &#x7528;&#x306E; Agent &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#xFF0C;[http.Agent][] &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x3002;\n&#x8A73;&#x7D30;&#x306F; [https.request()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;https.createServer(options, [requestListener])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;createServer&quot;,
          &quot;desc&quot;: &quot;<!--\nReturns a new HTTPS web server object. The `options` is similar to\n[tls.createServer()][].  The `requestListener` is a function which is\nautomatically added to the `'request'` event.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044; HTTPS Web &#x30B5;&#x30FC;&#x30D0;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>option</code> &#x306F; [tls.createServer()][] &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n<code>requestListener</code> &#x306F;&#x95A2;&#x6570;&#x3067;&#x3001; <code>&apos;request&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>// curl -k https://localhost:8000/\nvar https = require(&apos;https&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;)\n};\n\nhttps.createServer(options, function (req, res) {\n  res.writeHead(200);\n  res.end(&quot;hello world\\n&quot;);\n}).listen(8000);</code></pre>\n<!--\nOr\n-->\n\n<p>&#x307E;&#x305F;&#x306F;:\n\n</p>\n<pre><code>var https = require(&apos;https&apos;);\nvar fs = require(&apos;fs&apos;);\n\nvar options = {\n  pfx: fs.readFileSync(&apos;server.pfx&apos;)\n};\n\nhttps.createServer(options, function (req, res) {\n  res.writeHead(200);\n  res.end(&quot;hello world\\n&quot;);\n}).listen(8000);</code></pre>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;server.listen(path, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;desc&quot;: &quot;<!--\nSee [http.listen()][] for details.\n-->\n\n<p>&#x8A73;&#x7D30;&#x306F; [http.listen()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;handle&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;path&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.listen(handle, [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;listen&quot;,
              &quot;desc&quot;: &quot;<!--\nSee [http.listen()][] for details.\n-->\n\n<p>&#x8A73;&#x7D30;&#x306F; [http.listen()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;handle&quot;
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;server.close([callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<p>See [http.close()][] for details.\n\n</p>\n<p>&#x8A73;&#x7D30;&#x306F; [http.close()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ],
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;requestListener&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;https.request(options, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;request&quot;,
          &quot;desc&quot;: &quot;<!--\nMakes a request to a secure web server.\n-->\n\n<p>&#x30BB;&#x30AD;&#x30E5;&#x30A2;&#x306A; Web &#x30B5;&#x30FC;&#x30D0;&#x3078;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n`options` can be an object or a string. If `options` is a string, it is\nautomatically parsed with [url.parse()](url.html#url.parse).\n-->\n\n<p><code>options</code> &#x306F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>options</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B; <a href="\&quot;url.html#url.parse\&quot;">url.parse()</a>\n&#x306B;&#x3088;&#x3063;&#x3066;&#x89E3;&#x6790;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAll options from [http.request()][] are valid.\n-->\n\n<p>[http.request()][] &#x306E;&#x5168;&#x3066;&#x3068;&#x540C;&#x69D8;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x6307;&#x5B9A;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var https = require(&apos;https&apos;);\n\nvar options = {\n  hostname: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;\n};\n\nvar req = https.request(options, function(res) {\n  console.log(&quot;statusCode: &quot;, res.statusCode);\n  console.log(&quot;headers: &quot;, res.headers);\n\n  res.on(&apos;data&apos;, function(d) {\n    process.stdout.write(d);\n  });\n});\nreq.end();\n\nreq.on(&apos;error&apos;, function(e) {\n  console.error(e);\n});</code></pre>\n<!--\nThe options argument has the following options\n-->\n\n<p><code>options</code> &#x5F15;&#x6570;&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n- `host`: A domain name or IP address of the server to issue the request to.\n  Defaults to `'localhost'`.\n- `hostname`: To support `url.parse()` `hostname` is preferred over `host`\n- `port`: Port of remote server. Defaults to 443.\n- `method`: A string specifying the HTTP request method. Defaults to `'GET'`.\n- `path`: Request path. Defaults to `'/'`. Should include query string if any.\n  E.G. `'/index.html?page=12'`\n- `headers`: An object containing request headers.\n- `auth`: Basic authentication i.e. `'user:password'` to compute an\n  Authorization header.\n- `agent`: Controls [Agent][] behavior. When an Agent is used request will\n  default to `Connection: keep-alive`. Possible values:\n - `undefined` (default): use [globalAgent][] for this host and port.\n - `Agent` object: explicitly use the passed in `Agent`.\n - `false`: opts out of connection pooling with an Agent, defaults request to\n   `Connection: close`.\n-->\n\n<ul>\n<li><code>host</code>: &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3092;&#x767A;&#x884C;&#x3059;&#x308B;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30C9;&#x30E1;&#x30A4;&#x30F3;&#x540D;&#x307E;&#x305F;&#x306F; IP &#x30A2;&#x30C9;&#x30EC;&#x30B9;&#x3002;</li>\n<li><code>hostname</code>: <code>url.parse()</code> &#x3067;&#x6271;&#x3048;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x30B5;&#x30DD;&#x30FC;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>hostname</code> &#x306F; <code>host</code> &#x3092;&#x4E0A;&#x66F8;&#x304D;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>port</code>: &#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30B5;&#x30FC;&#x30D0;&#x306E;&#x30DD;&#x30FC;&#x30C8;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 443 &#x3067;&#x3059;&#x3002;</li>\n<li><code>method</code>: HTTPS &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306E;&#x6587;&#x5B57;&#x5217;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;GET&apos;</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>path</code>: &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x306E;&#x30D1;&#x30B9;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>&apos;/&apos;</code> &#x3067;&#x3059;&#x3002;\n&#x5FC5;&#x8981;&#x306A;&#x3089;&#x554F;&#x3044;&#x5408;&#x308F;&#x305B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x542B;&#x3081;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#xFF0E;\n&#x4F8B; <code>&apos;/index.html?page=12&apos;</code></li>\n<li><code>headers</code>: &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x30D8;&#x30C3;&#x30C0;&#x3092;&#x542B;&#x3080;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3002;</li>\n<li><code>auth</code>: &#x3079;&#x30FC;&#x3057;&#x304F;&#x8A8D;&#x8A3C;&#x3059;&#x306A;&#x308F;&#x3061; Authorization &#x30D8;&#x30C3;&#x30C0;&#x306E;&#x305F;&#x3081;&#x306E; <code>&apos;user:password&apos;</code>&#x3002;</li>\n<li><code>agent</code>: [Agent][] &#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x3092;&#x5236;&#x5FA1;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x308B;&#x5834;&#x5408;&#x3001;<code>Connection:keep-alive</code> &#x304C;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x53EF;&#x80FD;&#x306A;&#x5024;&#x306F;:<ul>\n<li><code>undefined</code> (&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;): &#x30DB;&#x30B9;&#x30C8;&#x3068;&#x30DD;&#x30FC;&#x30C8;&#x3067; [globalAgent][] &#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>Agent</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;: &#x660E;&#x793A;&#x7684;&#x306B;&#x6E21;&#x3055;&#x308C;&#x305F; <code>Agent</code> &#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n<li><code>false</code>: Agent &#x306B;&#x3088;&#x308B;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x30D7;&#x30FC;&#x30EA;&#x30F3;&#x30B0;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n<code>Connection:close</code> &#x306E;&#x5834;&#x5408;&#x306E;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x3059;&#x3002;</li>\n</ul>\n</li>\n</ul>\n<!--\nThe following options from [tls.connect()][] can also be specified. However, a\n[globalAgent][] silently ignores these.\n-->\n\n<p>&#x4EE5;&#x4E0B;&#x306E; [tls.connect()][] &#x7531;&#x6765;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x30B0;&#x30ED;&#x30FC;&#x30D0;&#x30EB; [globalAgent][] &#x306F;&#x3053;&#x308C;&#x3089;&#x3092;&#x7121;&#x8996;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n- `pfx`: Certificate, Private key and CA certificates to use for SSL. Default `null`.\n- `key`: Private key to use for SSL. Default `null`.\n- `passphrase`: A string of passphrase for the private key or pfx. Default `null`.\n- `cert`: Public x509 certificate to use. Default `null`.\n- `ca`: An authority certificate or array of authority certificates to check\n  the remote host against.\n- `ciphers`: A string describing the ciphers to use or exclude. Consult\n  <http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT> for\n  details on the format.\n- `rejectUnauthorized`: If `true`, the server certificate is verified against\n  the list of supplied CAs. An `'error'` event is emitted if verification\n  fails. Verification happens at the connection level, *before* the HTTP\n  request is sent. Default `true`.\n- `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force\n  SSL version 3. The possible values depend on your installation of\n  OpenSSL and are defined in the constant [SSL_METHODS][].\n-->\n\n<ul>\n<li><code>pfx</code>: SSL &#x3067;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x8A3C;&#x660E;&#x66F8;&#x3001;&#x79D8;&#x5BC6;&#x9375;&#x3001;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;&#x8A3C;&#x660E;&#x66F8;&#x3002;\n &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>null</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>key</code>: SSL &#x3067;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x79D8;&#x5BC6;&#x9375;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>null</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>passphrase</code>: &#x79D8;&#x5BC6;&#x9375;&#x307E;&#x305F;&#x306F; pfx &#x306E;&#x30D1;&#x30B9;&#x30D5;&#x30EC;&#x30FC;&#x30BA;&#x3092;&#x8868;&#x3059;&#x6587;&#x5B57;&#x5217;&#x3002;\n &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>null</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>cert</code>: x509&#x516C;&#x958B;&#x8A3C;&#x660E;&#x66F8;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>null</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>ca</code>: &#x30EA;&#x30E2;&#x30FC;&#x30C8;&#x30DB;&#x30B9;&#x30C8;&#x3092;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x4FE1;&#x983C;&#x3067;&#x304D;&#x308B;&#x8A8D;&#x8A3C;&#x5C40;&#x307E;&#x305F;&#x306F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;&#x914D;&#x5217;&#x3002;</li>\n<li><code>ciphers</code>: &#x4F7F;&#x7528;&#x307E;&#x305F;&#x306F;&#x9664;&#x5916;&#x3059;&#x308B;&#x6697;&#x53F7;&#x3092;&#x8A18;&#x8FF0;&#x3057;&#x305F;&#x6587;&#x5B57;&#x5217;&#x3002;\n&#x8A73;&#x7D30;&#x306F; <a href="\&quot;http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT\&quot;">http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT</a>\n&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n<li><code>rejectUnauthorized</code>: <code>true</code> &#x306E;&#x5834;&#x5408;&#x3001;&#x30B5;&#x30FC;&#x30D0;&#x8A3C;&#x660E;&#x66F8;&#x306F;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x305F;&#x8A8D;&#x8A3C;&#x5C40;&#x306E;\n&#x30EA;&#x30B9;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x691C;&#x8A3C;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F; <code>&apos;error&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x8A8D;&#x8A3C;&#x306F; HTTP &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x304C;&#x9001;&#x4FE1;&#x3055;&#x308C;&#x308B; <em>&#x524D;</em> &#x306B;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x30EC;&#x30D9;&#x30EB;&#x3067;&#x884C;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; <code>true</code> &#x3067;&#x3059;&#x3002;</li>\n<li><code>secureProtocol</code>: &#x4F7F;&#x7528;&#x3059;&#x308B; SSL &#x65B9;&#x5F0F;&#x3001;&#x305F;&#x3068;&#x3048;&#x3070; <code>SSLv3_method</code> &#x306F;\nSSL &#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3; 3 &#x3092;&#x5F37;&#x5236;&#x3057;&#x307E;&#x3059;&#x3002;&#x53EF;&#x80FD;&#x306A;&#x5024;&#x306F;&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B; OpenSSL &#x3068;&#x3001;\n&#x305D;&#x306E;&#x5B9A;&#x6570; [SSL_METHODS][] &#x306E;&#x5B9A;&#x7FA9;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nIn order to specify these options, use a custom `Agent`.\n-->\n\n<p>&#x3053;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x306B;&#x306F;&#x3001;&#x30AB;&#x30B9;&#x30BF;&#x30E0;&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var options = {\n  hostname: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;,\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;)\n};\noptions.agent = new https.Agent(options);\n\nvar req = https.request(options, function(res) {\n  ...\n}</code></pre>\n<!--\nOr does not use an `Agent`.\n-->\n\n<p>&#x3042;&#x308B;&#x3044;&#x306F;&#x3001;&#x30A8;&#x30FC;&#x30B8;&#x30A7;&#x30F3;&#x30C8;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var options = {\n  hostname: &apos;encrypted.google.com&apos;,\n  port: 443,\n  path: &apos;/&apos;,\n  method: &apos;GET&apos;,\n  key: fs.readFileSync(&apos;test/fixtures/keys/agent2-key.pem&apos;),\n  cert: fs.readFileSync(&apos;test/fixtures/keys/agent2-cert.pem&apos;),\n  agent: false\n};\n\nvar req = https.request(options, function(res) {\n  ...\n}</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;https.get(options, callback)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;get&quot;,
          &quot;desc&quot;: &quot;<!--\nLike `http.get()` but for HTTPS.\n-->\n\n<p><code>http.get()</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C; HTTPS &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\n`options` can be an object or a string. If `options` is a string, it is\nautomatically parsed with [url.parse()](url.html#url.parse).\n-->\n\n<p><code>options</code> &#x306F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x5217;&#x3067;&#x3059;&#x3002;\n<code>options</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B; <a href="\&quot;url.html#url.parse\&quot;">url.parse()</a>\n&#x306B;&#x3088;&#x3063;&#x3066;&#x89E3;&#x6790;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExample:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code>var https = require(&apos;https&apos;);\n\nhttps.get(&apos;https://encrypted.google.com/&apos;, function(res) {\n  console.log(&quot;statusCode: &quot;, res.statusCode);\n  console.log(&quot;headers: &quot;, res.headers);\n\n  res.on(&apos;data&apos;, function(d) {\n    process.stdout.write(d);\n  });\n\n}).on(&apos;error&apos;, function(e) {\n  console.error(e);\n});</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;options&quot;
                },
                {
                  &quot;name&quot;: &quot;callback&quot;
                }
              ]
            }
          ]
        }
      ],
      &quot;properties&quot;: [
        {
          &quot;textRaw&quot;: &quot;https.globalAgent&quot;,
          &quot;name&quot;: &quot;globalAgent&quot;,
          &quot;desc&quot;: &quot;<!--\nGlobal instance of [https.Agent][] for all HTTPS client requests.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; HTTPS &#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;&#x3067;&#x4F7F;&#x7528;&#x3055;&#x308C;&#x308B;&#x3001;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306E;\n[https.Agent][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;HTTPS&quot;
    }
  ]
}
