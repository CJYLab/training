{
  &quot;source&quot;: &quot;doc/api/stream.markdown&quot;,
  &quot;modules&quot;: [
    {
      &quot;textRaw&quot;: &quot;Stream&quot;,
      &quot;name&quot;: &quot;stream&quot;,
      &quot;stability&quot;: 2,
      &quot;stabilityText&quot;: &quot;Unstable&quot;,
      &quot;desc&quot;: &quot;<!--\nA stream is an abstract interface implemented by various objects in\nNode.  For example a [request to an HTTP\nserver](http.html#http_http_incomingmessage) is a stream, as is\n[stdout][]. Streams are readable, writable, or both. All streams are\ninstances of [EventEmitter][]\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; Node &#x306E;&#x69D8;&#x3005;&#x306A;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x62BD;&#x8C61;&#x7684;&#x306A;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3067;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070; <a href="\&quot;http.html#http_http_incomingmessage\&quot;">HTTP &#x30B5;&#x30FC;&#x30D0;&#x3078;&#x306E;&#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;</a>&#x306F;\n[&#x6A19;&#x6E96;&#x51FA;&#x529B;][]&#x3068;&#x540C;&#x69D8;&#x306B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x3001;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x3001;&#x307E;&#x305F;&#x306F;&#x305D;&#x306E;&#x4E21;&#x65B9;&#x3067;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; [EventEmitter][] &#x306E;&#x30A4;&#x30F3;&#x30B9;&#x30BF;&#x30F3;&#x30B9;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nYou can load the Stream base classes by doing `require('stream')`.\nThere are base classes provided for [Readable][] streams, [Writable][]\nstreams, [Duplex][] streams, and [Transform][] streams.\n-->\n\n<p>Stream &#x306E;&#x30D9;&#x30FC;&#x30B9;&#x30AF;&#x30E9;&#x30B9;&#x306F; <code>require(&apos;stream&apos;)</code> &#x3067;&#x30ED;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n[Readable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3001;[Writable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3001;[Duplex][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3001;\n[Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30D9;&#x30FC;&#x30B9;&#x30AF;&#x30E9;&#x30B9;&#x304C;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis document is split up into 3 sections.  The first explains the\nparts of the API that you need to be aware of to use streams in your\nprograms.  If you never implement a streaming API yourself, you can\nstop there.\n-->\n\n<p>&#x3053;&#x306E;&#x30C9;&#x30AD;&#x30E5;&#x30E1;&#x30F3;&#x30C8;&#x306F; 3 &#x3064;&#x306E;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x5206;&#x304B;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x6700;&#x521D;&#x306B;&#x3001;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3067;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x77E5;&#x3063;&#x3066;&#x304A;&#x304F;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308B;\nAPI &#x306B;&#x3064;&#x3044;&#x3066;&#x8AAC;&#x660E;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x72EC;&#x81EA;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30DF;&#x30F3;&#x30B0; API &#x3092;&#x5B9F;&#x88C5;&#x3057;&#x306A;&#x3044;&#x306E;&#x3067;&#x3042;&#x308C;&#x3070;&#x3001;\n&#x305D;&#x3053;&#x3067;&#x7D42;&#x308F;&#x308A;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe second section explains the parts of the API that you need to use\nif you implement your own custom streams yourself.  The API is\ndesigned to make this easy for you to do.\n-->\n\n<p>2&#x756A;&#x76EE;&#x306E;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x3067;&#x306F;&#x3001;&#x72EC;&#x81EA;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x5834;&#x5408;&#x306B;&#x5FC5;&#x8981;&#x3068;&#x306A;&#x308B;\nAPI &#x306B;&#x3064;&#x3044;&#x3066;&#x8AAC;&#x660E;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E; API &#x306F;&#x305D;&#x308C;&#x304C;&#x7C21;&#x5358;&#x306B;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe third section goes into more depth about how streams work,\nincluding some of the internal mechanisms and functions that you\nshould probably not modify unless you definitely know what you are\ndoing.\n-->\n\n<p>3&#x756A;&#x76EE;&#x306E;&#x30BB;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306F;&#x3001;&#x7406;&#x89E3;&#x3059;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F;&#x5909;&#x66F4;&#x3057;&#x3066;&#x306F;&#x306A;&#x3089;&#x306A;&#x3044;\n&#x5185;&#x90E8;&#x7684;&#x306A;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x3084;&#x95A2;&#x6570;&#x7FA4;&#x3092;&#x542B;&#x3081;&#x3066;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x3069;&#x306E;&#x3088;&#x3046;&#x306B;&#x52D5;&#x4F5C;&#x3059;&#x308B;&#x304B;&#x306B;&#x3064;&#x3044;&#x3066;\n&#x3088;&#x308A;&#x8A73;&#x3057;&#x304F;&#x8AAC;&#x660E;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
      &quot;classes&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: stream.Readable&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;stream.Readable&quot;,
          &quot;desc&quot;: &quot;<!--\nThe Readable stream interface is the abstraction for a *source* of\ndata that you are reading from.  In other words, data comes *out* of a\nReadable stream.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x62BD;&#x8C61;&#x7684;&#x306A;\n<em>&#x767A;&#x751F;&#x6E90;</em> &#x3067;&#x3059;&#x3002;&#x8A00;&#x3044;&#x63DB;&#x3048;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089; <em>&#x51FA;&#x3066;</em> &#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nA Readable stream will not start emitting data until you indicate that\nyou are ready to receive it.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B;&#x6E96;&#x5099;&#x304C;&#x3067;&#x304D;&#x305F;&#x3068;&#x6307;&#x793A;&#x3059;&#x308B;&#x307E;&#x3067;&#x306F;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x751F;&#x6210;&#x3092;&#x958B;&#x59CB;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nReadable streams have two \"modes\": a **flowing mode** and a **non-flowing\nmode**.  When in flowing mode, data is read from the underlying system\nand provided to your program as fast as possible.  In non-flowing\nmode, you must explicitly call `stream.read()` to get chunks of data\nout.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x4E8C;&#x3064;&#x306E; &quot;&#x30E2;&#x30FC;&#x30C9;&quot;: <strong>flowing &#x30E2;&#x30FC;&#x30C9;</strong> &#x3068;\n<strong>non-flowing &#x30E2;&#x30FC;&#x30C9;</strong> &#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\nflowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5165;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x3068;&#x3001;\n&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x7D20;&#x65E9;&#x304F;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;&#x5C4A;&#x3051;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\nnon-flowing &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x306F;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3092;&#x53D6;&#x308A;&#x51FA;&#x3059;&#x305F;&#x3081;&#x306B;&#x3001;&#x660E;&#x793A;&#x7684;&#x306B;\n<code>stream.read()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples of readable streams include:\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [http responses, on the client](http.html#http_http_incomingmessage)\n* [http requests, on the server](http.html#http_http_incomingmessage)\n* [fs read streams](fs.html#fs_class_fs_readstream)\n* [zlib streams][]\n* [crypto streams][]\n* [tcp sockets][]\n* [child process stdout and stderr][]\n* [process.stdin][]\n-->\n\n<ul>\n<li><a href="\&quot;http.html#http_http_incomingmessage\&quot;">&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E; http &#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;</a></li>\n<li><a href="\&quot;http.html#http_http_incomingmessage\&quot;">&#x30B5;&#x30FC;&#x30D0;&#x306E; http &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;</a></li>\n<li><a href="\&quot;fs.html#fs_class_fs_readstream\&quot;">fs &#x306E; ReadStream</a></li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li>[child_process &#x306E;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3068;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;][]</li>\n<li>[process.stdin][]</li>\n</ul>\n&quot;,
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;readable&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;readable&quot;,
              &quot;desc&quot;: &quot;<!--\nWhen a chunk of data can be read from the stream, it will emit a\n`'readable'` event.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x53EF;&#x80FD;&#x3068;&#x306A;&#x3063;&#x305F;&#x6642;&#x3001;\n<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn some cases, listening for a `'readable'` event will cause some data\nto be read into the internal buffer from the underlying system, if it\nhadn't already.\n-->\n\n<p>&#x3042;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3078;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059; (&#x305D;&#x308C;&#x304C;&#x307E;&#x3060;&#x884C;&#x308F;&#x308C;&#x3066;&#x3044;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;)&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;readable&apos;, function() {\n  // there is some data to read now\n})</code></pre>\n<!--\nOnce the internal buffer is drained, a `readable` event will fire\nagain when more data is available.\n-->\n\n<p>&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x7A7A;&#x306B;&#x306A;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x6642;&#x306B;\n<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x518D;&#x3073;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;data&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;data&quot;,
              &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} The chunk of data.\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | String} &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3002;</li>\n</ul>\n<!--\nIf you attach a `data` event listener, then it will switch the stream\ninto flowing mode, and data will be passed to your handler as soon as\nit is available.\n-->\n\n<p><code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x8FFD;&#x52A0;&#x3059;&#x308B;&#x3068;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308A;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;&#x3068;&#x3059;&#x3050;&#x306B;&#x3042;&#x306A;&#x305F;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you just want to get all the data out of the stream as fast as\npossible, this is the best way to do so.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x51FA;&#x3066;&#x304F;&#x308B;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3067;&#x304D;&#x308B;&#x3060;&#x3051;&#x7D20;&#x65E9;&#x304F;&#x6B32;&#x3057;&#x3044;&#x306E;&#x306A;&#x3089;&#x3001;\n&#x3053;&#x308C;&#x304C;&#x6700;&#x5584;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n})</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;end&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;end&quot;,
              &quot;desc&quot;: &quot;<!--\nThis event fires when no more data will be provided.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x3001;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x3082;&#x3046;&#x7121;&#x304F;&#x306A;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that the `end` event **will not fire** unless the data is\ncompletely consumed.  This can be done by switching into flowing mode,\nor by calling `read()` repeatedly until you get to the end.\n-->\n\n<p><code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;&#x306F; <strong>&#x751F;&#x6210;&#x3055;&#x308C;&#x306A;&#x3044;</strong>\n&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;&#x307E;&#x305F;&#x306F;&#x7D42;&#x308F;&#x308A;&#x306B;&#x9054;&#x3059;&#x308B;&#x307E;&#x3067;\n<code>read()</code> &#x3092;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x9054;&#x6210;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n})\nreadable.on(&apos;end&apos;, function() {\n  console.log(&apos;there will be no more data.&apos;);\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;close&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted when the underlying resource (for example, the backing file\ndescriptor) has been closed. Not all streams will emit this.\n-->\n\n<p>&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9; (&#x4F8B;&#x3048;&#x3070;&#x80CC;&#x5F8C;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;) &#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x767A;&#x751F;&#x3059;&#x308B;&#x308F;&#x3051;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted if there was an error receiving data.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x53D7;&#x4FE1;&#x3067;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x3042;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ],
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;readable.read([size])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;read&quot;,
              &quot;desc&quot;: &quot;<!--\n* `size` {Number} Optional argument to specify how much data to read.\n* Return {String | Buffer | null}\n-->\n\n<ul>\n<li><code>size</code> {Number} &#x3069;&#x308C;&#x3060;&#x3051;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x304B;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x5F15;&#x6570;&#x3002;</li>\n<li>Return {String | Buffer | null}</li>\n</ul>\n<!--\nThe `read()` method pulls some data out of the internal buffer and\nreturns it.  If there is no data available, then it will return\n`null`.\n-->\n\n<p><code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D6;&#x308A;&#x51FA;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7121;&#x3051;&#x308C;&#x3070;&#x3001;<code>null</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you pass in a `size` argument, then it will return that many\nbytes.  If `size` bytes are not available, then it will return `null`.\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;&#x305D;&#x306E;&#x9577;&#x3055; (&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x6570;) &#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>size</code> &#x3067;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x9577;&#x3055;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x63C3;&#x3063;&#x3066;&#x3044;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F; <code>null</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you do not specify a `size` argument, then it will return all the\ndata in the internal buffer.\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x3042;&#x308B;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method should only be called in non-flowing mode.  In\nflowing-mode, this method is called automatically until the internal\nbuffer is drained.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; non-flowing &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x5834;&#x5408;&#x306B;&#x9650;&#x3063;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\nflowing &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x306F;&#x3001;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x7A7A;&#x306B;&#x306A;&#x308B;&#x307E;&#x3067;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;readable&apos;, function() {\n  var chunk;\n  while (null !== (chunk = readable.read())) {\n    console.log(&apos;got %d bytes of data&apos;, chunk.length);\n  }\n});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;size&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.setEncoding(encoding)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;setEncoding&quot;,
              &quot;desc&quot;: &quot;<!--\n* `encoding` {String} The encoding to use.\n-->\n\n<ul>\n<li><code>encoding</code> {String} &#x4F7F;&#x7528;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3002;</li>\n</ul>\n<!--\nCall this function to cause the stream to return strings of the\nspecified encoding instead of Buffer objects.  For example, if you do\n`readable.setEncoding('utf8')`, then the output data will be\ninterpreted as UTF-8 data, and returned as strings.  If you do\n`readable.setEncoding('hex')`, then the data will be encoded in\nhexadecimal string format.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; Buffer &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306B;&#x3088;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3059;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;<code>readable.setEncoding(&apos;utf8&apos;)</code> &#x3068;&#x3059;&#x308B;&#x3068;&#x3001;&#x5F97;&#x3089;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x306F;\nUTF-8 &#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3068;&#x3057;&#x3066;&#x89E3;&#x91C8;&#x3055;&#x308C;&#x3001;&#x6587;&#x5B57;&#x5217;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>readable.setEncoding(&apos;hex&apos;)</code> &#x3068;&#x3059;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F; 16 &#x9032;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306E;\n&#x6587;&#x5B57;&#x5217;&#x306B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis properly handles multi-byte characters that would otherwise be\npotentially mangled if you simply pulled the Buffers directly and\ncalled `buf.toString(encoding)` on them.  If you want to read the data\nas strings, always use this method.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Buffer &#x3092;&#x76F4;&#x63A5;&#x53D6;&#x5F97;&#x3057;&#x3066;&#x5358;&#x7D14;&#x306B; <code>buf.toString(encoding)</code>\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x6F5C;&#x5728;&#x7684;&#x306B;&#x3081;&#x3061;&#x3083;&#x304F;&#x3061;&#x3083;&#x306B;&#x306A;&#x308B;&#x306E;&#x3068;&#x306F;&#x7570;&#x306A;&#x308A;&#x3001;\n&#x30DE;&#x30EB;&#x30C1;&#x30D0;&#x30A4;&#x30C8;&#x6587;&#x5B57;&#x3092;&#x6B63;&#x3057;&#x304F;&#x6271;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6587;&#x5B57;&#x5217;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;&#x5E38;&#x306B;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.setEncoding(&apos;utf8&apos;);\nreadable.on(&apos;data&apos;, function(chunk) {\n  assert.equal(typeof chunk, &apos;string&apos;);\n  console.log(&apos;got %d characters of string data&apos;, chunk.length);\n})</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;encoding&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.resume()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;resume&quot;,
              &quot;desc&quot;: &quot;<!--\nThis method will cause the readable stream to resume emitting `data`\nevents.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x3092;\n&#x518D;&#x958B;&#x3059;&#x308B;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method will switch the stream into flowing-mode.  If you do *not*\nwant to consume the data from a stream, but you *do* want to get to\nits `end` event, you can call `readable.resume()` to open the flow of\ndata.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C; <em>&#x306A;&#x304F;</em>&#x3001;&#x3057;&#x304B;&#x3057; <code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x53D7;&#x3051;&#x53D6;&#x308B;&#x5FC5;&#x8981;&#x304C; <em>&#x3042;&#x308B;</em> &#x306A;&#x3089;&#x3001;<code>readable.resume()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30D5;&#x30ED;&#x30FC;&#x3092;\n&#x958B;&#x304F;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.resume();\nreadable.on(&apos;end&apos;, function(chunk) {\n  console.log(&apos;got to the end, but did not read anything&apos;);\n})</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.pause()&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;pause&quot;,
              &quot;desc&quot;: &quot;<!--\nThis method will cause a stream in flowing-mode to stop emitting\n`data` events.  Any data that becomes available will remain in the\ninternal buffer.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x3066;&#x3001;\n<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x3092;&#x4E2D;&#x65AD;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x4E2D;&#x306B;&#x6B8B;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method is only relevant in flowing mode.  When called on a\nnon-flowing stream, it will switch into flowing mode, but remain\npaused.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x3060;&#x3051;&#x95A2;&#x9023;&#x3057;&#x307E;&#x3059;&#x3002;\nnon-flowing &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x547C;&#x3070;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308A;&#x3001;\n&#x6B8B;&#x308A;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x4F11;&#x6B62;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n  readable.pause();\n  console.log(&apos;there will be no more data for 1 second&apos;);\n  setTimeout(function() {\n    console.log(&apos;now data will start flowing again&apos;);\n    readable.resume();\n  }, 1000);\n})</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.pipe(destination, [options])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;pipe&quot;,
              &quot;* `destination` {[Writable][] Stream} The destination for writing data\n* `options` {Object} Pipe options\n  * `end` {Boolean} End the writer when the reader ends. Default&quot;: &quot;`true`&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`destination` {[Writable][] Stream} &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3002; &quot;,
                      &quot;name&quot;: &quot;destination&quot;,
                      &quot;type&quot;: &quot;[Writable][] Stream&quot;,
                      &quot;desc&quot;: &quot;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3002;&quot;
                    },
                    {
                      &quot;textRaw&quot;: &quot;`options` {Object} &#x30D1;&#x30A4;&#x30D7;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3; &quot;,
                      &quot;options&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`end` {Boolean} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5143;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true` &quot;,
                          &quot;name&quot;: &quot;end&quot;,
                          &quot;type&quot;: &quot;Boolean&quot;,
                          &quot;desc&quot;: &quot;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5143;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&quot;
                        }
                      ],
                      &quot;name&quot;: &quot;options&quot;,
                      &quot;type&quot;: &quot;Object&quot;,
                      &quot;desc&quot;: &quot;&#x30D1;&#x30A4;&#x30D7;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;destination&quot;
                    },
                    {
                      &quot;name&quot;: &quot;options&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nThis method pulls all the data out of a readable stream, and writes it\nto the supplied destination, automatically managing the flow so that\nthe destination is not overwhelmed by a fast readable stream.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5F15;&#x304D;&#x51FA;&#x3057;&#x3001;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x884C;&#x304D;&#x5148;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x9AD8;&#x901F;&#x306A; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x3088;&#x3063;&#x3066;&#x51FA;&#x529B;&#x5148;&#x304C;&#x5727;&#x8FEB;&#x3055;&#x308C;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3001;\n&#x81EA;&#x52D5;&#x7684;&#x306B;&#x30D5;&#x30ED;&#x30FC;&#x5236;&#x5FA1;&#x3092;&#x884C;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nMultiple destinations can be piped to safely.\n-->\n\n<p>&#x8907;&#x6570;&#x306E;&#x51FA;&#x529B;&#x5148;&#x3092;&#x5B89;&#x5168;&#x306B;&#x9023;&#x7D50;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nvar writable = fs.createWriteStream(&apos;file.txt&apos;);\n// All the data from readable goes into &apos;file.txt&apos;\nreadable.pipe(writable);</code></pre>\n<!--\nThis function returns the destination stream, so you can set up pipe\nchains like so:\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x51FA;&#x529B;&#x5148;&#x3068;&#x306A;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x30D1;&#x30A4;&#x30D7;&#x306E;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3092;\n&#x7D44;&#x307F;&#x7ACB;&#x3066;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var r = fs.createReadStream(&apos;file.txt&apos;);\nvar z = zlib.createGzip();\nvar w = fs.createWriteStream(&apos;file.txt.gz&apos;);\nr.pipe(z).pipe(w);</code></pre>\n<!--\nFor example, emulating the Unix `cat` command:\n-->\n\n<p>Unix &#x306E; <code>cat</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x30A8;&#x30DF;&#x30E5;&#x30EC;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">process.stdin.pipe(process.stdout);</code></pre>\n<!--\nBy default [`end()`][] is called on the destination when the source stream\nemits `end`, so that `destination` is no longer writable. Pass `{ end:\nfalse }` as `options` to keep the destination stream open.\n-->\n\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x3001;&#x51FA;&#x529B;&#x5148;&#x306E; [<code>end()</code>][] &#x306F;&#x5165;&#x529B;&#x5143;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;\n<code>&apos;end&apos;</code> &#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;<code>destination</code>\n&#x306F;&#x3082;&#x3046;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x3067;&#x306F;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>{end: false }</code> &#x3092; <code>options</code> &#x3068;&#x3057;&#x3066;&#x6E21;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x51FA;&#x529B;&#x5148;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x305F;&#x307E;&#x307E;&#x306B;&#x3057;&#x3066;&#x304A;&#x304F;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis keeps `writer` open so that \"Goodbye\" can be written at the\nend.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; <code>writer</code> &#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x305F;&#x307E;&#x307E;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x6700;&#x5F8C;&#x306B;\n<code>&quot;Goodbye&quot;</code> &#x3068;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">reader.pipe(writer, { end: false });\nreader.on(&apos;end&apos;, function() {\n  writer.end(&apos;Goodbye\\n&apos;);\n});</code></pre>\n<!--\nNote that `process.stderr` and `process.stdout` are never closed until\nthe process exits, regardless of the specified options.\n-->\n\n<p><code>process.stderr</code> &#x304A;&#x3088;&#x3073; <code>process.stdout</code> &#x306F;&#x3001;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x6307;&#x5B9A;&#x306B;&#x95A2;&#x4FC2;&#x306A;&#x304F;&#x3001;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x307E;&#x3067;&#x6C7A;&#x3057;&#x3066;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;readable.unpipe([destination])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;unpipe&quot;,
              &quot;desc&quot;: &quot;<!--\n* `destination` {[Writable][] Stream} Optional specific stream to unpipe\n-->\n\n<ul>\n<li><code>destination</code> {[Writable][] Stream} &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x89E3;&#x9664;&#x3059;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis method will remove the hooks set up for a previous `pipe()` call.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x4EE5;&#x524D;&#x306E; <code>pipe()</code> &#x547C;&#x3073;&#x51FA;&#x3057;&#x3067;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30C3;&#x30AF;&#x3092;&#x53D6;&#x308A;&#x9664;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the destination is not specified, then all pipes are removed.\n-->\n\n<p><code>destination</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5168;&#x3066;&#x306E;&#x30D1;&#x30A4;&#x30D7;&#x304C;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the destination is specified, but no pipe is set up for it, then\nthis is a no-op.\n-->\n\n<p><code>destination</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x3082;&#x306E;&#x306E;&#x3001;&#x305D;&#x308C;&#x304C;&#x30D1;&#x30A4;&#x30D7;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x3053;&#x308C;&#x306F;&#x4F55;&#x3082;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nvar writable = fs.createWriteStream(&apos;file.txt&apos;);\n// All the data from readable goes into &apos;file.txt&apos;,\n// but only for the first second\nreadable.pipe(writable);\nsetTimeout(function() {\n  console.log(&apos;stop writing to file.txt&apos;);\n  readable.unpipe(writable);\n  console.log(&apos;manually close the file stream&apos;);\n  writable.end();\n}, 1000);</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;destination&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.unshift(chunk)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;unshift&quot;,
              &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} Chunk of data to unshift onto the read queue\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | String} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306E;&#x5148;&#x982D;&#x306B;&#x623B;&#x3055;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;</li>\n</ul>\n<!--\nThis is useful in certain cases where a stream is being consumed by a\nparser, which needs to \"un-consume\" some data that it has\noptimistically pulled out of the source, so that the stream can be\npassed on to some other party.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30D1;&#x30FC;&#x30B5;&#x306B;&#x3088;&#x3063;&#x3066;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x306B;&#x304A;&#x3044;&#x3066;&#x6709;&#x7528;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x697D;&#x89B3;&#x7684;&#x306B;&#x53D6;&#x308A;&#x51FA;&#x3057;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x300C;&#x6D88;&#x8CBB;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x300D;&#x3053;&#x3068;&#x306B;&#x3057;&#x3066;&#x3001;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4ED6;&#x306E;&#x3068;&#x3053;&#x308D;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6E21;&#x305B;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x5834;&#x5408;&#x306B;&#x5FC5;&#x8981;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you find that you must often call `stream.unshift(chunk)` in your\nprograms, consider implementing a [Transform][] stream instead.  (See API\nfor Stream Implementors, below.)\n-->\n\n<p><code>stream.unshift(chunk)</code> &#x3092;&#x983B;&#x7E41;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x304F;&#x3066;&#x306F;&#x306A;&#x3089;&#x306A;&#x3044;&#x3068;&#x3057;&#x305F;&#x3089;&#x3001;\n&#x4EE3;&#x308F;&#x308A;&#x306B; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x691C;&#x8A0E;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;\n(&#x5F8C;&#x8FF0;&#x3059;&#x308B; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5B9F;&#x88C5;&#x8005;&#x5411;&#x3051;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Pull off a header delimited by \\n\\n\n// use unshift() if we get too much\n// Call the callback with (error, header, stream)\nvar StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;\nfunction parseHeader(stream, callback) {\n  stream.on(&apos;error&apos;, callback);\n  stream.on(&apos;readable&apos;, onReadable);\n  var decoder = new StringDecoder(&apos;utf8&apos;);\n  var header = &apos;&apos;;\n  function onReadable() {\n    var chunk;\n    while (null !== (chunk = stream.read())) {\n      var str = decoder.write(chunk);\n      if (str.match(/\\n\\n/)) {\n        // found the header boundary\n        var split = str.split(/\\n\\n/);\n        header += split.shift();\n        var remaining = split.join(&apos;\\n\\n&apos;);\n        var buf = new Buffer(remaining, &apos;utf8&apos;);\n        if (buf.length)\n          stream.unshift(buf);\n        stream.removeListener(&apos;error&apos;, callback);\n        stream.removeListener(&apos;readable&apos;, onReadable);\n        // now the body of the message can be read from the stream.\n        callback(null, header, stream);\n      } else {\n        // still reading the header.\n        header += str;\n      }\n    }\n  }\n}</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;chunk&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.wrap(stream)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;wrap&quot;,
              &quot;desc&quot;: &quot;<!--\n* `stream` {Stream} An \"old style\" readable stream\n-->\n\n<ul>\n<li><code>stream</code> {Stream} &#x300C;&#x53E4;&#x3044;&#x30B9;&#x30BF;&#x30A4;&#x30EB;&#x300D;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nVersions of Node prior to v0.10 had streams that did not implement the\nentire Streams API as it is today.  (See \"Compatibility\" below for\nmore information.)\n-->\n\n<p>v0.10 &#x3088;&#x308A;&#x524D;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E; Node &#x306B;&#x306F;&#x3001;&#x4ECA;&#x65E5;&#x306E;&#x5168;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0; API &#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x3044;&#x306A;&#x3044;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x3042;&#x308A;&#x307E;&#x3057;&#x305F; (&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F;&#x5F8C;&#x8FF0;&#x3059;&#x308B;&#x300C;[&#x4E92;&#x63DB;&#x6027;][]&#x300D;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<!--\nIf you are using an older Node library that emits `'data'` events and\nhas a `pause()` method that is advisory only, then you can use the\n`wrap()` method to create a [Readable][] stream that uses the old stream\nas its data source.\n-->\n\n<p>&#x3082;&#x3057;&#x3001;<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x3001;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x3060;&#x3051;&#x3092;&#x884C;&#x3046; <code>pause()</code>\n&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x6301;&#x3064;&#x3001;&#x53E4;&#x3044; Node &#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x308B;&#x306A;&#x3089;&#x3001;\n<code>wrap()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x53E4;&#x3044;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x30C7;&#x30FC;&#x30BF;&#x30BD;&#x30FC;&#x30B9;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x7528;&#x3059;&#x308B;\n[Readable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nYou will very rarely ever need to call this function, but it exists\nas a convenience for interacting with old Node programs and libraries.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x306F;&#x6EC5;&#x591A;&#x306B;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;&#x3053;&#x308C;&#x306F;&#x53E4;&#x3044; Node\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x53CA;&#x3073;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3068;&#x76F8;&#x4E92;&#x4F5C;&#x7528;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x5229;&#x4FBF;&#x6027;&#x306E;&#x305F;&#x3081;&#x306B;&#x5B58;&#x5728;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var OldReader = require(&apos;./old-api-module.js&apos;).OldReader;\nvar oreader = new OldReader;\nvar Readable = require(&apos;stream&apos;).Readable;\nvar myReader = new Readable().wrap(oreader);\n\nmyReader.on(&apos;readable&apos;, function() {\n  myReader.read(); // etc.\n});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;stream&quot;
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: stream.Writable&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;stream.Writable&quot;,
          &quot;desc&quot;: &quot;<!--\nThe Writable stream interface is an abstraction for a *destination*\nthat you are writing data *to*.\n-->\n\n<p>Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x62BD;&#x8C61;&#x7684;&#x306A;\n<em>&#x884C;&#x304D;&#x5148;</em> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples of writable streams include:\n-->\n\n<p>Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [http requests, on the client](http.html#http_class_http_clientrequest)\n* [http responses, on the server](http.html#http_class_http_serverresponse)\n* [fs write streams](fs.html#fs_class_fs_writestream)\n* [zlib streams][]\n* [crypto streams][]\n* [tcp sockets][]\n* [child process stdin](child_process.html#child_process_child_stdin)\n* [process.stdout][], [process.stderr][]\n-->\n\n<ul>\n<li><a href="\&quot;http.html#http_class_http_clientrequest\&quot;">&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E; http &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;</a></li>\n<li><a href="\&quot;http.html#http_class_http_serverresponse\&quot;">&#x30B5;&#x30FC;&#x30D0;&#x306E; http &#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;</a></li>\n<li><a href="\&quot;fs.html#fs_class_fs_writestream\&quot;">fs &#x306E; WriteStream</a></li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li><a href="\&quot;child_process.html#child_process_child_stdin\&quot;">child_process &#x306E;&#x6A19;&#x6E96;&#x5165;&#x529B;</a></li>\n<li>[process.stdout][], [process.stderr][]</li>\n</ul>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;writable.write(chunk, [encoding], [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;write&quot;,
              &quot;desc&quot;: &quot;<!--\n* `chunk` {String | Buffer} The data to write\n* `encoding` {String} The encoding, if `chunk` is a String\n* `callback` {Function} Callback for when this chunk of data is flushed\n* Returns: {Boolean} True if the data was handled completely.\n-->\n\n<ul>\n<li><code>chunk</code> {String | Buffer} &#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;</li>\n<li><code>encoding</code> {String} &#x3082;&#x3057; <code>chunk</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;</li>\n<li><code>callback</code> {Function} &#x30C7;&#x30FC;&#x30BF;&#x304C;&#x6383;&#x304D;&#x51FA;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;</li>\n<li>Returns: {Boolean} &#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x51E6;&#x7406;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F; <code>true</code>&#x3002;</li>\n</ul>\n<!--\nThis method writes some data to the underlying system, and calls the\nsupplied callback once the data has been fully handled.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x51E6;&#x7406;&#x3055;&#x308C;&#x308B;&#x3068;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x4E00;&#x5EA6;&#x3060;&#x3051;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe return value indicates if you should continue writing right now.\nIf the data had to be buffered internally, then it will return\n`false`.  Otherwise, it will return `true`.\n-->\n\n<p>&#x623B;&#x308A;&#x5024;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3092;&#x3059;&#x3050;&#x306B;&#x7D9A;&#x3051;&#x3066;&#x3044;&#x3044;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5185;&#x90E8;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x306A;&#x3089; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070; <code>true</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis return value is strictly advisory.  You MAY continue to write,\neven if it returns `false`.  However, writes will be buffered in\nmemory, so it is best not to do this excessively.  Instead, wait for\nthe `drain` event before writing more data.\n-->\n\n<p>&#x3053;&#x306E;&#x623B;&#x308A;&#x5024;&#x306F;&#x5B8C;&#x5168;&#x306B;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x7684;&#x3067;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x3053;&#x308C;&#x304C; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x3066;&#x3082;&#x3001;&#x3042;&#x306A;&#x305F;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3092;&#x7D9A;&#x3051;&#x308B;&#x3053;&#x3068;&#x304C;&#x300C;&#x3067;&#x304D;&#x307E;&#x3059;&#x300D;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x30E1;&#x30E2;&#x30EA;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;&#x3001;\n&#x3053;&#x308C;&#x3092;&#x904E;&#x5270;&#x306B;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x304C;&#x6700;&#x5584;&#x3067;&#x3059;&#x3002;\n&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304F;&#x524D;&#x306B; <code>&apos;drain&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x5F85;&#x6A5F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;chunk&quot;
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;writable.end([chunk], [encoding], [callback])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;end&quot;,
              &quot;desc&quot;: &quot;<!--\n* `chunk` {String | Buffer} Optional data to write\n* `encoding` {String} The encoding, if `chunk` is a String\n* `callback` {Function} Optional callback for when the stream is finished\n-->\n\n<ul>\n<li><code>chunk</code> {String | Buffer} &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;</li>\n<li><code>encoding</code> {String} &#x3082;&#x3057; <code>chunk</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;</li>\n<li><code>callback</code> {Function} &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x7D42;&#x4E86;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3001;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;</li>\n</ul>\n<!--\nCall this method when no more data will be written to the stream.  If\nsupplied, the callback is attached as a listener on the `finish` event.\n-->\n\n<p>&#x3053;&#x308C;&#x4EE5;&#x4E0A;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x306A;&#x3044;&#x5834;&#x5408;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x305D;&#x308C;&#x306F; <code>&apos;finish&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;\n&#x30A2;&#x30BF;&#x30C3;&#x30C1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCalling [`write()`][] after calling [`end()`][] will raise an error.\n-->\n\n<p>[<code>end()</code>][] &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x5F8C;&#x3067; [<code>write()</code>][] &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// write &apos;hello, &apos; and then end with &apos;world!&apos;\nhttp.createServer(function (req, res) {\n  res.write(&apos;hello, &apos;);\n  res.end(&apos;world!&apos;);\n  // writing more now is not allowed!\n});</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;chunk&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    },
                    {
                      &quot;name&quot;: &quot;callback&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ],
          &quot;events&quot;: [
            {
              &quot;textRaw&quot;: &quot;Event: &apos;drain&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;drain&quot;,
              &quot;desc&quot;: &quot;<!--\nIf a [`writable.write(chunk)`][] call returns false, then the `drain`\nevent will indicate when it is appropriate to begin writing more data\nto the stream.\n-->\n\n<p>[<code>write(chunk, encoding, callback)</code>][] &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x304C; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3044;&#x3064;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x59CB;&#x3081;&#x308B;&#x306E;&#x304C;&#x9069;&#x5207;&#x304B;&#x3092;\n<code>&apos;drain&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Write the data to the supplied writable stream 1MM times.\n// Be attentive to back-pressure.\nfunction writeOneMillionTimes(writer, data, encoding, callback) {\n  var i = 1000000;\n  write();\n  function write() {\n    var ok = true;\n    do {\n      i -= 1;\n      if (i === 0) {\n        // last time!\n        writer.write(data, encoding, callback);\n      } else {\n        // see if we should continue, or wait\n        // don&apos;t pass the callback, because we&apos;re not done yet.\n        ok = writer.write(data, encoding);\n      }\n    } while (i &gt; 0 &amp;&amp; ok);\n    if (i &gt; 0) {\n      // had to stop early!\n      // write some more once it drains\n      writer.once(&apos;drain&apos;, write);\n    }\n  }\n}</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;finish&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;finish&quot;,
              &quot;desc&quot;: &quot;<!--\nWhen the [`end()`][] method has been called, and all data has been flushed\nto the underlying system, this event is emitted.\n-->\n\n<p>[<code>end()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3001;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;\n&#x6383;&#x304D;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nfor (var i = 0; i &lt; 100; i ++) {\n  writer.write(&apos;hello, #&apos; + i + &apos;!\\n&apos;);\n}\nwriter.end(&apos;this is the end\\n&apos;);\nwriter.on(&apos;finish&apos;, function() {\n  console.error(&apos;all writes are now complete.&apos;);\n});</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;pipe&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;pipe&quot;,
              &quot;desc&quot;: &quot;<!--\n* `src` {[Readable][] Stream} source stream that is piping to this writable\n-->\n\n<ul>\n<li><code>src</code> {[Readable][] Stream} &#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x3064;&#x306A;&#x304C;&#x308C;&#x305F;\n&#x5165;&#x529B;&#x5143;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis is emitted whenever the `pipe()` method is called on a readable\nstream, adding this writable to its set of destinations.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E; <code>pipe()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3001;\n&#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x51FA;&#x529B;&#x5148;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nvar reader = getReadableStreamSomehow();\nwriter.on(&apos;pipe&apos;, function(src) {\n  console.error(&apos;something is piping into the writer&apos;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;unpipe&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;unpipe&quot;,
              &quot;desc&quot;: &quot;<!--\n* `src` {[Readable][] Stream} The source stream that [unpiped][] this writable\n-->\n\n<ul>\n<li><code>src</code> {[Readable][] Stream} &#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;[&#x5207;&#x308A;&#x96E2;&#x3055;&#x308C;&#x305F;][]\n&#x5165;&#x529B;&#x5143;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis is emitted whenever the [`unpipe()`][] method is called on a\nreadable stream, removing this writable from its set of destinations.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067; [<code>unpipe()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3001;\n&#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x51FA;&#x529B;&#x5148;&#x304B;&#x3089;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nvar reader = getReadableStreamSomehow();\nwriter.on(&apos;unpipe&apos;, function(src) {\n  console.error(&apos;something has stopped piping into the writer&apos;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\nreader.unpipe(writer);</code></pre>\n&quot;,
              &quot;params&quot;: []
            },
            {
              &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
              &quot;type&quot;: &quot;event&quot;,
              &quot;name&quot;: &quot;error&quot;,
              &quot;desc&quot;: &quot;<!--\nEmitted if there was an error when writing or piping data.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x4E2D;&#x307E;&#x305F;&#x306F;&#x30D1;&#x30A4;&#x30D7;&#x4E2D;&#x306B;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;params&quot;: []
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Class: stream.Duplex&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;stream.Duplex&quot;,
          &quot;desc&quot;: &quot;<!--\nDuplex streams are streams that implement both the [Readable][] and\n[Writable][] interfaces.  See above for usage.\n-->\n\n<p>Duplex &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; [Readable][] &#x3068; [Writable][] &#x4E21;&#x65B9;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;\n&#x5B9F;&#x88C5;&#x3057;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;&#x4F7F;&#x3044;&#x65B9;&#x306F;&#x4E0A;&#x8A18;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExamples of Duplex streams include:\n-->\n\n<p>Duplex &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [tcp sockets][]\n* [zlib streams][]\n* [crypto streams][]\n-->\n\n<ul>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n</ul>\n&quot;
        },
        {
          &quot;textRaw&quot;: &quot;Class: stream.Transform&quot;,
          &quot;type&quot;: &quot;class&quot;,
          &quot;name&quot;: &quot;stream.Transform&quot;,
          &quot;desc&quot;: &quot;<!--\nTransform streams are [Duplex][] streams where the output is in some way\ncomputed from the input.  They implement both the [Readable][] and\n[Writable][] interfaces.  See above for usage.\n-->\n\n<p>Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x5165;&#x529B;&#x304B;&#x3089;&#x4F55;&#x3089;&#x304B;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x51FA;&#x529B;&#x304C;&#x8A08;&#x7B97;&#x3055;&#x308C;&#x308B; [Duplex][]\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306F; [Readable][] &#x3068; [Writable][] &#x4E21;&#x65B9;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F7F;&#x3044;&#x65B9;&#x306F;&#x4E0A;&#x8A18;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExamples of Transform streams include:\n-->\n\n<p>Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [zlib streams][]\n* [crypto streams][]\n-->\n\n<ul>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n</ul>\n&quot;
        }
      ],
      &quot;miscs&quot;: [
        {
          &quot;textRaw&quot;: &quot;API for Stream Consumers&quot;,
          &quot;name&quot;: &quot;API for Stream Consumers&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nStreams can be either [Readable][], [Writable][], or both ([Duplex][]).\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;[Readable][]&#x3001;[Writable][]&#x3001;&#x307E;&#x305F;&#x306F;&#x305D;&#x306E;&#x4E21;&#x65B9; ([Duplex][])\n&#x306E;&#x3044;&#x305A;&#x308C;&#x304B;&#x306B;&#x306A;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nAll streams are EventEmitters, but they also have other custom methods\nand properties depending on whether they are Readable, Writable, or\nDuplex.\n-->\n\n<p>&#x5168;&#x3066;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; EventEmitter &#x3067;&#x3059;&#x304C;&#x3001;Readable&#x3001;Writable&#x3001;&#x307E;&#x305F;&#x306F; Duplex\n&#x306E;&#x3044;&#x305A;&#x308C;&#x3067;&#x3042;&#x308B;&#x304B;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;&#x72EC;&#x81EA;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3084;&#x30D7;&#x30ED;&#x30D1;&#x30C6;&#x30A3;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf a stream is both Readable and Writable, then it implements all of\nthe methods and events below.  So, a [Duplex][] or [Transform][] stream is\nfully described by this API, though their implementation may be\nsomewhat different.\n-->\n\n<p>&#x3082;&#x3057;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; [Readable][] &#x3068;[Writable][] &#x306E;&#x4E21;&#x65B9;&#x3067;&#x3042;&#x308B;&#x306A;&#x3089;&#x3001;\n&#x305D;&#x308C;&#x306F;&#x4EE5;&#x4E0B;&#x306E;&#x5168;&#x3066;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3068;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n[Duplex][] &#x307E;&#x305F;&#x306F; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5B9F;&#x88C5;&#x306F;&#x591A;&#x5C11;&#x7570;&#x306A;&#x308B;&#x5834;&#x5408;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x3053;&#x306E; API &#x306B;&#x3088;&#x3063;&#x3066;&#x8A73;&#x7D30;&#x306B;&#x8AAC;&#x660E;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIt is not necessary to implement Stream interfaces in order to consume\nstreams in your programs.  If you **are** implementing streaming\ninterfaces in your own program, please also refer to\n[API for Stream Implementors][] below.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3082;&#x3057;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30DF;&#x30F3;&#x30B0;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5; <strong>&#x3059;&#x308B;</strong> &#x306A;&#x3089;&#x3001;\n&#x4EE5;&#x4E0B;&#x306E; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5B9F;&#x88C5;&#x8005;&#x5411;&#x3051;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nAlmost all Node programs, no matter how simple, use Streams in some\nway.  Here is an example of using Streams in a Node program:\n-->\n\n<p>&#x307B;&#x3068;&#x3093;&#x3069;&#x5168;&#x3066;&#x306E; Node &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x3001;&#x3069;&#x3093;&#x306A;&#x306B;&#x5358;&#x7D14;&#x3067;&#x3042;&#x3063;&#x3066;&#x3082;&#x3001;\n&#x4F55;&#x3089;&#x304B;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B; Node &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4F8B;&#x3067;&#x3059;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var http = require(&apos;http&apos;);\n\nvar server = http.createServer(function (req, res) {\n  // req is an http.IncomingMessage, which is a Readable Stream\n  // res is an http.ServerResponse, which is a Writable Stream\n\n  var body = &apos;&apos;;\n  // we want to get the data as utf8 strings\n  // If you don&apos;t set an encoding, then you&apos;ll get Buffer objects\n  req.setEncoding(&apos;utf8&apos;);\n\n  // Readable streams emit &apos;data&apos; events once a listener is added\n  req.on(&apos;data&apos;, function (chunk) {\n    body += chunk;\n  })\n\n  // the end event tells you that you have entire body\n  req.on(&apos;end&apos;, function () {\n    try {\n      var data = JSON.parse(body);\n    } catch (er) {\n      // uh oh!  bad json!\n      res.statusCode = 400;\n      return res.end(&apos;error: &apos; + er.message);\n    }\n\n    // write back something interesting to the user:\n    res.write(typeof data);\n    res.end();\n  })\n})\n\nserver.listen(1337);\n\n// $ curl localhost:1337 -d &apos;{}&apos;\n// object\n// $ curl localhost:1337 -d &apos;&quot;foo&quot;&apos;\n// string\n// $ curl localhost:1337 -d &apos;not json&apos;\n// error: Unexpected token o</code></pre>\n&quot;,
          &quot;classes&quot;: [
            {
              &quot;textRaw&quot;: &quot;Class: stream.Readable&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Readable&quot;,
              &quot;desc&quot;: &quot;<!--\nThe Readable stream interface is the abstraction for a *source* of\ndata that you are reading from.  In other words, data comes *out* of a\nReadable stream.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x62BD;&#x8C61;&#x7684;&#x306A;\n<em>&#x767A;&#x751F;&#x6E90;</em> &#x3067;&#x3059;&#x3002;&#x8A00;&#x3044;&#x63DB;&#x3048;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089; <em>&#x51FA;&#x3066;</em> &#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nA Readable stream will not start emitting data until you indicate that\nyou are ready to receive it.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B;&#x6E96;&#x5099;&#x304C;&#x3067;&#x304D;&#x305F;&#x3068;&#x6307;&#x793A;&#x3059;&#x308B;&#x307E;&#x3067;&#x306F;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x751F;&#x6210;&#x3092;&#x958B;&#x59CB;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nReadable streams have two \"modes\": a **flowing mode** and a **non-flowing\nmode**.  When in flowing mode, data is read from the underlying system\nand provided to your program as fast as possible.  In non-flowing\nmode, you must explicitly call `stream.read()` to get chunks of data\nout.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x4E8C;&#x3064;&#x306E; &quot;&#x30E2;&#x30FC;&#x30C9;&quot;: <strong>flowing &#x30E2;&#x30FC;&#x30C9;</strong> &#x3068;\n<strong>non-flowing &#x30E2;&#x30FC;&#x30C9;</strong> &#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\nflowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5165;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x3068;&#x3001;\n&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x7D20;&#x65E9;&#x304F;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;&#x5C4A;&#x3051;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\nnon-flowing &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x306F;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3092;&#x53D6;&#x308A;&#x51FA;&#x3059;&#x305F;&#x3081;&#x306B;&#x3001;&#x660E;&#x793A;&#x7684;&#x306B;\n<code>stream.read()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples of readable streams include:\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [http responses, on the client](http.html#http_http_incomingmessage)\n* [http requests, on the server](http.html#http_http_incomingmessage)\n* [fs read streams](fs.html#fs_class_fs_readstream)\n* [zlib streams][]\n* [crypto streams][]\n* [tcp sockets][]\n* [child process stdout and stderr][]\n* [process.stdin][]\n-->\n\n<ul>\n<li><a href="\&quot;http.html#http_http_incomingmessage\&quot;">&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E; http &#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;</a></li>\n<li><a href="\&quot;http.html#http_http_incomingmessage\&quot;">&#x30B5;&#x30FC;&#x30D0;&#x306E; http &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;</a></li>\n<li><a href="\&quot;fs.html#fs_class_fs_readstream\&quot;">fs &#x306E; ReadStream</a></li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li>[child_process &#x306E;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3068;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;][]</li>\n<li>[process.stdin][]</li>\n</ul>\n&quot;,
              &quot;events&quot;: [
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;readable&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;readable&quot;,
                  &quot;desc&quot;: &quot;<!--\nWhen a chunk of data can be read from the stream, it will emit a\n`'readable'` event.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x53EF;&#x80FD;&#x3068;&#x306A;&#x3063;&#x305F;&#x6642;&#x3001;\n<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn some cases, listening for a `'readable'` event will cause some data\nto be read into the internal buffer from the underlying system, if it\nhadn't already.\n-->\n\n<p>&#x3042;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x76E3;&#x8996;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3078;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059; (&#x305D;&#x308C;&#x304C;&#x307E;&#x3060;&#x884C;&#x308F;&#x308C;&#x3066;&#x3044;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;)&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;readable&apos;, function() {\n  // there is some data to read now\n})</code></pre>\n<!--\nOnce the internal buffer is drained, a `readable` event will fire\nagain when more data is available.\n-->\n\n<p>&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x7A7A;&#x306B;&#x306A;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x6642;&#x306B;\n<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x518D;&#x3073;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;data&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} The chunk of data.\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | String} &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;&#x3002;</li>\n</ul>\n<!--\nIf you attach a `data` event listener, then it will switch the stream\ninto flowing mode, and data will be passed to your handler as soon as\nit is available.\n-->\n\n<p><code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3092;&#x8FFD;&#x52A0;&#x3059;&#x308B;&#x3068;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308A;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;&#x3068;&#x3059;&#x3050;&#x306B;&#x3042;&#x306A;&#x305F;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you just want to get all the data out of the stream as fast as\npossible, this is the best way to do so.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x51FA;&#x3066;&#x304F;&#x308B;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3067;&#x304D;&#x308B;&#x3060;&#x3051;&#x7D20;&#x65E9;&#x304F;&#x6B32;&#x3057;&#x3044;&#x306E;&#x306A;&#x3089;&#x3001;\n&#x3053;&#x308C;&#x304C;&#x6700;&#x5584;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n})</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;end&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;end&quot;,
                  &quot;desc&quot;: &quot;<!--\nThis event fires when no more data will be provided.\n-->\n\n<p>&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x3001;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x3082;&#x3046;&#x7121;&#x304F;&#x306A;&#x3063;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that the `end` event **will not fire** unless the data is\ncompletely consumed.  This can be done by switching into flowing mode,\nor by calling `read()` repeatedly until you get to the end.\n-->\n\n<p><code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;&#x306F; <strong>&#x751F;&#x6210;&#x3055;&#x308C;&#x306A;&#x3044;</strong>\n&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x3001;&#x307E;&#x305F;&#x306F;&#x7D42;&#x308F;&#x308A;&#x306B;&#x9054;&#x3059;&#x308B;&#x307E;&#x3067;\n<code>read()</code> &#x3092;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x9054;&#x6210;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n})\nreadable.on(&apos;end&apos;, function() {\n  console.log(&apos;there will be no more data.&apos;);\n});</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;close&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;close&quot;,
                  &quot;desc&quot;: &quot;<!--\nEmitted when the underlying resource (for example, the backing file\ndescriptor) has been closed. Not all streams will emit this.\n-->\n\n<p>&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9; (&#x4F8B;&#x3048;&#x3070;&#x80CC;&#x5F8C;&#x306E;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x8A18;&#x8FF0;&#x5B50;) &#x304C;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x5168;&#x3066;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x767A;&#x751F;&#x3059;&#x308B;&#x308F;&#x3051;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;error&quot;,
                  &quot;desc&quot;: &quot;<!--\nEmitted if there was an error receiving data.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x53D7;&#x4FE1;&#x3067;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x3042;&#x308B;&#x3068;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
                  &quot;params&quot;: []
                }
              ],
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;readable.read([size])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;read&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `size` {Number} Optional argument to specify how much data to read.\n* Return {String | Buffer | null}\n-->\n\n<ul>\n<li><code>size</code> {Number} &#x3069;&#x308C;&#x3060;&#x3051;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x304B;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x5F15;&#x6570;&#x3002;</li>\n<li>Return {String | Buffer | null}</li>\n</ul>\n<!--\nThe `read()` method pulls some data out of the internal buffer and\nreturns it.  If there is no data available, then it will return\n`null`.\n-->\n\n<p><code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D6;&#x308A;&#x51FA;&#x3057;&#x3066;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7121;&#x3051;&#x308C;&#x3070;&#x3001;<code>null</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you pass in a `size` argument, then it will return that many\nbytes.  If `size` bytes are not available, then it will return `null`.\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;&#x305D;&#x306E;&#x9577;&#x3055; (&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x307E;&#x305F;&#x306F;&#x6587;&#x5B57;&#x6570;) &#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>size</code> &#x3067;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x9577;&#x3055;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x63C3;&#x3063;&#x3066;&#x3044;&#x306A;&#x3044;&#x5834;&#x5408;&#x306F; <code>null</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you do not specify a `size` argument, then it will return all the\ndata in the internal buffer.\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x3092;&#x6307;&#x5B9A;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x3042;&#x308B;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method should only be called in non-flowing mode.  In\nflowing-mode, this method is called automatically until the internal\nbuffer is drained.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; non-flowing &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x5834;&#x5408;&#x306B;&#x9650;&#x3063;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\nflowing &#x30E2;&#x30FC;&#x30C9;&#x3067;&#x306F;&#x3001;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C;&#x7A7A;&#x306B;&#x306A;&#x308B;&#x307E;&#x3067;\n&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x81EA;&#x52D5;&#x7684;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;readable&apos;, function() {\n  var chunk;\n  while (null !== (chunk = readable.read())) {\n    console.log(&apos;got %d bytes of data&apos;, chunk.length);\n  }\n});</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;size&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.setEncoding(encoding)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;setEncoding&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `encoding` {String} The encoding to use.\n-->\n\n<ul>\n<li><code>encoding</code> {String} &#x4F7F;&#x7528;&#x3059;&#x308B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3002;</li>\n</ul>\n<!--\nCall this function to cause the stream to return strings of the\nspecified encoding instead of Buffer objects.  For example, if you do\n`readable.setEncoding('utf8')`, then the output data will be\ninterpreted as UTF-8 data, and returned as strings.  If you do\n`readable.setEncoding('hex')`, then the data will be encoded in\nhexadecimal string format.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; Buffer &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B;\n&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306B;&#x3088;&#x308B;&#x6587;&#x5B57;&#x5217;&#x3092;&#x8FD4;&#x3059;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;<code>readable.setEncoding(&apos;utf8&apos;)</code> &#x3068;&#x3059;&#x308B;&#x3068;&#x3001;&#x5F97;&#x3089;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x306F;\nUTF-8 &#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3068;&#x3057;&#x3066;&#x89E3;&#x91C8;&#x3055;&#x308C;&#x3001;&#x6587;&#x5B57;&#x5217;&#x304C;&#x8FD4;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>readable.setEncoding(&apos;hex&apos;)</code> &#x3068;&#x3059;&#x308B;&#x3068;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306F; 16 &#x9032;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x306E;\n&#x6587;&#x5B57;&#x5217;&#x306B;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis properly handles multi-byte characters that would otherwise be\npotentially mangled if you simply pulled the Buffers directly and\ncalled `buf.toString(encoding)` on them.  If you want to read the data\nas strings, always use this method.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Buffer &#x3092;&#x76F4;&#x63A5;&#x53D6;&#x5F97;&#x3057;&#x3066;&#x5358;&#x7D14;&#x306B; <code>buf.toString(encoding)</code>\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x6F5C;&#x5728;&#x7684;&#x306B;&#x3081;&#x3061;&#x3083;&#x304F;&#x3061;&#x3083;&#x306B;&#x306A;&#x308B;&#x306E;&#x3068;&#x306F;&#x7570;&#x306A;&#x308A;&#x3001;\n&#x30DE;&#x30EB;&#x30C1;&#x30D0;&#x30A4;&#x30C8;&#x6587;&#x5B57;&#x3092;&#x6B63;&#x3057;&#x304F;&#x6271;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6587;&#x5B57;&#x5217;&#x3068;&#x3057;&#x3066;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;&#x5E38;&#x306B;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x7528;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.setEncoding(&apos;utf8&apos;);\nreadable.on(&apos;data&apos;, function(chunk) {\n  assert.equal(typeof chunk, &apos;string&apos;);\n  console.log(&apos;got %d characters of string data&apos;, chunk.length);\n})</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;encoding&quot;
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.resume()&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;resume&quot;,
                  &quot;desc&quot;: &quot;<!--\nThis method will cause the readable stream to resume emitting `data`\nevents.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C; <code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x3092;\n&#x518D;&#x958B;&#x3059;&#x308B;&#x3088;&#x3046;&#x306B;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method will switch the stream into flowing-mode.  If you do *not*\nwant to consume the data from a stream, but you *do* want to get to\nits `end` event, you can call `readable.resume()` to open the flow of\ndata.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C; <em>&#x306A;&#x304F;</em>&#x3001;&#x3057;&#x304B;&#x3057; <code>&apos;end&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x53D7;&#x3051;&#x53D6;&#x308B;&#x5FC5;&#x8981;&#x304C; <em>&#x3042;&#x308B;</em> &#x306A;&#x3089;&#x3001;<code>readable.resume()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30D5;&#x30ED;&#x30FC;&#x3092;\n&#x958B;&#x304F;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.resume();\nreadable.on(&apos;end&apos;, function(chunk) {\n  console.log(&apos;got to the end, but did not read anything&apos;);\n})</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: []
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.pause()&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;pause&quot;,
                  &quot;desc&quot;: &quot;<!--\nThis method will cause a stream in flowing-mode to stop emitting\n`data` events.  Any data that becomes available will remain in the\ninternal buffer.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x3066;&#x3001;\n<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x3092;&#x4E2D;&#x65AD;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x4E2D;&#x306B;&#x6B8B;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method is only relevant in flowing mode.  When called on a\nnon-flowing stream, it will switch into flowing mode, but remain\npaused.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x3060;&#x3051;&#x95A2;&#x9023;&#x3057;&#x307E;&#x3059;&#x3002;\nnon-flowing &#x30E2;&#x30FC;&#x30C9;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x547C;&#x3070;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308A;&#x3001;\n&#x6B8B;&#x308A;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x4F11;&#x6B62;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nreadable.on(&apos;data&apos;, function(chunk) {\n  console.log(&apos;got %d bytes of data&apos;, chunk.length);\n  readable.pause();\n  console.log(&apos;there will be no more data for 1 second&apos;);\n  setTimeout(function() {\n    console.log(&apos;now data will start flowing again&apos;);\n    readable.resume();\n  }, 1000);\n})</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: []
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.pipe(destination, [options])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;pipe&quot;,
                  &quot;* `destination` {[Writable][] Stream} The destination for writing data\n* `options` {Object} Pipe options\n  * `end` {Boolean} End the writer when the reader ends. Default&quot;: &quot;`true`&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`destination` {[Writable][] Stream} &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3002; &quot;,
                          &quot;name&quot;: &quot;destination&quot;,
                          &quot;type&quot;: &quot;[Writable][] Stream&quot;,
                          &quot;desc&quot;: &quot;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3002;&quot;
                        },
                        {
                          &quot;textRaw&quot;: &quot;`options` {Object} &#x30D1;&#x30A4;&#x30D7;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3; &quot;,
                          &quot;options&quot;: [
                            {
                              &quot;textRaw&quot;: &quot;`end` {Boolean} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5143;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true` &quot;,
                              &quot;name&quot;: &quot;end&quot;,
                              &quot;type&quot;: &quot;Boolean&quot;,
                              &quot;desc&quot;: &quot;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5143;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5148;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&quot;
                            }
                          ],
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;type&quot;: &quot;Object&quot;,
                          &quot;desc&quot;: &quot;&#x30D1;&#x30A4;&#x30D7;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    },
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;destination&quot;
                        },
                        {
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ],
                  &quot;desc&quot;: &quot;<!--\nThis method pulls all the data out of a readable stream, and writes it\nto the supplied destination, automatically managing the flow so that\nthe destination is not overwhelmed by a fast readable stream.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304B;&#x3089;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5F15;&#x304D;&#x51FA;&#x3057;&#x3001;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x884C;&#x304D;&#x5148;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x307E;&#x3059;&#x3002;\n&#x9AD8;&#x901F;&#x306A; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x3088;&#x3063;&#x3066;&#x51FA;&#x529B;&#x5148;&#x304C;&#x5727;&#x8FEB;&#x3055;&#x308C;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3001;\n&#x81EA;&#x52D5;&#x7684;&#x306B;&#x30D5;&#x30ED;&#x30FC;&#x5236;&#x5FA1;&#x3092;&#x884C;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nMultiple destinations can be piped to safely.\n-->\n\n<p>&#x8907;&#x6570;&#x306E;&#x51FA;&#x529B;&#x5148;&#x3092;&#x5B89;&#x5168;&#x306B;&#x9023;&#x7D50;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nvar writable = fs.createWriteStream(&apos;file.txt&apos;);\n// All the data from readable goes into &apos;file.txt&apos;\nreadable.pipe(writable);</code></pre>\n<!--\nThis function returns the destination stream, so you can set up pipe\nchains like so:\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x51FA;&#x529B;&#x5148;&#x3068;&#x306A;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x8FD4;&#x3059;&#x306E;&#x3067;&#x3001;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x30D1;&#x30A4;&#x30D7;&#x306E;&#x30C1;&#x30A7;&#x30FC;&#x30F3;&#x3092;\n&#x7D44;&#x307F;&#x7ACB;&#x3066;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var r = fs.createReadStream(&apos;file.txt&apos;);\nvar z = zlib.createGzip();\nvar w = fs.createWriteStream(&apos;file.txt.gz&apos;);\nr.pipe(z).pipe(w);</code></pre>\n<!--\nFor example, emulating the Unix `cat` command:\n-->\n\n<p>Unix &#x306E; <code>cat</code> &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x3092;&#x30A8;&#x30DF;&#x30E5;&#x30EC;&#x30FC;&#x30C8;&#x3059;&#x308B;&#x4F8B;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">process.stdin.pipe(process.stdout);</code></pre>\n<!--\nBy default [`end()`][] is called on the destination when the source stream\nemits `end`, so that `destination` is no longer writable. Pass `{ end:\nfalse }` as `options` to keep the destination stream open.\n-->\n\n<p>&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x3067;&#x306F;&#x3001;&#x51FA;&#x529B;&#x5148;&#x306E; [<code>end()</code>][] &#x306F;&#x5165;&#x529B;&#x5143;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;\n<code>&apos;end&apos;</code> &#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;<code>destination</code>\n&#x306F;&#x3082;&#x3046;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x3067;&#x306F;&#x306A;&#x304F;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n<code>{end: false }</code> &#x3092; <code>options</code> &#x3068;&#x3057;&#x3066;&#x6E21;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x51FA;&#x529B;&#x5148;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x305F;&#x307E;&#x307E;&#x306B;&#x3057;&#x3066;&#x304A;&#x304F;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis keeps `writer` open so that \"Goodbye\" can be written at the\nend.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; <code>writer</code> &#x3092;&#x30AA;&#x30FC;&#x30D7;&#x30F3;&#x3057;&#x305F;&#x307E;&#x307E;&#x306B;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x6700;&#x5F8C;&#x306B;\n<code>&quot;Goodbye&quot;</code> &#x3068;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">reader.pipe(writer, { end: false });\nreader.on(&apos;end&apos;, function() {\n  writer.end(&apos;Goodbye\\n&apos;);\n});</code></pre>\n<!--\nNote that `process.stderr` and `process.stdout` are never closed until\nthe process exits, regardless of the specified options.\n-->\n\n<p><code>process.stderr</code> &#x304A;&#x3088;&#x3073; <code>process.stdout</code> &#x306F;&#x3001;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x6307;&#x5B9A;&#x306B;&#x95A2;&#x4FC2;&#x306A;&#x304F;&#x3001;\n&#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x307E;&#x3067;&#x6C7A;&#x3057;&#x3066;&#x30AF;&#x30ED;&#x30FC;&#x30BA;&#x3055;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;readable.unpipe([destination])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;unpipe&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `destination` {[Writable][] Stream} Optional specific stream to unpipe\n-->\n\n<ul>\n<li><code>destination</code> {[Writable][] Stream} &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30D1;&#x30A4;&#x30D7;&#x3092;&#x89E3;&#x9664;&#x3059;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis method will remove the hooks set up for a previous `pipe()` call.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x4EE5;&#x524D;&#x306E; <code>pipe()</code> &#x547C;&#x3073;&#x51FA;&#x3057;&#x3067;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x30D5;&#x30C3;&#x30AF;&#x3092;&#x53D6;&#x308A;&#x9664;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the destination is not specified, then all pipes are removed.\n-->\n\n<p><code>destination</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x5168;&#x3066;&#x306E;&#x30D1;&#x30A4;&#x30D7;&#x304C;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the destination is specified, but no pipe is set up for it, then\nthis is a no-op.\n-->\n\n<p><code>destination</code> &#x304C;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x3082;&#x306E;&#x306E;&#x3001;&#x305D;&#x308C;&#x304C;&#x30D1;&#x30A4;&#x30D7;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x3053;&#x308C;&#x306F;&#x4F55;&#x3082;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var readable = getReadableStreamSomehow();\nvar writable = fs.createWriteStream(&apos;file.txt&apos;);\n// All the data from readable goes into &apos;file.txt&apos;,\n// but only for the first second\nreadable.pipe(writable);\nsetTimeout(function() {\n  console.log(&apos;stop writing to file.txt&apos;);\n  readable.unpipe(writable);\n  console.log(&apos;manually close the file stream&apos;);\n  writable.end();\n}, 1000);</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;destination&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.unshift(chunk)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;unshift&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} Chunk of data to unshift onto the read queue\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | String} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306E;&#x5148;&#x982D;&#x306B;&#x623B;&#x3055;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x65AD;&#x7247;</li>\n</ul>\n<!--\nThis is useful in certain cases where a stream is being consumed by a\nparser, which needs to \"un-consume\" some data that it has\noptimistically pulled out of the source, so that the stream can be\npassed on to some other party.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30D1;&#x30FC;&#x30B5;&#x306B;&#x3088;&#x3063;&#x3066;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x306B;&#x304A;&#x3044;&#x3066;&#x6709;&#x7528;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x697D;&#x89B3;&#x7684;&#x306B;&#x53D6;&#x308A;&#x51FA;&#x3057;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x300C;&#x6D88;&#x8CBB;&#x3057;&#x306A;&#x304B;&#x3063;&#x305F;&#x300D;&#x3053;&#x3068;&#x306B;&#x3057;&#x3066;&#x3001;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4ED6;&#x306E;&#x3068;&#x3053;&#x308D;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6E21;&#x305B;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x5834;&#x5408;&#x306B;&#x5FC5;&#x8981;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIf you find that you must often call `stream.unshift(chunk)` in your\nprograms, consider implementing a [Transform][] stream instead.  (See API\nfor Stream Implementors, below.)\n-->\n\n<p><code>stream.unshift(chunk)</code> &#x3092;&#x983B;&#x7E41;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x304F;&#x3066;&#x306F;&#x306A;&#x3089;&#x306A;&#x3044;&#x3068;&#x3057;&#x305F;&#x3089;&#x3001;\n&#x4EE3;&#x308F;&#x308A;&#x306B; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x691C;&#x8A0E;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;\n(&#x5F8C;&#x8FF0;&#x3059;&#x308B; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5B9F;&#x88C5;&#x8005;&#x5411;&#x3051;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Pull off a header delimited by \\n\\n\n// use unshift() if we get too much\n// Call the callback with (error, header, stream)\nvar StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;\nfunction parseHeader(stream, callback) {\n  stream.on(&apos;error&apos;, callback);\n  stream.on(&apos;readable&apos;, onReadable);\n  var decoder = new StringDecoder(&apos;utf8&apos;);\n  var header = &apos;&apos;;\n  function onReadable() {\n    var chunk;\n    while (null !== (chunk = stream.read())) {\n      var str = decoder.write(chunk);\n      if (str.match(/\\n\\n/)) {\n        // found the header boundary\n        var split = str.split(/\\n\\n/);\n        header += split.shift();\n        var remaining = split.join(&apos;\\n\\n&apos;);\n        var buf = new Buffer(remaining, &apos;utf8&apos;);\n        if (buf.length)\n          stream.unshift(buf);\n        stream.removeListener(&apos;error&apos;, callback);\n        stream.removeListener(&apos;readable&apos;, onReadable);\n        // now the body of the message can be read from the stream.\n        callback(null, header, stream);\n      } else {\n        // still reading the header.\n        header += str;\n      }\n    }\n  }\n}</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.wrap(stream)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;wrap&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `stream` {Stream} An \"old style\" readable stream\n-->\n\n<ul>\n<li><code>stream</code> {Stream} &#x300C;&#x53E4;&#x3044;&#x30B9;&#x30BF;&#x30A4;&#x30EB;&#x300D;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nVersions of Node prior to v0.10 had streams that did not implement the\nentire Streams API as it is today.  (See \"Compatibility\" below for\nmore information.)\n-->\n\n<p>v0.10 &#x3088;&#x308A;&#x524D;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E; Node &#x306B;&#x306F;&#x3001;&#x4ECA;&#x65E5;&#x306E;&#x5168;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0; API &#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x3044;&#x306A;&#x3044;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x3042;&#x308A;&#x307E;&#x3057;&#x305F; (&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F;&#x5F8C;&#x8FF0;&#x3059;&#x308B;&#x300C;[&#x4E92;&#x63DB;&#x6027;][]&#x300D;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;)&#x3002;\n\n</p>\n<!--\nIf you are using an older Node library that emits `'data'` events and\nhas a `pause()` method that is advisory only, then you can use the\n`wrap()` method to create a [Readable][] stream that uses the old stream\nas its data source.\n-->\n\n<p>&#x3082;&#x3057;&#x3001;<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x751F;&#x6210;&#x3057;&#x3001;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x3060;&#x3051;&#x3092;&#x884C;&#x3046; <code>pause()</code>\n&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x6301;&#x3064;&#x3001;&#x53E4;&#x3044; Node &#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x3044;&#x308B;&#x306A;&#x3089;&#x3001;\n<code>wrap()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x53E4;&#x3044;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x30C7;&#x30FC;&#x30BF;&#x30BD;&#x30FC;&#x30B9;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x7528;&#x3059;&#x308B;\n[Readable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nYou will very rarely ever need to call this function, but it exists\nas a convenience for interacting with old Node programs and libraries.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x5FC5;&#x8981;&#x306F;&#x6EC5;&#x591A;&#x306B;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x304C;&#x3001;&#x3053;&#x308C;&#x306F;&#x53E4;&#x3044; Node\n&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x53CA;&#x3073;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3068;&#x76F8;&#x4E92;&#x4F5C;&#x7528;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x5229;&#x4FBF;&#x6027;&#x306E;&#x305F;&#x3081;&#x306B;&#x5B58;&#x5728;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nFor example:\n-->\n\n<p>&#x4F8B;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var OldReader = require(&apos;./old-api-module.js&apos;).OldReader;\nvar oreader = new OldReader;\nvar Readable = require(&apos;stream&apos;).Readable;\nvar myReader = new Readable().wrap(oreader);\n\nmyReader.on(&apos;readable&apos;, function() {\n  myReader.read(); // etc.\n});</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;stream&quot;
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.Writable&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Writable&quot;,
              &quot;desc&quot;: &quot;<!--\nThe Writable stream interface is an abstraction for a *destination*\nthat you are writing data *to*.\n-->\n\n<p>Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x62BD;&#x8C61;&#x7684;&#x306A;\n<em>&#x884C;&#x304D;&#x5148;</em> &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nExamples of writable streams include:\n-->\n\n<p>Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [http requests, on the client](http.html#http_class_http_clientrequest)\n* [http responses, on the server](http.html#http_class_http_serverresponse)\n* [fs write streams](fs.html#fs_class_fs_writestream)\n* [zlib streams][]\n* [crypto streams][]\n* [tcp sockets][]\n* [child process stdin](child_process.html#child_process_child_stdin)\n* [process.stdout][], [process.stderr][]\n-->\n\n<ul>\n<li><a href="\&quot;http.html#http_class_http_clientrequest\&quot;">&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x306E; http &#x30EA;&#x30AF;&#x30A8;&#x30B9;&#x30C8;</a></li>\n<li><a href="\&quot;http.html#http_class_http_serverresponse\&quot;">&#x30B5;&#x30FC;&#x30D0;&#x306E; http &#x30EC;&#x30B9;&#x30DD;&#x30F3;&#x30B9;</a></li>\n<li><a href="\&quot;fs.html#fs_class_fs_writestream\&quot;">fs &#x306E; WriteStream</a></li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li><a href="\&quot;child_process.html#child_process_child_stdin\&quot;">child_process &#x306E;&#x6A19;&#x6E96;&#x5165;&#x529B;</a></li>\n<li>[process.stdout][], [process.stderr][]</li>\n</ul>\n&quot;,
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;writable.write(chunk, [encoding], [callback])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;write&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {String | Buffer} The data to write\n* `encoding` {String} The encoding, if `chunk` is a String\n* `callback` {Function} Callback for when this chunk of data is flushed\n* Returns: {Boolean} True if the data was handled completely.\n-->\n\n<ul>\n<li><code>chunk</code> {String | Buffer} &#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;</li>\n<li><code>encoding</code> {String} &#x3082;&#x3057; <code>chunk</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;</li>\n<li><code>callback</code> {Function} &#x30C7;&#x30FC;&#x30BF;&#x304C;&#x6383;&#x304D;&#x51FA;&#x3055;&#x308C;&#x305F;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;</li>\n<li>Returns: {Boolean} &#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x51E6;&#x7406;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x306F; <code>true</code>&#x3002;</li>\n</ul>\n<!--\nThis method writes some data to the underlying system, and calls the\nsupplied callback once the data has been fully handled.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x51E6;&#x7406;&#x3055;&#x308C;&#x308B;&#x3068;\n&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x4E00;&#x5EA6;&#x3060;&#x3051;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe return value indicates if you should continue writing right now.\nIf the data had to be buffered internally, then it will return\n`false`.  Otherwise, it will return `true`.\n-->\n\n<p>&#x623B;&#x308A;&#x5024;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3092;&#x3059;&#x3050;&#x306B;&#x7D9A;&#x3051;&#x3066;&#x3044;&#x3044;&#x304B;&#x3069;&#x3046;&#x304B;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5185;&#x90E8;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x306A;&#x3089; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070; <code>true</code> &#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis return value is strictly advisory.  You MAY continue to write,\neven if it returns `false`.  However, writes will be buffered in\nmemory, so it is best not to do this excessively.  Instead, wait for\nthe `drain` event before writing more data.\n-->\n\n<p>&#x3053;&#x306E;&#x623B;&#x308A;&#x5024;&#x306F;&#x5B8C;&#x5168;&#x306B;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x7684;&#x3067;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x3053;&#x308C;&#x304C; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x3066;&#x3082;&#x3001;&#x3042;&#x306A;&#x305F;&#x306F;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x3092;&#x7D9A;&#x3051;&#x308B;&#x3053;&#x3068;&#x304C;&#x300C;&#x3067;&#x304D;&#x307E;&#x3059;&#x300D;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x30E1;&#x30E2;&#x30EA;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x308B;&#x305F;&#x3081;&#x3001;\n&#x3053;&#x308C;&#x3092;&#x904E;&#x5270;&#x306B;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x304C;&#x6700;&#x5584;&#x3067;&#x3059;&#x3002;\n&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304F;&#x524D;&#x306B; <code>&apos;drain&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x5F85;&#x6A5F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;
                        },
                        {
                          &quot;name&quot;: &quot;encoding&quot;,
                          &quot;optional&quot;: true
                        },
                        {
                          &quot;name&quot;: &quot;callback&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;writable.end([chunk], [encoding], [callback])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;end&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {String | Buffer} Optional data to write\n* `encoding` {String} The encoding, if `chunk` is a String\n* `callback` {Function} Optional callback for when the stream is finished\n-->\n\n<ul>\n<li><code>chunk</code> {String | Buffer} &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;</li>\n<li><code>encoding</code> {String} &#x3082;&#x3057; <code>chunk</code> &#x304C;&#x6587;&#x5B57;&#x5217;&#x306A;&#x3089;&#x3001;&#x305D;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;</li>\n<li><code>callback</code> {Function} &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x7D42;&#x4E86;&#x6642;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3001;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;</li>\n</ul>\n<!--\nCall this method when no more data will be written to the stream.  If\nsupplied, the callback is attached as a listener on the `finish` event.\n-->\n\n<p>&#x3053;&#x308C;&#x4EE5;&#x4E0A;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x306A;&#x3044;&#x5834;&#x5408;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x304C;&#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x305D;&#x308C;&#x306F; <code>&apos;finish&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30EA;&#x30B9;&#x30CA;&#x3068;&#x3057;&#x3066;\n&#x30A2;&#x30BF;&#x30C3;&#x30C1;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCalling [`write()`][] after calling [`end()`][] will raise an error.\n-->\n\n<p>[<code>end()</code>][] &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x5F8C;&#x3067; [<code>write()</code>][] &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// write &apos;hello, &apos; and then end with &apos;world!&apos;\nhttp.createServer(function (req, res) {\n  res.write(&apos;hello, &apos;);\n  res.end(&apos;world!&apos;);\n  // writing more now is not allowed!\n});</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;,
                          &quot;optional&quot;: true
                        },
                        {
                          &quot;name&quot;: &quot;encoding&quot;,
                          &quot;optional&quot;: true
                        },
                        {
                          &quot;name&quot;: &quot;callback&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                }
              ],
              &quot;events&quot;: [
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;drain&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;drain&quot;,
                  &quot;desc&quot;: &quot;<!--\nIf a [`writable.write(chunk)`][] call returns false, then the `drain`\nevent will indicate when it is appropriate to begin writing more data\nto the stream.\n-->\n\n<p>[<code>write(chunk, encoding, callback)</code>][] &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x304C; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5834;&#x5408;&#x3001;\n&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3044;&#x3064;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x66F8;&#x304D;&#x59CB;&#x3081;&#x308B;&#x306E;&#x304C;&#x9069;&#x5207;&#x304B;&#x3092;\n<code>&apos;drain&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306B;&#x3088;&#x3063;&#x3066;&#x793A;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Write the data to the supplied writable stream 1MM times.\n// Be attentive to back-pressure.\nfunction writeOneMillionTimes(writer, data, encoding, callback) {\n  var i = 1000000;\n  write();\n  function write() {\n    var ok = true;\n    do {\n      i -= 1;\n      if (i === 0) {\n        // last time!\n        writer.write(data, encoding, callback);\n      } else {\n        // see if we should continue, or wait\n        // don&apos;t pass the callback, because we&apos;re not done yet.\n        ok = writer.write(data, encoding);\n      }\n    } while (i &gt; 0 &amp;&amp; ok);\n    if (i &gt; 0) {\n      // had to stop early!\n      // write some more once it drains\n      writer.once(&apos;drain&apos;, write);\n    }\n  }\n}</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;finish&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;finish&quot;,
                  &quot;desc&quot;: &quot;<!--\nWhen the [`end()`][] method has been called, and all data has been flushed\nto the underlying system, this event is emitted.\n-->\n\n<p>[<code>end()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3001;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x4E0B;&#x5C64;&#x306E;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306B;\n&#x6383;&#x304D;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x3053;&#x306E;&#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nfor (var i = 0; i &lt; 100; i ++) {\n  writer.write(&apos;hello, #&apos; + i + &apos;!\\n&apos;);\n}\nwriter.end(&apos;this is the end\\n&apos;);\nwriter.on(&apos;finish&apos;, function() {\n  console.error(&apos;all writes are now complete.&apos;);\n});</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;pipe&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;pipe&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `src` {[Readable][] Stream} source stream that is piping to this writable\n-->\n\n<ul>\n<li><code>src</code> {[Readable][] Stream} &#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x3064;&#x306A;&#x304C;&#x308C;&#x305F;\n&#x5165;&#x529B;&#x5143;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis is emitted whenever the `pipe()` method is called on a readable\nstream, adding this writable to its set of destinations.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E; <code>pipe()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3001;\n&#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x51FA;&#x529B;&#x5148;&#x3068;&#x3057;&#x3066;&#x52A0;&#x3048;&#x3089;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nvar reader = getReadableStreamSomehow();\nwriter.on(&apos;pipe&apos;, function(src) {\n  console.error(&apos;something is piping into the writer&apos;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;unpipe&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;unpipe&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `src` {[Readable][] Stream} The source stream that [unpiped][] this writable\n-->\n\n<ul>\n<li><code>src</code> {[Readable][] Stream} &#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;[&#x5207;&#x308A;&#x96E2;&#x3055;&#x308C;&#x305F;][]\n&#x5165;&#x529B;&#x5143;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;</li>\n</ul>\n<!--\nThis is emitted whenever the [`unpipe()`][] method is called on a\nreadable stream, removing this writable from its set of destinations.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067; [<code>unpipe()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3001;\n&#x3053;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x51FA;&#x529B;&#x5148;&#x304B;&#x3089;&#x53D6;&#x308A;&#x9664;&#x304B;&#x308C;&#x305F;&#x6642;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var writer = getWritableStreamSomehow();\nvar reader = getReadableStreamSomehow();\nwriter.on(&apos;unpipe&apos;, function(src) {\n  console.error(&apos;something has stopped piping into the writer&apos;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\nreader.unpipe(writer);</code></pre>\n&quot;,
                  &quot;params&quot;: []
                },
                {
                  &quot;textRaw&quot;: &quot;Event: &apos;error&apos;&quot;,
                  &quot;type&quot;: &quot;event&quot;,
                  &quot;name&quot;: &quot;error&quot;,
                  &quot;desc&quot;: &quot;<!--\nEmitted if there was an error when writing or piping data.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x4E2D;&#x307E;&#x305F;&#x306F;&#x30D1;&#x30A4;&#x30D7;&#x4E2D;&#x306B;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
                  &quot;params&quot;: []
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.Duplex&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Duplex&quot;,
              &quot;desc&quot;: &quot;<!--\nDuplex streams are streams that implement both the [Readable][] and\n[Writable][] interfaces.  See above for usage.\n-->\n\n<p>Duplex &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; [Readable][] &#x3068; [Writable][] &#x4E21;&#x65B9;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;\n&#x5B9F;&#x88C5;&#x3057;&#x305F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;&#x4F7F;&#x3044;&#x65B9;&#x306F;&#x4E0A;&#x8A18;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExamples of Duplex streams include:\n-->\n\n<p>Duplex &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [tcp sockets][]\n* [zlib streams][]\n* [crypto streams][]\n-->\n\n<ul>\n<li>[tcp &#x306E;&#x30BD;&#x30B1;&#x30C3;&#x30C8;][]</li>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n</ul>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.Transform&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Transform&quot;,
              &quot;desc&quot;: &quot;<!--\nTransform streams are [Duplex][] streams where the output is in some way\ncomputed from the input.  They implement both the [Readable][] and\n[Writable][] interfaces.  See above for usage.\n-->\n\n<p>Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x5165;&#x529B;&#x304B;&#x3089;&#x4F55;&#x3089;&#x304B;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x51FA;&#x529B;&#x304C;&#x8A08;&#x7B97;&#x3055;&#x308C;&#x308B; [Duplex][]\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306F; [Readable][] &#x3068; [Writable][] &#x4E21;&#x65B9;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x4F7F;&#x3044;&#x65B9;&#x306F;&#x4E0A;&#x8A18;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nExamples of Transform streams include:\n-->\n\n<p>Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x542B;&#x3080;&#x4F8B;:\n\n</p>\n<!--\n* [zlib streams][]\n* [crypto streams][]\n-->\n\n<ul>\n<li>[zlib &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n<li>[crypto &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;][]</li>\n</ul>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;API for Stream Implementors&quot;,
          &quot;name&quot;: &quot;API for Stream Implementors&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;desc&quot;: &quot;<!--\nTo implement any sort of stream, the pattern is the same:\n-->\n\n<p>&#x3069;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x5834;&#x5408;&#x3067;&#x3082;&#x3001;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x306F;&#x540C;&#x3058;&#x3067;&#x3059;:\n\n</p>\n<!--\n1. Extend the appropriate parent class in your own subclass.  (The\n   [`util.inherits`][] method is particularly helpful for this.)\n2. Call the appropriate parent class constructor in your constructor,\n   to be sure that the internal mechanisms are set up properly.\n2. Implement one or more specific methods, as detailed below.\n-->\n\n<ol>\n<li>&#x305D;&#x308C;&#x305E;&#x308C;&#x306E;&#x89AA;&#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3057;&#x3066;&#x3001;&#x72EC;&#x81EA;&#x306E;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3092;&#x4F5C;&#x6210;&#x3059;&#x308B;\n(&#x7279;&#x306B; [<code>util.inherits</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x305D;&#x306E;&#x305F;&#x3081;&#x306B;&#x5F79;&#x7ACB;&#x3061;&#x307E;&#x3059;)&#x3002;</li>\n<li>&#x5185;&#x90E8;&#x306E;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x304C;&#x304D;&#x3061;&#x3093;&#x3068;&#x30BB;&#x30C3;&#x30C8;&#x30A2;&#x30C3;&#x30D7;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;&#x78BA;&#x5B9F;&#x306B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;\n&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x306E;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306E;&#x4E2D;&#x304B;&#x3089;&#x89AA;&#x30AF;&#x30E9;&#x30B9;&#x306E;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3002;</li>\n<li>&#x4EE5;&#x4E0B;&#x3067;&#x8A73;&#x8FF0;&#x3055;&#x308C;&#x308B;&#x3001;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x7279;&#x5225;&#x306A;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3002;</li>\n</ol>\n<!--\nThe class to extend and the method(s) to implement depend on the sort\nof stream class you are writing:\n-->\n\n<p>&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3068;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x304C;&#x66F8;&#x3053;&#x3046;&#x3068;&#x3057;&#x3066;&#x3044;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x7A2E;&#x985E;&#x306B;\n&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n<table>\n  <thead>\n    <tr>\n      <th>\n        <p>Use-case</p>\n      </th>\n      <th>\n        <p>Class</p>\n      </th>\n      <th>\n        <p>Method(s) to implement</p>\n      </th>\n    </tr>\n  </thead>\n  <tr>\n    <td>\n      <p>Reading only</p>\n    </td>\n    <td>\n      <p>[Readable](#stream_class_stream_readable_1)</p>\n    </td>\n    <td>\n      <p><code>[_read][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Writing only</p>\n    </td>\n    <td>\n      <p>[Writable](#stream_class_stream_writable_1)</p>\n    </td>\n    <td>\n      <p><code>[_write][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Reading and writing</p>\n    </td>\n    <td>\n      <p>[Duplex](#stream_class_stream_duplex_1)</p>\n    </td>\n    <td>\n      <p><code>[_read][]</code>, <code>[_write][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Operate on written data, then read the result</p>\n    </td>\n    <td>\n      <p>[Transform](#stream_class_stream_transform_1)</p>\n    </td>\n    <td>\n      <p><code>_transform</code>, <code>_flush</code></p>\n    </td>\n  </tr>\n</table>\n-->\n\n<table>\n  <thead>\n    <tr>\n      <th>\n        <p>&#x30E6;&#x30FC;&#x30B9;&#x30B1;&#x30FC;&#x30B9;</p>\n      </th>\n      <th>\n        <p>&#x30AF;&#x30E9;&#x30B9;</p>\n      </th>\n      <th>\n        <p>&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x30E1;&#x30BD;&#x30C3;&#x30C9;</p>\n      </th>\n    </tr>\n  </thead>\n  <tr>\n    <td>\n      <p>&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x306E;&#x307F;</p>\n    </td>\n    <td>\n      <p><a href="\&quot;#stream_class_stream_readable_1\&quot;">Readable</a></p>\n    </td>\n    <td>\n      <p><code>[_read][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x306E;&#x307F;</p>\n    </td>\n    <td>\n      <p><a href="\&quot;#stream_class_stream_writable_1\&quot;">Writable</a></p>\n    </td>\n    <td>\n      <p><code>[_write][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3068;&#x66F8;&#x304D;&#x8FBC;&#x307F;</p>\n    </td>\n    <td>\n      <p><a href="\&quot;#stream_class_stream_duplex_1\&quot;">Duplex</a></p>\n    </td>\n    <td>\n      <p><code>[_read][]</code>, <code>[_write][]</code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x5909;&#x63DB;&#x3057;&#x3001;&#x305D;&#x306E;&#x7D50;&#x679C;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x3080;</p>\n    </td>\n    <td>\n      <p><a href="\&quot;#stream_class_stream_transform_1\&quot;">Transform</a></p>\n    </td>\n    <td>\n      <p><code>[_transform][]</code>, <code>[_flush][]</code></p>\n    </td>\n  </tr>\n</table>\n\n<!--\nIn your implementation code, it is very important to never call the\nmethods described in [API for Stream Consumers][] above.  Otherwise, you\ncan potentially cause adverse side effects in programs that consume\nyour streaming interfaces.\n-->\n\n<p>&#x3042;&#x306A;&#x305F;&#x306E;&#x5B9F;&#x88C5;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x4E2D;&#x3067;&#x306F;&#x3001;&#x6C7A;&#x3057;&#x3066; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5229;&#x7528;&#x8005;&#x306E;&#x305F;&#x3081;&#x306E; API][]\n&#x3067;&#x8AAC;&#x660E;&#x3055;&#x308C;&#x305F;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3044;&#x3053;&#x3068;&#x304C;&#x3068;&#x3066;&#x3082;&#x91CD;&#x8981;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x3046;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30DF;&#x30F3;&#x30B0;&#x30A4;&#x30F3;&#x30BF;&#x30FC;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306B;\n&#x6709;&#x5BB3;&#x306A;&#x526F;&#x4F5C;&#x7528;&#x3092;&#x5F15;&#x304D;&#x8D77;&#x3053;&#x3059;&#x539F;&#x56E0;&#x3068;&#x306A;&#x308A;&#x5F97;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;examples&quot;: [
            {
              &quot;textRaw&quot;: &quot;Class: stream.Readable&quot;,
              &quot;type&quot;: &quot;example&quot;,
              &quot;name&quot;: &quot;stream.Readable&quot;,
              &quot;desc&quot;: &quot;<!--\n`stream.Readable` is an abstract class designed to be extended with an\nunderlying implementation of the [`_read(size)`][] method.\n-->\n\n<p><code>stream.Readable</code> &#x306F;&#x62BD;&#x8C61;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x3057;&#x3066; [<code>_read(size)</code>][]\n&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x62E1;&#x5F35;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nPlease see above under [API for Stream Consumers][] for how to consume\nstreams in your programs.  What follows is an explanation of how to\nimplement Readable streams in your programs.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F;&#x3001;\n&#x524D;&#x8FF0;&#x306E; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5229;&#x7528;&#x8005;&#x306E;&#x305F;&#x3081;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x306E;&#x5F8C;&#x306B;&#x7D9A;&#x304F;&#x306E;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306E;&#x8AAC;&#x660E;&#x3067;&#x3059;&#x3002;\n\n</p>\n<h4>Example: A Counting Stream</h4>\n<!--\nThis is a basic example of a Readable stream.  It emits the numerals\nfrom 1 to 1,000,000 in ascending order, and then ends.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x57FA;&#x672C;&#x7684;&#x306A;&#x4F8B;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; 1 &#x304B;&#x3089; 1,000,000 &#x307E;&#x3067;&#x306E;&#x6570;&#x3092;&#x6607;&#x9806;&#x3067;&#x751F;&#x6210;&#x3057;&#x3001;&#x305D;&#x3057;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var Readable = require(&apos;stream&apos;).Readable;\nvar util = require(&apos;util&apos;);\nutil.inherits(Counter, Readable);\n\nfunction Counter(opt) {\n  Readable.call(this, opt);\n  this._max = 1000000;\n  this._index = 1;\n}\n\nCounter.prototype._read = function() {\n  var i = this._index++;\n  if (i &gt; this._max)\n    this.push(null);\n  else {\n    var str = &apos;&apos; + i;\n    var buf = new Buffer(str, &apos;ascii&apos;);\n    this.push(buf);\n  }\n};</code></pre>\n<h4>Example: SimpleProtocol v1 (Sub-optimal)</h4>\n<!--\nThis is similar to the `parseHeader` function described above, but\nimplemented as a custom stream.  Also, note that this implementation\ndoes not convert the incoming data to a string.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x524D;&#x306B;&#x8AAC;&#x660E;&#x3057;&#x305F; <code>parseHeader</code> &#x95A2;&#x6570;&#x3068;&#x3088;&#x304F;&#x4F3C;&#x3066;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x72EC;&#x81EA;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x307E;&#x305F;&#x3001;&#x3053;&#x306E;&#x5B9F;&#x88C5;&#x306F;&#x5165;&#x3063;&#x3066;&#x304F;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6587;&#x5B57;&#x5217;&#x306B;&#x5909;&#x63DB;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nHowever, this would be better implemented as a [Transform][] stream.  See\nbelow for a better implementation.\n-->\n\n<p>&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3053;&#x308C;&#x306F; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3067;&#x3088;&#x308A;&#x3046;&#x307E;&#x304F;&#x5B9F;&#x88C5;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x5F8C;&#x8FF0;&#x306E;&#x3088;&#x308A;&#x3088;&#x3044;&#x5B9F;&#x88C5;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// A parser for a simple data protocol.\n// The &quot;header&quot; is a JSON object, followed by 2 \\n characters, and\n// then a message body.\n//\n// NOTE: This can be done more simply as a Transform stream!\n// Using Readable directly for this is sub-optimal.  See the\n// alternative example below under the Transform section.\n\nvar Readable = require(&apos;stream&apos;).Readable;\nvar util = require(&apos;util&apos;);\n\nutil.inherits(SimpleProtocol, Readable);\n\nfunction SimpleProtocol(source, options) {\n  if (!(this instanceof SimpleProtocol))\n    return new SimpleProtocol(source, options);\n\n  Readable.call(this, options);\n  this._inBody = false;\n  this._sawFirstCr = false;\n\n  // source is a readable stream, such as a socket or file\n  this._source = source;\n\n  var self = this;\n  source.on(&apos;end&apos;, function() {\n    self.push(null);\n  });\n\n  // give it a kick whenever the source is readable\n  // read(0) will not consume any bytes\n  source.on(&apos;readable&apos;, function() {\n    self.read(0);\n  });\n\n  this._rawHeader = [];\n  this.header = null;\n}\n\nSimpleProtocol.prototype._read = function(n) {\n  if (!this._inBody) {\n    var chunk = this._source.read();\n\n    // if the source doesn&apos;t have data, we don&apos;t have data yet.\n    if (chunk === null)\n      return this.push(&apos;&apos;);\n\n    // check if the chunk has a \\n\\n\n    var split = -1;\n    for (var i = 0; i &lt; chunk.length; i++) {\n      if (chunk[i] === 10) { // &apos;\\n&apos;\n        if (this._sawFirstCr) {\n          split = i;\n          break;\n        } else {\n          this._sawFirstCr = true;\n        }\n      } else {\n        this._sawFirstCr = false;\n      }\n    }\n\n    if (split === -1) {\n      // still waiting for the \\n\\n\n      // stash the chunk, and try again.\n      this._rawHeader.push(chunk);\n      this.push(&apos;&apos;);\n    } else {\n      this._inBody = true;\n      var h = chunk.slice(0, split);\n      this._rawHeader.push(h);\n      var header = Buffer.concat(this._rawHeader).toString();\n      try {\n        this.header = JSON.parse(header);\n      } catch (er) {\n        this.emit(&apos;error&apos;, new Error(&apos;invalid simple protocol data&apos;));\n        return;\n      }\n      // now, because we got some extra data, unshift the rest\n      // back into the read queue so that our consumer will see it.\n      var b = chunk.slice(split);\n      this.unshift(b);\n\n      // and let them know that we are done parsing the header.\n      this.emit(&apos;header&apos;, this.header);\n    }\n  } else {\n    // from there on, just provide the data to our consumer.\n    // careful not to push(null), since that would indicate EOF.\n    var chunk = this._source.read();\n    if (chunk) this.push(chunk);\n  }\n};\n\n// Usage:\n// var parser = new SimpleProtocol(source);\n// Now parser is a readable stream that will emit &apos;header&apos;\n// with the parsed header data.</code></pre>\n&quot;,
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;new stream.Readable([options])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;Readable&quot;,
                  &quot;* `options` {Object}\n  * `highWaterMark` {Number} The maximum number of bytes to store in\n    the internal buffer before ceasing to read from the underlying\n    resource.  Default&quot;: &quot;16kb\n  * `encoding` {String} If specified, then buffers will be decoded to\n    strings using the specified encoding.  Default=null\n  * `objectMode` {Boolean} Whether this stream should behave\n    as a stream of objects. Meaning that stream.read(n) returns\n    a single value instead of a Buffer of size n.  Default=false&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`options` {Object} (&#x4EFB;&#x610F;) &quot;,
                          &quot;options&quot;: [
                            {
                              &quot;textRaw&quot;: &quot;`highWaterMark` {Number} &#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x306E;&#x3092;&#x4E2D;&#x65AD;&#x3059;&#x308B;&#x307E;&#x3067; &#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x8CAF;&#x3081;&#x3066;&#x304A;&#x304F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x306E;&#x6700;&#x5927;&#x5024;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002; &quot;,
                              &quot;name&quot;: &quot;highWaterMark&quot;,
                              &quot;type&quot;: &quot;Number&quot;,
                              &quot;desc&quot;: &quot;&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x306E;&#x3092;&#x4E2D;&#x65AD;&#x3059;&#x308B;&#x307E;&#x3067; &#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x8CAF;&#x3081;&#x3066;&#x304A;&#x304F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x306E;&#x6700;&#x5927;&#x5024;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002;&quot;
                            },
                            {
                              &quot;textRaw&quot;: &quot;`encoding` {String} &#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306F;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067; &#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `null`&#x3002; &quot;,
                              &quot;name&quot;: &quot;encoding&quot;,
                              &quot;type&quot;: &quot;String&quot;,
                              &quot;desc&quot;: &quot;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306F;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067; &#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `null`&#x3002;&quot;
                            },
                            {
                              &quot;textRaw&quot;: &quot;`objectMode` {Boolean} &#x3053;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066; &#x632F;&#x308B;&#x821E;&#x3046;&#x3079;&#x304D;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x3053;&#x308C;&#x306F; `stream.read(n)` &#x304C;&#x30B5;&#x30A4;&#x30BA; n &#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x306F;&#x306A;&#x304F; &#x4E00;&#x3064;&#x306E;&#x5024;&#x3092;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false` &#x3067;&#x3059;&#x3002; &quot;,
                              &quot;name&quot;: &quot;objectMode&quot;,
                              &quot;type&quot;: &quot;Boolean&quot;,
                              &quot;desc&quot;: &quot;&#x3053;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066; &#x632F;&#x308B;&#x821E;&#x3046;&#x3079;&#x304D;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x3053;&#x308C;&#x306F; `stream.read(n)` &#x304C;&#x30B5;&#x30A4;&#x30BA; n &#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x306F;&#x306A;&#x304F; &#x4E00;&#x3064;&#x306E;&#x5024;&#x3092;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false` &#x3067;&#x3059;&#x3002;&quot;
                            }
                          ],
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;type&quot;: &quot;Object&quot;,
                          &quot;desc&quot;: &quot;(&#x4EFB;&#x610F;)&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    },
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ],
                  &quot;desc&quot;: &quot;<!--\nIn classes that extend the Readable class, make sure to call the\nReadable constructor so that the buffering settings can be properly\ninitialized.\n-->\n\n<p><code>Readable</code> &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x78BA;&#x5B9F;&#x306B;\n&#x521D;&#x671F;&#x5316;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;&#x5FC5;&#x305A;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;readable.\\_read(size)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;\\_read&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `size` {Number} Number of bytes to read asynchronously\n-->\n\n<ul>\n<li><code>size</code> {Number} &#x975E;&#x540C;&#x671F;&#x306B;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x30D0;&#x30A4;&#x30C8;&#x6570;</li>\n</ul>\n<!--\nNote: **Implement this function, but do NOT call it directly.**\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3001;&#x3057;&#x304B;&#x3057;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</strong>\n\n</p>\n<!--\nThis function should NOT be called directly.  It should be implemented\nby child classes, and only called by the internal Readable class\nmethods.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3042;&#x308A;&#x3001;Readable &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x304B;&#x3089;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nAll Readable stream implementations must provide a `_read` method to\nfetch data from the underlying resource.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x53D6;&#x5F97;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B; <code>_read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThis method is prefixed with an underscore because it is internal to\nthe class that defines it, and should not be called directly by user\nprograms.  However, you **are** expected to override this method in\nyour own extension classes.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3053;&#x308C;&#x3092;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x5185;&#x90E8;&#x306E;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304B;&#x3089;\n&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;&#x306E;&#x63A5;&#x982D;&#x8F9E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x62E1;&#x5F35;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n<strong>&#x6C42;&#x3081;&#x3089;&#x308C;&#x3066;</strong>&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nWhen data is available, put it into the read queue by calling\n`readable.push(chunk)`.  If `push` returns false, then you should stop\nreading.  When `_read` is called again, you should start pushing more\ndata.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308C;&#x3070;&#x3001;<code>readable.push(chunk)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x3067;\n&#x305D;&#x308C;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>push()</code> &#x304C; false &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3092;&#x6B62;&#x3081;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n<code>_read()</code> &#x304C;&#x518D;&#x3073;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x6642;&#x304C;&#x3001;&#x3055;&#x3089;&#x306B;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FFD;&#x52A0;&#x3092;&#x958B;&#x59CB;&#x3059;&#x3079;&#x304D;&#x6642;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `size` argument is advisory.  Implementations where a \"read\" is a\nsingle call that returns data can use this to know how much data to\nfetch.  Implementations where that is not relevant, such as TCP or\nTLS, may ignore this argument, and simply provide data whenever it\nbecomes available.  There is no need, for example to \"wait\" until\n`size` bytes are available before calling [`stream.push(chunk)`][].\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x306F;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x7684;&#x3067;&#x3059;&#x3002;\n&quot;read()&quot; &#x304C;&#x4E00;&#x56DE;&#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3067;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FD4;&#x3059;&#x5B9F;&#x88C5;&#x3067;&#x306F;&#x3001;\n&#x3069;&#x308C;&#x3060;&#x3051;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D6;&#x5F97;&#x3059;&#x3079;&#x304D;&#x304B;&#x77E5;&#x308B;&#x305F;&#x3081;&#x306B;&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\nTCP&#x3084;TLS&#x306A;&#x3069;&#x3001;&#x305D;&#x308C;&#x306B;&#x95A2;&#x9023;&#x3057;&#x306A;&#x3044;&#x5B9F;&#x88C5;&#x3067;&#x306F;&#x3053;&#x306E;&#x5F15;&#x6570;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x3001;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306B;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070; [<code>stream.push(chunk)</code>][] &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3088;&#x308A;&#x524D;&#x306B;&#x3001;\n<code>size</code> &#x30D0;&#x30A4;&#x30C8;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;&#x307E;&#x3067;&#x300C;&#x5F85;&#x3064;&#x300D;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;size&quot;
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;readable.push(chunk, [encoding])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;push&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | null | String} Chunk of data to push into the read queue\n* `encoding` {String} Encoding of String chunks.  Must be a valid\n  Buffer encoding, such as `'utf8'` or `'ascii'`\n* return {Boolean} Whether or not more pushes should be performed\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | null | String} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x30D7;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x308B;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;</li>\n<li><code>encoding</code> {String} &#x6587;&#x5B57;&#x5217;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3002;\n<code>&apos;utf8&apos;</code> &#x3084; <code>&apos;ascii&apos;</code> &#x306A;&#x3069;&#x3001;Buffer &#x306E;&#x6B63;&#x3057;&#x3044;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306E;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n<li>return {Boolean} &#x3055;&#x3089;&#x306B;&#x30D7;&#x30C3;&#x30B7;&#x30E5;&#x3057;&#x3066;&#x3082;&#x3044;&#x3044;&#x304B;&#x3069;&#x3046;&#x304B;</li>\n</ul>\n<!--\nNote: **This function should be called by Readable implementors, NOT\nby consumers of Readable streams.**\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; Readable &#x306E;&#x5B9F;&#x88C5;&#x304B;&#x3089;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;\nReadable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5229;&#x7528;&#x8005;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n\n</p>\n<!--\nThe `_read()` function will not be called again until at least one\n`push(chunk)` call is made.\n-->\n\n<p>&#x5C11;&#x306A;&#x304F;&#x3068;&#x3082;&#x4E00;&#x56DE;&#x306F; <code>push(chunk)</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x306A;&#x3044;&#x3068;&#x3001;<code>_read()</code> &#x95A2;&#x6570;&#x304C;\n&#x518D;&#x3073;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThe `Readable` class works by putting data into a read queue to be\npulled out later by calling the `read()` method when the `'readable'`\nevent fires.\n-->\n\n<p><code>Readable</code> &#x30AF;&#x30E9;&#x30B9;&#x306F;&#x3001;<code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3067;\n&#x5F8C;&#x304B;&#x3089;&#x53D6;&#x308A;&#x51FA;&#x3055;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3001;<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x6642;&#x306B;\n&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x5165;&#x308C;&#x3066;&#x304A;&#x304F;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x6A5F;&#x80FD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `push()` method will explicitly insert some data into the read\nqueue.  If it is called with `null` then it will signal the end of the\ndata (EOF).\n-->\n\n<p><code>push()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x660E;&#x793A;&#x7684;&#x306B;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x633F;&#x5165;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>null</code> &#x3068;&#x5171;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F; (EOF) &#x3053;&#x3068;&#x3092;&#x4F1D;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis API is designed to be as flexible as possible.  For example,\nyou may be wrapping a lower-level source which has some sort of\npause/resume mechanism, and a data callback.  In those cases, you\ncould wrap the low-level source object by doing something like this:\n-->\n\n<p>&#x3053;&#x306E; API &#x306F;&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x67D4;&#x8EDF;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;&#x3042;&#x308B;&#x7A2E;&#x306E;&#x4E2D;&#x65AD;&#xFF0F;&#x518D;&#x958B;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x3068;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x6301;&#x3064;&#x3001;\n&#x3088;&#x308A;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x30BD;&#x30FC;&#x30B9;&#x3092;&#x30E9;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306E;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;\n&#x30E9;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// source is an object with readStop() and readStart() methods,\n// and an `ondata` member that gets called when it has data, and\n// an `onend` member that gets called when the data is over.\n\nutil.inherits(SourceWrapper, Readable);\n\nfunction SourceWrapper(options) {\n  Readable.call(this, options);\n\n  this._source = getLowlevelSourceObject();\n  var self = this;\n\n  // Every time there&apos;s data, we push it into the internal buffer.\n  this._source.ondata = function(chunk) {\n    // if push() returns false, then we need to stop reading from source\n    if (!self.push(chunk))\n      self._source.readStop();\n  };\n\n  // When the source ends, we push the EOF-signalling `null` chunk\n  this._source.onend = function() {\n    self.push(null);\n  };\n}\n\n// _read will be called when the stream wants to pull more data in\n// the advisory size argument is ignored in this case.\nSourceWrapper.prototype._read = function(size) {\n  this._source.readStart();\n};</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;
                        },
                        {
                          &quot;name&quot;: &quot;encoding&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          &quot;classes&quot;: [
            {
              &quot;textRaw&quot;: &quot;Class: stream.Writable&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Writable&quot;,
              &quot;desc&quot;: &quot;<!--\n`stream.Writable` is an abstract class designed to be extended with an\nunderlying implementation of the [`_write(chunk, encoding, callback)`][] method.\n-->\n\n<p><code>stream.Writable</code> &#x306F;&#x62BD;&#x8C61;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x3057;&#x3066;\n[<code>_write(chunk, encoding, callback)</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;\n&#x62E1;&#x5F35;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nPlease see above under [API for Stream Consumers][] for how to consume\nwritable streams in your programs.  What follows is an explanation of\nhow to implement Writable streams in your programs.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F;&#x3001;\n&#x524D;&#x8FF0;&#x306E; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5229;&#x7528;&#x8005;&#x306E;&#x305F;&#x3081;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x306E;&#x5F8C;&#x306B;&#x7D9A;&#x304F;&#x306E;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306E;&#x8AAC;&#x660E;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;new stream.Writable([options])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;Writable&quot;,
                  &quot;* `options` {Object}\n  * `highWaterMark` {Number} Buffer level when [`write()`][] starts\n    returning false. Default&quot;: &quot;16kb\n  * `decodeStrings` {Boolean} Whether or not to decode strings into\n    Buffers before passing them to [`_write()`][].  Default=true\n  * `objectMode` {Boolean} Whether or not the `write(anyObj)` is\n    a valid operation. If set you can write arbitrary data instead\n    of only `Buffer` / `String` data.  Default=false&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`options` {Object} (&#x4EFB;&#x610F;) &quot;,
                          &quot;options&quot;: [
                            {
                              &quot;textRaw&quot;: &quot;`highWaterMark` {Number} [`write()`][] &#x304C; `false` &#x3092;&#x8FD4;&#x3057;&#x59CB;&#x3081;&#x308B; &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EC;&#x30D9;&#x30EB;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002; &quot;,
                              &quot;name&quot;: &quot;highWaterMark&quot;,
                              &quot;type&quot;: &quot;Number&quot;,
                              &quot;desc&quot;: &quot;[`write()`][] &#x304C; `false` &#x3092;&#x8FD4;&#x3057;&#x59CB;&#x3081;&#x308B; &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EC;&#x30D9;&#x30EB;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002;&quot;
                            },
                            {
                              &quot;textRaw&quot;: &quot;`decodeStrings` {Boolean} &#x6587;&#x5B57;&#x5217;&#x304C; [`_write()`][] &#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x524D;&#x306B; &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&#x3002; &quot;,
                              &quot;name&quot;: &quot;decodeStrings&quot;,
                              &quot;type&quot;: &quot;Boolean&quot;,
                              &quot;desc&quot;: &quot;&#x6587;&#x5B57;&#x5217;&#x304C; [`_write()`][] &#x306B;&#x6E21;&#x3055;&#x308C;&#x308B;&#x524D;&#x306B; &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3059;&#x308B;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&#x3002;&quot;
                            },
                            {
                              &quot;textRaw&quot;: &quot;`objectMode` {Boolean} `write(anyObj)` &#x304C;&#x59A5;&#x5F53;&#x306A;&#x64CD;&#x4F5C;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002; &#x3082;&#x3057; `true` &#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;`Buffer` / `String` &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x307F;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001; &#x4EFB;&#x610F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false`&#x3002; &quot;,
                              &quot;name&quot;: &quot;objectMode&quot;,
                              &quot;type&quot;: &quot;Boolean&quot;,
                              &quot;desc&quot;: &quot;`write(anyObj)` &#x304C;&#x59A5;&#x5F53;&#x306A;&#x64CD;&#x4F5C;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002; &#x3082;&#x3057; `true` &#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3068;&#x3001;`Buffer` / `String` &#x30C7;&#x30FC;&#x30BF;&#x306E;&#x307F;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001; &#x4EFB;&#x610F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x66F8;&#x304D;&#x8FBC;&#x3080;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002; &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false`&#x3002;&quot;
                            }
                          ],
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;type&quot;: &quot;Object&quot;,
                          &quot;desc&quot;: &quot;(&#x4EFB;&#x610F;)&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    },
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ],
                  &quot;desc&quot;: &quot;<!--\nIn classes that extend the Writable class, make sure to call the\nconstructor so that the buffering settings can be properly\ninitialized.\n-->\n\n<p><code>Writable</code> &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x78BA;&#x5B9F;&#x306B;\n&#x521D;&#x671F;&#x5316;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;&#x5FC5;&#x305A;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
                },
                {
                  &quot;textRaw&quot;: &quot;writable.\\_write(chunk, encoding, callback)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;\\_write&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} The chunk to be written.  Will always\n  be a buffer unless the `decodeStrings` option was set to `false`.\n* `encoding` {String} If the chunk is a string, then this is the\n  encoding type.  Ignore chunk is a buffer.  Note that chunk will\n  **always** be a buffer unless the `decodeStrings` option is\n  explicitly set to `false`.\n* `callback` {Function} Call this function (optionally with an error\n  argument) when you are done processing the supplied chunk.\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | Array} &#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3002;\n<code>decodeStrings</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C; <code>false</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x3044;&#x9650;&#x308A;&#x5E38;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x3059;&#x3002;</li>\n<li><code>encoding</code> {String} &#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304C;&#x6587;&#x5B57;&#x5217;&#x306E;&#x5834;&#x5408;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;&#x3002;\n&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5834;&#x5408;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n<code>decodeStrings</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C;&#x660E;&#x793A;&#x7684;&#x306B; <code>false</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;\n&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306F; <em>&#x5E38;&#x306B;</em> &#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x3042;&#x308B;&#x3079;&#x304D;&#x4E8B;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n<li><code>callback</code> {Function} &#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3092;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x51E6;&#x7406;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x6642;&#x306B;&#x3001;\n(&#x4EFB;&#x610F;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x5F15;&#x6570;&#x3068;&#x5171;&#x306B;) &#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n</ul>\n<!--\nAll Writable stream implementations must provide a [`_write()`][]\nmethod to send data to the underlying resource.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x9001;&#x308B;&#x305F;&#x3081;&#x306B; [<code>_write()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nNote: **This function MUST NOT be called directly.**  It should be\nimplemented by child classes, and called by the internal Writable\nclass methods only.\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x306F;&#x3044;&#x3051;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n&#x3053;&#x308C;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3042;&#x308A;&#x3001;Writable &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x304B;&#x3089;&#x306E;&#x307F;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nCall the callback using the standard `callback(error)` pattern to\nsignal that the write completed successfully or with an error.\n-->\n\n<p>&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x306F;&#x51FA;&#x529B;&#x304C;&#x6210;&#x529F;&#x3057;&#x3066;&#x5B8C;&#x4E86;&#x3057;&#x305F;&#x304B;&#x3001;&#x30A8;&#x30E9;&#x30FC;&#x304C;&#x767A;&#x751F;&#x3057;&#x305F;&#x304B;&#x3092;&#x4F1D;&#x3048;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;\n&#x6A19;&#x6E96;&#x7684;&#x306A; <code>callback(error)</code> &#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x3092;&#x4F7F;&#x3063;&#x3066;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the `decodeStrings` flag is set in the constructor options, then\n`chunk` may be a string rather than a Buffer, and `encoding` will\nindicate the sort of string that it is.  This is to support\nimplementations that have an optimized handling for certain string\ndata encodings.  If you do not explicitly set the `decodeStrings`\noption to `false`, then you can safely ignore the `encoding` argument,\nand assume that `chunk` will always be a Buffer.\n-->\n\n<p>&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306E; <code>decodeStrings</code> &#x30D5;&#x30E9;&#x30B0;&#x304C;&#x30BB;&#x30C3;&#x30C8;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;\n<code>chunk</code> &#x3092; Buffer &#x3067;&#x306F;&#x306A;&#x304F;&#x6587;&#x5B57;&#x5217;&#x306B;&#x3057;&#x3001;<code>encoding</code> &#x3067;&#x305D;&#x306E;&#x6587;&#x5B57;&#x5217;&#x306E;\n&#x7A2E;&#x985E;&#x3092;&#x793A;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x3001;&#x5B9F;&#x88C5;&#x304C;&#x6587;&#x5B57;&#x5217;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3092;&#x6700;&#x9069;&#x5316;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x305F;&#x3081;&#x3067;&#x3059;&#x3002;\n<code>decodeStrings</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x3092;&#x660E;&#x793A;&#x7684;&#x306B; <code>false</code> &#x306B;&#x8A2D;&#x5B9A;&#x3057;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;\n<code>endocing</code> &#x5F15;&#x6570;&#x306F;&#x5B89;&#x5168;&#x306B;&#x7121;&#x8996;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x3057;&#x3066; <code>chunk</code> &#x306F;&#x5E38;&#x306B; Buffer &#x3067;&#x3042;&#x308B;&#x3068;&#x898B;&#x306A;&#x305B;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method is prefixed with an underscore because it is internal to\nthe class that defines it, and should not be called directly by user\nprograms.  However, you **are** expected to override this method in\nyour own extension classes.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3053;&#x308C;&#x3092;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x5185;&#x90E8;&#x306E;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304B;&#x3089;\n&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;&#x306E;&#x63A5;&#x982D;&#x8F9E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x62E1;&#x5F35;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n<strong>&#x6C42;&#x3081;&#x3089;&#x308C;&#x3066;</strong>&#x3044;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;
                        },
                        {
                          &quot;name&quot;: &quot;encoding&quot;
                        },
                        {
                          &quot;name&quot;: &quot;callback&quot;
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.Duplex&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Duplex&quot;,
              &quot;desc&quot;: &quot;<!--\nA \"duplex\" stream is one that is both Readable and Writable, such as a\nTCP socket connection.\n-->\n\n<p>&quot;duplex&quot; &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;TCP &#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x30B3;&#x30CD;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x3088;&#x3046;&#x306B;\nReadable &#x3067;&#x3042;&#x308A; Writable &#x3067;&#x3082;&#x3042;&#x308B;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x4E00;&#x7A2E;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nNote that `stream.Duplex` is an abstract class designed to be extended\nwith an underlying implementation of the `_read(size)` and\n[`_write(chunk, encoding, callback)`][] methods as you would with a\nReadable or Writable stream class.\n-->\n\n<p><code>stream.Duplex</code> &#x306F;&#x3001;Readable &#x304A;&#x3088;&#x3073; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30AF;&#x30E9;&#x30B9;&#x3068;&#x540C;&#x69D8;&#x3001;\n&#x4E0B;&#x5C64;&#x306E;&#x5B9F;&#x88C5;&#x3067;&#x3042;&#x308B; [<code>_read(size)</code>][] &#x304A;&#x3088;&#x3073;\n[<code>_write(chunk, encoding, callback)</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306B;&#x3088;&#x3063;&#x3066;&#x62E1;&#x5F35;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;\n&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x305F;&#x62BD;&#x8C61;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3042;&#x308B;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nSince JavaScript doesn't have multiple prototypal inheritance, this\nclass prototypally inherits from Readable, and then parasitically from\nWritable.  It is thus up to the user to implement both the lowlevel\n`_read(n)` method as well as the lowlevel\n[`_write(chunk, encoding, callback)`][] method on extension duplex classes.\n-->\n\n<p>JavaScript &#x306F;&#x8907;&#x6570;&#x306E;&#x30D7;&#x30ED;&#x30C8;&#x30BF;&#x30A4;&#x30D7;&#x7D99;&#x627F;&#x3092;&#x6301;&#x3064;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;\n&#x3053;&#x306E;&#x30AF;&#x30E9;&#x30B9;&#x306F; Readable &#x304B;&#x3089;&#x30D7;&#x30ED;&#x30C8;&#x30BF;&#x30A4;&#x30D7;&#x3092;&#x7D99;&#x627F;&#x3057;&#x305F;&#x3046;&#x3048;&#x3067;&#x3001;\nWritable &#x304B;&#x3089;&#x5BC4;&#x751F;&#x7684;&#x306A;&#x65B9;&#x6CD5; (&#x30D7;&#x30ED;&#x30C8;&#x30BF;&#x30A4;&#x30D7;&#x30E1;&#x30F3;&#x30D0;&#x30FC;&#x306E;&#x30B3;&#x30D4;&#x30FC;) &#x3092;&#x884C;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x4F4E;&#x6C34;&#x6E96;&#x306E; [<code>_read(size)</code>][] &#x304A;&#x3088;&#x3073; [<code>_write(chunk, encoding, callback)</code>][]\n&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x3001;Duplex &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30E6;&#x30FC;&#x30B6;&#x306E;&#x8CAC;&#x52D9;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;new stream.Duplex(options)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;Duplex&quot;,
                  &quot;* `options` {Object} Passed to both Writable and Readable\n  constructors. Also has the following fields:\n  * `allowHalfOpen` {Boolean} Default&quot;: &quot;true.  If set to `false`, then\n    the stream will automatically end the readable side when the\n    writable side ends and vice versa.&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`options` {Object} Writable &#x304A;&#x3088;&#x3073; Readable &#x306E;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002; &#x4EE5;&#x4E0B;&#x306E;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x3092;&#x6301;&#x3064;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;: &quot;,
                          &quot;options&quot;: [
                            {
                              &quot;textRaw&quot;: &quot;`allowHalfOpen` {Boolean} &#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&#x3002; &#x3082;&#x3057; `false` &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5074;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x3068; &#x81EA;&#x52D5;&#x7684;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5074;&#x3082;&#x9589;&#x3058;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002; &quot;,
                              &quot;name&quot;: &quot;allowHalfOpen&quot;,
                              &quot;type&quot;: &quot;Boolean&quot;,
                              &quot;desc&quot;: &quot;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `true`&#x3002; &#x3082;&#x3057; `false` &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x305F;&#x5834;&#x5408;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5074;&#x304C;&#x9589;&#x3058;&#x3089;&#x308C;&#x308B;&#x3068; &#x81EA;&#x52D5;&#x7684;&#x306B;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5074;&#x3082;&#x9589;&#x3058;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;&quot;
                            }
                          ],
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;type&quot;: &quot;Object&quot;,
                          &quot;desc&quot;: &quot;Writable &#x304A;&#x3088;&#x3073; Readable &#x306E;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002; &#x4EE5;&#x4E0B;&#x306E;&#x30D5;&#x30A3;&#x30FC;&#x30EB;&#x30C9;&#x3092;&#x6301;&#x3064;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;:&quot;
                        }
                      ]
                    },
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;options&quot;
                        }
                      ]
                    }
                  ],
                  &quot;desc&quot;: &quot;<!--\nIn classes that extend the Duplex class, make sure to call the\nconstructor so that the buffering settings can be properly\ninitialized.\n-->\n\n<p><code>Duplex</code> &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x78BA;&#x5B9F;&#x306B;\n&#x521D;&#x671F;&#x5316;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;&#x5FC5;&#x305A;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n\n</p>\n&quot;
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.Transform&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.Transform&quot;,
              &quot;desc&quot;: &quot;<!--\nA \"transform\" stream is a duplex stream where the output is causally\nconnected in some way to the input, such as a [zlib][] stream or a\n[crypto][] stream.\n-->\n\n<p>&quot;Transform&quot; &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;[zlib][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3084; [crypto][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x3088;&#x3046;&#x306B;&#x3001;\n&#x5165;&#x529B;&#x304C;&#x4F55;&#x3089;&#x304B;&#x306E;&#x65B9;&#x6CD5;&#x3067;&#x51FA;&#x529B;&#x306E;&#x5143;&#x3068;&#x306A;&#x3063;&#x3066;&#x3044;&#x308B;&#x3088;&#x3046;&#x306A; Duplex &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThere is no requirement that the output be the same size as the input,\nthe same number of chunks, or arrive at the same time.  For example, a\nHash stream will only ever have a single chunk of output which is\nprovided when the input is ended.  A zlib stream will produce output\nthat is either much smaller or much larger than its input.\n-->\n\n<p>&#x51FA;&#x529B;&#x306F;&#x3001;&#x5165;&#x529B;&#x3068;&#x540C;&#x3058;&#x30B5;&#x30A4;&#x30BA;&#x3001;&#x540C;&#x3058;&#x6570;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3001;&#x540C;&#x6642;&#x306B;&#x5230;&#x7740;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;\n&#x8981;&#x6C42;&#x3055;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;Hash &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x5165;&#x529B;&#x304C;&#x7D42;&#x4E86;&#x3059;&#x308B;&#x3068;&#x4E00;&#x3064;&#x3060;&#x3051;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3092;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;\nzlib &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x5165;&#x529B;&#x3088;&#x308A;&#x5C0F;&#x3055;&#x3044;&#x304B;&#x3001;&#x307E;&#x305F;&#x306F;&#x3088;&#x308A;&#x5927;&#x304D;&#x3044;&#x51FA;&#x529B;&#x3092;&#x751F;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nRather than implement the [`_read()`][] and [`_write()`][] methods, Transform\nclasses must implement the `_transform()` method, and may optionally\nalso implement the `_flush()` method.  (See below.)\n-->\n\n<p>[<code>_read()</code>][] &#x304A;&#x3088;&#x3073; [<code>_write()</code>][] &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306E;&#x4EE3;&#x308F;&#x308A;&#x306B;&#x3001;Transform &#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;\n<code>_transform()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x307E;&#x305F;&#x3001;&#x4EFB;&#x610F;&#x3067; <code>_flush()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059; (&#x5F8C;&#x8FF0;)&#x3002;\n\n</p>\n&quot;,
              &quot;methods&quot;: [
                {
                  &quot;textRaw&quot;: &quot;new stream.Transform([options])&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;Transform&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `options` {Object} Passed to both Writable and Readable\n  constructors.\n-->\n\n<ul>\n<li><code>options</code> {Object} Writable &#x304A;&#x3088;&#x3073; Readable &#x306E;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306B;&#x6E21;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nIn classes that extend the Transform class, make sure to call the\nconstructor so that the buffering settings can be properly\ninitialized.\n-->\n\n<p><code>Transform</code> &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x78BA;&#x5B9F;&#x306B;\n&#x521D;&#x671F;&#x5316;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;&#x5FC5;&#x305A;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;options&quot;,
                          &quot;optional&quot;: true
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;transform.\\_transform(chunk, encoding, callback)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;\\_transform&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | String} The chunk to be transformed.  Will always\n  be a buffer unless the `decodeStrings` option was set to `false`.\n* `encoding` {String} If the chunk is a string, then this is the\n  encoding type.  (Ignore if `decodeStrings` chunk is a buffer.)\n* `callback` {Function} Call this function (optionally with an error\n  argument) when you are done processing the supplied chunk.\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | Array} &#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3002;\n<code>decodeStrings</code> &#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x304C; <code>false</code> &#x306B;&#x8A2D;&#x5B9A;&#x3055;&#x308C;&#x306A;&#x3044;&#x9650;&#x308A;&#x5E38;&#x306B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x3059;&#x3002;</li>\n<li><code>encoding</code> {String} &#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304C;&#x6587;&#x5B57;&#x5217;&#x306E;&#x5834;&#x5408;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x65B9;&#x5F0F;\n(&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304C;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x5834;&#x5408;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x307E;&#x3059;)&#x3002;</li>\n<li><code>callback</code> {Function} &#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3092;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x51E6;&#x7406;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x6642;&#x306B;&#x3001;\n(&#x4EFB;&#x610F;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x5F15;&#x6570;&#x3068;&#x5171;&#x306B;) &#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n</ul>\n<!--\nNote: **This function MUST NOT be called directly.**  It should be\nimplemented by child classes, and called by the internal Transform\nclass methods only.\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x306F;&#x3044;&#x3051;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n&#x3053;&#x308C;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3042;&#x308A;&#x3001;Transform &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x304B;&#x3089;&#x306E;&#x307F;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nAll Transform stream implementations must provide a `_transform`\nmethod to accept input and produce output.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5B9F;&#x88C5;&#x306F;&#x3001;&#x5165;&#x529B;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x3063;&#x3066;&#x51FA;&#x529B;&#x3092;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;\n<code>_transform()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\n`_transform` should do whatever has to be done in this specific\nTransform class, to handle the bytes being written, and pass them off\nto the readable portion of the interface.  Do asynchronous I/O,\nprocess things, and so on.\n-->\n\n<p>&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x308B;&#x30D0;&#x30A4;&#x30C8;&#x3092;&#x51E6;&#x7406;&#x3057;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x53EF;&#x80FD;&#x306A;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306B;&#x6E21;&#x3059;&#x306A;&#x3069;&#x3001;\nTransform &#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306F;&#x5168;&#x3066; <code>_transform()</code>\n&#x3067;&#x884C;&#x308F;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;&#x975E;&#x540C;&#x671F; I/O&#x3001;&#x4F55;&#x304B;&#x306E;&#x51E6;&#x7406;&#x3001;&#x305D;&#x306E;&#x4ED6;&#x3002;\n\n</p>\n<!--\nCall `transform.push(outputChunk)` 0 or more times to generate output\nfrom this input chunk, depending on how much data you want to output\nas a result of this chunk.\n-->\n\n<p>&#x3053;&#x306E;&#x5165;&#x529B;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304B;&#x3089;&#x306E;&#x51FA;&#x529B;&#x3092;&#x751F;&#x6210;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3001;<code>transform.push(outputChunk)</code>\n&#x3092; 0 &#x56DE;&#x4EE5;&#x4E0A;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x3053;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306E;&#x7D50;&#x679C;&#x3068;&#x3057;&#x3066;&#x3069;&#x308C;&#x3060;&#x3051;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x51FA;&#x529B;&#x3057;&#x305F;&#x3044;&#x306E;&#x304B;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nCall the callback function only when the current chunk is completely\nconsumed.  Note that there may or may not be output as a result of any\nparticular input chunk.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306E;&#x51E6;&#x7406;&#x304C;&#x5B8C;&#x5168;&#x306B;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306E;&#x307F;&#x3001;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x7279;&#x5B9A;&#x306E;&#x5165;&#x529B;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304B;&#x3089;&#x306E;&#x7D50;&#x679C;&#x3068;&#x3057;&#x3066;&#x3001;&#x51FA;&#x529B;&#x304C;&#x3042;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3057;&#x3001;\n&#x7121;&#x3044;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nThis method is prefixed with an underscore because it is internal to\nthe class that defines it, and should not be called directly by user\nprograms.  However, you **are** expected to override this method in\nyour own extension classes.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3053;&#x308C;&#x3092;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x5185;&#x90E8;&#x306E;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304B;&#x3089;\n&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;&#x306E;&#x63A5;&#x982D;&#x8F9E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x62E1;&#x5F35;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n<strong>&#x6C42;&#x3081;&#x3089;&#x308C;&#x3066;</strong>&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;chunk&quot;
                        },
                        {
                          &quot;name&quot;: &quot;encoding&quot;
                        },
                        {
                          &quot;name&quot;: &quot;callback&quot;
                        }
                      ]
                    }
                  ]
                },
                {
                  &quot;textRaw&quot;: &quot;transform.\\_flush(callback)&quot;,
                  &quot;type&quot;: &quot;method&quot;,
                  &quot;name&quot;: &quot;\\_flush&quot;,
                  &quot;desc&quot;: &quot;<!--\n* `callback` {Function} Call this function (optionally with an error\n  argument) when you are done flushing any remaining data.\n-->\n\n<ul>\n<li><code>callback</code> {Function} &#x4E0E;&#x3048;&#x3089;&#x308C;&#x305F;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306E;&#x51E6;&#x7406;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F;&#x5834;&#x5408;&#x306B;&#x3001;\n(&#x4EFB;&#x610F;&#x306E;&#x30A8;&#x30E9;&#x30FC;&#x5F15;&#x6570;&#x3068;&#x5171;&#x306B;) &#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</li>\n</ul>\n<!--\nNote: **This function MUST NOT be called directly.**  It MAY be implemented\nby child classes, and if so, will be called by the internal Transform\nclass methods only.\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x306F;&#x3044;&#x3051;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n&#x3053;&#x308C;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x305A;&#x3001;Transform &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x304B;&#x3089;&#x306E;&#x307F;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIn some cases, your transform operation may need to emit a bit more\ndata at the end of the stream.  For example, a `Zlib` compression\nstream will store up some internal state so that it can optimally\ncompress the output.  At the end, however, it needs to do the best it\ncan with what is left, so that the data will be complete.\n-->\n\n<p>&#x5834;&#x5408;&#x306B;&#x3088;&#x3063;&#x3066;&#x306F;&#x3001;&#x5909;&#x63DB;&#x64CD;&#x4F5C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x7D42;&#x7AEF;&#x3067;&#x3088;&#x308A;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x751F;&#x6210;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070;&#x3001;<code>Zlib</code> &#x5727;&#x7E2E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x51FA;&#x529B;&#x3092;&#x6700;&#x9069;&#x306B;&#x5727;&#x7E2E;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;\n&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x5185;&#x90E8;&#x72B6;&#x614B;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x4E00;&#x65B9;&#x3001;&#x7D42;&#x7AEF;&#x3067;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5B8C;&#x5168;&#x306A;&#x3082;&#x306E;&#x306B;&#x306A;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;\n&#x6B8B;&#x3055;&#x308C;&#x305F;&#x3082;&#x306E;&#x306B;&#x6700;&#x5584;&#x3092;&#x5C3D;&#x304F;&#x3059;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIn those cases, you can implement a `_flush` method, which will be\ncalled at the very end, after all the written data is consumed, but\nbefore emitting `end` to signal the end of the readable side.  Just\nlike with `_transform`, call `transform.push(chunk)` zero or more\ntimes, as appropriate, and call `callback` when the flush operation is\ncomplete.\n-->\n\n<p>&#x3053;&#x306E;&#x5834;&#x5408;&#x3001;&#x6700;&#x5F8C;&#x306E;&#x6700;&#x5F8C; (&#x66F8;&#x304D;&#x8FBC;&#x307E;&#x308C;&#x305F;&#x5168;&#x3066;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x305F;&#x5F8C;&#x3001;\n&#x305F;&#x3060;&#x3057;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5074;&#x306E;&#x7D42;&#x4E86;&#x3092;&#x77E5;&#x3089;&#x305B;&#x308B; <code>&apos;end&apos;</code> &#x304C;&#x751F;&#x6210;&#x3055;&#x308C;&#x308B;&#x524D;) &#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;\n<code>_flush()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n<code>_transform()</code> &#x3068;&#x540C;&#x69D8;&#x3001;<code>transform.push(chunk)</code> &#x3092;&#x4F55;&#x5EA6; (0 &#x56DE;&#x4EE5;&#x4E0A;) &#x3067;&#x3082;\n&#x9069;&#x5207;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3001;&#x30D5;&#x30E9;&#x30C3;&#x30B7;&#x30E5;&#x64CD;&#x4F5C;&#x304C;&#x5B8C;&#x4E86;&#x3057;&#x305F;&#x6642;&#x306B; <code>callback</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis method is prefixed with an underscore because it is internal to\nthe class that defines it, and should not be called directly by user\nprograms.  However, you **are** expected to override this method in\nyour own extension classes.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3053;&#x308C;&#x3092;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x5185;&#x90E8;&#x306E;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304B;&#x3089;\n&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;&#x306E;&#x63A5;&#x982D;&#x8F9E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x62E1;&#x5F35;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n<strong>&#x6C42;&#x3081;&#x3089;&#x308C;&#x3066;</strong>&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<h4>Example: <code>SimpleProtocol</code> parser v2</h4>\n<!--\nThe example above of a simple protocol parser can be implemented\nsimply by using the higher level [Transform][] stream class, similar to\nthe `parseHeader` and `SimpleProtocol v1` examples above.\n-->\n\n<p>&#x524D;&#x8FF0;&#x3057;&#x305F;&#x5358;&#x7D14;&#x306A;&#x30D7;&#x30ED;&#x30C8;&#x30B3;&#x30EB;&#x30D1;&#x30FC;&#x30B5;&#x306E;&#x4F8B;&#x306F;&#x3001;&#x3088;&#x308A;&#x9AD8;&#x6C34;&#x6E96;&#x306A; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30AF;&#x30E9;&#x30B9;&#x3092;\n&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3067;&#x3001;&#x3055;&#x3089;&#x306B;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306B;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x524D;&#x8FF0;&#x306E; <code>parseHeader</code> &#x304A;&#x3088;&#x3073; <code>SimpleProtocol v1</code> &#x3068;&#x3088;&#x304F;&#x4F3C;&#x305F;&#x4F8B;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nIn this example, rather than providing the input as an argument, it\nwould be piped into the parser, which is a more idiomatic Node stream\napproach.\n-->\n\n<p>&#x3053;&#x306E;&#x4F8B;&#x3067;&#x306F;&#x3001;&#x5165;&#x529B;&#x3092;&#x5F15;&#x6570;&#x3067;&#x4E0E;&#x3048;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;Node &#x306E;&#x30B9;&#x30C8;&#x30FC;&#x30E0;&#x306B;&#x304A;&#x3051;&#x308B;\n&#x3088;&#x308A;&#x6163;&#x7528;&#x7684;&#x306A;&#x30A2;&#x30D7;&#x30ED;&#x30FC;&#x30C1;&#x3068;&#x3057;&#x3066;&#x30D1;&#x30FC;&#x30B5;&#x306B;&#x30D1;&#x30A4;&#x30D7;&#x3067;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var util = require(&apos;util&apos;);\nvar Transform = require(&apos;stream&apos;).Transform;\nutil.inherits(SimpleProtocol, Transform);\n\nfunction SimpleProtocol(options) {\n  if (!(this instanceof SimpleProtocol))\n    return new SimpleProtocol(options);\n\n  Transform.call(this, options);\n  this._inBody = false;\n  this._sawFirstCr = false;\n  this._rawHeader = [];\n  this.header = null;\n}\n\nSimpleProtocol.prototype._transform = function(chunk, encoding, done) {\n  if (!this._inBody) {\n    // check if the chunk has a \\n\\n\n    var split = -1;\n    for (var i = 0; i &lt; chunk.length; i++) {\n      if (chunk[i] === 10) { // &apos;\\n&apos;\n        if (this._sawFirstCr) {\n          split = i;\n          break;\n        } else {\n          this._sawFirstCr = true;\n        }\n      } else {\n        this._sawFirstCr = false;\n      }\n    }\n\n    if (split === -1) {\n      // still waiting for the \\n\\n\n      // stash the chunk, and try again.\n      this._rawHeader.push(chunk);\n    } else {\n      this._inBody = true;\n      var h = chunk.slice(0, split);\n      this._rawHeader.push(h);\n      var header = Buffer.concat(this._rawHeader).toString();\n      try {\n        this.header = JSON.parse(header);\n      } catch (er) {\n        this.emit(&apos;error&apos;, new Error(&apos;invalid simple protocol data&apos;));\n        return;\n      }\n      // and let them know that we are done parsing the header.\n      this.emit(&apos;header&apos;, this.header);\n\n      // now, because we got some extra data, emit this first.\n      this.push(chunk.slice(split));\n    }\n  } else {\n    // from there on, just provide the data to our consumer as-is.\n    this.push(chunk);\n  }\n  done();\n};\n\n// Usage:\n// var parser = new SimpleProtocol();\n// source.pipe(parser)\n// Now parser is a readable stream that will emit &apos;header&apos;\n// with the parsed header data.</code></pre>\n&quot;,
                  &quot;signatures&quot;: [
                    {
                      &quot;params&quot;: [
                        {
                          &quot;name&quot;: &quot;callback&quot;
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;Class: stream.PassThrough&quot;,
              &quot;type&quot;: &quot;class&quot;,
              &quot;name&quot;: &quot;stream.PassThrough&quot;,
              &quot;desc&quot;: &quot;<!--\nThis is a trivial implementation of a [Transform][] stream that simply\npasses the input bytes across to the output.  Its purpose is mainly\nfor examples and testing, but there are occasionally use cases where\nit can come in handy as a building block for novel sorts of streams.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x53D6;&#x308B;&#x306B;&#x8DB3;&#x3089;&#x306A;&#x3044;&#x5B9F;&#x88C5;&#x3067;&#x3001;\n&#x5165;&#x529B;&#x3057;&#x305F;&#x30D0;&#x30A4;&#x30C8;&#x5217;&#x3092;&#x51FA;&#x529B;&#x306B;&#x5358;&#x7D14;&#x306B;&#x6E21;&#x3059;&#x3060;&#x3051;&#x3067;&#x3059;&#x3002;\n&#x3053;&#x308C;&#x306E;&#x4E3B;&#x306A;&#x76EE;&#x7684;&#x306F;&#x30B5;&#x30F3;&#x30D7;&#x30EB;&#x53CA;&#x3073;&#x30C6;&#x30B9;&#x30C8;&#x3067;&#x3059;&#x304C;&#x3001;&#x65B0;&#x3057;&#x3044;&#x7A2E;&#x985E;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x305F;&#x3081;&#x306E;\n&#x30D3;&#x30EB;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3068;&#x3057;&#x3066;&#x3001;&#x4F55;&#x304B;&#x3068;&#x4FBF;&#x5229;&#x3068;&#x306A;&#x308B;&#x30E6;&#x30FC;&#x30B9;&#x30B1;&#x30FC;&#x30B9;&#x304C;&#x6642;&#x6298;&#x5B58;&#x5728;&#x3057;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;Streams: Under the Hood&quot;,
          &quot;name&quot;: &quot;Streams: Under the Hood&quot;,
          &quot;type&quot;: &quot;misc&quot;,
          &quot;miscs&quot;: [
            {
              &quot;textRaw&quot;: &quot;Buffering&quot;,
              &quot;name&quot;: &quot;Buffering&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;desc&quot;: &quot;<!--\nBoth Writable and Readable streams will buffer data on an internal\nobject called `_writableState.buffer` or `_readableState.buffer`,\nrespectively.\n-->\n\n<p>Readable &#x53CA;&#x3073; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x305D;&#x308C;&#x305E;&#x308C;&#x3001;<code>_writableState.buffer</code> &#x307E;&#x305F;&#x306F;\n<code>_readableState.buffer</code> &#x3068;&#x547C;&#x3070;&#x308C;&#x308B;&#x5185;&#x90E8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe amount of data that will potentially be buffered depends on the\n`highWaterMark` option which is passed into the constructor.\n-->\n\n<p>&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3055;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x91CF;&#x306F;&#x3001;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306B;&#x6E21;&#x3055;&#x308C;&#x308B; <code>highWaterMark</code>\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x306B;&#x4F9D;&#x5B58;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBuffering in Readable streams happens when the implementation calls\n[`stream.push(chunk)`][].  If the consumer of the Stream does not call\n`stream.read()`, then the data will sit in the internal queue until it\nis consumed.\n-->\n\n<p>Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x304A;&#x3051;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306F;&#x3001;&#x5B9F;&#x88C5;&#x304C; [<code>stream.push(chunk)</code>][]\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x305F;&#x6642;&#x306B;&#x8D77;&#x3053;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5229;&#x7528;&#x8005;&#x304C; <code>stream.read()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3044;&#x3068;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x305D;&#x308C;&#x304C;&#x6D88;&#x8CBB;&#x3055;&#x308C;&#x308B;&#x307E;&#x3067;&#x5185;&#x90E8;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x7559;&#x307E;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nBuffering in Writable streams happens when the user calls\n[`stream.write(chunk)`][] repeatedly, even when `write()` returns `false`.\n-->\n\n<p>Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x304A;&#x3051;&#x308B;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306F;&#x3001;&#x5229;&#x7528;&#x8005;&#x304C; [<code>stream.write(chunk)</code>][]\n&#x3092;&#x7E70;&#x308A;&#x8FD4;&#x3057;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3068;&#x3001;<code>write()</code> &#x304C; <code>false</code> &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5834;&#x5408;&#x3067;&#x3082;&#x8D77;&#x3053;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe purpose of streams, especially with the `pipe()` method, is to\nlimit the buffering of data to acceptable levels, so that sources and\ndestinations of varying speed will not overwhelm the available memory.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3001;&#x7279;&#x306B; <code>pipe()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306E;&#x76EE;&#x7684;&#x306F;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x3092;\n&#x8A31;&#x5BB9;&#x3067;&#x304D;&#x308B;&#x30EC;&#x30D9;&#x30EB;&#x306B;&#x5236;&#x9650;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;&#x305D;&#x306E;&#x305F;&#x3081;&#x3001;&#x69D8;&#x3005;&#x306A;&#x901F;&#x5EA6;&#x306E;&#x5165;&#x529B;&#x5143;&#x3068;&#x51FA;&#x529B;&#x5148;&#x3067;&#x3001;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306A;&#x30E1;&#x30E2;&#x30EA;&#x3092;&#x5727;&#x8FEB;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`stream.read(0)`&quot;,
              &quot;name&quot;: &quot;`stream.read(0)`&quot;,
              &quot;desc&quot;: &quot;<!--\nThere are some cases where you want to trigger a refresh of the\nunderlying readable stream mechanisms, without actually consuming any\ndata.  In that case, you can call `stream.read(0)`, which will always\nreturn null.\n-->\n\n<p>&#x5B9F;&#x969B;&#x306B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x3053;&#x3068;&#x306A;&#x304F;&#x3001;&#x4E0B;&#x5C64;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x3092;\n&#x30EA;&#x30D5;&#x30EC;&#x30C3;&#x30B7;&#x30E5;&#x3059;&#x308B;&#x304D;&#x3063;&#x304B;&#x3051;&#x304C;&#x6B32;&#x3057;&#x304F;&#x306A;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;&#x5E38;&#x306B; <code>null</code> &#x3092;&#x8FD4;&#x3059; <code>stream.read(0)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nIf the internal read buffer is below the `highWaterMark`, and the\nstream is not currently reading, then calling `read(0)` will trigger\na low-level `_read` call.\n-->\n\n<p>&#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x304C; <code>highWaterMark</code> &#x3092;&#x4E0B;&#x56DE;&#x3063;&#x3066;&#x3044;&#x3066;&#x3001;\n&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x73FE;&#x5728;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x4E2D;&#x3067;&#x306A;&#x3051;&#x308C;&#x3070;&#x3001;<code>read(0)</code> &#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x306F;&#x4F4E;&#x6C34;&#x6E96;&#x306E;\n<code>_read()</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x304D;&#x3063;&#x304B;&#x3051;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThere is almost never a need to do this.  However, you will see some\ncases in Node's internals where this is done, particularly in the\nReadable stream class internals.\n-->\n\n<p>&#x3053;&#x308C;&#x3092;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x307B;&#x3068;&#x3093;&#x3069;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089; Node &#x306E;&#x5185;&#x90E8;&#x3001;&#x7279;&#x306B; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x3067;&#x3001;\n&#x3053;&#x308C;&#x304C;&#x4F7F;&#x308F;&#x308C;&#x3066;&#x3044;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3092;&#x898B;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n\n</p>\n&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;displayName&quot;: &quot;`stream.read(0)`&quot;
            },
            {
              &quot;textRaw&quot;: &quot;`stream.push(&apos;&apos;)`&quot;,
              &quot;name&quot;: &quot;`stream.push(&apos;&apos;)`&quot;,
              &quot;desc&quot;: &quot;<!--\nPushing a zero-byte string or Buffer (when not in [Object mode][]) has an\ninteresting side effect.  Because it *is* a call to\n[`stream.push()`][], it will end the `reading` process.  However, it\ndoes *not* add any data to the readable buffer, so there's nothing for\na user to consume.\n-->\n\n<p>&#x30BC;&#x30ED;&#x30D0;&#x30A4;&#x30C8;&#x306E;&#x9577;&#x3055;&#x306E;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3092;&#x30D7;&#x30C3;&#x30B7;&#x30E5;&#x3059;&#x308B;&#x3068;&#x3001;\n([&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;][]&#x306E;&#x5834;&#x5408;&#x3092;&#x9664;&#x304D;) &#x9762;&#x767D;&#x3044;&#x526F;&#x4F5C;&#x7528;&#x304C;&#x8D77;&#x3053;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; [<code>stream.push()</code>][] &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x306E;&#x3067;&#x3001;<code>reading</code> &#x30D7;&#x30ED;&#x30BB;&#x30B9;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x3069;&#x3093;&#x306A;&#x30C7;&#x30FC;&#x30BF;&#x3082;&#x52A0;&#x3048; <em>&#x306A;&#x3044;</em> &#x306E;&#x3067;&#x3001;\n&#x30E6;&#x30FC;&#x30B6;&#x304C;&#x6D88;&#x8CBB;&#x3059;&#x308B;&#x3082;&#x306E;&#x306F;&#x4F55;&#x3082;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nVery rarely, there are cases where you have no data to provide now,\nbut the consumer of your stream (or, perhaps, another bit of your own\ncode) will know when to check again, by calling `stream.read(0)`.  In\nthose cases, you *may* call `stream.push('')`.\n-->\n\n<p>&#x3054;&#x304F;&#x307E;&#x308C;&#x306B;&#x3001;&#x4ECA;&#x306F;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7121;&#x3044;&#x5834;&#x5408;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;&#x3057;&#x304B;&#x3057;&#x3001;<code>stream.read(0)</code>\n&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x306B;&#x3088;&#x308A;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5229;&#x7528;&#x8005; (&#x3042;&#x308B;&#x3044;&#x306F;&#x3001;&#x3082;&#x3057;&#x304B;&#x3059;&#x308B;&#x3068;&#x3042;&#x306A;&#x305F;&#x306E;\n&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x4E00;&#x90E8;) &#x306F;&#x518D;&#x3073;&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x3059;&#x3079;&#x304D;&#x306A;&#x306E;&#x304C;&#x3044;&#x3064;&#x304B;&#x3092;&#x77E5;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;<code>stream.push(&apos;&apos;)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x304C; <em>&#x3067;&#x304D;&#x307E;&#x3059;</em> &#x3002;\n\n</p>\n<!--\nSo far, the only use case for this functionality is in the\n[tls.CryptoStream][] class, which is deprecated in Node v0.12.  If you\nfind that you have to use `stream.push('')`, please consider another\napproach, because it almost certainly indicates that something is\nhorribly wrong.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x6240;&#x3001;&#x3053;&#x306E;&#x6A5F;&#x80FD;&#x306E;&#x552F;&#x4E00;&#x306E;&#x30E6;&#x30FC;&#x30B9;&#x30B1;&#x30FC;&#x30B9;&#x306F; v0.12 &#x3067;&#x5EC3;&#x6B62;&#x4E88;&#x5B9A;&#x306E;\n[tls.CryptoStream][] &#x306E;&#x4E2D;&#x306B;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>stream.push(&apos;&apos;)</code> &#x3092;&#x4F7F;&#x308F;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x3089;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x306A;&#x3063;&#x305F;&#x3089;&#x3001;&#x305D;&#x308C;&#x306F;&#x304A;&#x305D;&#x3089;&#x304F;\n&#x4F55;&#x304B;&#x304C;&#x6050;&#x308D;&#x3057;&#x304F;&#x9593;&#x9055;&#x3063;&#x3066;&#x3044;&#x308B;&#x3053;&#x3068;&#x3092;&#x793A;&#x3059;&#x306E;&#x3067;&#x3001;&#x4ED6;&#x306E;&#x65B9;&#x6CD5;&#x3092;&#x691C;&#x8A0E;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;displayName&quot;: &quot;`stream.push(&apos;&apos;)`&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Compatibility with Older Node Versions&quot;,
              &quot;name&quot;: &quot;Compatibility with Older Node Versions&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;desc&quot;: &quot;<!--\nIn versions of Node prior to v0.10, the Readable stream interface was\nsimpler, but also less powerful and less useful.\n-->\n\n<p>v0.10 &#x3088;&#x308A;&#x524D;&#x306E;&#x30D0;&#x30FC;&#x30B8;&#x30E7;&#x30F3;&#x306E; Node &#x3067;&#x306F;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30A4;&#x30F3;&#x30BF;&#x30D5;&#x30A7;&#x30FC;&#x30B9;&#x306F;\n&#x3088;&#x308A;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x3067;&#x3057;&#x305F;&#x304C;&#x3001;&#x5F37;&#x529B;&#x3067;&#x306F;&#x306A;&#x304F;&#x4F7F;&#x3044;&#x3084;&#x3059;&#x304F;&#x3082;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3067;&#x3057;&#x305F;&#x3002;\n\n</p>\n<!--\n* Rather than waiting for you to call the `read()` method, `'data'`\n  events would start emitting immediately.  If you needed to do some\n  I/O to decide how to handle data, then you had to store the chunks\n  in some kind of buffer so that they would not be lost.\n* The `pause()` method was advisory, rather than guaranteed.  This\n  meant that you still had to be prepared to receive `'data'` events\n  even when the stream was in a paused state.\n-->\n\n<ul>\n<li><code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x306E;&#x3092;&#x5F85;&#x3064;&#x306E;&#x3067;&#x306F;&#x306A;&#x304F;&#x3001;\n<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x304C;&#x3059;&#x3050;&#x306B;&#x751F;&#x6210;&#x3055;&#x308C;&#x59CB;&#x3081;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x51E6;&#x7406;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x3092;&#x6C7A;&#x5B9A;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x3044;&#x304F;&#x3089;&#x304B;&#x306E; I/O &#x3092;&#x3059;&#x308B;\n&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308B;&#x5834;&#x5408;&#x3001;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5931;&#x308F;&#x308C;&#x306A;&#x3044;&#x3088;&#x3046;&#x306B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B;&#x306F;\n&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x3092;&#x4F55;&#x3089;&#x304B;&#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x4FDD;&#x5B58;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3067;&#x3057;&#x305F;&#x3002;</li>\n<li><code>pause()</code> &#x306F;&#x4FDD;&#x8A3C;&#x3068;&#x3044;&#x3046;&#x3088;&#x308A;&#x306F;&#x3080;&#x3057;&#x308D;&#x52A9;&#x8A00;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x4E2D;&#x65AD;&#x3055;&#x308C;&#x305F;&#x72B6;&#x614B;&#x3067;&#x3042;&#x3063;&#x305F;&#x3068;&#x3057;&#x3066;&#x3082;&#x3001;\n<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;&#x53D7;&#x3051;&#x53D6;&#x308B;&#x6E96;&#x5099;&#x304C;&#x5FC5;&#x8981;&#x3060;&#x3068;&#x3044;&#x3046;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;</li>\n</ul>\n<!--\nIn Node v0.10, the Readable class described below was added.  For\nbackwards compatibility with older Node programs, Readable streams\nswitch into \"flowing mode\" when a `'data'` event handler is added, or\nwhen the `pause()` or `resume()` methods are called.  The effect is\nthat, even if you are not using the new `read()` method and\n`'readable'` event, you no longer have to worry about losing `'data'`\nchunks.\n-->\n\n<p>Node v0.10 &#x304B;&#x3089;&#x3001;&#x4E0A;&#x8A18;&#x3067;&#x8AAC;&#x660E;&#x3057;&#x305F; Readable &#x30AF;&#x30E9;&#x30B9;&#x304C;&#x8FFD;&#x52A0;&#x3055;&#x308C;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x53E4;&#x3044; Node &#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x3068;&#x306E;&#x5F8C;&#x65B9;&#x4E92;&#x63DB;&#x6027;&#x306E;&#x305F;&#x3081;&#x306B;&#x3001;Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;\n<code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x304C;&#x52A0;&#x3048;&#x3089;&#x308C;&#x305F;&#x5834;&#x5408;&#x3084;&#x3001;<code>pause()</code> &#x307E;&#x305F;&#x306F;\n<code>resume()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x8AAD;&#x307F;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x300C;flowing &#x30E2;&#x30FC;&#x30C9;&#x300D;&#x306B;&#x5207;&#x308A;&#x66FF;&#x308F;&#x308A;&#x307E;&#x3059;&#x3002;\n&#x305D;&#x306E;&#x7D50;&#x679C;&#x3068;&#x3057;&#x3066;&#x3001;&#x65B0;&#x3057;&#x3044; <code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3084; <code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x3092;\n&#x4F7F;&#x7528;&#x3057;&#x3066;&#x3044;&#x306A;&#x304F;&#x3066;&#x3082;&#x3001;&#x3082;&#x3046; <code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x304C;&#x5931;&#x308F;&#x308C;&#x308B;&#x3053;&#x3068;&#x3092;\n&#x5FC3;&#x914D;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nMost programs will continue to function normally.  However, this\nintroduces an edge case in the following conditions:\n-->\n\n<p>&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306F;&#x3053;&#x308C;&#x307E;&#x3067;&#x901A;&#x308A;&#x306B;&#x6A5F;&#x80FD;&#x3059;&#x308B;&#x3067;&#x3057;&#x3087;&#x3046;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x4EE5;&#x4E0B;&#x306E;&#x6761;&#x4EF6;&#x3067;&#x30A8;&#x30C3;&#x30B8;&#x30B1;&#x30FC;&#x30B9;&#x304C;&#x5B58;&#x5728;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n* No `'data'` event handler is added.\n* The `pause()` and `resume()` methods are never called.\n-->\n\n<ul>\n<li><code>&apos;data&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x30CF;&#x30F3;&#x30C9;&#x30E9;&#x304C;&#x767B;&#x9332;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x3002;</li>\n<li><code>pause()</code> &#x304A;&#x3088;&#x3073; <code>resume()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x3066;&#x3044;&#x306A;&#x3044;&#x3002;</li>\n</ul>\n<!--\nFor example, consider the following code:\n-->\n\n<p>&#x4F8B;&#x3048;&#x3070;&#x3001;&#x4EE5;&#x4E0B;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x3092;&#x8003;&#x3048;&#x3066;&#x307F;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;:\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// WARNING!  BROKEN!\nnet.createServer(function(socket) {\n\n  // we add an &apos;end&apos; method, but never consume the data\n  socket.on(&apos;end&apos;, function() {\n    // It will never get here.\n    socket.end(&apos;I got your message (but didnt read it)\\n&apos;);\n  });\n\n}).listen(1337);</code></pre>\n<!--\nIn versions of node prior to v0.10, the incoming message data would be\nsimply discarded.  However, in Node v0.10 and beyond, the socket will\nremain paused forever.\n-->\n\n<p>v0.10 &#x3088;&#x308A;&#x524D;&#x306E; Node &#x3067;&#x306F;&#x3001;&#x5165;&#x3063;&#x3066;&#x304D;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x306F;&#x5358;&#x7D14;&#x306B;&#x7834;&#x68C4;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3057;&#x305F;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;Node v0.10 &#x4EE5;&#x964D;&#x3067;&#x306F;&#x3001;&#x30BD;&#x30B1;&#x30C3;&#x30C8;&#x306F;&#x4E2D;&#x65AD;&#x3057;&#x305F;&#x307E;&#x307E;&#x3068;&#x306A;&#x308A;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe workaround in this situation is to call the `resume()` method to\ntrigger \"old mode\" behavior:\n-->\n\n<p>&#x3053;&#x306E;&#x72B6;&#x6CC1;&#x306E;&#x56DE;&#x907F;&#x7B56;&#x306F;&#x3001;&#x300C;flowwing &#x30E2;&#x30FC;&#x30C9;&#x300D;&#x306E;&#x632F;&#x308B;&#x821E;&#x3044;&#x3078;&#x306E;&#x30C8;&#x30EA;&#x30AC;&#x30FC;&#x3068;&#x3057;&#x3066;\n<code>resume()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x3067;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// Workaround\nnet.createServer(function(socket) {\n\n  socket.on(&apos;end&apos;, function() {\n    socket.end(&apos;I got your message (but didnt read it)\\n&apos;);\n  });\n\n  // start the flow of data, discarding it.\n  socket.resume();\n\n}).listen(1337);</code></pre>\n<!--\nIn addition to new Readable streams switching into flowing-mode, pre-v0.10\nstyle streams can be wrapped in a Readable class using the `wrap()`\nmethod.\n-->\n\n<p>&#x65B0;&#x3057;&#x3044; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092; flowing &#x30E2;&#x30FC;&#x30C9;&#x306B;&#x5207;&#x308A;&#x66FF;&#x3048;&#x3089;&#x308C;&#x308B;&#x3053;&#x3068;&#x306B;&#x52A0;&#x3048;&#x3066;&#x3001;\n<code>wrap()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x4F7F;&#x3063;&#x3066; v0.10 &#x3088;&#x308A;&#x524D;&#x306E;&#x30B9;&#x30BF;&#x30A4;&#x30EB;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\nReadable &#x30AF;&#x30E9;&#x30B9;&#x3067;&#x30E9;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x3053;&#x3068;&#x3082;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;Object Mode&quot;,
              &quot;name&quot;: &quot;Object Mode&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;desc&quot;: &quot;<!--\nNormally, Streams operate on Strings and Buffers exclusively.\n-->\n\n<p>&#x901A;&#x5E38;&#x3001;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x6587;&#x5B57;&#x5217;&#x307E;&#x305F;&#x306F;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306E;&#x307F;&#x3092;&#x6271;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nStreams that are in **object mode** can emit generic JavaScript values\nother than Buffers and Strings.\n-->\n\n<p><strong>&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;</strong> &#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x6587;&#x5B57;&#x5217;&#x53CA;&#x3073;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x4EE5;&#x5916;&#x306E;\n&#x4E00;&#x822C;&#x7684;&#x306A;JavaScript&#x306E;&#x5024;&#x3092;&#x6271;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nA Readable stream in object mode will always return a single item from\na call to `stream.read(size)`, regardless of what the size argument\nis.\n-->\n\n<p>&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;<code>stream.read(size)</code> &#x306E;&#x30B5;&#x30A4;&#x30BA;&#x5F15;&#x6570;&#x304C;\n&#x3044;&#x304F;&#x3064;&#x3067;&#x3042;&#x308B;&#x304B;&#x306B;&#x95A2;&#x308F;&#x3089;&#x305A;&#x3001;&#x5E38;&#x306B;&#x4E00;&#x3064;&#x306E;&#x9805;&#x76EE;&#x3092;&#x8FD4;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nA Writable stream in object mode will always ignore the `encoding`\nargument to `stream.write(data, encoding)`.\n-->\n\n<p>&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;&#x306E; Writable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;<code>stream.write(data, encoding)</code>\n&#x306E; <code>encoding</code> &#x5F15;&#x6570;&#x3092;&#x5E38;&#x306B;&#x7121;&#x8996;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe special value `null` still retains its special value for object\nmode streams.  That is, for object mode readable streams, `null` as a\nreturn value from `stream.read()` indicates that there is no more\ndata, and [`stream.push(null)`][] will signal the end of stream data\n(`EOF`).\n-->\n\n<p>&#x7279;&#x5225;&#x306A;&#x5024; <code>null</code> &#x306F;&#x3001;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306B;&#x304A;&#x3044;&#x3066;&#x3082;\n&#x7279;&#x5225;&#x306A;&#x5024;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3059;&#x306A;&#x308F;&#x3061;&#x3001;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3067;&#x306F;&#x3001;<code>stream.read()</code>\n&#x306E;&#x623B;&#x308A;&#x5024; <code>null</code> &#x306F;&#x3082;&#x3046;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7121;&#x3044;&#x3053;&#x3068;&#x3092;&#x3001;[<code>stream.push(null)</code>][]\n&#x306F;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x7D42;&#x7AEF;&#x3092;&#x793A;&#x3057;&#x307E;&#x3059; (<code>EOF</code>)&#x3002;\n\n</p>\n<!--\nNo streams in Node core are object mode streams.  This pattern is only\nused by userland streaming libraries.\n-->\n\n<p>Node &#x306E;&#x30B3;&#x30A2;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x306B;&#x306F;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30E2;&#x30FC;&#x30C9;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x5B58;&#x5728;&#x3057;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x306E;&#x30D1;&#x30BF;&#x30FC;&#x30F3;&#x306F;&#x30E6;&#x30FC;&#x30B6;&#x30E9;&#x30F3;&#x30C9;&#x306E;&#x30E9;&#x30A4;&#x30D6;&#x30E9;&#x30EA;&#x3067;&#x306E;&#x307F;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nYou should set `objectMode` in your stream child class constructor on\nthe options object.  Setting `objectMode` mid-stream is not safe.\n-->\n\n<p>&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x306F;&#x30B3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x306E; <code>options</code> &#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3067; <code>objectMode</code>\n&#x3092;&#x8A2D;&#x5B9A;&#x3059;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n<code>objectMode</code> &#x3092;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x9014;&#x4E2D;&#x3067;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x5B89;&#x5168;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;State Objects&quot;,
              &quot;name&quot;: &quot;state_objects&quot;,
              &quot;desc&quot;: &quot;<!--\n[Readable][] streams have a member object called `_readableState`.\n[Writable][] streams have a member object called `_writableState`.\n[Duplex][] streams have both.\n-->\n\n<p>[Readable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; <code>_readableState</code> &#x3068;&#x547C;&#x3070;&#x308C;&#x308B;&#x30E1;&#x30F3;&#x30D0;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n[Writable][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F; <code>_writableState</code> &#x3068;&#x547C;&#x3070;&#x308C;&#x308B;&#x30E1;&#x30F3;&#x30D0;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n[Duplex][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x4E21;&#x65B9;&#x3092;&#x6301;&#x3063;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\n**These objects should generally not be modified in child classes.**\nHowever, if you have a Duplex or Transform stream that should be in\n`objectMode` on the readable side, and not in `objectMode` on the\nwritable side, then you may do this in the constructor by setting the\nflag explicitly on the appropriate state object.\n-->\n\n<p><strong>&#x901A;&#x5E38;&#x3001;&#x3053;&#x308C;&#x3089;&#x306E;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5909;&#x66F4;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3082;&#x3057; Duplex &#x307E;&#x305F;&#x306F; Transform &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x5074;&#x304C;\n<code>objectMode</code> &#x3067;&#x3001;&#x66F8;&#x304D;&#x8FBC;&#x307F;&#x5074;&#x304C; <code>objectMode</code> &#x3067;&#x306F;&#x306A;&#x3044;&#x5834;&#x5408;&#x3001;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3067;\n&#x9069;&#x5207;&#x306A;&#x30B9;&#x30C6;&#x30FC;&#x30C8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306B;&#x30D5;&#x30E9;&#x30B0;&#x3092;&#x660E;&#x793A;&#x7684;&#x306B;&#x8A2D;&#x5B9A;&#x3059;&#x308B;&#x3053;&#x3068;&#x306B;&#x306A;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var util = require(&apos;util&apos;);\nvar StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;\nvar Transform = require(&apos;stream&apos;).Transform;\nutil.inherits(JSONParseStream, Transform);\n\n// Gets \\n-delimited JSON string data, and emits the parsed objects\nfunction JSONParseStream(options) {\n  if (!(this instanceof JSONParseStream))\n    return new JSONParseStream(options);\n\n  Transform.call(this, options);\n  this._writableState.objectMode = false;\n  this._readableState.objectMode = true;\n  this._buffer = &apos;&apos;;\n  this._decoder = new StringDecoder(&apos;utf8&apos;);\n}\n\nJSONParseStream.prototype._transform = function(chunk, encoding, cb) {\n  this._buffer += this._decoder.write(chunk);\n  // split on newlines\n  var lines = this._buffer.split(/\\r?\\n/);\n  // keep the last partial line buffered\n  this._buffer = lines.pop();\n  for (var l = 0; l &lt; lines.length; l++) {\n    var line = lines[l];\n    try {\n      var obj = JSON.parse(line);\n    } catch (er) {\n      this.emit(&apos;error&apos;, er);\n      return;\n    }\n    // push the parsed object out to the readable consumer\n    this.push(obj);\n  }\n  cb();\n};\n\nJSONParseStream.prototype._flush = function(cb) {\n  // Just handle any leftover\n  var rem = this._buffer.trim();\n  if (rem) {\n    try {\n      var obj = JSON.parse(rem);\n    } catch (er) {\n      this.emit(&apos;error&apos;, er);\n      return;\n    }\n    // push the parsed object out to the readable consumer\n    this.push(obj);\n  }\n  cb();\n};</code></pre>\n<!--\nThe state objects contain other useful information for debugging the\nstate of streams in your programs.  It is safe to look at them, but\nbeyond setting option flags in the constructor, it is **not** safe to\nmodify them.\n-->\n\n<p>&#x30B9;&#x30C6;&#x30FC;&#x30C8;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x306F;&#x3001;&#x30C7;&#x30D0;&#x30C3;&#x30B0;&#x3067;&#x5F79;&#x306B;&#x7ACB;&#x3064;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x72B6;&#x614B;&#x3092;\n&#x60C5;&#x5831;&#x3068;&#x3057;&#x3066;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;&#x305D;&#x308C;&#x3092;&#x898B;&#x308B;&#x3053;&#x3068;&#x306F;&#x5B89;&#x5168;&#x3067;&#x3059;&#x304C;&#x3001;&#x3057;&#x304B;&#x3057;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3067;&#x8A2D;&#x5B9A;&#x3057;&#x305F;\n&#x30AA;&#x30D7;&#x30B7;&#x30E7;&#x30F3;&#x30D5;&#x30E9;&#x30B0;&#x3092;&#x5909;&#x66F4;&#x3059;&#x308B;&#x3053;&#x3068;&#x306F;&#x5B89;&#x5168;&#x3067;&#x306F; <strong>&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;</strong>&#x3002;\n\n\n</p>\n<!--\n[EventEmitter]: events.html#events_class_events_eventemitter\n[Object mode]: #stream_object_mode\n[`stream.push(chunk)`]: #stream_readable_push_chunk_encoding\n[`stream.push(null)`]: #stream_readable_push_chunk_encoding\n[`stream.push()`]: #stream_readable_push_chunk_encoding\n[`unpipe()`]: #stream_readable_unpipe_destination\n[unpiped]: #stream_readable_unpipe_destination\n[tcp sockets]: net.html#net_class_net_socket\n[zlib streams]: zlib.html\n[zlib]: zlib.html\n[crypto streams]: crypto.html\n[crypto]: crypto.html\n[tls.CryptoStream]: tls.html#tls_class_cryptostream\n[process.stdin]: process.html#process_process_stdin\n[stdout]: process.html#process_process_stdout\n[process.stdout]: process.html#process_process_stdout\n[process.stderr]: process.html#process_process_stderr\n[child process stdout and stderr]: child_process.html#child_process_child_stdout\n[API for Stream Consumers]: #stream_api_for_stream_consumers\n[API for Stream Implementors]: #stream_api_for_stream_implementors\n[Readable]: #stream_class_stream_readable\n[Writable]: #stream_class_stream_writable\n[Duplex]: #stream_class_stream_duplex\n[Transform]: #stream_class_stream_transform\n[`_read(size)`]: #stream_readable_read_size_1\n[`_read()`]: #stream_readable_read_size_1\n[_read]: #stream_readable_read_size_1\n[`writable.write(chunk)`]: #stream_writable_write_chunk_encoding_callback\n[`write(chunk, encoding, callback)`]: #stream_writable_write_chunk_encoding_callback\n[`write()`]: #stream_writable_write_chunk_encoding_callback\n[`stream.write(chunk)`]: #stream_writable_write_chunk_encoding_callback\n[`_write(chunk, encoding, callback)`]: #stream_writable_write_chunk_encoding_callback_1\n[`_write()`]: #stream_writable_write_chunk_encoding_callback_1\n[_write]: #stream_writable_write_chunk_encoding_callback_1\n[`util.inherits`]: util.html#util_util_inherits_constructor_superconstructor\n[`end()`]: #stream_writable_end_chunk_encoding_callback\n-->\n\n&quot;,
              &quot;type&quot;: &quot;misc&quot;,
              &quot;displayName&quot;: &quot;State Objects&quot;
            }
          ]
        }
      ],
      &quot;examples&quot;: [
        {
          &quot;textRaw&quot;: &quot;Class: stream.Readable&quot;,
          &quot;type&quot;: &quot;example&quot;,
          &quot;name&quot;: &quot;stream.Readable&quot;,
          &quot;desc&quot;: &quot;<!--\n`stream.Readable` is an abstract class designed to be extended with an\nunderlying implementation of the [`_read(size)`][] method.\n-->\n\n<p><code>stream.Readable</code> &#x306F;&#x62BD;&#x8C61;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x5B9F;&#x88C5;&#x3068;&#x3057;&#x3066; [<code>_read(size)</code>][]\n&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x3053;&#x3068;&#x3067;&#x62E1;&#x5F35;&#x3055;&#x308C;&#x308B;&#x3088;&#x3046;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nPlease see above under [API for Stream Consumers][] for how to consume\nstreams in your programs.  What follows is an explanation of how to\nimplement Readable streams in your programs.\n-->\n\n<p>&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x5229;&#x7528;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306B;&#x3064;&#x3044;&#x3066;&#x306F;&#x3001;\n&#x524D;&#x8FF0;&#x306E; [&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x5229;&#x7528;&#x8005;&#x306E;&#x305F;&#x3081;&#x306E; API][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n&#x3053;&#x306E;&#x5F8C;&#x306B;&#x7D9A;&#x304F;&#x306E;&#x306F;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x306E;&#x4E2D;&#x3067; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;\n&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x65B9;&#x6CD5;&#x306E;&#x8AAC;&#x660E;&#x3067;&#x3059;&#x3002;\n\n</p>\n<h4>Example: A Counting Stream</h4>\n<!--\nThis is a basic example of a Readable stream.  It emits the numerals\nfrom 1 to 1,000,000 in ascending order, and then ends.\n-->\n\n<p>&#x3053;&#x308C;&#x306F; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x57FA;&#x672C;&#x7684;&#x306A;&#x4F8B;&#x3067;&#x3059;&#x3002;\n&#x305D;&#x308C;&#x306F; 1 &#x304B;&#x3089; 1,000,000 &#x307E;&#x3067;&#x306E;&#x6570;&#x3092;&#x6607;&#x9806;&#x3067;&#x751F;&#x6210;&#x3057;&#x3001;&#x305D;&#x3057;&#x3066;&#x7D42;&#x4E86;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">var Readable = require(&apos;stream&apos;).Readable;\nvar util = require(&apos;util&apos;);\nutil.inherits(Counter, Readable);\n\nfunction Counter(opt) {\n  Readable.call(this, opt);\n  this._max = 1000000;\n  this._index = 1;\n}\n\nCounter.prototype._read = function() {\n  var i = this._index++;\n  if (i &gt; this._max)\n    this.push(null);\n  else {\n    var str = &apos;&apos; + i;\n    var buf = new Buffer(str, &apos;ascii&apos;);\n    this.push(buf);\n  }\n};</code></pre>\n<h4>Example: SimpleProtocol v1 (Sub-optimal)</h4>\n<!--\nThis is similar to the `parseHeader` function described above, but\nimplemented as a custom stream.  Also, note that this implementation\ndoes not convert the incoming data to a string.\n-->\n\n<p>&#x3053;&#x308C;&#x306F;&#x524D;&#x306B;&#x8AAC;&#x660E;&#x3057;&#x305F; <code>parseHeader</code> &#x95A2;&#x6570;&#x3068;&#x3088;&#x304F;&#x4F3C;&#x3066;&#x3044;&#x307E;&#x3059;&#x304C;&#x3001;\n&#x72EC;&#x81EA;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x307E;&#x305F;&#x3001;&#x3053;&#x306E;&#x5B9F;&#x88C5;&#x306F;&#x5165;&#x3063;&#x3066;&#x304F;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x6587;&#x5B57;&#x5217;&#x306B;&#x5909;&#x63DB;&#x3057;&#x306A;&#x3044;&#x3053;&#x3068;&#x306B;&#x6CE8;&#x610F;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<!--\nHowever, this would be better implemented as a [Transform][] stream.  See\nbelow for a better implementation.\n-->\n\n<p>&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3053;&#x308C;&#x306F; [Transform][] &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x3067;&#x3088;&#x308A;&#x3046;&#x307E;&#x304F;&#x5B9F;&#x88C5;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n&#x5F8C;&#x8FF0;&#x306E;&#x3088;&#x308A;&#x3088;&#x3044;&#x5B9F;&#x88C5;&#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// A parser for a simple data protocol.\n// The &quot;header&quot; is a JSON object, followed by 2 \\n characters, and\n// then a message body.\n//\n// NOTE: This can be done more simply as a Transform stream!\n// Using Readable directly for this is sub-optimal.  See the\n// alternative example below under the Transform section.\n\nvar Readable = require(&apos;stream&apos;).Readable;\nvar util = require(&apos;util&apos;);\n\nutil.inherits(SimpleProtocol, Readable);\n\nfunction SimpleProtocol(source, options) {\n  if (!(this instanceof SimpleProtocol))\n    return new SimpleProtocol(source, options);\n\n  Readable.call(this, options);\n  this._inBody = false;\n  this._sawFirstCr = false;\n\n  // source is a readable stream, such as a socket or file\n  this._source = source;\n\n  var self = this;\n  source.on(&apos;end&apos;, function() {\n    self.push(null);\n  });\n\n  // give it a kick whenever the source is readable\n  // read(0) will not consume any bytes\n  source.on(&apos;readable&apos;, function() {\n    self.read(0);\n  });\n\n  this._rawHeader = [];\n  this.header = null;\n}\n\nSimpleProtocol.prototype._read = function(n) {\n  if (!this._inBody) {\n    var chunk = this._source.read();\n\n    // if the source doesn&apos;t have data, we don&apos;t have data yet.\n    if (chunk === null)\n      return this.push(&apos;&apos;);\n\n    // check if the chunk has a \\n\\n\n    var split = -1;\n    for (var i = 0; i &lt; chunk.length; i++) {\n      if (chunk[i] === 10) { // &apos;\\n&apos;\n        if (this._sawFirstCr) {\n          split = i;\n          break;\n        } else {\n          this._sawFirstCr = true;\n        }\n      } else {\n        this._sawFirstCr = false;\n      }\n    }\n\n    if (split === -1) {\n      // still waiting for the \\n\\n\n      // stash the chunk, and try again.\n      this._rawHeader.push(chunk);\n      this.push(&apos;&apos;);\n    } else {\n      this._inBody = true;\n      var h = chunk.slice(0, split);\n      this._rawHeader.push(h);\n      var header = Buffer.concat(this._rawHeader).toString();\n      try {\n        this.header = JSON.parse(header);\n      } catch (er) {\n        this.emit(&apos;error&apos;, new Error(&apos;invalid simple protocol data&apos;));\n        return;\n      }\n      // now, because we got some extra data, unshift the rest\n      // back into the read queue so that our consumer will see it.\n      var b = chunk.slice(split);\n      this.unshift(b);\n\n      // and let them know that we are done parsing the header.\n      this.emit(&apos;header&apos;, this.header);\n    }\n  } else {\n    // from there on, just provide the data to our consumer.\n    // careful not to push(null), since that would indicate EOF.\n    var chunk = this._source.read();\n    if (chunk) this.push(chunk);\n  }\n};\n\n// Usage:\n// var parser = new SimpleProtocol(source);\n// Now parser is a readable stream that will emit &apos;header&apos;\n// with the parsed header data.</code></pre>\n&quot;,
          &quot;methods&quot;: [
            {
              &quot;textRaw&quot;: &quot;new stream.Readable([options])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;Readable&quot;,
              &quot;* `options` {Object}\n  * `highWaterMark` {Number} The maximum number of bytes to store in\n    the internal buffer before ceasing to read from the underlying\n    resource.  Default&quot;: &quot;16kb\n  * `encoding` {String} If specified, then buffers will be decoded to\n    strings using the specified encoding.  Default=null\n  * `objectMode` {Boolean} Whether this stream should behave\n    as a stream of objects. Meaning that stream.read(n) returns\n    a single value instead of a Buffer of size n.  Default=false&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;textRaw&quot;: &quot;`options` {Object} (&#x4EFB;&#x610F;) &quot;,
                      &quot;options&quot;: [
                        {
                          &quot;textRaw&quot;: &quot;`highWaterMark` {Number} &#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x306E;&#x3092;&#x4E2D;&#x65AD;&#x3059;&#x308B;&#x307E;&#x3067; &#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x8CAF;&#x3081;&#x3066;&#x304A;&#x304F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x306E;&#x6700;&#x5927;&#x5024;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002; &quot;,
                          &quot;name&quot;: &quot;highWaterMark&quot;,
                          &quot;type&quot;: &quot;Number&quot;,
                          &quot;desc&quot;: &quot;&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x306E;&#x3092;&#x4E2D;&#x65AD;&#x3059;&#x308B;&#x307E;&#x3067; &#x5185;&#x90E8;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306B;&#x8CAF;&#x3081;&#x3066;&#x304A;&#x304F;&#x30D0;&#x30A4;&#x30C8;&#x6570;&#x306E;&#x6700;&#x5927;&#x5024;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; 16kb&#x3002;&quot;
                        },
                        {
                          &quot;textRaw&quot;: &quot;`encoding` {String} &#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306F;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067; &#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `null`&#x3002; &quot;,
                          &quot;name&quot;: &quot;encoding&quot;,
                          &quot;type&quot;: &quot;String&quot;,
                          &quot;desc&quot;: &quot;&#x6307;&#x5B9A;&#x3055;&#x308C;&#x308B;&#x3068;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x306F;&#x6307;&#x5B9A;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3067; &#x30C7;&#x30B3;&#x30FC;&#x30C9;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `null`&#x3002;&quot;
                        },
                        {
                          &quot;textRaw&quot;: &quot;`objectMode` {Boolean} &#x3053;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066; &#x632F;&#x308B;&#x821E;&#x3046;&#x3079;&#x304D;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x3053;&#x308C;&#x306F; `stream.read(n)` &#x304C;&#x30B5;&#x30A4;&#x30BA; n &#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x306F;&#x306A;&#x304F; &#x4E00;&#x3064;&#x306E;&#x5024;&#x3092;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false` &#x3067;&#x3059;&#x3002; &quot;,
                          &quot;name&quot;: &quot;objectMode&quot;,
                          &quot;type&quot;: &quot;Boolean&quot;,
                          &quot;desc&quot;: &quot;&#x3053;&#x306E;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x304C;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x3068;&#x3057;&#x3066; &#x632F;&#x308B;&#x821E;&#x3046;&#x3079;&#x304D;&#x304B;&#x3069;&#x3046;&#x304B;&#x3002;&#x3053;&#x308C;&#x306F; `stream.read(n)` &#x304C;&#x30B5;&#x30A4;&#x30BA; n &#x306E;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x3067;&#x306F;&#x306A;&#x304F; &#x4E00;&#x3064;&#x306E;&#x5024;&#x3092;&#x8FD4;&#x3059;&#x3053;&#x3068;&#x3092;&#x610F;&#x5473;&#x3057;&#x307E;&#x3059;&#x3002;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x306F; `false` &#x3067;&#x3059;&#x3002;&quot;
                        }
                      ],
                      &quot;name&quot;: &quot;options&quot;,
                      &quot;type&quot;: &quot;Object&quot;,
                      &quot;desc&quot;: &quot;(&#x4EFB;&#x610F;)&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                },
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;options&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ],
              &quot;desc&quot;: &quot;<!--\nIn classes that extend the Readable class, make sure to call the\nReadable constructor so that the buffering settings can be properly\ninitialized.\n-->\n\n<p><code>Readable</code> &#x30AF;&#x30E9;&#x30B9;&#x3092;&#x62E1;&#x5F35;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3001;&#x30D0;&#x30C3;&#x30D5;&#x30A1;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x8A2D;&#x5B9A;&#x3092;&#x78BA;&#x5B9F;&#x306B;\n&#x521D;&#x671F;&#x5316;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x308B;&#x3088;&#x3046;&#x306B;&#x3001;&#x5FC5;&#x305A;&#x30B3;&#x30F3;&#x30B9;&#x30C8;&#x30E9;&#x30AF;&#x30BF;&#x3092;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;
            },
            {
              &quot;textRaw&quot;: &quot;readable.\\_read(size)&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;\\_read&quot;,
              &quot;desc&quot;: &quot;<!--\n* `size` {Number} Number of bytes to read asynchronously\n-->\n\n<ul>\n<li><code>size</code> {Number} &#x975E;&#x540C;&#x671F;&#x306B;&#x8AAD;&#x307F;&#x8FBC;&#x3080;&#x30D0;&#x30A4;&#x30C8;&#x6570;</li>\n</ul>\n<!--\nNote: **Implement this function, but do NOT call it directly.**\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3001;&#x3057;&#x304B;&#x3057;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x306A;&#x3044;&#x3067;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;</strong>\n\n</p>\n<!--\nThis function should NOT be called directly.  It should be implemented\nby child classes, and only called by the internal Readable class\nmethods.\n-->\n\n<p>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F;&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x3053;&#x308C;&#x306F;&#x30B5;&#x30D6;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x5B9F;&#x88C5;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3042;&#x308A;&#x3001;Readable &#x30AF;&#x30E9;&#x30B9;&#x306E;&#x5185;&#x90E8;&#x304B;&#x3089;\n&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nAll Readable stream implementations must provide a `_read` method to\nfetch data from the underlying resource.\n-->\n\n<p>&#x5168;&#x3066;&#x306E; Readable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306F;&#x3001;&#x4E0B;&#x5C64;&#x306E;&#x30EA;&#x30BD;&#x30FC;&#x30B9;&#x304B;&#x3089;&#x30C7;&#x30FC;&#x30BF;&#x3092;\n&#x53D6;&#x5F97;&#x3059;&#x308B;&#x305F;&#x3081;&#x306B; <code>_read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x63D0;&#x4F9B;&#x3057;&#x306A;&#x3051;&#x308C;&#x3070;&#x306A;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThis method is prefixed with an underscore because it is internal to\nthe class that defines it, and should not be called directly by user\nprograms.  However, you **are** expected to override this method in\nyour own extension classes.\n-->\n\n<p>&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3053;&#x308C;&#x3092;&#x5B9A;&#x7FA9;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x5185;&#x90E8;&#x306E;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;&#x30E6;&#x30FC;&#x30B6;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30E0;&#x304B;&#x3089;\n&#x76F4;&#x63A5;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x305F;&#x3081;&#x3001;&#x30A2;&#x30F3;&#x30C0;&#x30FC;&#x30B9;&#x30B3;&#x30A2;&#x306E;&#x63A5;&#x982D;&#x8F9E;&#x3092;&#x6301;&#x3061;&#x307E;&#x3059;&#x3002;\n&#x3057;&#x304B;&#x3057;&#x306A;&#x304C;&#x3089;&#x3001;&#x3042;&#x306A;&#x305F;&#x306E;&#x62E1;&#x5F35;&#x30AF;&#x30E9;&#x30B9;&#x3067;&#x306F;&#x3053;&#x306E;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x3092;&#x30AA;&#x30FC;&#x30D0;&#x30FC;&#x30E9;&#x30A4;&#x30C9;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;\n<strong>&#x6C42;&#x3081;&#x3089;&#x308C;&#x3066;</strong>&#x3044;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nWhen data is available, put it into the read queue by calling\n`readable.push(chunk)`.  If `push` returns false, then you should stop\nreading.  When `_read` is called again, you should start pushing more\ndata.\n-->\n\n<p>&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308C;&#x3070;&#x3001;<code>readable.push(chunk)</code> &#x3092;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3053;&#x3068;&#x3067;\n&#x305D;&#x308C;&#x3092;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x8FFD;&#x52A0;&#x3057;&#x307E;&#x3059;&#x3002;\n<code>push()</code> &#x304C; false &#x3092;&#x8FD4;&#x3057;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x3092;&#x6B62;&#x3081;&#x308B;&#x3079;&#x304D;&#x3067;&#x3059;&#x3002;\n<code>_read()</code> &#x304C;&#x518D;&#x3073;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x305F;&#x6642;&#x304C;&#x3001;&#x3055;&#x3089;&#x306B;&#x591A;&#x304F;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FFD;&#x52A0;&#x3092;&#x958B;&#x59CB;&#x3059;&#x3079;&#x304D;&#x6642;&#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `size` argument is advisory.  Implementations where a \"read\" is a\nsingle call that returns data can use this to know how much data to\nfetch.  Implementations where that is not relevant, such as TCP or\nTLS, may ignore this argument, and simply provide data whenever it\nbecomes available.  There is no need, for example to \"wait\" until\n`size` bytes are available before calling [`stream.push(chunk)`][].\n-->\n\n<p><code>size</code> &#x5F15;&#x6570;&#x306F;&#x30A2;&#x30C9;&#x30D0;&#x30A4;&#x30B9;&#x7684;&#x3067;&#x3059;&#x3002;\n&quot;read()&quot; &#x304C;&#x4E00;&#x56DE;&#x306E;&#x547C;&#x3073;&#x51FA;&#x3057;&#x3067;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8FD4;&#x3059;&#x5B9F;&#x88C5;&#x3067;&#x306F;&#x3001;\n&#x3069;&#x308C;&#x3060;&#x3051;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x53D6;&#x5F97;&#x3059;&#x3079;&#x304D;&#x304B;&#x77E5;&#x308B;&#x305F;&#x3081;&#x306B;&#x3053;&#x308C;&#x3092;&#x4F7F;&#x3046;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\nTCP&#x3084;TLS&#x306A;&#x3069;&#x3001;&#x305D;&#x308C;&#x306B;&#x95A2;&#x9023;&#x3057;&#x306A;&#x3044;&#x5B9F;&#x88C5;&#x3067;&#x306F;&#x3053;&#x306E;&#x5F15;&#x6570;&#x306F;&#x7121;&#x8996;&#x3055;&#x308C;&#x3001;\n&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x3063;&#x305F;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x30B7;&#x30F3;&#x30D7;&#x30EB;&#x306B;&#x63D0;&#x4F9B;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305F;&#x3068;&#x3048;&#x3070; [<code>stream.push(chunk)</code>][] &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3088;&#x308A;&#x524D;&#x306B;&#x3001;\n<code>size</code> &#x30D0;&#x30A4;&#x30C8;&#x304C;&#x5229;&#x7528;&#x53EF;&#x80FD;&#x306B;&#x306A;&#x308B;&#x307E;&#x3067;&#x300C;&#x5F85;&#x3064;&#x300D;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;size&quot;
                    }
                  ]
                }
              ]
            },
            {
              &quot;textRaw&quot;: &quot;readable.push(chunk, [encoding])&quot;,
              &quot;type&quot;: &quot;method&quot;,
              &quot;name&quot;: &quot;push&quot;,
              &quot;desc&quot;: &quot;<!--\n* `chunk` {Buffer | null | String} Chunk of data to push into the read queue\n* `encoding` {String} Encoding of String chunks.  Must be a valid\n  Buffer encoding, such as `'utf8'` or `'ascii'`\n* return {Boolean} Whether or not more pushes should be performed\n-->\n\n<ul>\n<li><code>chunk</code> {Buffer | null | String} &#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x30D7;&#x30C3;&#x30B7;&#x30E5;&#x3055;&#x308C;&#x308B;&#x3001;\n&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30C1;&#x30E3;&#x30F3;&#x30AF;</li>\n<li><code>encoding</code> {String} &#x6587;&#x5B57;&#x5217;&#x30C1;&#x30E3;&#x30F3;&#x30AF;&#x306E;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3002;\n<code>&apos;utf8&apos;</code> &#x3084; <code>&apos;ascii&apos;</code> &#x306A;&#x3069;&#x3001;Buffer &#x306E;&#x6B63;&#x3057;&#x3044;&#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x306E;&#x5FC5;&#x8981;&#x304C;&#x3042;&#x308A;&#x307E;&#x3059;&#x3002;</li>\n<li>return {Boolean} &#x3055;&#x3089;&#x306B;&#x30D7;&#x30C3;&#x30B7;&#x30E5;&#x3057;&#x3066;&#x3082;&#x3044;&#x3044;&#x304B;&#x3069;&#x3046;&#x304B;</li>\n</ul>\n<!--\nNote: **This function should be called by Readable implementors, NOT\nby consumers of Readable streams.**\n-->\n\n<p>&#x6CE8;&#x610F;: <strong>&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; Readable &#x306E;&#x5B9F;&#x88C5;&#x304B;&#x3089;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3079;&#x304D;&#x3082;&#x306E;&#x3067;&#x3042;&#x308A;&#x3001;\nReadable &#x30B9;&#x30C8;&#x30EA;&#x30FC;&#x30E0;&#x306E;&#x5229;&#x7528;&#x8005;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3059;&#x3079;&#x304D;&#x3067;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;</strong>\n\n</p>\n<!--\nThe `_read()` function will not be called again until at least one\n`push(chunk)` call is made.\n-->\n\n<p>&#x5C11;&#x306A;&#x304F;&#x3068;&#x3082;&#x4E00;&#x56DE;&#x306F; <code>push(chunk)</code> &#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x306A;&#x3044;&#x3068;&#x3001;<code>_read()</code> &#x95A2;&#x6570;&#x304C;\n&#x518D;&#x3073;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n</p>\n<!--\nThe `Readable` class works by putting data into a read queue to be\npulled out later by calling the `read()` method when the `'readable'`\nevent fires.\n-->\n\n<p><code>Readable</code> &#x30AF;&#x30E9;&#x30B9;&#x306F;&#x3001;<code>read()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x304C;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3053;&#x3068;&#x3067;\n&#x5F8C;&#x304B;&#x3089;&#x53D6;&#x308A;&#x51FA;&#x3055;&#x308C;&#x308B;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x3001;<code>&apos;readable&apos;</code> &#x30A4;&#x30D9;&#x30F3;&#x30C8;&#x306E;&#x751F;&#x6210;&#x6642;&#x306B;\n&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x5165;&#x308C;&#x3066;&#x304A;&#x304F;&#x3053;&#x3068;&#x306B;&#x3088;&#x3063;&#x3066;&#x6A5F;&#x80FD;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe `push()` method will explicitly insert some data into the read\nqueue.  If it is called with `null` then it will signal the end of the\ndata (EOF).\n-->\n\n<p><code>push()</code> &#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306F;&#x3044;&#x304F;&#x3064;&#x304B;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x660E;&#x793A;&#x7684;&#x306B;&#x8AAD;&#x307F;&#x8FBC;&#x307F;&#x30AD;&#x30E5;&#x30FC;&#x306B;&#x633F;&#x5165;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3082;&#x3057; <code>null</code> &#x3068;&#x5171;&#x306B;&#x547C;&#x3073;&#x51FA;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;&#x305D;&#x308C;&#x306F;&#x30C7;&#x30FC;&#x30BF;&#x304C;&#x7D42;&#x4E86;&#x3057;&#x305F; (EOF) &#x3053;&#x3068;&#x3092;&#x4F1D;&#x3048;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThis API is designed to be as flexible as possible.  For example,\nyou may be wrapping a lower-level source which has some sort of\npause/resume mechanism, and a data callback.  In those cases, you\ncould wrap the low-level source object by doing something like this:\n-->\n\n<p>&#x3053;&#x306E; API &#x306F;&#x53EF;&#x80FD;&#x306A;&#x9650;&#x308A;&#x67D4;&#x8EDF;&#x306B;&#x8A2D;&#x8A08;&#x3055;&#x308C;&#x3066;&#x3044;&#x307E;&#x3059;&#x3002;\n&#x4F8B;&#x3048;&#x3070;&#x3001;&#x3042;&#x308B;&#x7A2E;&#x306E;&#x4E2D;&#x65AD;&#xFF0F;&#x518D;&#x958B;&#x30E1;&#x30AB;&#x30CB;&#x30BA;&#x30E0;&#x3068;&#x30C7;&#x30FC;&#x30BF;&#x306E;&#x30B3;&#x30FC;&#x30EB;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x6301;&#x3064;&#x3001;\n&#x3088;&#x308A;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x30BD;&#x30FC;&#x30B9;&#x3092;&#x30E9;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x307E;&#x305B;&#x3093;&#x3002;\n&#x305D;&#x308C;&#x3089;&#x306E;&#x30B1;&#x30FC;&#x30B9;&#x3067;&#x306F;&#x3001;&#x3053;&#x306E;&#x3088;&#x3046;&#x306B;&#x4F4E;&#x6C34;&#x6E96;&#x306E;&#x30BD;&#x30FC;&#x30B9;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3092;\n&#x30E9;&#x30C3;&#x30D7;&#x3059;&#x308B;&#x3053;&#x3068;&#x304C;&#x3067;&#x304D;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code class="\&quot;javascript\&quot;">// source is an object with readStop() and readStart() methods,\n// and an `ondata` member that gets called when it has data, and\n// an `onend` member that gets called when the data is over.\n\nutil.inherits(SourceWrapper, Readable);\n\nfunction SourceWrapper(options) {\n  Readable.call(this, options);\n\n  this._source = getLowlevelSourceObject();\n  var self = this;\n\n  // Every time there&apos;s data, we push it into the internal buffer.\n  this._source.ondata = function(chunk) {\n    // if push() returns false, then we need to stop reading from source\n    if (!self.push(chunk))\n      self._source.readStop();\n  };\n\n  // When the source ends, we push the EOF-signalling `null` chunk\n  this._source.onend = function() {\n    self.push(null);\n  };\n}\n\n// _read will be called when the stream wants to pull more data in\n// the advisory size argument is ignored in this case.\nSourceWrapper.prototype._read = function(size) {\n  this._source.readStart();\n};</code></pre>\n&quot;,
              &quot;signatures&quot;: [
                {
                  &quot;params&quot;: [
                    {
                      &quot;name&quot;: &quot;chunk&quot;
                    },
                    {
                      &quot;name&quot;: &quot;encoding&quot;,
                      &quot;optional&quot;: true
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      &quot;type&quot;: &quot;module&quot;,
      &quot;displayName&quot;: &quot;Stream&quot;
    }
  ]
}
