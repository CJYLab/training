{
  &quot;source&quot;: &quot;doc/api/console.markdown&quot;,
  &quot;globals&quot;: [
    {
      &quot;textRaw&quot;: &quot;console&quot;,
      &quot;name&quot;: &quot;console&quot;,
      &quot;stability&quot;: 4,
      &quot;stabilityText&quot;: &quot;API Frozen&quot;,
      &quot;type&quot;: &quot;global&quot;,
      &quot;desc&quot;: &quot;<!--\nFor printing to stdout and stderr.  Similar to the console object functions\nprovided by most web browsers, here the output is sent to stdout or stderr.\n-->\n\n<p>&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3068;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x306B;&#x51FA;&#x529B;&#x3059;&#x308B;&#x305F;&#x3081;&#x306E;&#x3082;&#x306E;&#x3067;&#x3059;&#x3002;\n&#x307B;&#x3068;&#x3093;&#x3069;&#x306E;&#x30D6;&#x30E9;&#x30A6;&#x30B6;&#x3067;&#x63D0;&#x4F9B;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;\n&#x51FA;&#x529B;&#x306F;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x304B;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306B;&#x9001;&#x3089;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n<!--\nThe console functions are synchronous when the destination is a terminal or\na file (to avoid lost messages in case of premature exit) and asynchronous\nwhen it's a pipe (to avoid blocking for long periods of time).\n-->\n\n<p>&#x30B3;&#x30F3;&#x30BD;&#x30FC;&#x30EB;&#x95A2;&#x6570;&#x306F;&#x51FA;&#x529B;&#x5148;&#x304C;&#x30BF;&#x30FC;&#x30DF;&#x30CA;&#x30EB;&#x307E;&#x305F;&#x306F;&#x30D5;&#x30A1;&#x30A4;&#x30EB;&#x306E;&#x5834;&#x5408;&#x306F;&#x540C;&#x671F;\n(&#x65E9;&#x3059;&#x304E;&#x308B;&#x7D42;&#x4E86;&#x306B;&#x3088;&#x308A;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#x304C;&#x5931;&#x308F;&#x308C;&#x308B;&#x30B1;&#x30FC;&#x30B9;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;)&#x3001;\n&#x30D1;&#x30A4;&#x30D7;&#x306E;&#x5834;&#x5408;&#x306F;&#x975E;&#x540C;&#x671F; (&#x9577;&#x6642;&#x9593;&#x30D6;&#x30ED;&#x30C3;&#x30AF;&#x3059;&#x308B;&#x3053;&#x3068;&#x3092;&#x9632;&#x3050;&#x305F;&#x3081;) &#x3067;&#x3059;&#x3002;\n\n</p>\n<!--\nThat is, in the following example, stdout is non-blocking while stderr\nis blocking:\n-->\n\n<p>&#x3064;&#x307E;&#x308A;&#x3001;&#x4EE5;&#x4E0B;&#x306E;&#x4F8B;&#x3067;&#x306F;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x306F;&#x30CE;&#x30F3;&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x3067;&#x3059;&#x304C;&#x3001;\n&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306F;&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x3067;&#x3059;:\n\n</p>\n<pre><code>$ node script.js 2&gt; error.log | tee info.log</code></pre>\n<!--\nIn daily use, the blocking/non-blocking dichotomy is not something you\nshould worry about unless you log huge amounts of data.\n-->\n\n<p>&#x901A;&#x5E38;&#x306E;&#x4F7F;&#x7528;&#x3067;&#x306F;&#x3001;&#x81A8;&#x5927;&#x306A;&#x91CF;&#x306E;&#x30C7;&#x30FC;&#x30BF;&#x3092;&#x8A18;&#x9332;&#x3059;&#x308B;&#x306E;&#x3067;&#x306F;&#x306A;&#x3044;&#x9650;&#x308A;&#x3001;\n&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#xFF0F;&#x30CE;&#x30F3;&#x30D6;&#x30ED;&#x30C3;&#x30AD;&#x30F3;&#x30B0;&#x306E;&#x3069;&#x3061;&#x3089;&#x306A;&#x306E;&#x304B;&#x3092;&#x5FC3;&#x914D;&#x3059;&#x308B;&#x5FC5;&#x8981;&#x306F;&#x3042;&#x308A;&#x307E;&#x305B;&#x3093;&#x3002;\n\n\n</p>\n&quot;,
      &quot;methods&quot;: [
        {
          &quot;textRaw&quot;: &quot;console.log([data], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;log&quot;,
          &quot;desc&quot;: &quot;<!--\nPrints to stdout with newline. This function can take multiple arguments in a\n`printf()`-like way. Example:\n-->\n\n<p>&#x6539;&#x884C;&#x3092;&#x4F34;&#x3063;&#x3066;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x3078;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n&#x3053;&#x306E;&#x95A2;&#x6570;&#x306F; <code>printf()</code> &#x306E;&#x3088;&#x3046;&#x306B;&#x8907;&#x6570;&#x306E;&#x5F15;&#x6570;&#x3092;&#x53D7;&#x3051;&#x4ED8;&#x3051;&#x307E;&#x3059;&#x3002;\n\n</p>\n<pre><code>console.log(&apos;count: %d&apos;, count);</code></pre>\n<!--\nIf formatting elements are not found in the first string then `util.inspect`\nis used on each argument.  See [util.format()][] for more information.\n-->\n\n<p>&#x6700;&#x521D;&#x306E;&#x5F15;&#x6570;&#x6587;&#x5B57;&#x5217;&#x304B;&#x3089;&#x30D5;&#x30A9;&#x30FC;&#x30DE;&#x30C3;&#x30C8;&#x8981;&#x7D20;&#x304C;&#x898B;&#x3064;&#x304B;&#x3089;&#x306A;&#x304B;&#x3063;&#x305F;&#x5834;&#x5408;&#x306F;&#x3001;\n<code>util.inspect</code> &#x304C;&#x5404;&#x5F15;&#x6570;&#x306B;&#x4F7F;&#x308F;&#x308C;&#x307E;&#x3059;&#x3002;\n&#x3088;&#x308A;&#x8A73;&#x7D30;&#x306F; [util.format()][] &#x3092;&#x53C2;&#x7167;&#x3057;&#x3066;&#x304F;&#x3060;&#x3055;&#x3044;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.info([data], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;info&quot;,
          &quot;desc&quot;: &quot;<!--\nSame as `console.log`.\n-->\n\n<p><code>console.log</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.error([data], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;error&quot;,
          &quot;desc&quot;: &quot;<!--\nSame as `console.log` but prints to stderr.\n-->\n\n<p><code>console.log</code> &#x3068;&#x540C;&#x69D8;&#x3067;&#x3059;&#x304C;&#x3001;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306B;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.warn([data], [...])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;warn&quot;,
          &quot;desc&quot;: &quot;<!--\nSame as `console.error`.\n-->\n\n<p><code>console.error()</code> &#x3068;&#x540C;&#x3058;&#x3067;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;data&quot;,
                  &quot;optional&quot;: true
                },
                {
                  &quot;name&quot;: &quot;...&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.dir(obj)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;dir&quot;,
          &quot;desc&quot;: &quot;<!--\nUses `util.inspect` on `obj` and prints resulting string to stdout.\n-->\n\n<p><code>util.inspect</code> &#x3092;&#x4F7F;&#x3063;&#x3066; <code>obj</code> &#x3092;&#x6587;&#x5B57;&#x5217;&#x5316;&#x3057;&#x305F;&#x7D50;&#x679C;&#x3092;&#x6A19;&#x6E96;&#x51FA;&#x529B;&#x306B;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;obj&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.time(label)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;time&quot;,
          &quot;desc&quot;: &quot;<!--\nMark a time.\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x4F5C;&#x6210;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;label&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.timeEnd(label)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;timeEnd&quot;,
          &quot;desc&quot;: &quot;<!--\nFinish timer, record output. Example:\n-->\n\n<p>&#x30BF;&#x30A4;&#x30DE;&#x3092;&#x7D42;&#x4E86;&#x3057;&#x3001;&#x7D50;&#x679C;&#x3092;&#x51FA;&#x529B;&#x3057;&#x307E;&#x3059;&#x3002;&#x4F8B;:\n\n</p>\n<pre><code>console.time(&apos;100-elements&apos;);\nfor (var i = 0; i &lt; 100; i++) {\n  ;\n}\nconsole.timeEnd(&apos;100-elements&apos;);</code></pre>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;label&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.trace(label)&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;trace&quot;,
          &quot;desc&quot;: &quot;<!--\nPrint a stack trace to stderr of the current position.\n-->\n\n<p>&#x73FE;&#x5728;&#x306E;&#x30B9;&#x30BF;&#x30C3;&#x30AF;&#x30C8;&#x30EC;&#x30FC;&#x30B9;&#x3092;&#x6A19;&#x6E96;&#x30A8;&#x30E9;&#x30FC;&#x51FA;&#x529B;&#x306B;&#x30D7;&#x30EA;&#x30F3;&#x30C8;&#x3057;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;label&quot;
                }
              ]
            }
          ]
        },
        {
          &quot;textRaw&quot;: &quot;console.assert(expression, [message])&quot;,
          &quot;type&quot;: &quot;method&quot;,
          &quot;name&quot;: &quot;assert&quot;,
          &quot;desc&quot;: &quot;<!--\nSame as [assert.ok()][] where if the `expression` evaluates as `false` throw an\nAssertionError with `message`.\n-->\n\n<p>[assert.ok()][] &#x3068;&#x540C;&#x69D8;&#x306B;&#x3001;&#x3082;&#x3057; <code>expression</code> &#x304C; <code>false</code> &#x306B;&#x8A55;&#x4FA1;&#x3055;&#x308C;&#x308B;&#x3068;&#x3001;\n<code>message</code> &#x3092;&#x6301;&#x3064; AssertionError &#x304C;&#x30B9;&#x30ED;&#x30FC;&#x3055;&#x308C;&#x307E;&#x3059;&#x3002;\n\n</p>\n&quot;,
          &quot;signatures&quot;: [
            {
              &quot;params&quot;: [
                {
                  &quot;name&quot;: &quot;expression&quot;
                },
                {
                  &quot;name&quot;: &quot;message&quot;,
                  &quot;optional&quot;: true
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
